{
  "api/NetTopologySuite.Algorithm.AngleUtility.html": {
    "href": "api/NetTopologySuite.Algorithm.AngleUtility.html",
    "title": "Class AngleUtility | NetTopologySuite",
    "summary": "Class AngleUtility Utility functions for working with angles. Unless otherwise noted, methods in this class express angles in radians. Inheritance object AngleUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public static class AngleUtility Fields | Edit this page View Source PiOver2 Value of Pi / 2 Declaration public const double PiOver2 = 1.5707963267948966 Field Value Type Description double | Edit this page View Source PiOver4 Value of Pi / 4 Declaration public const double PiOver4 = 0.7853981633974483 Field Value Type Description double | Edit this page View Source PiTimes2 Value of 2 * Pi Declaration public const double PiTimes2 = 6.283185307179586 Field Value Type Description double Methods | Edit this page View Source Angle(Coordinate) Returns the angle of the vector from (0,0) to p, relative to the positive X-axis. Declaration public static double Angle(Coordinate p) Parameters Type Name Description Coordinate p The terminal point of the vector. Returns Type Description double The normalized angle (in radians) that (0,0)-p makes with the positive X-axis. Remarks The angle is normalized to be in the range ( -Pi, Pi ]. | Edit this page View Source Angle(Coordinate, Coordinate) Returns the angle of the vector from p0 to p1, relative to the positive X-axis. Declaration public static double Angle(Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p0 The initial point of the vector. Coordinate p1 The terminal point of the vector. Returns Type Description double The normalized angle (in radians) that p0-p1 makes with the positive X-axis Remarks The angle is normalized to be in the range [ -Pi, Pi ]. | Edit this page View Source AngleBetween(Coordinate, Coordinate, Coordinate) Returns the unoriented smallest angle between two vectors. Declaration public static double AngleBetween(Coordinate tip1, Coordinate tail, Coordinate tip2) Parameters Type Name Description Coordinate tip1 The tip of one vector Coordinate tail The tail of each vector Coordinate tip2 The tip of the other vector Returns Type Description double Remarks The computed angle will be in the range [0, Pi). | Edit this page View Source AngleBetweenOriented(Coordinate, Coordinate, Coordinate) Returns the oriented smallest angle between two vectors. The computed angle will be in the range (-Pi, Pi]. A positive result corresponds to a CounterClockwise rotation (CCW) from v1 to v2; a negative result corresponds to a Clockwise (CW) rotation; a zero result corresponds to no rotation. Declaration public static double AngleBetweenOriented(Coordinate tip1, Coordinate tail, Coordinate tip2) Parameters Type Name Description Coordinate tip1 The tip of v1 Coordinate tail The tail of each vector Coordinate tip2 The tip of v2 Returns Type Description double The angle between v1 and v2, relative to v1 | Edit this page View Source Bisector(Coordinate, Coordinate, Coordinate) Computes the angle of the unoriented bisector of the smallest angle between two vectors. Declaration public static double Bisector(Coordinate tip1, Coordinate tail, Coordinate tip2) Parameters Type Name Description Coordinate tip1 The tip of v1 Coordinate tail The tail of each vector Coordinate tip2 The tip of v2 Returns Type Description double The angle of the bisector between v1 and v2 Remarks The computed angle will be in the range (-Pi, Pi]. | Edit this page View Source CosSnap(double) Computes Math.Cos of an angle, snapping near-zero values to zero. Declaration public static double CosSnap(double ang) Parameters Type Name Description double ang The input angle (in radians) Returns Type Description double The result of the trigonometric function | Edit this page View Source Diff(double, double) Computes the unoriented smallest difference between two angles. Declaration public static double Diff(double ang1, double ang2) Parameters Type Name Description double ang1 The angle of one vector (in [-Pi, Pi] ) double ang2 The angle of the other vector (in range [-Pi, Pi] ) Returns Type Description double The angle (in radians) between the two vectors (in range [0, Pi] ) Remarks The angles are assumed to be normalized to the range [-Pi, Pi]. The result will be in the range [0, Pi]. | Edit this page View Source GetTurn(double, double) Returns whether an angle must turn clockwise or counterclockwise to overlap another angle. Declaration public static OrientationIndex GetTurn(double ang1, double ang2) Parameters Type Name Description double ang1 An angle (in radians) double ang2 An angle (in radians) Returns Type Description OrientationIndex Whether a1 must turn Clockwise, CounterClockwise or None to overlap a2. | Edit this page View Source InteriorAngle(Coordinate, Coordinate, Coordinate) Computes the interior angle between two segments of a ring. The ring is assumed to be oriented in a clockwise direction. Declaration public static double InteriorAngle(Coordinate p0, Coordinate p1, Coordinate p2) Parameters Type Name Description Coordinate p0 A point of the ring Coordinate p1 The next point of the ring Coordinate p2 The next point of the ring Returns Type Description double The interior angle based at p1 Remarks The computed angle will be in the range [0, 2Pi] | Edit this page View Source IsAcute(Coordinate, Coordinate, Coordinate) Tests whether the angle between p0-p1-p2 is acute. Declaration public static bool IsAcute(Coordinate p0, Coordinate p1, Coordinate p2) Parameters Type Name Description Coordinate p0 An endpoint of the angle Coordinate p1 The base of the angle Coordinate p2 Another endpoint of the angle Returns Type Description bool true if the angle is acute. Remarks An angle is acute if it is less than 90 degrees. Note: this implementation is not precise (deterministic) for angles very close to 90 degrees. | Edit this page View Source IsObtuse(Coordinate, Coordinate, Coordinate) Tests whether the angle between p0-p1-p2 is obtuse Declaration public static bool IsObtuse(Coordinate p0, Coordinate p1, Coordinate p2) Parameters Type Name Description Coordinate p0 An endpoint of the angle Coordinate p1 The base of the angle Coordinate p2 Another endpoint of the angle Returns Type Description bool true if the angle is obtuse. Remarks An angle is obtuse if it is greater than 90 degrees. Note: this implementation is not precise (deterministic) for angles very close to 90 degrees. | Edit this page View Source Normalize(double) Computes the normalized value of an angle, which is the equivalent angle in the range ( -Pi, Pi ]. Declaration public static double Normalize(double angle) Parameters Type Name Description double angle The angle to normalize Returns Type Description double An equivalent angle in the range (-Pi, Pi] | Edit this page View Source NormalizePositive(double) Computes the normalized positive value of an angle, which is the equivalent angle in the range [ 0, 2*Pi ). E.g. Function call Result NormalizePositive(0.0) 0.0 NormalizePositive(-PI) PI NormalizePositive(-2PI) 0.0 NormalizePositive(-3PI) PI NormalizePositive(-4PI) 0.0 NormalizePositive(PI) PI NormalizePositive(2PI) 0.0 NormalizePositive(3PI) PI NormalizePositive(4PI) 0.0 Declaration public static double NormalizePositive(double angle) Parameters Type Name Description double angle The angle to normalize, in radians. Returns Type Description double An equivalent positive angle | Edit this page View Source Project(Coordinate, double, double) Projects a point by a given angle and distance. Declaration public static Coordinate Project(Coordinate p, double angle, double dist) Parameters Type Name Description Coordinate p The point to project double angle The angle at which to project double dist The distance to project Returns Type Description Coordinate The projected point | Edit this page View Source SinSnap(double) Computes Math.Sin of an angle, snapping near-zero values to zero. Declaration public static double SinSnap(double ang) Parameters Type Name Description double ang The input angle (in radians) Returns Type Description double The result of the trigonometric function | Edit this page View Source ToDegrees(double) Converts from radians to degrees. Declaration public static double ToDegrees(double radians) Parameters Type Name Description double radians An angle in radians Returns Type Description double The angle in degrees | Edit this page View Source ToRadians(double) Converts from degrees to radians. Declaration public static double ToRadians(double angleDegrees) Parameters Type Name Description double angleDegrees An angle in degrees Returns Type Description double The angle in radians"
  },
  "api/NetTopologySuite.Algorithm.Area.html": {
    "href": "api/NetTopologySuite.Algorithm.Area.html",
    "title": "Class Area | NetTopologySuite",
    "summary": "Class Area Functions for computing area. Inheritance object Area Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public static class Area Methods | Edit this page View Source OfRing(CoordinateSequence) Computes the area for a ring. Declaration public static double OfRing(CoordinateSequence ring) Parameters Type Name Description CoordinateSequence ring The coordinates forming the ring Returns Type Description double The area of the ring | Edit this page View Source OfRing(Coordinate[]) Computes the area for a ring. Declaration public static double OfRing(Coordinate[] ring) Parameters Type Name Description Coordinate[] ring The coordinates forming the ring Returns Type Description double The area of the ring | Edit this page View Source OfRingSigned(CoordinateSequence) Computes the signed area for a ring. The signed area is positive if the value meaning > 0 The ring is oriented clockwise (CW) < 0 The ring is oriented counter clockwise (CCW) == 0 The ring is degenerate or flat ring is oriented CW, negative if the ring is oriented CCW, and zero if the ring is degenerate or flat. Declaration public static double OfRingSigned(CoordinateSequence ring) Parameters Type Name Description CoordinateSequence ring The coordinates forming the ring Returns Type Description double The signed area of the ring | Edit this page View Source OfRingSigned(Coordinate[]) Computes the signed area for a ring. The signed area is positive if the ring is oriented CW, negative if the ring is oriented CCW, and zero if the ring is degenerate or flat. Declaration public static double OfRingSigned(Coordinate[] ring) Parameters Type Name Description Coordinate[] ring The coordinates forming the ring Returns Type Description double The signed area of the ring"
  },
  "api/NetTopologySuite.Algorithm.BoundaryNodeRules.html": {
    "href": "api/NetTopologySuite.Algorithm.BoundaryNodeRules.html",
    "title": "Class BoundaryNodeRules | NetTopologySuite",
    "summary": "Class BoundaryNodeRules Provides access to static instances of common IBoundaryNodeRules. Inheritance object BoundaryNodeRules Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public static class BoundaryNodeRules Fields | Edit this page View Source EndpointBoundaryRule The Endpoint Boundary Node Rule. Declaration public static readonly IBoundaryNodeRule EndpointBoundaryRule Field Value Type Description IBoundaryNodeRule | Edit this page View Source Mod2BoundaryRule The Mod-2 Boundary Node Rule (which is the rule specified in the OGC SFS). Declaration public static readonly IBoundaryNodeRule Mod2BoundaryRule Field Value Type Description IBoundaryNodeRule | Edit this page View Source MonoValentEndpointBoundaryRule The Monovalent Endpoint Boundary Node Rule. Declaration public static readonly IBoundaryNodeRule MonoValentEndpointBoundaryRule Field Value Type Description IBoundaryNodeRule | Edit this page View Source MultivalentEndpointBoundaryRule The MultiValent Endpoint Boundary Node Rule. Declaration public static readonly IBoundaryNodeRule MultivalentEndpointBoundaryRule Field Value Type Description IBoundaryNodeRule | Edit this page View Source OgcSfsBoundaryRule The Boundary Node Rule specified by the OGC Simple Features Specification, which is the same as the Mod-2 rule. Declaration public static readonly IBoundaryNodeRule OgcSfsBoundaryRule Field Value Type Description IBoundaryNodeRule"
  },
  "api/NetTopologySuite.Algorithm.CGAlgorithms3D.html": {
    "href": "api/NetTopologySuite.Algorithm.CGAlgorithms3D.html",
    "title": "Class CGAlgorithms3D | NetTopologySuite",
    "summary": "Class CGAlgorithms3D Basic computational geometry algorithms for geometry and coordinates defined in 3-dimensional Cartesian space. Inheritance object CGAlgorithms3D Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public static class CGAlgorithms3D Methods | Edit this page View Source Distance(Coordinate, Coordinate) Computes the distance between the points p0 and p1 in 3D space Declaration public static double Distance(Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p0 The first point Coordinate p1 The second point Returns Type Description double The distance between the two points | Edit this page View Source DistancePointSegment(Coordinate, Coordinate, Coordinate) Computes the distance between the point p and the segment from A to B in 3D space Declaration public static double DistancePointSegment(Coordinate p, Coordinate A, Coordinate B) Parameters Type Name Description Coordinate p The point Coordinate A The start point of the segment Coordinate B The end point of the segment Returns Type Description double | Edit this page View Source DistanceSegmentSegment(Coordinate, Coordinate, Coordinate, Coordinate) Computes the distance between two 3D segments. Declaration public static double DistanceSegmentSegment(Coordinate A, Coordinate B, Coordinate C, Coordinate D) Parameters Type Name Description Coordinate A The start point of the first segment Coordinate B The end point of the first segment Coordinate C The start point of the second segment Coordinate D The end point of the second segment Returns Type Description double The distance between the segments"
  },
  "api/NetTopologySuite.Algorithm.CGAlgorithmsDD.html": {
    "href": "api/NetTopologySuite.Algorithm.CGAlgorithmsDD.html",
    "title": "Class CGAlgorithmsDD | NetTopologySuite",
    "summary": "Class CGAlgorithmsDD Implements basic computational geometry algorithms using DD arithmetic. Inheritance object CGAlgorithmsDD Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public static class CGAlgorithmsDD Methods | Edit this page View Source Intersection(Coordinate, Coordinate, Coordinate, Coordinate) Computes an intersection point between two lines using DD arithmetic. If the lines are parallel (either identical or separate) a null value is returned. Declaration public static Coordinate Intersection(Coordinate p1, Coordinate p2, Coordinate q1, Coordinate q2) Parameters Type Name Description Coordinate p1 An endpoint of line segment 1 Coordinate p2 An endpoint of line segment 1 Coordinate q1 An endpoint of line segment 2 Coordinate q2 An endpoint of line segment 2 Returns Type Description Coordinate An intersection point if one exists, or null if lines are parallel. | Edit this page View Source OrientationIndex(Coordinate, Coordinate, Coordinate) Returns the index of the direction of the point q relative to a vector specified by p1-p2. Declaration public static int OrientationIndex(Coordinate p1, Coordinate p2, Coordinate q) Parameters Type Name Description Coordinate p1 The origin point of the vector Coordinate p2 The final point of the vector Coordinate q the point to compute the direction to Returns Type Description int 1 if q is counter-clockwise (left) from p1-p2 -1 if q is clockwise (right) from p1-p2 0 if q is collinear with p1-p2 | Edit this page View Source OrientationIndex(double, double, double, double, double, double) Returns the index of the direction of the point q relative to a vector specified by p1-p2. Declaration public static int OrientationIndex(double p1x, double p1y, double p2x, double p2y, double qx, double qy) Parameters Type Name Description double p1x The x-ordinate of the origin point of the vector double p1y The y-ordinate of the origin point of the vector double p2x The x-ordinate of the final point of the vector double p2y The y-ordinate of the final point of the vector double qx The x-ordinate of the point to compute the direction to double qy The y-ordinate of the point to compute the direction to Returns Type Description int 1 if q is counter-clockwise (left) from p1-p2 -1 if q is clockwise (right) from p1-p2 0 if q is collinear with p1-p2 | Edit this page View Source SignOfDet2x2(DD, DD, DD, DD) Computes the sign of the determinant of the 2x2 matrix with the given entries. Declaration public static int SignOfDet2x2(DD x1, DD y1, DD x2, DD y2) Parameters Type Name Description DD x1 DD y1 DD x2 DD y2 Returns Type Description int -1 if the determinant is negative, 1 if the determinant is positive, 0 if the determinant is 0."
  },
  "api/NetTopologySuite.Algorithm.Centroid.html": {
    "href": "api/NetTopologySuite.Algorithm.Centroid.html",
    "title": "Class Centroid | NetTopologySuite",
    "summary": "Class Centroid Computes the centroid of a Geometry of any dimension. For collections the centroid is computed for the collection of non-empty elements of highest dimension. The centroid of an empty geometry is null Inheritance object Centroid Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public class Centroid Remarks Algorithm Dimension 2 - the centroid ic computed as a weighted sum of the centroids of a decomposition of the area into (possibly overlapping) triangles. Holes and multipolygons are handled correctly. See http://www.faqs.org/faqs/graphics/algorithms-faq/ for further details of the basic approach. Dimension 1 - Computes the average of the midpoints of all line segments weighted by the segment length. Zero-length lines are treated as points. Dimension 0 - Compute the average coordinate over all points. Repeated points are all included in the average If the input geometries are empty, a null Coordinate is returned. Constructors | Edit this page View Source Centroid(Geometry) Creates a new instance for computing the centroid of a geometry Declaration public Centroid(Geometry geom) Parameters Type Name Description Geometry geom Methods | Edit this page View Source GetCentroid() Gets the computed centroid. Declaration public Coordinate GetCentroid() Returns Type Description Coordinate The computed centroid, or null if the input is empty | Edit this page View Source GetCentroid(Geometry) Computes the centroid point of a geometry. Declaration public static Coordinate GetCentroid(Geometry geom) Parameters Type Name Description Geometry geom The geometry to use Returns Type Description Coordinate The centroid point, or null if the geometry is empty"
  },
  "api/NetTopologySuite.Algorithm.Construct.LargestEmptyCircle.html": {
    "href": "api/NetTopologySuite.Algorithm.Construct.LargestEmptyCircle.html",
    "title": "Class LargestEmptyCircle | NetTopologySuite",
    "summary": "Class LargestEmptyCircle Constructs the Largest Empty Circle for a set of obstacle geometries, up to a given accuracy distance tolerance. The obstacles may be any combination of point, linear and polygonal geometries. The Largest Empty Circle (LEC) is the largest circle whose interior does not intersect with any obstacle and whose center lies within a polygonal boundary. The circle center is the point in the interior of the boundary which has the farthest distance from the obstacles (up to the accuracy of the distance tolerance). The circle itself is determined by the center point and a point lying on an obstacle determining the circle radius. The polygonal boundary may be supplied explicitly. If it is not specified the convex hull of the obstacles is used as the boundary. To compute an LEC which lies wholly within a polygonal boundary, include the boundary of the polygon(s) as a linear obstacle. The implementation uses a successive-approximation technique over a grid of square cells covering the obstacles and boundary. The grid is refined using a branch-and-bound algorithm. Point containment and distance are computed in a performant way by using spatial indexes. Inheritance object LargestEmptyCircle Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm.Construct Assembly: NetTopologySuite.dll Syntax public class LargestEmptyCircle Constructors | Edit this page View Source LargestEmptyCircle(Geometry, Geometry, double) Creates a new instance of a Largest Empty Circle construction, interior-disjoint to a set of obstacle geometries and having its center within a polygonal boundary. The obstacles may be any collection of points, lines and polygons. If the boundary is null or empty the convex hull of the obstacles is used as the boundary. Declaration public LargestEmptyCircle(Geometry obstacles, Geometry boundary, double tolerance) Parameters Type Name Description Geometry obstacles A non-empty geometry representing the obstacles (points and lines) Geometry boundary A polygonal geometry to contain the LEC center (may be null or empty) double tolerance The distance tolerance for computing the center point (a positive value) | Edit this page View Source LargestEmptyCircle(Geometry, double) Creates a new instance of a Largest Empty Circle construction. Declaration [Obsolete(\"Will be removed in a future version\")] public LargestEmptyCircle(Geometry obstacles, double tolerance) Parameters Type Name Description Geometry obstacles A geometry representing the obstacles (points and lines) double tolerance The distance tolerance for computing the center point Methods | Edit this page View Source GetCenter() Gets the center point of the Largest Empty Circle (up to the tolerance distance). Declaration public Point GetCenter() Returns Type Description Point The center point of the Largest Empty Circle | Edit this page View Source GetCenter(Geometry, Geometry, double) Computes the center point of the Largest Empty Circle interior-disjoint to a set of obstacles and within a polygonal boundary, with accuracy to a given tolerance distance. The obstacles may be any collection of points, lines and polygons. The center of the LEC lies within the given boundary. Declaration public static Point GetCenter(Geometry obstacles, Geometry boundary, double tolerance) Parameters Type Name Description Geometry obstacles A geometry representing the obstacles Geometry boundary A polygonal geometry to contain the LEC center double tolerance The distance tolerance for computing the center point Returns Type Description Point The center point of the Largest Empty Circle | Edit this page View Source GetCenter(Geometry, double) Computes the center point of the Largest Empty Circle interior-disjoint to a set of obstacles, with accuracy to a given tolerance distance. The obstacles may be any collection of points, lines and polygons. The center of the LEC lies within the convex hull of the obstacles. Declaration public static Point GetCenter(Geometry obstacles, double tolerance) Parameters Type Name Description Geometry obstacles A geometry representing the obstacles double tolerance The distance tolerance for computing the center point Returns Type Description Point The center point of the Largest Empty Circle | Edit this page View Source GetRadiusLine() Gets a line representing a radius of the Largest Empty Circle. Declaration public LineString GetRadiusLine() Returns Type Description LineString A line from the center of the circle to a point on the edge | Edit this page View Source GetRadiusLine(Geometry, Geometry, double) Computes a radius line of the Largest Empty Circle interior-disjoint to a set of obstacles and within a polygonal boundary, with accuracy to a given tolerance distance. The obstacles may be any collection of points, lines and polygons. The center of the LEC lies within the given boundary. Declaration public static LineString GetRadiusLine(Geometry obstacles, Geometry boundary, double tolerance) Parameters Type Name Description Geometry obstacles A geometry representing the obstacles (points and lines) Geometry boundary A polygonal geometry to contain the LEC center double tolerance The distance tolerance for computing the center point Returns Type Description LineString A line from the center of the circle to a point on the edge | Edit this page View Source GetRadiusLine(Geometry, double) Computes a radius line of the Largest Empty Circle interior-disjoint to a set of obstacles, with accuracy to a given tolerance distance. The obstacles may be any collection of points, lines and polygons. The center of the LEC lies within the convex hull of the obstacles. Declaration public static LineString GetRadiusLine(Geometry obstacles, double tolerance) Parameters Type Name Description Geometry obstacles A geometry representing the obstacles (points and lines) double tolerance The distance tolerance for computing the center point Returns Type Description LineString A line from the center of the circle to a point on the edge | Edit this page View Source GetRadiusPoint() Gets a point defining the radius of the Largest Empty Circle. This is a point on the obstacles which is nearest to the computed center of the Largest Empty Circle. The line segment from the center to this point is a radius of the constructed circle, and this point lies on the boundary of the circle. Declaration public Point GetRadiusPoint() Returns Type Description Point A point defining the radius of the Largest Empty Circle"
  },
  "api/NetTopologySuite.Algorithm.Construct.MaximumInscribedCircle.html": {
    "href": "api/NetTopologySuite.Algorithm.Construct.MaximumInscribedCircle.html",
    "title": "Class MaximumInscribedCircle | NetTopologySuite",
    "summary": "Class MaximumInscribedCircle Constructs the Maximum Inscribed Circle for a polygonal Geometry, up to a specified tolerance. The Maximum Inscribed Circle is determined by a point in the interior of the area which has the farthest distance from the area boundary, along with a boundary point at that distance. In the context of geography the center of the Maximum Inscribed Circle is known as the Pole of Inaccessibility. A cartographic use case is to determine a suitable point to place a map label within a polygon. The radius length of the Maximum Inscribed Circle is a measure of how \"narrow\" a polygon is. It is the distance at which the negative buffer becomes empty. The class supports polygons with holes and multipolygons. The implementation uses a successive-approximation technique over a grid of square cells covering the area geometry. The grid is refined using a branch-and-bound algorithm. Point containment and distance are computed in a performant way by using spatial indexes. Future Enhancements Support a polygonal constraint on placement of center Inheritance object MaximumInscribedCircle Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm.Construct Assembly: NetTopologySuite.dll Syntax public class MaximumInscribedCircle Constructors | Edit this page View Source MaximumInscribedCircle(Geometry, double) Creates a new instance of a Maximum Inscribed Circle computation. Declaration public MaximumInscribedCircle(Geometry polygonal, double tolerance) Parameters Type Name Description Geometry polygonal An areal geometry double tolerance The distance tolerance for computing the centre point (must be positive) Exceptions Type Condition ArgumentOutOfRangeException Thrown if the tolerance is non-positive ArgumentException Thrown if the input geometry is non-polygonal or empty Methods | Edit this page View Source GetCenter() Gets the center point of the maximum inscribed circle (up to the tolerance distance). Declaration public Point GetCenter() Returns Type Description Point The center point of the maximum inscribed circle | Edit this page View Source GetCenter(Geometry, double) Computes the center point of the Maximum Inscribed Circle of a polygonal geometry, up to a given tolerance distance. Declaration public static Point GetCenter(Geometry polygonal, double tolerance) Parameters Type Name Description Geometry polygonal A polygonal geometry double tolerance The distance tolerance for computing the center point Returns Type Description Point The center point of the maximum inscribed circle | Edit this page View Source GetRadiusLine() Gets a line representing a radius of the Largest Empty Circle. Declaration public LineString GetRadiusLine() Returns Type Description LineString A line from the center of the circle to a point on the edge | Edit this page View Source GetRadiusLine(Geometry, double) Computes a radius line of the Maximum Inscribed Circle of a polygonal geometry, up to a given tolerance distance. Declaration public static LineString GetRadiusLine(Geometry polygonal, double tolerance) Parameters Type Name Description Geometry polygonal A polygonal geometry double tolerance The distance tolerance for computing the center point Returns Type Description LineString A line from the center to a point on the circle | Edit this page View Source GetRadiusPoint() Gets a point defining the radius of the Maximum Inscribed Circle. This is a point on the boundary which is nearest to the computed center of the Maximum Inscribed Circle. The line segment from the center to this point is a radius of the constructed circle, and this point lies on the boundary of the circle. Declaration public Point GetRadiusPoint() Returns Type Description Point A point defining the radius of the Maximum Inscribed Circle"
  },
  "api/NetTopologySuite.Algorithm.Construct.html": {
    "href": "api/NetTopologySuite.Algorithm.Construct.html",
    "title": "Namespace NetTopologySuite.Algorithm.Construct | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Algorithm.Construct Provides classes that implement various kinds of geometric constructions. Classes LargestEmptyCircle Constructs the Largest Empty Circle for a set of obstacle geometries, up to a given accuracy distance tolerance. The obstacles may be any combination of point, linear and polygonal geometries. The Largest Empty Circle (LEC) is the largest circle whose interior does not intersect with any obstacle and whose center lies within a polygonal boundary. The circle center is the point in the interior of the boundary which has the farthest distance from the obstacles (up to the accuracy of the distance tolerance). The circle itself is determined by the center point and a point lying on an obstacle determining the circle radius. The polygonal boundary may be supplied explicitly. If it is not specified the convex hull of the obstacles is used as the boundary. To compute an LEC which lies wholly within a polygonal boundary, include the boundary of the polygon(s) as a linear obstacle. The implementation uses a successive-approximation technique over a grid of square cells covering the obstacles and boundary. The grid is refined using a branch-and-bound algorithm. Point containment and distance are computed in a performant way by using spatial indexes. MaximumInscribedCircle Constructs the Maximum Inscribed Circle for a polygonal Geometry, up to a specified tolerance. The Maximum Inscribed Circle is determined by a point in the interior of the area which has the farthest distance from the area boundary, along with a boundary point at that distance. In the context of geography the center of the Maximum Inscribed Circle is known as the Pole of Inaccessibility. A cartographic use case is to determine a suitable point to place a map label within a polygon. The radius length of the Maximum Inscribed Circle is a measure of how \"narrow\" a polygon is. It is the distance at which the negative buffer becomes empty. The class supports polygons with holes and multipolygons. The implementation uses a successive-approximation technique over a grid of square cells covering the area geometry. The grid is refined using a branch-and-bound algorithm. Point containment and distance are computed in a performant way by using spatial indexes. Future Enhancements Support a polygonal constraint on placement of center"
  },
  "api/NetTopologySuite.Algorithm.ConvexHull.html": {
    "href": "api/NetTopologySuite.Algorithm.ConvexHull.html",
    "title": "Class ConvexHull | NetTopologySuite",
    "summary": "Class ConvexHull Computes the convex hull of a Geometry. The convex hull is the smallest convex Geometry that contains all the points in the input Geometry. Uses the Graham Scan algorithm. Incorporates heuristics to optimize checking for degenerate results, and to reduce the number of points processed for large inputs. Inheritance object ConvexHull Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public class ConvexHull Constructors | Edit this page View Source ConvexHull(Coordinate[], GeometryFactory) Create a new convex hull construction for the input Coordinate array. Declaration public ConvexHull(Coordinate[] pts, GeometryFactory geomFactory) Parameters Type Name Description Coordinate[] pts The coordinate array GeometryFactory geomFactory The factory to create the convex hull geometry | Edit this page View Source ConvexHull(Geometry) Create a new convex hull construction for the input Geometry. Declaration public ConvexHull(Geometry geometry) Parameters Type Name Description Geometry geometry | Edit this page View Source ConvexHull(IEnumerable<Coordinate>, GeometryFactory) Create a new convex hull construction for the input Coordinate array. Declaration public ConvexHull(IEnumerable<Coordinate> pts, GeometryFactory geomFactory) Parameters Type Name Description IEnumerable<Coordinate> pts GeometryFactory geomFactory The factory to create the convex hull geometry Methods | Edit this page View Source Create(IEnumerable<Geometry>) Computes the convex hull for the given sequence of Geometry instances. Declaration public static Geometry Create(IEnumerable<Geometry> geoms) Parameters Type Name Description IEnumerable<Geometry> geoms The Geometry instances whose convex hull to compute. Returns Type Description Geometry The convex hull of geoms. | Edit this page View Source GetConvexHull() Returns a Geometry that represents the convex hull of the input point. The point will contain the minimal number of points needed to represent the convex hull. In particular, no more than two consecutive points will be collinear. Declaration public Geometry GetConvexHull() Returns Type Description Geometry If the convex hull contains 3 or more points, a Polygon; 2 points, a LineString; 1 point, a Point; 0 points, an empty GeometryCollection."
  },
  "api/NetTopologySuite.Algorithm.Distance.DiscreteFrechetDistance.html": {
    "href": "api/NetTopologySuite.Algorithm.Distance.DiscreteFrechetDistance.html",
    "title": "Class DiscreteFrechetDistance | NetTopologySuite",
    "summary": "Class DiscreteFrechetDistance The Fréchet distance is a measure of similarity between curves. Thus, it can be used like the Hausdorff distance. An analogy for the Fréchet distance taken from Computing Discrete Fréchet Distance: A man is walking a dog on a leash: the man can move on one curve, the dog on the other; both may vary their speed, but backtracking is not allowed. Inheritance object DiscreteFrechetDistance Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm.Distance Assembly: NetTopologySuite.dll Syntax public class DiscreteFrechetDistance Remarks Its metric is better than the Hausdorff distance because it takes the directions of the curves into account. It is possible that two curves have a small Hausdorff but a large Fréchet distance. This implementation is based on the following optimized Fréchet distance algorithm: Thomas Devogele, Maxence Esnault, Laurent Etienne. Distance discrète de Fréchet optimisée. Spatial Analysis and Geomatics (SAGEO), Nov 2016, Nice, France. hal-02110055 Several matrix storage implementations are provided Additional information: Fréchet distance Computing Discrete Fréchet Distance Distance discrète de Fréchet optimisée Fast Discrete Fréchet Distance Constructors | Edit this page View Source DiscreteFrechetDistance(Geometry, Geometry) Creates an instance of this class using the provided geometries. Declaration public DiscreteFrechetDistance(Geometry g0, Geometry g1) Parameters Type Name Description Geometry g0 A geometry Geometry g1 A geometry Properties | Edit this page View Source Coordinates Gets the pair of Coordinates at which the distance is obtained. Declaration public Coordinate[] Coordinates { get; } Property Value Type Description Coordinate[] The pair of Coordinates at which the distance is obtained Methods | Edit this page View Source Distance(Geometry, Geometry) Computes the Discrete Fréchet Distance between two Geometrys using a cartesian distance computation function. Declaration public static double Distance(Geometry g0, Geometry g1) Parameters Type Name Description Geometry g0 The 1st geometry Geometry g1 The 2nd geometry Returns Type Description double The cartesian distance between g0 and g1"
  },
  "api/NetTopologySuite.Algorithm.Distance.DiscreteHausdorffDistance.MaxDensifiedByFractionDistanceFilter.html": {
    "href": "api/NetTopologySuite.Algorithm.Distance.DiscreteHausdorffDistance.MaxDensifiedByFractionDistanceFilter.html",
    "title": "Class DiscreteHausdorffDistance.MaxDensifiedByFractionDistanceFilter | NetTopologySuite",
    "summary": "Class DiscreteHausdorffDistance.MaxDensifiedByFractionDistanceFilter A coordinate filter that computes the maximum PointPairDistance between points of an assigned Geometry and all filtered geometries. The filtered geometries' line segments are Inheritance object DiscreteHausdorffDistance.MaxDensifiedByFractionDistanceFilter Implements ICoordinateSequenceFilter IEntireCoordinateSequenceFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm.Distance Assembly: NetTopologySuite.dll Syntax public class DiscreteHausdorffDistance.MaxDensifiedByFractionDistanceFilter : ICoordinateSequenceFilter, IEntireCoordinateSequenceFilter Constructors | Edit this page View Source MaxDensifiedByFractionDistanceFilter(Geometry, double) Creates an instance of this filter class Declaration public MaxDensifiedByFractionDistanceFilter(Geometry geom, double fraction) Parameters Type Name Description Geometry geom The geometry to densify double fraction The densification fraction Properties | Edit this page View Source Done Reports whether the application of this filter can be terminated. Declaration public bool Done { get; } Property Value Type Description bool As this filter does not end prematurely, the return value is always false Remarks Once this method returns true, it must continue to return true on every subsequent call. | Edit this page View Source GeometryChanged Reports whether the execution of this filter has modified the coordinates of the geometry. If so, GeometryChanged() will be executed after this filter has finished being executed. Declaration public bool GeometryChanged { get; } Property Value Type Description bool As this filter does not change the geometry, the return value is always false Remarks Most filters can simply return a constant value reflecting whether they are able to change the coordinates. | Edit this page View Source MaxPointDistance Gets a value indicating the maximum distance between p Declaration public PointPairDistance MaxPointDistance { get; } Property Value Type Description PointPairDistance Methods | Edit this page View Source Filter(CoordinateSequence, int) Performs an operation on a coordinate in a CoordinateSequence. Declaration public void Filter(CoordinateSequence seq, int index) Parameters Type Name Description CoordinateSequence seq the CoordinateSequence to which the filter is applied int index Implements ICoordinateSequenceFilter IEntireCoordinateSequenceFilter"
  },
  "api/NetTopologySuite.Algorithm.Distance.DiscreteHausdorffDistance.MaxPointDistanceFilter.html": {
    "href": "api/NetTopologySuite.Algorithm.Distance.DiscreteHausdorffDistance.MaxPointDistanceFilter.html",
    "title": "Class DiscreteHausdorffDistance.MaxPointDistanceFilter | NetTopologySuite",
    "summary": "Class DiscreteHausdorffDistance.MaxPointDistanceFilter A coordinate filter that computes the maximum PointPairDistance between points of an assigned Geometry and all filtered geometries. Inheritance object DiscreteHausdorffDistance.MaxPointDistanceFilter Implements ICoordinateFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm.Distance Assembly: NetTopologySuite.dll Syntax public class DiscreteHausdorffDistance.MaxPointDistanceFilter : ICoordinateFilter Constructors | Edit this page View Source MaxPointDistanceFilter(Geometry) Creates an instance of this class Declaration public MaxPointDistanceFilter(Geometry geom) Parameters Type Name Description Geometry geom A geometry Properties | Edit this page View Source MaxPointDistance Gets a value indicating the maximum distance between an assigned Geometry and the filtered one. Declaration public PointPairDistance MaxPointDistance { get; } Property Value Type Description PointPairDistance Methods | Edit this page View Source Filter(Coordinate) Performs an operation with the provided coord. Note that there is no guarantee that the input coordinate is the actual object stored in the source geometry, so changes to the coordinate object may not be persistent. Declaration public void Filter(Coordinate pt) Parameters Type Name Description Coordinate pt Implements ICoordinateFilter"
  },
  "api/NetTopologySuite.Algorithm.Distance.DiscreteHausdorffDistance.html": {
    "href": "api/NetTopologySuite.Algorithm.Distance.DiscreteHausdorffDistance.html",
    "title": "Class DiscreteHausdorffDistance | NetTopologySuite",
    "summary": "Class DiscreteHausdorffDistance An algorithm for computing a distance metric which is an approximation to the Hausdorff Distance based on a discretization of the input Geometry. Inheritance object DiscreteHausdorffDistance Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm.Distance Assembly: NetTopologySuite.dll Syntax public class DiscreteHausdorffDistance Remarks The algorithm computes the Hausdorff distance restricted to discrete points for one of the geometries. The points can be either the vertices of the geometries (the default), or the geometries with line segments densified by a given fraction. Also determines two points of the Geometries which are separated by the computed distance. This algorithm is an approximation to the standard Hausdorff distance. Specifically, for all geometries a, b: DHD(a, b) <= HD(a, b) The approximation can be made as close as needed by densifying the input geometries. In the limit, this value will approach the true Hausdorff distance: DHD(A, B, densifyFactor) -> HD(A, B) as densifyFactor -> 0.0 The default approximation is exact or close enough for a large subset of useful cases. Examples of these are: computing distance between Linestrings that are roughly parallel to each other, and roughly equal in length. This occurs in matching linear networks. Testing similarity of geometries. An example where the default approximation is not close is: A = LINESTRING (0 0, 100 0, 10 100, 10 100) B = LINESTRING (0 100, 0 10, 80 10) DHD(A, B) = 22.360679774997898 HD(A, B) ~= 47.8 Constructors | Edit this page View Source DiscreteHausdorffDistance(Geometry, Geometry) Creates an instance of this class using the provided geometries Declaration public DiscreteHausdorffDistance(Geometry g0, Geometry g1) Parameters Type Name Description Geometry g0 A geometry Geometry g1 Another geometry Properties | Edit this page View Source Coordinates Gets a value indicating the Declaration public Coordinate[] Coordinates { get; } Property Value Type Description Coordinate[] | Edit this page View Source DensifyFraction Gets or sets the fraction by which to densify each segment. Declaration public double DensifyFraction { get; set; } Property Value Type Description double Remarks Each segment will be (virtually) split into a number of equal-length sub-segments, whose fraction of the total length is closest to the given fraction. Methods | Edit this page View Source Distance() Computes the discrete hausdorff distance between the two assigned geometries. Declaration public double Distance() Returns Type Description double The discrete hausdorff distance | Edit this page View Source Distance(Geometry, Geometry) Computes the Discrete Hausdorff Distance of two Geometrys. Declaration public static double Distance(Geometry g0, Geometry g1) Parameters Type Name Description Geometry g0 A geometry Geometry g1 A geometry Returns Type Description double The Discrete Hausdorff Distance | Edit this page View Source Distance(Geometry, Geometry, double) Computes the Discrete Hausdorff Distance of two Geometrys. Declaration public static double Distance(Geometry g0, Geometry g1, double densifyFraction) Parameters Type Name Description Geometry g0 A geometry Geometry g1 A geometry double densifyFraction The densify fraction. A value of 0 indicates, that no densification should take place Returns Type Description double The Discrete Hausdorff Distance | Edit this page View Source OrientedDistance() Computes the discrete hausdorff distance between the 1st and the 2nd assigned geometry Declaration public double OrientedDistance() Returns Type Description double The discrete hausdorff distance."
  },
  "api/NetTopologySuite.Algorithm.Distance.DistanceToPoint.html": {
    "href": "api/NetTopologySuite.Algorithm.Distance.DistanceToPoint.html",
    "title": "Class DistanceToPoint | NetTopologySuite",
    "summary": "Class DistanceToPoint Computes the Euclidean distance (L2 metric) from a Coordinate to a Geometry. Inheritance object DistanceToPoint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm.Distance Assembly: NetTopologySuite.dll Syntax public static class DistanceToPoint Remarks Also computes two points on the geometry which are separated by the distance found. Methods | Edit this page View Source ComputeDistance(Geometry, Coordinate, PointPairDistance) Computes the Euclidean distance (L2 metric) from a Coordinate to a Geometry. Declaration public static void ComputeDistance(Geometry geom, Coordinate pt, PointPairDistance ptDist) Parameters Type Name Description Geometry geom The geometry Coordinate pt The Point PointPairDistance ptDist The PointPairDistance | Edit this page View Source ComputeDistance(LineSegment, Coordinate, PointPairDistance) Computes the Euclidean distance (L2 metric) from a Coordinate to a LineSegment. Declaration public static void ComputeDistance(LineSegment segment, Coordinate pt, PointPairDistance ptDist) Parameters Type Name Description LineSegment segment The LineSegment Coordinate pt The Point PointPairDistance ptDist The PointPairDistance | Edit this page View Source ComputeDistance(LineString, Coordinate, PointPairDistance) Computes the Euclidean distance (L2 metric) from a Coordinate to a LineString. Declaration public static void ComputeDistance(LineString line, Coordinate pt, PointPairDistance ptDist) Parameters Type Name Description LineString line The LineString Coordinate pt The Point PointPairDistance ptDist The PointPairDistance | Edit this page View Source ComputeDistance(Polygon, Coordinate, PointPairDistance) Computes the Euclidean distance (L2 metric) from a Coordinate to a Polygon. Declaration public static void ComputeDistance(Polygon poly, Coordinate pt, PointPairDistance ptDist) Parameters Type Name Description Polygon poly The Polygon Coordinate pt The Point PointPairDistance ptDist The PointPairDistance"
  },
  "api/NetTopologySuite.Algorithm.Distance.PointPairDistance.html": {
    "href": "api/NetTopologySuite.Algorithm.Distance.PointPairDistance.html",
    "title": "Class PointPairDistance | NetTopologySuite",
    "summary": "Class PointPairDistance Contains a pair of points and the distance between them. Inheritance object PointPairDistance Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Algorithm.Distance Assembly: NetTopologySuite.dll Syntax public class PointPairDistance Remarks Provides methods to update with a new point pair with either maximum or minimum distance. Properties | Edit this page View Source Coordinates Gets a value indicating the paired coordinates. Declaration public Coordinate[] Coordinates { get; } Property Value Type Description Coordinate[] An array containing the paired points | Edit this page View Source Distance The distance between the paired coordinates Declaration public double Distance { get; } Property Value Type Description double The distance between the paired coordinates | Edit this page View Source this[int] Gets the value of one of the paired points Declaration public Coordinate this[int i] { get; } Parameters Type Name Description int i An index, valid are [0, 1]. Property Value Type Description Coordinate The Coordinate at index i. Methods | Edit this page View Source Initialize() Initializes this instance to null. Declaration public void Initialize() | Edit this page View Source Initialize(Coordinate, Coordinate) Initializes the points, computing the distance between them. Declaration public void Initialize(Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p0 1st coordinate Coordinate p1 2nd coordinate | Edit this page View Source SetMaximum(PointPairDistance) Updates this PointPairDistance if ptDist has greater Distance than this instance. Declaration public void SetMaximum(PointPairDistance ptDist) Parameters Type Name Description PointPairDistance ptDist The PointPairDistance to test. | Edit this page View Source SetMaximum(Coordinate, Coordinate) Updates this PointPairDistance if the distance between p0 and p1 is greater than the Distance of this instance. Declaration public void SetMaximum(Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p0 The 1st point's coordinate Coordinate p1 The 2nd point's coordinate | Edit this page View Source SetMinimum(PointPairDistance) Updates this PointPairDistance if ptDist has a smaller Distance than this instance. Declaration public void SetMinimum(PointPairDistance ptDist) Parameters Type Name Description PointPairDistance ptDist The PointPairDistance to test. | Edit this page View Source SetMinimum(Coordinate, Coordinate) Updates this PointPairDistance if the distance between p0 and p1 is smaller than the Distance of this instance. Declaration public void SetMinimum(Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p0 The 1st point's coordinate Coordinate p1 The 2nd point's coordinate | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/NetTopologySuite.Algorithm.Distance.html": {
    "href": "api/NetTopologySuite.Algorithm.Distance.html",
    "title": "Namespace NetTopologySuite.Algorithm.Distance | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Algorithm.Distance Classes to compute distance metrics between geometries. Classes DiscreteFrechetDistance The Fréchet distance is a measure of similarity between curves. Thus, it can be used like the Hausdorff distance. An analogy for the Fréchet distance taken from Computing Discrete Fréchet Distance: A man is walking a dog on a leash: the man can move on one curve, the dog on the other; both may vary their speed, but backtracking is not allowed. DiscreteHausdorffDistance An algorithm for computing a distance metric which is an approximation to the Hausdorff Distance based on a discretization of the input Geometry. DiscreteHausdorffDistance.MaxDensifiedByFractionDistanceFilter A coordinate filter that computes the maximum PointPairDistance between points of an assigned Geometry and all filtered geometries. The filtered geometries' line segments are DiscreteHausdorffDistance.MaxPointDistanceFilter A coordinate filter that computes the maximum PointPairDistance between points of an assigned Geometry and all filtered geometries. DistanceToPoint Computes the Euclidean distance (L2 metric) from a Coordinate to a Geometry. PointPairDistance Contains a pair of points and the distance between them."
  },
  "api/NetTopologySuite.Algorithm.DistanceComputer.html": {
    "href": "api/NetTopologySuite.Algorithm.DistanceComputer.html",
    "title": "Class DistanceComputer | NetTopologySuite",
    "summary": "Class DistanceComputer Functions to compute distance between basic geometric structures. Inheritance object DistanceComputer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public static class DistanceComputer Methods | Edit this page View Source PointToLinePerpendicular(Coordinate, Coordinate, Coordinate) Computes the perpendicular distance from a point p to the (infinite) line containing the points AB Declaration public static double PointToLinePerpendicular(Coordinate p, Coordinate A, Coordinate B) Parameters Type Name Description Coordinate p The point to compute the distance for Coordinate A The first point of the first line Coordinate B The second point of the first line (must be different to A) Returns Type Description double The perpendicular distance from p to line segment AB | Edit this page View Source PointToLinePerpendicularSigned(Coordinate, Coordinate, Coordinate) Computes the perpendicular distance from a point p to the (infinite) line containing the points AB. The result is positive if to the left, otherwise negative. Declaration public static double PointToLinePerpendicularSigned(Coordinate p, Coordinate A, Coordinate B) Parameters Type Name Description Coordinate p The point to compute the distance for Coordinate A The first point of the first line Coordinate B The second point of the first line (must be different to A) Returns Type Description double The perpendicular distance from p to line segment AB | Edit this page View Source PointToSegment(Coordinate, Coordinate, Coordinate) Computes the distance from a point p to a line segment AB Note: NON-ROBUST! Declaration public static double PointToSegment(Coordinate p, Coordinate A, Coordinate B) Parameters Type Name Description Coordinate p The point to compute the distance for Coordinate A The first point of the first line Coordinate B The second point of the first line (must be different to A) Returns Type Description double The distance from p to line segment AB | Edit this page View Source PointToSegmentString(Coordinate, CoordinateSequence) Computes the distance from a point to a sequence of line segments. Declaration public static double PointToSegmentString(Coordinate p, CoordinateSequence line) Parameters Type Name Description Coordinate p A point CoordinateSequence line A sequence of contiguous line segments defined by their vertices Returns Type Description double The minimum distance between the point and the line segments | Edit this page View Source PointToSegmentString(Coordinate, Coordinate[]) Computes the distance from a point to a sequence of line segments. Declaration public static double PointToSegmentString(Coordinate p, Coordinate[] line) Parameters Type Name Description Coordinate p A point Coordinate[] line A sequence of contiguous line segments defined by their vertices Returns Type Description double The minimum distance between the point and the line segments | Edit this page View Source SegmentToSegment(Coordinate, Coordinate, Coordinate, Coordinate) Computes the distance from a line segment AB to a line segment CD Note: NON-ROBUST! Declaration public static double SegmentToSegment(Coordinate A, Coordinate B, Coordinate C, Coordinate D) Parameters Type Name Description Coordinate A The first point of the first line Coordinate B The second point of the first line (must be different to A) Coordinate C The first point of the second line Coordinate D The second point of the second line (must be different to C) Returns Type Description double The distance from a line segment AB to a line segment CD"
  },
  "api/NetTopologySuite.Algorithm.ElevationModel.html": {
    "href": "api/NetTopologySuite.Algorithm.ElevationModel.html",
    "title": "Class ElevationModel | NetTopologySuite",
    "summary": "Class ElevationModel A base elevation model class. Inheritance object ElevationModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public class ElevationModel Constructors | Edit this page View Source ElevationModel() Creates an elevation model that always returns NullOrdinate as result. Declaration public ElevationModel() | Edit this page View Source ElevationModel(double) Creates an elevation model that always returns z as result. Declaration public ElevationModel(double z) Parameters Type Name Description double z The result value for GetZ(Coordinate) or its overloads. | Edit this page View Source ElevationModel(double, Envelope) Creates an elevation model that always returns z as result. Declaration public ElevationModel(double z, Envelope extent) Parameters Type Name Description double z The result value for GetZ(Coordinate) or its overloads. Envelope extent The extent where this elevation model is valid Properties | Edit this page View Source Extent Gets a value indicating the extent where this elevation model is valid. Declaration public Envelope Extent { get; } Property Value Type Description Envelope Remarks If this value is null, no check for the validity of the input arguments for GetZ(Coordinate) and its overload is made. | Edit this page View Source NoZ Gets or sets a value indicating the default ElevationModel Declaration public static ElevationModel NoZ { get; } Property Value Type Description ElevationModel Remarks The value null cannot be assigned to this property, it will be converted to a no-op elevation model. Methods | Edit this page View Source GetZ(Coordinate) Gets the z-ordinate value for a given coordinate. For locations outside of Extent, NullOrdinate is returned. Declaration public virtual double GetZ(Coordinate coordinate) Parameters Type Name Description Coordinate coordinate A coordinate to get the z-ordinate value. Returns Type Description double The z-ordinate value | Edit this page View Source GetZ(double, double) Gets the z-ordinate value for a given pair of x and y ordinates. For locations outside of Extent, NullOrdinate is returned. Declaration public virtual double GetZ(double x, double y) Parameters Type Name Description double x A x-ordinate value. double y A y-ordinate value. Returns Type Description double The z-ordinate value | Edit this page View Source GetZ(ReadOnlySpan<double>, Span<double>) Gets missing z-ordinate values for xy-ordinate pairs. For locations outside of Extent, NullOrdinate is set. In order to update z-ordinate at index idx double.IsNaN(z[idx]) has to be true. Declaration public virtual void GetZ(ReadOnlySpan<double> xy, Span<double> z) Parameters Type Name Description ReadOnlySpan<double> xy An array of x- and y- ordinates Span<double> z An array for the missing z-ordinate values Exceptions Type Condition ArgumentException Thrown if xy span isn't twice the size of z-span Extension Methods ElevationModels.AddMissingZ(ElevationModel, Geometry) ElevationModels.AddMissingZ(ElevationModel, Geometry, ElevationModels.CoordinateSequenceToXYAndZ) ElevationModels.CopyWithZ(ElevationModel, Coordinate) ElevationModels.GetZ(ElevationModel, double[], double[])"
  },
  "api/NetTopologySuite.Algorithm.ElevationModels.CoordinateSequenceToXYAndZ.html": {
    "href": "api/NetTopologySuite.Algorithm.ElevationModels.CoordinateSequenceToXYAndZ.html",
    "title": "Delegate ElevationModels.CoordinateSequenceToXYAndZ | NetTopologySuite",
    "summary": "Delegate ElevationModels.CoordinateSequenceToXYAndZ Method signature to extract xy- and z-ordinate values from a coordinate sequence Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public delegate void ElevationModels.CoordinateSequenceToXYAndZ(CoordinateSequence sequence, Span<double> xy, Span<double> z) Parameters Type Name Description CoordinateSequence sequence The sequence to extract xy- and z ordinates from Span<double> xy The xy-ordinate values Span<double> z The z-ordinate values"
  },
  "api/NetTopologySuite.Algorithm.ElevationModels.html": {
    "href": "api/NetTopologySuite.Algorithm.ElevationModels.html",
    "title": "Class ElevationModels | NetTopologySuite",
    "summary": "Class ElevationModels Extension methods to work with ElevationModels. Inheritance object ElevationModels Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public static class ElevationModels Methods | Edit this page View Source AddMissingZ(ElevationModel, Geometry) Method to add missing z-ordinate values to a geometry. The geometry must be built of CoordinateSequences that are able to carry z-ordinate values. Declaration public static void AddMissingZ(this ElevationModel self, Geometry g) Parameters Type Name Description ElevationModel self The elevation model providing missing z-ordinate values Geometry g The geometry to add the missing z-ordinate values to | Edit this page View Source AddMissingZ(ElevationModel, Geometry, CoordinateSequenceToXYAndZ) Method to add missing z-ordinate values to a geometry. The geometry must be built of CoordinateSequences that are able to carry z-ordinate values. Declaration public static void AddMissingZ(this ElevationModel self, Geometry g, ElevationModels.CoordinateSequenceToXYAndZ seqToXYAndZ) Parameters Type Name Description ElevationModel self The elevation model providing missing z-ordinate values Geometry g The geometry to add the missing z-ordinate values to ElevationModels.CoordinateSequenceToXYAndZ seqToXYAndZ A method to convert a coordinate sequence into arrays of xy- and z-ordinate values. | Edit this page View Source CopyWithZ(ElevationModel, Coordinate) Creates a copy of c that has the z-ordinate value at c. If the elevation model can't retrieve a z-ordinate value, a copy of c is returned. Declaration public static Coordinate CopyWithZ(this ElevationModel self, Coordinate c) Parameters Type Name Description ElevationModel self The elevation model to use Coordinate c A coordinate Returns Type Description Coordinate A copy of c with the z-ordinate value. | Edit this page View Source GetZ(ElevationModel, double[], double[]) Function to get z-ordinate values for an array of xy-ordinate values Declaration public static void GetZ(this ElevationModel self, double[] xy, double[] z) Parameters Type Name Description ElevationModel self The elevation model to use double[] xy An array of xy-ordinate values double[] z The array of z-ordinate values"
  },
  "api/NetTopologySuite.Algorithm.HCoordinate.html": {
    "href": "api/NetTopologySuite.Algorithm.HCoordinate.html",
    "title": "Class HCoordinate | NetTopologySuite",
    "summary": "Class HCoordinate Represents a homogeneous coordinate in a 2-D coordinate space. In NTS HCoordinates are used as a clean way of computing intersections between line segments. Inheritance object HCoordinate Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public class HCoordinate Constructors | Edit this page View Source HCoordinate() Declaration public HCoordinate() | Edit this page View Source HCoordinate(HCoordinate, HCoordinate) Declaration public HCoordinate(HCoordinate p1, HCoordinate p2) Parameters Type Name Description HCoordinate p1 HCoordinate p2 | Edit this page View Source HCoordinate(Coordinate) Declaration public HCoordinate(Coordinate p) Parameters Type Name Description Coordinate p | Edit this page View Source HCoordinate(Coordinate, Coordinate) Constructs a homogeneous coordinate which is the intersection of the lines Coordinates. define by the homogeneous coordinates represented by two Declaration public HCoordinate(Coordinate p1, Coordinate p2) Parameters Type Name Description Coordinate p1 A coordinate Coordinate p2 A coordinate | Edit this page View Source HCoordinate(Coordinate, Coordinate, Coordinate, Coordinate) Creates an instance of this Declaration public HCoordinate(Coordinate p1, Coordinate p2, Coordinate q1, Coordinate q2) Parameters Type Name Description Coordinate p1 Coordinate p2 Coordinate q1 Coordinate q2 | Edit this page View Source HCoordinate(double, double, double) Declaration public HCoordinate(double x, double y, double w) Parameters Type Name Description double x double y double w Properties | Edit this page View Source Coordinate Declaration public Coordinate Coordinate { get; } Property Value Type Description Coordinate Methods | Edit this page View Source GetX() Declaration public double GetX() Returns Type Description double | Edit this page View Source GetY() Declaration public double GetY() Returns Type Description double | Edit this page View Source Intersection(Coordinate, Coordinate, Coordinate, Coordinate) Computes the (approximate) intersection point between two line segments using homogeneous coordinates. Declaration [Obsolete(\"Use Intersection.Compute(Coordinate, Coordinate, Coordinate, Coordinate)\")] public static Coordinate Intersection(Coordinate p1, Coordinate p2, Coordinate q1, Coordinate q2) Parameters Type Name Description Coordinate p1 1st Coordinate of 1st linesegment Coordinate p2 2nd Coordinate of 1st linesegment Coordinate q1 1st Coordinate of 2nd linesegment Coordinate q2 2nd Coordinate of 2nd linesegment Returns Type Description Coordinate Remarks Note that this algorithm is not numerically stable; i.e. it can produce intersection points which lie outside the envelope of the line segments themselves. In order to increase the precision of the calculation input points should be normalized before passing them to this routine. | Edit this page View Source OldIntersection(Coordinate, Coordinate, Coordinate, Coordinate) Computes the (approximate) intersection point between two line segments using homogeneous coordinates. Note that this algorithm is not numerically stable; i.e. it can produce intersection points which lie outside the envelope of the line segments themselves. In order to increase the precision of the calculation input points should be normalized before passing them to this routine. Declaration public static Coordinate OldIntersection(Coordinate p1, Coordinate p2, Coordinate q1, Coordinate q2) Parameters Type Name Description Coordinate p1 Coordinate p2 Coordinate q1 Coordinate q2 Returns Type Description Coordinate"
  },
  "api/NetTopologySuite.Algorithm.Hull.ConcaveHull.html": {
    "href": "api/NetTopologySuite.Algorithm.Hull.ConcaveHull.html",
    "title": "Class ConcaveHull | NetTopologySuite",
    "summary": "Class ConcaveHull Constructs a concave hull of a set of points. A concave hull is a possibly non-convex polygon containing all the input points. A given set of points has a sequence of hulls of increasing concaveness, determined by a numeric target parameter. The hull is constructed by removing border triangles of the Delaunay Triangulation of the points, as long as their \"size\" is larger than the target criterion. The target criteria are: Maximum Edge Length the length of the longest edge of the hull is no larger than this value. Maximum Edge Length Factor determines the Maximum Edge Length by a fraction of the difference between the longest and shortest edge lengths in the Delaunay Triangulation. This normalizes the Maximum Edge Length to be scale-free. A value of 1 produces the convex hull; a value of 0 produces maximum concaveness. Alpha produces Alpha-shapes, by removing border triangles with a circumradius greater than alpha. Large values produce the convex hull; a value of 0 produces maximum concaveness. The preferred criterion is the Maximum Edge Length Ratio, since it is scale-free and local(so that no assumption needs to be made about the total amount of concaveness present). Other length criteria can be used by setting the Maximum Edge Length directly. For example, use a length relative to the longest edge length in the Minimum Spanning Tree of the point set. Or, use a length derived from the UniformGridEdgeLength(Geometry) value. The computed hull is always a single connected Polygon (unless it is degenerate, in which case it will be a Point or a LineString). This constraint may cause the concave hull to fail to meet the target criteria. Optionally the concave hull can be allowed to contain holes by setting HolesAllowed. Inheritance object ConcaveHull Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm.Hull Assembly: NetTopologySuite.dll Syntax public class ConcaveHull Constructors | Edit this page View Source ConcaveHull(Geometry) Creates a new instance for a given geometry. Declaration public ConcaveHull(Geometry geom) Parameters Type Name Description Geometry geom The input geometry Properties | Edit this page View Source Alpha Gets or sets the alpha parameter to compute an alpha shape of the input. Alpha is the radius of the eroding disc. Border triangles with circumradius greater than alpha are removed. Declaration public double Alpha { get; set; } Property Value Type Description double | Edit this page View Source HolesAllowed Gets or sets whether holes are allowed in the concave hull polygon. Declaration public bool HolesAllowed { get; set; } Property Value Type Description bool | Edit this page View Source MaximumEdgeLength Gets or sets the target maximum edge length for the concave hull. The length value must be zero or greater. The value 0.0 produces the concave hull of smallest area that is still connected. Larger values produce less concave results. A value equal or greater than the longest Delaunay Triangulation edge length produces the convex hull. The UniformGridEdgeLength(Geometry) value may be used as the basis for estimating an appropriate target maximum edge length. Declaration public double MaximumEdgeLength { get; set; } Property Value Type Description double The target maximum edge length for the concave hull See Also UniformGridEdgeLength(Geometry) | Edit this page View Source MaximumEdgeLengthRatio Gets or sets the target maximum edge length ratio for the concave hull. The edge length ratio is a fraction of the difference between the longest and shortest edge lengths in the Delaunay Triangulation of the input points. It is a value in the range 0 to 1. The value 0.0 produces a concave hull of minimum area that is still connected. The value 1.0 produces the convex hull. Declaration public double MaximumEdgeLengthRatio { get; set; } Property Value Type Description double The target maximum edge length factor for the concave hull Methods | Edit this page View Source AlphaShape(Geometry, double, bool) Computes the alpha shape of a geometry as a polygon. The alpha parameter is the radius of the eroding disc. Declaration public static Geometry AlphaShape(Geometry geom, double alpha, bool isHolesAllowed) Parameters Type Name Description Geometry geom The input geometry double alpha The radius of the eroding disk bool isHolesAllowed A flag indicating if holes are allowed in the result Returns Type Description Geometry The alpha schape polygon | Edit this page View Source ConcaveHullByLength(Geometry, double) Computes the concave hull of the vertices in a geometry using the target criterion of maximum edge length. Declaration public static Geometry ConcaveHullByLength(Geometry geom, double maxLength) Parameters Type Name Description Geometry geom The input geometry double maxLength The target maximum edge length Returns Type Description Geometry The concave hull | Edit this page View Source ConcaveHullByLength(Geometry, double, bool) Computes the concave hull of the vertices in a geometry using the target criterion of maximum edge length, and optionally allowing holes. Declaration public static Geometry ConcaveHullByLength(Geometry geom, double maxLength, bool isHolesAllowed) Parameters Type Name Description Geometry geom The input geometry double maxLength The target maximum edge length bool isHolesAllowed A flag whether holes are allowed in the result Returns Type Description Geometry The concave hull | Edit this page View Source ConcaveHullByLengthRatio(Geometry, double) Computes the concave hull of the vertices in a geometry using the target criterion of maximum edge length ratio. The edge length ratio is a fraction of the length difference between the longest and shortest edges in the Delaunay Triangulation of the input points. Declaration public static Geometry ConcaveHullByLengthRatio(Geometry geom, double lengthRatio) Parameters Type Name Description Geometry geom The input geometry double lengthRatio The target edge length ratio Returns Type Description Geometry The concave hull | Edit this page View Source ConcaveHullByLengthRatio(Geometry, double, bool) Computes the concave hull of the vertices in a geometry using the target criterion of maximum edge length ratio, and optionally allowing holes. The edge length factor is a fraction of the length difference between the longest and shortest edges in the Delaunay Triangulation of the input points. Declaration public static Geometry ConcaveHullByLengthRatio(Geometry geom, double lengthRatio, bool isHolesAllowed) Parameters Type Name Description Geometry geom The input geometry double lengthRatio The target edge length ratio bool isHolesAllowed A flag whether holes are allowed in the result Returns Type Description Geometry The concave hull | Edit this page View Source GetHull() Gets the computed concave hull. Declaration public Geometry GetHull() Returns Type Description Geometry The concave hull | Edit this page View Source UniformGridEdgeLength(Geometry) Computes the approximate edge length of a uniform square grid having the same number of points as a geometry and the same area as its convex hull. This value can be used to determine a suitable length threshold value for computing a concave hull. A value from 2 to 4 times the uniform grid length seems to produce reasonable results. Declaration public static double UniformGridEdgeLength(Geometry geom) Parameters Type Name Description Geometry geom A geometry Returns Type Description double The approximate uniform grid length"
  },
  "api/NetTopologySuite.Algorithm.Hull.ConcaveHullOfPolygons.html": {
    "href": "api/NetTopologySuite.Algorithm.Hull.ConcaveHullOfPolygons.html",
    "title": "Class ConcaveHullOfPolygons | NetTopologySuite",
    "summary": "Class ConcaveHullOfPolygons Constructs a concave hull of a set of polygons, respecting the polygons as constraints. A concave hull is a possibly non-convex polygon containing all the input polygons. A given set of polygons has a sequence of hulls of increasing concaveness, determined by a numeric target parameter. The computed hull \"fills the gap\" between the polygons, and does not intersect their interior. The concave hull is constructed by removing the longest outer edges of the Delaunay Triangulation of the space between the polygons, until the target criterion parameter is reached. The target criteria are: Maximum Edge Lengththe length of the longest edge between the polygons is no larger than this value. Maximum Edge Length Ratiodetermine the Maximum Edge Length as a fraction of the difference between the longest and shortest edge lengths between the polygons. This normalizes the Maximum Edge Length to be scale-free. A value of 1 produces the convex hull; a value of 0 produces the original polygons. The preferred criterion is the Maximum Edge Length Ratio, since it is scale-free and local (so that no assumption needs to be made about the total amount of concaveness present). Optionally the concave hull can be allowed to contain holes, via HolesAllowed. The hull can be specified as being \"tight\", which means it follows the outer boundaries of the input polygons. The input polygons must form a valid MultiPolygon (i.e.they must be non - overlapping). Inheritance object ConcaveHullOfPolygons Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm.Hull Assembly: NetTopologySuite.dll Syntax public class ConcaveHullOfPolygons Constructors | Edit this page View Source ConcaveHullOfPolygons(Geometry) Creates a new instance for a given geometry. Declaration public ConcaveHullOfPolygons(Geometry polygons) Parameters Type Name Description Geometry polygons The input geometry Properties | Edit this page View Source HolesAllowed Gets or sets a flag indicating whether holes are allowed in the concave hull polygon. Declaration public bool HolesAllowed { get; set; } Property Value Type Description bool | Edit this page View Source MaximumEdgeLength Gets or sets the target maximum edge length for the concave hull. The length value must be zero or greater. The value 0.0 produces the input polygons. Larger values produce less concave results. Above a certain large value the result is the convex hull of the input. The edge length ratio provides a scale-free parameter which is intended to produce similar concave results for a variety of inputs. Declaration public double MaximumEdgeLength { get; set; } Property Value Type Description double | Edit this page View Source MaximumEdgeLengthRatio Gets or sets the target maximum edge length ratio for the concave hull. The edge length ratio is a fraction of the difference between the longest and shortest edge lengths in the Delaunay Triangulation of the area between the input polygons. (Roughly speaking, it is a fraction of the difference between the shortest and longest distances between the input polygons.) It is a value in the range 0 to 1. The value 0.0 produces the original input polygons. The value 1.0 produces the convex hull. Declaration public double MaximumEdgeLengthRatio { get; set; } Property Value Type Description double | Edit this page View Source Tight Gets or sets a flag indicating whether the boundary of the hull polygon is kept tight to the outer edges of the input polygons. Declaration public bool Tight { get; set; } Property Value Type Description bool Methods | Edit this page View Source ConcaveFillByLength(Geometry, double) Computes a concave fill area between a set of polygons, using the target criterion of maximum edge length. Declaration public static Geometry ConcaveFillByLength(Geometry polygons, double maxLength) Parameters Type Name Description Geometry polygons The input polygons double maxLength The target maximum edge length Returns Type Description Geometry The concave fill | Edit this page View Source ConcaveFillByLengthRatio(Geometry, double) Computes a concave fill area between a set of polygons, using the target criterion of maximum edge length ratio. Declaration public static Geometry ConcaveFillByLengthRatio(Geometry polygons, double lengthRatio) Parameters Type Name Description Geometry polygons The input polygons double lengthRatio The target maximum edge length ratio Returns Type Description Geometry The concave fill | Edit this page View Source ConcaveHullByLength(Geometry, double) Computes a concave hull of set of polygons using the target criterion of maximum edge length. Declaration public static Geometry ConcaveHullByLength(Geometry polygons, double maxLength) Parameters Type Name Description Geometry polygons The input polygons double maxLength The target maximum edge length Returns Type Description Geometry The concave hull | Edit this page View Source ConcaveHullByLength(Geometry, double, bool, bool) Computes a concave hull of set of polygons using the target criterion of maximum edge length, and allowing control over whether the hull boundary is tight and can contain holes. Declaration public static Geometry ConcaveHullByLength(Geometry polygons, double maxLength, bool isTight, bool isHolesAllowed) Parameters Type Name Description Geometry polygons The input polygons double maxLength The target maximum edge length bool isTight A flag indicating if the hull should be tight to the outside of the polygons bool isHolesAllowed A flag indicating if holes are allowed in the hull polygon Returns Type Description Geometry The concave hull | Edit this page View Source ConcaveHullByLengthRatio(Geometry, double) Computes a concave hull of set of polygons using the target criterion of maximum edge length ratio. Declaration public static Geometry ConcaveHullByLengthRatio(Geometry polygons, double lengthRatio) Parameters Type Name Description Geometry polygons The input polygons double lengthRatio The target maximum edge length ratio Returns Type Description Geometry | Edit this page View Source ConcaveHullByLengthRatio(Geometry, double, bool, bool) Computes a concave hull of set of polygons using the target criterion of maximum edge length ratio, and allowing control over whether the hull boundary is tight and can contain holes. Declaration public static Geometry ConcaveHullByLengthRatio(Geometry polygons, double lengthRatio, bool isTight, bool isHolesAllowed) Parameters Type Name Description Geometry polygons The input polygons double lengthRatio The target maximum edge length ratio bool isTight A flag indicating if the hull should be tight to the outside of the polygons bool isHolesAllowed A flag indicating if holes are allowed in the hull polygon Returns Type Description Geometry The concave hull | Edit this page View Source GetFill() Gets the concave fill, which is the area between the input polygons, subject to the concaveness control parameter. Declaration public Geometry GetFill() Returns Type Description Geometry The concave fill | Edit this page View Source GetHull() Gets the computed concave hull. Declaration public Geometry GetHull() Returns Type Description Geometry The concave hull"
  },
  "api/NetTopologySuite.Algorithm.Hull.html": {
    "href": "api/NetTopologySuite.Algorithm.Hull.html",
    "title": "Namespace NetTopologySuite.Algorithm.Hull | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Algorithm.Hull Contains classes implementing algorithms to compute hulls of geometry objects. See also ConvexHull Classes ConcaveHull Constructs a concave hull of a set of points. A concave hull is a possibly non-convex polygon containing all the input points. A given set of points has a sequence of hulls of increasing concaveness, determined by a numeric target parameter. The hull is constructed by removing border triangles of the Delaunay Triangulation of the points, as long as their \"size\" is larger than the target criterion. The target criteria are: Maximum Edge Length the length of the longest edge of the hull is no larger than this value. Maximum Edge Length Factor determines the Maximum Edge Length by a fraction of the difference between the longest and shortest edge lengths in the Delaunay Triangulation. This normalizes the Maximum Edge Length to be scale-free. A value of 1 produces the convex hull; a value of 0 produces maximum concaveness. Alpha produces Alpha-shapes, by removing border triangles with a circumradius greater than alpha. Large values produce the convex hull; a value of 0 produces maximum concaveness. The preferred criterion is the Maximum Edge Length Ratio, since it is scale-free and local(so that no assumption needs to be made about the total amount of concaveness present). Other length criteria can be used by setting the Maximum Edge Length directly. For example, use a length relative to the longest edge length in the Minimum Spanning Tree of the point set. Or, use a length derived from the UniformGridEdgeLength(Geometry) value. The computed hull is always a single connected Polygon (unless it is degenerate, in which case it will be a Point or a LineString). This constraint may cause the concave hull to fail to meet the target criteria. Optionally the concave hull can be allowed to contain holes by setting HolesAllowed. ConcaveHullOfPolygons Constructs a concave hull of a set of polygons, respecting the polygons as constraints. A concave hull is a possibly non-convex polygon containing all the input polygons. A given set of polygons has a sequence of hulls of increasing concaveness, determined by a numeric target parameter. The computed hull \"fills the gap\" between the polygons, and does not intersect their interior. The concave hull is constructed by removing the longest outer edges of the Delaunay Triangulation of the space between the polygons, until the target criterion parameter is reached. The target criteria are: Maximum Edge Lengththe length of the longest edge between the polygons is no larger than this value. Maximum Edge Length Ratiodetermine the Maximum Edge Length as a fraction of the difference between the longest and shortest edge lengths between the polygons. This normalizes the Maximum Edge Length to be scale-free. A value of 1 produces the convex hull; a value of 0 produces the original polygons. The preferred criterion is the Maximum Edge Length Ratio, since it is scale-free and local (so that no assumption needs to be made about the total amount of concaveness present). Optionally the concave hull can be allowed to contain holes, via HolesAllowed. The hull can be specified as being \"tight\", which means it follows the outer boundaries of the input polygons. The input polygons must form a valid MultiPolygon (i.e.they must be non - overlapping)."
  },
  "api/NetTopologySuite.Algorithm.IBoundaryNodeRule.html": {
    "href": "api/NetTopologySuite.Algorithm.IBoundaryNodeRule.html",
    "title": "Interface IBoundaryNodeRule | NetTopologySuite",
    "summary": "Interface IBoundaryNodeRule An interface for rules which determine whether node points which are in boundaries of ILineal geometry components are in the boundary of the parent geometry collection. The SFS specifies a single kind of boundary node rule, the BoundaryNodeRules.Mod2BoundaryNodeRule rule. However, other kinds of Boundary Node Rules are appropriate in specific situations (for instance, linear network topology usually follows the BoundaryNodeRules.EndPointBoundaryNodeRule.) Some JTS operations (such as RelateOp, BoundaryOp and IsSimpleOp) allow the BoundaryNodeRule to be specified, and respect the supplied rule when computing the results of the operation. An example use case for a non-SFS-standard Boundary Node Rule is that of checking that a set of LineStrings have valid linear network topology, when turn-arounds are represented as closed rings. In this situation, the entry road to the turn-around is only valid when it touches the turn-around ring at the single (common) endpoint. This is equivalent to requiring the set of LineString s to be simple under the BoundaryNodeRules.EndPointBoundaryNodeRule. The SFS-standard BoundaryNodeRules.Mod2BoundaryNodeRule is not sufficient to perform this test, since it states that closed rings have no boundary points. This interface and its subclasses follow the Strategy design pattern. Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public interface IBoundaryNodeRule Methods | Edit this page View Source IsInBoundary(int) Tests whether a point that lies in boundaryCount geometry component boundaries is considered to form part of the boundary of the parent geometry. Declaration bool IsInBoundary(int boundaryCount) Parameters Type Name Description int boundaryCount boundaryCount the number of component boundaries that this point occurs in Returns Type Description bool true if points in this number of boundaries lie in the parent boundary See Also RelateOp BoundaryOp IsSimpleOp PointLocator"
  },
  "api/NetTopologySuite.Algorithm.IPointInAreaLocator.html": {
    "href": "api/NetTopologySuite.Algorithm.IPointInAreaLocator.html",
    "title": "Interface IPointInAreaLocator | NetTopologySuite",
    "summary": "Interface IPointInAreaLocator An interface for classes which determine the Location of points in a Geometry Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public interface IPointInAreaLocator Methods | Edit this page View Source Locate(Coordinate) Determines the Location of a point in the Geometry. Declaration Location Locate(Coordinate p) Parameters Type Name Description Coordinate p The point to test Returns Type Description Location the location of the point in the geometry"
  },
  "api/NetTopologySuite.Algorithm.InteriorPoint.html": {
    "href": "api/NetTopologySuite.Algorithm.InteriorPoint.html",
    "title": "Class InteriorPoint | NetTopologySuite",
    "summary": "Class InteriorPoint Computes an interior point of a Geometry. An interior point is guaranteed to lie in the interior of the Geometry, if it possible to calculate such a point exactly. For collections the interior point is computed for the collection of non-empty elements of highest dimension. Otherwise, the point may lie on the boundary of the geometry. The interior point of an empty geometry is POINT EMPTY. Algorithm The point is chosen to be \"close to the center\" of the geometry. The location depends on the dimension of the input: Dimension 2the interior point is constructed in the middle of the longest interior segment of a line bisecting the area. Dimension 1the interior point is the interior or boundary vertex closest to the centroid. Dimension 0the point is the point closest to the centroid. Centroid MaximumInscribedCircle LargestEmptyCircle Inheritance object InteriorPoint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public static class InteriorPoint Methods | Edit this page View Source GetInteriorCoord(Geometry) Computes a location of an interior point in a Geometry. Handles all geometry types. Declaration public static Coordinate GetInteriorCoord(Geometry geom) Parameters Type Name Description Geometry geom A geometry in which to find an interior point Returns Type Description Coordinate the location of an interior point, or null if the input is empty Remarks This function is called GetInteriorPoint in JTS. It has been renamed to GetInteriorCoord to prevent a breaking change. | Edit this page View Source GetInteriorPoint(Geometry) Computes a location of an interior point in a Geometry. Handles all geometry types. Declaration [Obsolete(\"Use GetInteriorCoord\")] public static Point GetInteriorPoint(Geometry geom) Parameters Type Name Description Geometry geom A geometry in which to find an interior point Returns Type Description Point the location of an interior point, or POINT EMPTY if the input is empty"
  },
  "api/NetTopologySuite.Algorithm.InteriorPointArea.html": {
    "href": "api/NetTopologySuite.Algorithm.InteriorPointArea.html",
    "title": "Class InteriorPointArea | NetTopologySuite",
    "summary": "Class InteriorPointArea Computes a point in the interior of an areal geometry. The point will lie in the geometry interior in all except certain pathological cases. Inheritance object InteriorPointArea Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public class InteriorPointArea Remarks Algorithm: For each input polygon: Determine a horizontal scan line on which the interior point will be located. To increase the chance of the scan line having non-zero-width intersection with the polygon the scan line Y ordinate is chosen to be near the centre of the polygon's Y extent but distinct from all of vertex Y ordinates. Compute the sections of the scan line which lie in the interior of the polygon. Choose the widest interior section and take its midpoint as the interior point. The final interior point is chosen as the one occurring in the widest interior section. This algorithm is a tradeoff between performance and point quality (where points further from the geometry boundary are considered to be higher quality) Priority is given to performance. This means that the computed interior point may not be suitable for some uses (such as label positioning). The algorithm handles some kinds of invalid/degenerate geometry, including zero-area and self-intersecting polygons. Empty geometry is handled by returning a null point. KNOWN BUGS If a fixed precision model is used, in some cases this method may return a point which does not lie in the interior. If the input polygon is extremely narrow the computed point may not lie in the interior of the polygon. Constructors | Edit this page View Source InteriorPointArea(Geometry) Creates a new interior point finder for an areal geometry. Declaration public InteriorPointArea(Geometry g) Parameters Type Name Description Geometry g An areal geometry Properties | Edit this page View Source InteriorPoint Gets the computed interior point or null if the input geometry is empty. Declaration public Coordinate InteriorPoint { get; } Property Value Type Description Coordinate Methods | Edit this page View Source GetInteriorPoint(Geometry) Computes an interior point for the polygonal components of a Geometry. Declaration public static Coordinate GetInteriorPoint(Geometry geom) Parameters Type Name Description Geometry geom The geometry to compute. Returns Type Description Coordinate The computed interior point, or null if the geometry has no polygonal components."
  },
  "api/NetTopologySuite.Algorithm.InteriorPointLine.html": {
    "href": "api/NetTopologySuite.Algorithm.InteriorPointLine.html",
    "title": "Class InteriorPointLine | NetTopologySuite",
    "summary": "Class InteriorPointLine Computes a point in the interior of an linear point. Algorithm: Find an interior vertex which is closest to the centroid of the linestring. If there is no interior vertex, find the endpoint which is closest to the centroid. Inheritance object InteriorPointLine Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public class InteriorPointLine Constructors | Edit this page View Source InteriorPointLine(Geometry) Declaration public InteriorPointLine(Geometry g) Parameters Type Name Description Geometry g Properties | Edit this page View Source InteriorPoint Declaration public Coordinate InteriorPoint { get; } Property Value Type Description Coordinate Methods | Edit this page View Source GetInteriorPoint(Geometry) Computes an interior point for the linear components of a Geometry. Declaration public static Coordinate GetInteriorPoint(Geometry geom) Parameters Type Name Description Geometry geom The geometry to compute. Returns Type Description Coordinate The computed interior point, or null if the geometry has no linear components."
  },
  "api/NetTopologySuite.Algorithm.InteriorPointPoint.html": {
    "href": "api/NetTopologySuite.Algorithm.InteriorPointPoint.html",
    "title": "Class InteriorPointPoint | NetTopologySuite",
    "summary": "Class InteriorPointPoint Computes a point in the interior of an point point. Algorithm: Find a point which is closest to the centroid of the point. Inheritance object InteriorPointPoint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public class InteriorPointPoint Constructors | Edit this page View Source InteriorPointPoint(Geometry) Declaration public InteriorPointPoint(Geometry g) Parameters Type Name Description Geometry g Properties | Edit this page View Source InteriorPoint Declaration public Coordinate InteriorPoint { get; } Property Value Type Description Coordinate Methods | Edit this page View Source GetInteriorPoint(Geometry) Computes an interior point for the puntal components of a Geometry. Declaration public static Coordinate GetInteriorPoint(Geometry geom) Parameters Type Name Description Geometry geom The geometry to compute. Returns Type Description Coordinate The computed interior point, or null if the geometry has no puntal components."
  },
  "api/NetTopologySuite.Algorithm.IntersectionComputer.html": {
    "href": "api/NetTopologySuite.Algorithm.IntersectionComputer.html",
    "title": "Class IntersectionComputer | NetTopologySuite",
    "summary": "Class IntersectionComputer Functions to compute intersection points between lines and line segments. In general it is not possible to compute the intersection point of two lines exactly, due to numerical roundoff. This is particularly true when the lines are nearly parallel. These routines uses numerical conditioning on the input values to ensure that the computed value is very close to the correct value. The Z-ordinate is ignored, and not populated. Inheritance object IntersectionComputer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public class IntersectionComputer Remarks NOTE: In JTS this function is called Intersection. Methods | Edit this page View Source Intersection(Coordinate, Coordinate, Coordinate, Coordinate) Computes the intersection point of two lines. If the lines are parallel or collinear this case is detected and null is returned. Declaration public static Coordinate Intersection(Coordinate p1, Coordinate p2, Coordinate q1, Coordinate q2) Parameters Type Name Description Coordinate p1 An endpoint of line 1 Coordinate p2 An endpoint of line 1 Coordinate q1 An endpoint of line 2 Coordinate q2 An endpoint of line 2 Returns Type Description Coordinate The intersection point between the lines, if there is one, or null if the lines are parallel or collinear See Also Intersection(Coordinate, Coordinate, Coordinate, Coordinate) | Edit this page View Source LineSegment(Coordinate, Coordinate, Coordinate, Coordinate) Computes the intersection point of a line and a line segment (if any). There will be no intersection point if: If the segment is collinear with the line the first segment endpoint is returned. Declaration public static Coordinate LineSegment(Coordinate line1, Coordinate line2, Coordinate seg1, Coordinate seg2) Parameters Type Name Description Coordinate line1 Coordinate line2 Coordinate seg1 Coordinate seg2 Returns Type Description Coordinate The intersection point, or null if it is not possible to find an intersection"
  },
  "api/NetTopologySuite.Algorithm.Length.html": {
    "href": "api/NetTopologySuite.Algorithm.Length.html",
    "title": "Class Length | NetTopologySuite",
    "summary": "Class Length Functions for computing length. Inheritance object Length Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public class Length Methods | Edit this page View Source OfLine(CoordinateSequence) Computes the length of a LineString specified by a sequence of points. Declaration public static double OfLine(CoordinateSequence pts) Parameters Type Name Description CoordinateSequence pts The points specifying the LineString Returns Type Description double The length of the LineString"
  },
  "api/NetTopologySuite.Algorithm.LineIntersector.html": {
    "href": "api/NetTopologySuite.Algorithm.LineIntersector.html",
    "title": "Class LineIntersector | NetTopologySuite",
    "summary": "Class LineIntersector A LineIntersector is an algorithm that can both test whether two line segments intersect and compute the intersection point(s) if they do. There are three possible outcomes when determining whether two line segments intersect: NoIntersection - the segments do not intersect PointIntersection - the segments intersect in a single point CollinearIntersection - the segments are collinear and they intersect in a line segment For segments which intersect in a single point, the point may be either an endpoint or in the interior of each segment. If the point lies in the interior of both segments, this is termed a proper intersection. The property IsProper test for this situation. The intersection point(s) may be computed in a precise or non-precise manner. Computing an intersection point precisely involves rounding it via a supplied PrecisionModel. LineIntersectors do not perform an initial envelope intersection test to determine if the segments are disjoint. This is because this class is likely to be used in a context where envelope overlap is already known to occur (or be likely). Inheritance object LineIntersector RobustLineIntersector Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public abstract class LineIntersector Constructors | Edit this page View Source LineIntersector() Creates an instance of this class Declaration protected LineIntersector() Fields | Edit this page View Source CollinearIntersection Indicates that line segments intersect in a line segment Declaration public const int CollinearIntersection = 2 Field Value Type Description int | Edit this page View Source InputLines Array of coordinate arrays forming the lines Declaration protected Coordinate[][] InputLines Field Value Type Description Coordinate[][] | Edit this page View Source IntersectionLineIndex The indexes of the endpoints of the intersection lines, in order along the corresponding line Declaration protected int[] IntersectionLineIndex Field Value Type Description int[] | Edit this page View Source IntersectionPoint Array of Declaration protected Coordinate[] IntersectionPoint Field Value Type Description Coordinate[] | Edit this page View Source NoIntersection Indicates that line segments do not intersect Declaration public const int NoIntersection = 0 Field Value Type Description int | Edit this page View Source PointIntersection Indicates that line segments intersect in a single point Declaration public const int PointIntersection = 1 Field Value Type Description int | Edit this page View Source Result A value indicating the intersection result Possible values are: NoIntersection PointIntersection CollinearIntersection Declaration protected int Result Field Value Type Description int Properties | Edit this page View Source HasIntersection Tests whether the input geometries intersect. Declaration public bool HasIntersection { get; } Property Value Type Description bool true if the input geometries intersect. | Edit this page View Source IntersectionNum Returns the number of intersection points found. This will be either 0, 1 or 2. Declaration public int IntersectionNum { get; } Property Value Type Description int The number of intersection points found (0, 1, or 2) | Edit this page View Source IsCollinear Gets a value indicating if the computed intersection is collinear Declaration protected bool IsCollinear { get; } Property Value Type Description bool | Edit this page View Source IsEndPoint Gets a value indicating if the intersection is an end-point intersection Declaration protected bool IsEndPoint { get; } Property Value Type Description bool | Edit this page View Source IsProper Tests whether an intersection is proper. The intersection between two line segments is considered proper if they intersect in a single point in the interior of both segments (e.g. the intersection is a single point and is not equal to any of the endpoints). The intersection between a point and a line segment is considered proper if the point lies in the interior of the segment (e.g. is not equal to either of the endpoints). Declaration public bool IsProper { get; protected set; } Property Value Type Description bool true if the intersection is proper. | Edit this page View Source Pa Alias the IntersectionPoint[0] for ease of reference Declaration protected Coordinate Pa { get; } Property Value Type Description Coordinate | Edit this page View Source Pb Alias the IntersectionPoint[1] for ease of reference Declaration protected Coordinate Pb { get; } Property Value Type Description Coordinate | Edit this page View Source PrecisionModel Force computed intersection to be rounded to a given precision model. No getter is provided, because the precision model is not required to be specified. Declaration public PrecisionModel PrecisionModel { get; set; } Property Value Type Description PrecisionModel Methods | Edit this page View Source ComputeEdgeDistance(Coordinate, Coordinate, Coordinate) Computes the \"edge distance\" of an intersection point p along a segment. The edge distance is a metric of the point along the edge. The metric used is a robust and easy to compute metric function. It is not equivalent to the usual Euclidean metric. It relies on the fact that either the x or the y ordinates of the points in the edge are unique, depending on whether the edge is longer in the horizontal or vertical direction. NOTE: This function may produce incorrect distances for inputs where p is not precisely on p1-p2 (E.g. p = (139,9) p1 = (139,10), p2 = (280,1) produces distance 0.0, which is incorrect. My hypothesis is that the function is safe to use for points which are the result of rounding points which lie on the line, but not safe to use for truncated points. Declaration public static double ComputeEdgeDistance(Coordinate p, Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p Coordinate p0 Coordinate p1 Returns Type Description double | Edit this page View Source ComputeIntLineIndex() Computes the IntersectionLineIndex values. Declaration protected void ComputeIntLineIndex() | Edit this page View Source ComputeIntLineIndex(int) Computes the intersection line index Declaration protected void ComputeIntLineIndex(int segmentIndex) Parameters Type Name Description int segmentIndex The segment index | Edit this page View Source ComputeIntersect(Coordinate, Coordinate, Coordinate, Coordinate) Computes the intersection of two line segments, one defined by p1 and p2, the other by q1 and q2. Declaration public abstract int ComputeIntersect(Coordinate p1, Coordinate p2, Coordinate q1, Coordinate q2) Parameters Type Name Description Coordinate p1 The 1st point of the 1st segment Coordinate p2 The 2nd point of the 1st segment Coordinate q1 The 1st point of the 2nd segment Coordinate q2 The 2nd point of the 2nd segment Returns Type Description int Remarks Don't use this function directly, it is not meant for public use. Please call ComputeIntersection(Coordinate, Coordinate, Coordinate, Coordinate) and test HasIntersection or IsCollinear along with IsProper and IsEndPoint. | Edit this page View Source ComputeIntersection(Coordinate, Coordinate, Coordinate) Compute the intersection of a point p and the line p1-p2. This function computes the bool value of the hasIntersection test. The actual value of the intersection (if there is one) is equal to the value of p. Declaration public abstract void ComputeIntersection(Coordinate p, Coordinate p1, Coordinate p2) Parameters Type Name Description Coordinate p Coordinate p1 Coordinate p2 | Edit this page View Source ComputeIntersection(Coordinate, Coordinate, Coordinate, Coordinate) Computes the intersection of the lines p1-p2 and p3-p4. This function computes both the bool value of the hasIntersection test and the (approximate) value of the intersection point itself (if there is one). Declaration public void ComputeIntersection(Coordinate p1, Coordinate p2, Coordinate p3, Coordinate p4) Parameters Type Name Description Coordinate p1 The 1st point of the 1st segment Coordinate p2 The 2nd point of the 1st segment Coordinate p3 The 1st point of the 2nd segment Coordinate p4 The 2nd point of the 2nd segment | Edit this page View Source GetEdgeDistance(int, int) Computes the \"edge distance\" of an intersection point along the specified input line segment. Declaration public double GetEdgeDistance(int segmentIndex, int intIndex) Parameters Type Name Description int segmentIndex is 0 or 1. int intIndex is 0 or 1. Returns Type Description double The edge distance of the intersection point. | Edit this page View Source GetEndpoint(int, int) Gets an endpoint of an input segment. Declaration public Coordinate GetEndpoint(int segmentIndex, int ptIndex) Parameters Type Name Description int segmentIndex the index of the input segment (0 or 1) int ptIndex the index of the endpoint (0 or 1) Returns Type Description Coordinate The specified endpoint | Edit this page View Source GetIndexAlongSegment(int, int) Computes the index (order) of the intIndex'th intersection point in the direction of a specified input line segment. Declaration public int GetIndexAlongSegment(int segmentIndex, int intIndex) Parameters Type Name Description int segmentIndex is 0 or 1. int intIndex is 0 or 1. Returns Type Description int The index of the intersection point along the segment (0 or 1). | Edit this page View Source GetIntersection(int) Returns the intIndex'th intersection point. Declaration public Coordinate GetIntersection(int intIndex) Parameters Type Name Description int intIndex is 0 or 1. Returns Type Description Coordinate The intIndex'th intersection point. | Edit this page View Source GetIntersectionAlongSegment(int, int) Computes the intIndex'th intersection point in the direction of a specified input line segment. Declaration public Coordinate GetIntersectionAlongSegment(int segmentIndex, int intIndex) Parameters Type Name Description int segmentIndex is 0 or 1. int intIndex is 0 or 1. Returns Type Description Coordinate The intIndex'th intersection point in the direction of the specified input line segment. | Edit this page View Source IsInteriorIntersection() Tests whether either intersection point is an interior point of one of the input segments. Declaration public bool IsInteriorIntersection() Returns Type Description bool true if either intersection point is in the interior of one of the input segment. | Edit this page View Source IsInteriorIntersection(int) Tests whether either intersection point is an interior point of the specified input segment. Declaration public bool IsInteriorIntersection(int inputLineIndex) Parameters Type Name Description int inputLineIndex Returns Type Description bool true if either intersection point is in the interior of the input segment. | Edit this page View Source IsIntersection(Coordinate) Test whether a point is a intersection point of two line segments. Note that if the intersection is a line segment, this method only tests for equality with the endpoints of the intersection segment. It does not return true if the input point is internal to the intersection segment. Declaration public bool IsIntersection(Coordinate pt) Parameters Type Name Description Coordinate pt Returns Type Description bool true if the input point is one of the intersection points. | Edit this page View Source NonRobustComputeEdgeDistance(Coordinate, Coordinate, Coordinate) This function is non-robust, since it may compute the square of large numbers. Currently not sure how to improve this. Declaration public static double NonRobustComputeEdgeDistance(Coordinate p, Coordinate p1, Coordinate p2) Parameters Type Name Description Coordinate p Coordinate p1 Coordinate p2 Returns Type Description double | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/NetTopologySuite.Algorithm.Locate.IPointOnGeometryLocator.html": {
    "href": "api/NetTopologySuite.Algorithm.Locate.IPointOnGeometryLocator.html",
    "title": "Interface IPointOnGeometryLocator | NetTopologySuite",
    "summary": "Interface IPointOnGeometryLocator An interface for classes which determine the Location of points in areal geometries. Namespace: NetTopologySuite.Algorithm.Locate Assembly: NetTopologySuite.dll Syntax public interface IPointOnGeometryLocator Methods | Edit this page View Source Locate(Coordinate) Determines the Location of a point in an areal Geometry. Declaration Location Locate(Coordinate p) Parameters Type Name Description Coordinate p The point to test Returns Type Description Location The location of the point in the geometry"
  },
  "api/NetTopologySuite.Algorithm.Locate.IndexedPointInAreaLocator.html": {
    "href": "api/NetTopologySuite.Algorithm.Locate.IndexedPointInAreaLocator.html",
    "title": "Class IndexedPointInAreaLocator | NetTopologySuite",
    "summary": "Class IndexedPointInAreaLocator Determines the Location of Coordinates relative to an areal geometry, using indexing for efficiency. This algorithm is suitable for use in cases where many points will be tested against a given area. The Location is computed precisely, th that points located on the geometry boundary or segments will return Boundary. IPolygonal and LinearRing geometries are supported. The index is lazy-loaded, which allows creating instances even if they are not used. Thread-safe and immutable. Inheritance object IndexedPointInAreaLocator Implements IPointOnGeometryLocator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm.Locate Assembly: NetTopologySuite.dll Syntax public class IndexedPointInAreaLocator : IPointOnGeometryLocator Constructors | Edit this page View Source IndexedPointInAreaLocator(Geometry) Creates a new locator for a given Geometry. Geometries containing IPolygonals and LinearRing geometries are supported Declaration public IndexedPointInAreaLocator(Geometry g) Parameters Type Name Description Geometry g The Geometry to locate in Methods | Edit this page View Source Locate(Coordinate) Determines the Location of a point in an areal Geometry. Declaration public Location Locate(Coordinate p) Parameters Type Name Description Coordinate p The point to test Returns Type Description Location The location of the point in the geometry Implements IPointOnGeometryLocator"
  },
  "api/NetTopologySuite.Algorithm.Locate.PointOnGeometryLocatorExtensions.html": {
    "href": "api/NetTopologySuite.Algorithm.Locate.PointOnGeometryLocatorExtensions.html",
    "title": "Class PointOnGeometryLocatorExtensions | NetTopologySuite",
    "summary": "Class PointOnGeometryLocatorExtensions Static methods for IPointOnGeometryLocator classes Inheritance object PointOnGeometryLocatorExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm.Locate Assembly: NetTopologySuite.dll Syntax public static class PointOnGeometryLocatorExtensions Methods | Edit this page View Source Intersects(IPointOnGeometryLocator, Coordinate) Convenience method to test a point for intersection with a geometry The geometry is wrapped in a IPointOnGeometryLocator class. Declaration public static bool Intersects(IPointOnGeometryLocator locator, Coordinate coordinate) Parameters Type Name Description IPointOnGeometryLocator locator The locator to use. Coordinate coordinate The coordinate to test. Returns Type Description bool true if the point is in the interior or boundary of the geometry."
  },
  "api/NetTopologySuite.Algorithm.Locate.SimplePointInAreaLocator.html": {
    "href": "api/NetTopologySuite.Algorithm.Locate.SimplePointInAreaLocator.html",
    "title": "Class SimplePointInAreaLocator | NetTopologySuite",
    "summary": "Class SimplePointInAreaLocator Computes the location of points relative to an areal Geometry, using a simple O(n) algorithm. The algorithm used reports if a point lies in the interior, exterior, or exactly on the boundary of the Geometry. Instance methods are provided to implement the interface IPointOnGeometryLocator. However, they provide no performance advantage over the class methods. This algorithm is suitable for use in cases where only a few points will be tested. If many points will be tested, IndexedPointInAreaLocator may provide better performance. Inheritance object SimplePointInAreaLocator Implements IPointOnGeometryLocator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm.Locate Assembly: NetTopologySuite.dll Syntax public class SimplePointInAreaLocator : IPointOnGeometryLocator Remarks The algorithm used is only guaranteed to return correct results for points which are not on the boundary of the Geometry. Constructors | Edit this page View Source SimplePointInAreaLocator(Geometry) Initializes a new instance of the SimplePointInAreaLocator class, using the provided areal geometry. Declaration public SimplePointInAreaLocator(Geometry geom) Parameters Type Name Description Geometry geom The areal geometry to locate in. Methods | Edit this page View Source ContainsPointInPolygon(Coordinate, Polygon) Determines whether a point lies in a Polygon. If the point lies on the polygon boundary it is considered to be inside. Declaration public static bool ContainsPointInPolygon(Coordinate p, Polygon poly) Parameters Type Name Description Coordinate p The point to test Polygon poly The areal geometry to test Returns Type Description bool true if the point lies in the polygon | Edit this page View Source IsContained(Coordinate, Geometry) Determines whether a point is contained in a Geometry, or lies on its boundary. This is a convenience method for Location.Exterior != Locate(p, geom) Declaration public static bool IsContained(Coordinate p, Geometry geom) Parameters Type Name Description Coordinate p The point to test. Geometry geom The geometry to test. Returns Type Description bool true if the point lies in or on the geometry. | Edit this page View Source Locate(Coordinate) Determines the Location of a point in an areal Geometry. The return value is one of: Interiorif the point is in the geometry interior Boundaryif the point lies exactly on the boundary Exteriorif the point is outside the geometry Declaration public Location Locate(Coordinate p) Parameters Type Name Description Coordinate p The point to test Returns Type Description Location The Location of the point in the geometry. | Edit this page View Source Locate(Coordinate, Geometry) Determines the Location of a point in an areal Geometry. The return value is one of: Interiorif the point is in the geometry interior Boundaryif the point lies exactly on the boundary Exteriorif the point is outside the geometry Declaration public static Location Locate(Coordinate p, Geometry geom) Parameters Type Name Description Coordinate p The point to test Geometry geom The areal geometry to test Returns Type Description Location The Location of the point in the geometry Implements IPointOnGeometryLocator"
  },
  "api/NetTopologySuite.Algorithm.Locate.html": {
    "href": "api/NetTopologySuite.Algorithm.Locate.html",
    "title": "Namespace NetTopologySuite.Algorithm.Locate | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Algorithm.Locate Classes to determine the topological location of points in geometries. Classes IndexedPointInAreaLocator Determines the Location of Coordinates relative to an areal geometry, using indexing for efficiency. This algorithm is suitable for use in cases where many points will be tested against a given area. The Location is computed precisely, th that points located on the geometry boundary or segments will return Boundary. IPolygonal and LinearRing geometries are supported. The index is lazy-loaded, which allows creating instances even if they are not used. Thread-safe and immutable. PointOnGeometryLocatorExtensions Static methods for IPointOnGeometryLocator classes SimplePointInAreaLocator Computes the location of points relative to an areal Geometry, using a simple O(n) algorithm. The algorithm used reports if a point lies in the interior, exterior, or exactly on the boundary of the Geometry. Instance methods are provided to implement the interface IPointOnGeometryLocator. However, they provide no performance advantage over the class methods. This algorithm is suitable for use in cases where only a few points will be tested. If many points will be tested, IndexedPointInAreaLocator may provide better performance. Interfaces IPointOnGeometryLocator An interface for classes which determine the Location of points in areal geometries."
  },
  "api/NetTopologySuite.Algorithm.Match.AreaSimilarityMeasure.html": {
    "href": "api/NetTopologySuite.Algorithm.Match.AreaSimilarityMeasure.html",
    "title": "Class AreaSimilarityMeasure | NetTopologySuite",
    "summary": "Class AreaSimilarityMeasure Measures the degree of similarity between two Geometrys using the area of intersection between the geometries. The measure is normalized to lie in the range [0, 1]. Higher measures indicate a great degree of similarity. Inheritance object AreaSimilarityMeasure Implements ISimilarityMeasure Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm.Match Assembly: NetTopologySuite.dll Syntax public class AreaSimilarityMeasure : ISimilarityMeasure Remarks NOTE: Currently experimental and incomplete. Methods | Edit this page View Source Measure(Geometry, Geometry) Computes the similarity measure between two geometries Declaration public double Measure(Geometry g1, Geometry g2) Parameters Type Name Description Geometry g1 A geometry. Geometry g2 A geometry. Returns Type Description double The value of the similarity measure, in [0.0, 1.0]. Implements ISimilarityMeasure"
  },
  "api/NetTopologySuite.Algorithm.Match.FrechetSimilarityMeasure.html": {
    "href": "api/NetTopologySuite.Algorithm.Match.FrechetSimilarityMeasure.html",
    "title": "Class FrechetSimilarityMeasure | NetTopologySuite",
    "summary": "Class FrechetSimilarityMeasure Measures the degree of similarity between two Geometrys using the Fréchet distance metric. The measure is normalized to lie in the range [0, 1]. Higher measures indicate a great degree of similarity. The measure is computed by computing the Fréchet distance between the input geometries, and then normalizing this by dividing it by the diagonal distance across the envelope of the combined geometries. Note: the input should be normalized, especially when measuring MultiPoint geometries because for the Fréchet distance the order of {@link Coordinate}s is important. Inheritance object FrechetSimilarityMeasure Implements ISimilarityMeasure Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm.Match Assembly: NetTopologySuite.dll Syntax public class FrechetSimilarityMeasure : ISimilarityMeasure Constructors | Edit this page View Source FrechetSimilarityMeasure() Creates an instance of this class Declaration public FrechetSimilarityMeasure() Methods | Edit this page View Source Measure(Geometry, Geometry) Function to measure the similarity between two Geometrys. Declaration public double Measure(Geometry g1, Geometry g2) Parameters Type Name Description Geometry g1 A geometry Geometry g2 A geometry Returns Type Description double The similarity value between two Geometrys Implements ISimilarityMeasure"
  },
  "api/NetTopologySuite.Algorithm.Match.HausdorffSimilarityMeasure.html": {
    "href": "api/NetTopologySuite.Algorithm.Match.HausdorffSimilarityMeasure.html",
    "title": "Class HausdorffSimilarityMeasure | NetTopologySuite",
    "summary": "Class HausdorffSimilarityMeasure Measures the degree of similarity between two Geometrys using the Hausdorff distance metric. Inheritance object HausdorffSimilarityMeasure Implements ISimilarityMeasure Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm.Match Assembly: NetTopologySuite.dll Syntax public class HausdorffSimilarityMeasure : ISimilarityMeasure Remarks The measure is normalized to lie in the range [0, 1]. Higher measures indicate a great degree of similarity. The measure is computed by computing the Hausdorff distance between the input geometries, and then normalizing this by dividing it by the diagonal distance across the envelope of the combined geometries. Methods | Edit this page View Source DiagonalSize(Envelope) Declaration public static double DiagonalSize(Envelope env) Parameters Type Name Description Envelope env Returns Type Description double | Edit this page View Source Measure(Geometry, Geometry) Function to measure the similarity between two Geometrys. Declaration public double Measure(Geometry g1, Geometry g2) Parameters Type Name Description Geometry g1 A geometry Geometry g2 A geometry Returns Type Description double The similarity value between two Geometrys Implements ISimilarityMeasure"
  },
  "api/NetTopologySuite.Algorithm.Match.ISimilarityMeasure.html": {
    "href": "api/NetTopologySuite.Algorithm.Match.ISimilarityMeasure.html",
    "title": "Interface ISimilarityMeasure | NetTopologySuite",
    "summary": "Interface ISimilarityMeasure An interface for classes which measures the degree of similarity between two {@link Geometry}s. Namespace: NetTopologySuite.Algorithm.Match Assembly: NetTopologySuite.dll Syntax public interface ISimilarityMeasure Remarks The computed measure lies in the range [0, 1]. Higher measures indicate a great degree of similarity. A measure of 1.0 indicates that the input geometries are identical A measure of 0.0 indicates that the geometries have essentially no similarity. The precise definition of \"identical\" and \"no similarity\" may depend on the exact algorithm being used. Methods | Edit this page View Source Measure(Geometry, Geometry) Function to measure the similarity between two Geometrys. Declaration double Measure(Geometry g1, Geometry g2) Parameters Type Name Description Geometry g1 A geometry Geometry g2 A geometry Returns Type Description double The similarity value between two Geometrys"
  },
  "api/NetTopologySuite.Algorithm.Match.SimilarityMeasureCombiner.html": {
    "href": "api/NetTopologySuite.Algorithm.Match.SimilarityMeasureCombiner.html",
    "title": "Class SimilarityMeasureCombiner | NetTopologySuite",
    "summary": "Class SimilarityMeasureCombiner Provides methods to mathematically combine ISimilarityMeasure values. Inheritance object SimilarityMeasureCombiner Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm.Match Assembly: NetTopologySuite.dll Syntax public static class SimilarityMeasureCombiner Methods | Edit this page View Source Combine(double, double) Declaration public static double Combine(double measure1, double measure2) Parameters Type Name Description double measure1 double measure2 Returns Type Description double"
  },
  "api/NetTopologySuite.Algorithm.Match.html": {
    "href": "api/NetTopologySuite.Algorithm.Match.html",
    "title": "Namespace NetTopologySuite.Algorithm.Match | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Algorithm.Match Classes to compute matching metrics between geometries. Classes AreaSimilarityMeasure Measures the degree of similarity between two Geometrys using the area of intersection between the geometries. The measure is normalized to lie in the range [0, 1]. Higher measures indicate a great degree of similarity. FrechetSimilarityMeasure Measures the degree of similarity between two Geometrys using the Fréchet distance metric. The measure is normalized to lie in the range [0, 1]. Higher measures indicate a great degree of similarity. The measure is computed by computing the Fréchet distance between the input geometries, and then normalizing this by dividing it by the diagonal distance across the envelope of the combined geometries. Note: the input should be normalized, especially when measuring MultiPoint geometries because for the Fréchet distance the order of {@link Coordinate}s is important. HausdorffSimilarityMeasure Measures the degree of similarity between two Geometrys using the Hausdorff distance metric. SimilarityMeasureCombiner Provides methods to mathematically combine ISimilarityMeasure values. Interfaces ISimilarityMeasure An interface for classes which measures the degree of similarity between two {@link Geometry}s."
  },
  "api/NetTopologySuite.Algorithm.MinimumAreaRectangle.html": {
    "href": "api/NetTopologySuite.Algorithm.MinimumAreaRectangle.html",
    "title": "Class MinimumAreaRectangle | NetTopologySuite",
    "summary": "Class MinimumAreaRectangle Computes the minimum-area rectangle enclosing a Geometry. Unlike the Envelope, the rectangle may not be axis-parallel. The first step in the algorithm is computing the convex hull of the Geometry. If the input Geometry is known to be convex, a hint can be supplied to avoid this computation. In degenerate cases the minimum enclosing geometry may be a LineString or a Point. The minimum - area enclosing rectangle does not necessarily have the minimum possible width. Use {@link MinimumDiameter} to compute this. Inheritance object MinimumAreaRectangle Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public sealed class MinimumAreaRectangle Constructors | Edit this page View Source MinimumAreaRectangle(Geometry) Compute a minimum-area rectangle for a given {@link Geometry}. Declaration public MinimumAreaRectangle(Geometry inputGeom) Parameters Type Name Description Geometry inputGeom A Geometry | Edit this page View Source MinimumAreaRectangle(Geometry, bool) Compute a minimum rectangle for a Geometry, with a hint if the geometry is convex (e.g. a convex Polygon or LinearRing, or a two-point LineString, or a Point). Declaration public MinimumAreaRectangle(Geometry inputGeom, bool isConvex) Parameters Type Name Description Geometry inputGeom A Geometry bool isConvex A flag indicating if inputGeom is convex Methods | Edit this page View Source GetMinimumRectangle(Geometry) Gets the minimum-area rectangular {@link Polygon} which encloses the input geometry. If the convex hull of the input is degenerate (a line or point) a {@link LineString} or {@link Point} is returned. Declaration public static Geometry GetMinimumRectangle(Geometry geom) Parameters Type Name Description Geometry geom A Geometry Returns Type Description Geometry The minimum rectangle enclosing the geometry See Also MinimumDiameter ConvexHull"
  },
  "api/NetTopologySuite.Algorithm.MinimumBoundingCircle.html": {
    "href": "api/NetTopologySuite.Algorithm.MinimumBoundingCircle.html",
    "title": "Class MinimumBoundingCircle | NetTopologySuite",
    "summary": "Class MinimumBoundingCircle Computes the Minimum Bounding Circle (MBC) for the points in a Geometry. The MBC is the smallest circle which cover s all the input points (this is also sometimes known as the Smallest Enclosing Circle). This is equivalent to computing the Maximum Diameter of the input point set. Inheritance object MinimumBoundingCircle Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public class MinimumBoundingCircle Remarks The computed circle can be specified in two equivalent ways, both of which are provide as output by this class: As a centre point and a radius By the set of points defining the circle. Depending on the number of points in the input and their relative positions, this set contains from 0 to 3 points. 0 or 1 points indicate an empty or trivial input point arrangement. 2 points define the diameter of the minimum bounding circle. 3 points define an inscribed triangle of the minimum bounding circle. The class can also output a Geometry which approximates the shape of the Minimum Bounding Circle (although as an approximation it is not guaranteed to cover all the input points.) The Maximum Diameter of the input point set can be computed as well. The Maximum Diameter is defined by the pair of input points with maximum distance between them. The points of the maximum diameter are two of the extremal points of the Minimum Bounding Circle. They lie on the convex hull of the input. However, that the maximum diameter is not a diameter of the Minimum Bounding Circle in the case where the MBC is defined by an inscribed triangle. Constructors | Edit this page View Source MinimumBoundingCircle(Geometry) Creates a new object for computing the minimum bounding circle for the point set defined by the vertices of the given geometry. Declaration public MinimumBoundingCircle(Geometry geom) Parameters Type Name Description Geometry geom The geometry to use to obtain the point set Methods | Edit this page View Source GetCentre() Gets the centre point of the computed Minimum Bounding Circle. Declaration public Coordinate GetCentre() Returns Type Description Coordinate | Edit this page View Source GetCircle() Gets a geometry which represents the Minimum Bounding Circle. Declaration public Geometry GetCircle() Returns Type Description Geometry A Geometry representing the Minimum Bounding Circle. Remarks If the input is degenerate (empty or a single unique point), this method will return an empty geometry or a single Point geometry. Otherwise, a Polygon will be returned which approximates the Minimum Bounding Circle. (Note that because the computed polygon is only an approximation, it may not precisely contain all the input points.) | Edit this page View Source GetDiameter() Gets a geometry representing the diameter of the computed Minimum Bounding Circle. Declaration public Geometry GetDiameter() Returns Type Description Geometry the diameter line of the Minimum Bounding Circle an empty line if the input is empty a Point if the input is a point | Edit this page View Source GetExtremalPoints() Gets the extremal points which define the computed Minimum Bounding Circle. There may be zero, one, two or three of these points, depending on the number of points in the input and the geometry of those points. Declaration public Coordinate[] GetExtremalPoints() Returns Type Description Coordinate[] The points defining the Minimum Bounding Circle | Edit this page View Source GetFarthestPoints() Gets a geometry representing a line between the two farthest points in the input. These points are two of the extremal points of the Minimum Bounding Circle They lie on the convex hull of the input. Declaration [Obsolete(\"Use GetMaximumDiameter()\")] public Geometry GetFarthestPoints() Returns Type Description Geometry A LineString between the two farthest points of the input | Edit this page View Source GetMaximumDiameter() Gets a geometry representing the maximum diameter of the input. The maximum diameter is the longest line segment between any two points of the input. The points are two of the extremal points of the Minimum Bounding Circle. They lie on the convex hull of the input. Declaration public Geometry GetMaximumDiameter() Returns Type Description Geometry The result is | Edit this page View Source GetRadius() Gets the radius of the computed Minimum Bounding Circle. Declaration public double GetRadius() Returns Type Description double The radius of the Minimum Bounding Circle"
  },
  "api/NetTopologySuite.Algorithm.MinimumDiameter.html": {
    "href": "api/NetTopologySuite.Algorithm.MinimumDiameter.html",
    "title": "Class MinimumDiameter | NetTopologySuite",
    "summary": "Class MinimumDiameter Computes the minimum diameter of a Geometry. Inheritance object MinimumDiameter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public class MinimumDiameter Remarks The minimum diameter is defined to be the width of the smallest band that contains the geometry, where a band is a strip of the plane defined by two parallel lines. This can be thought of as the smallest hole that the point can be moved through, with a single rotation. The first step in the algorithm is computing the convex hull of the Geometry. If the input Geometry is known to be convex, a hint can be supplied to avoid this computation. This class can also be used to compute a line segment representing the minimum diameter the supporting line segment of the minimum diameter a minimum-width rectangle of the input geometry. The rectangle has width equal to the minimum diameter, and has one side parallel to the supporting segment. In degenerate cases the rectangle may be a LineString or a Point. (Note that this may not be the enclosing rectangle with minimum area; use MinimumAreaRectangle to compute this.) Constructors | Edit this page View Source MinimumDiameter(Geometry) Compute a minimum diameter for a given Geometry. Declaration public MinimumDiameter(Geometry inputGeom) Parameters Type Name Description Geometry inputGeom a Geometry. | Edit this page View Source MinimumDiameter(Geometry, bool) Compute a minimum diameter for a giver Geometry, with a hint if the Geometry is convex (e.g. a convex Polygon or LinearRing, or a two-point LineString, or a Point). Declaration public MinimumDiameter(Geometry inputGeom, bool isConvex) Parameters Type Name Description Geometry inputGeom a Geometry which is convex. bool isConvex true if the input point is convex. Properties | Edit this page View Source Diameter Gets a LineString which is a minimum diameter. Declaration public LineString Diameter { get; } Property Value Type Description LineString A LineString which is a minimum diameter. | Edit this page View Source Length Gets the length of the minimum diameter of the input Geometry. Declaration public double Length { get; } Property Value Type Description double The length of the minimum diameter. | Edit this page View Source SupportingSegment Gets the segment forming the base of the minimum diameter. Declaration public LineString SupportingSegment { get; } Property Value Type Description LineString The segment forming the base of the minimum diameter. | Edit this page View Source WidthCoordinate Gets the Coordinate forming one end of the minimum diameter. Declaration public Coordinate WidthCoordinate { get; } Property Value Type Description Coordinate A coordinate forming one end of the minimum diameter. Methods | Edit this page View Source GetMinimumDiameter(Geometry) Gets the minimum diameter enclosing a geometry. Declaration public static Geometry GetMinimumDiameter(Geometry geom) Parameters Type Name Description Geometry geom The geometry Returns Type Description Geometry The length of the minimum diameter of the geometry | Edit this page View Source GetMinimumRectangle() Gets the rectangular Polygon which encloses the input geometry and is based on the minimum diameter supporting segment. Declaration public Geometry GetMinimumRectangle() Returns Type Description Geometry A rectangle enclosing the input (or a line or point if degenerate) Remarks The rectangle has width equal to the minimum diameter, and a longer length. If the convex hull of the input is degenerate (a line or point) a LineString or Point is returned. This is not necessarily the enclosing rectangle with minimum area. See Also MinimumAreaRectangle | Edit this page View Source GetMinimumRectangle(Geometry) Gets the minimum-width rectangular Polygon which encloses the input geometry and is based along the supporting segment. The rectangle has width equal to the minimum diameter, and a longer length. If the convex hull of the input is degenerate (a line or point) a LineString or Point is returned. This is not necessarily the rectangle with minimum area. Use MinimumAreaRectangle to compute this. Declaration public static Geometry GetMinimumRectangle(Geometry geom) Parameters Type Name Description Geometry geom The geometry Returns Type Description Geometry The minimum-width rectangle enclosing the geometry See Also MinimumAreaRectangle See Also ConvexHull MinimumAreaRectangle"
  },
  "api/NetTopologySuite.Algorithm.NotRepresentableException.html": {
    "href": "api/NetTopologySuite.Algorithm.NotRepresentableException.html",
    "title": "Class NotRepresentableException | NetTopologySuite",
    "summary": "Class NotRepresentableException Inheritance object Exception ApplicationException NotRepresentableException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public class NotRepresentableException : ApplicationException, ISerializable Constructors | Edit this page View Source NotRepresentableException() Declaration public NotRepresentableException() Implements ISerializable"
  },
  "api/NetTopologySuite.Algorithm.Orientation.html": {
    "href": "api/NetTopologySuite.Algorithm.Orientation.html",
    "title": "Class Orientation | NetTopologySuite",
    "summary": "Class Orientation Functions to compute the orientation of basic geometric structures including point triplets(triangles) and rings. Orientation is a fundamental property of planar geometries (and more generally geometry on two-dimensional manifolds). Determining triangle orientation is notoriously subject to numerical precision errors in the case of collinear or nearly collinear points. NTS uses extended-precision arithmetic to increase the robustness of the computation. Inheritance object Orientation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public static class Orientation Methods | Edit this page View Source Index(Coordinate, Coordinate, Coordinate) Returns the orientation index of the direction of the point q relative to a directed infinite line specified by p1->p2. The index indicates whether the point lies to the Left or Right of the line, or lies on it Collinear. The index also indicates the orientation of the triangle formed by the three points (CounterClockwise, Clockwise, or Straight ) Declaration public static OrientationIndex Index(Coordinate p1, Coordinate p2, Coordinate q) Parameters Type Name Description Coordinate p1 The origin point of the line vector Coordinate p2 The final point of the line vector Coordinate q The point to compute the direction to Returns Type Description OrientationIndex The OrientationIndex of q in regard to the vector p1->p2 Value Description Collinear, Straight q is collinear with p1->p2 Clockwise, Right q is clockwise (right) from p1->p2 CounterClockwise, Left q is counter-clockwise (left) from p1->p2 | Edit this page View Source IsCCW(CoordinateSequence) Tests if a ring defined by a CoordinateSequence is oriented counter-clockwise. The list of points is assumed to have the first and last points equal. This handles coordinate lists which contain repeated points. This handles rings which contain collapsed segments (in particular, along the top of the ring). This algorithm is guaranteed to work with valid rings. It also works with \"mildly invalid\" rings which contain collapsed(coincident) flat segments along the top of the ring. If the ring is \"more\" invalid (e.g.self-crosses or touches), the computed result may not be correct. Declaration public static bool IsCCW(CoordinateSequence ring) Parameters Type Name Description CoordinateSequence ring A CoordinateSequences forming a ring (with first and last point identical). Returns Type Description bool true if the ring is oriented counter-clockwise. | Edit this page View Source IsCCW(Coordinate[]) Tests if a ring defined by an array of Coordinates is oriented counter-clockwise. The list of points is assumed to have the first and last points equal. This handles coordinate lists which contain repeated points. This handles rings which contain collapsed segments (in particular, along the top of the ring). This algorithm is guaranteed to work with valid rings. It also works with \"mildly invalid\" rings which contain collapsed(coincident) flat segments along the top of the ring. If the ring is \"more\" invalid (e.g.self-crosses or touches), the computed result may not be correct. Declaration public static bool IsCCW(Coordinate[] ring) Parameters Type Name Description Coordinate[] ring An array of Coordinates forming a ring (with first and last point identical) Returns Type Description bool true if the ring is oriented counter-clockwise. | Edit this page View Source IsCCWArea(CoordinateSequence) Tests if a ring defined by a CoordinateSequence is oriented counter-clockwise, using the signed area of the ring. The list of points is assumed to have the first and last points equal. This handles coordinate lists which contain repeated points. This handles rings which contain collapsed segments (in particular, along the top of the ring). This handles rings which are invalid due to self-intersection This algorithm is guaranteed to work with valid rings. For invalid rings (containing self-intersections), the algorithm determines the orientation of the largest enclosed area (including overlaps). This provides a more useful result in some situations, such as buffering. However, this approach may be less accurate in the case of rings with almost zero area. (Note that the orientation of rings with zero area is essentially undefined, and hence non-deterministic.) Declaration public static bool IsCCWArea(CoordinateSequence ring) Parameters Type Name Description CoordinateSequence ring An array of Coordinates forming a ring (with first and last point identical) Returns Type Description bool true if the ring is oriented counter-clockwise. | Edit this page View Source IsCCWArea(Coordinate[]) Tests if a ring defined by an array of Coordinates is oriented counter-clockwise, using the signed area of the ring. The list of points is assumed to have the first and last points equal. This handles coordinate lists which contain repeated points. This handles rings which contain collapsed segments (in particular, along the top of the ring). This handles rings which are invalid due to self-intersection This algorithm is guaranteed to work with valid rings. For invalid rings (containing self-intersections), the algorithm determines the orientation of the largest enclosed area (including overlaps). This provides a more useful result in some situations, such as buffering. However, this approach may be less accurate in the case of rings with almost zero area. (Note that the orientation of rings with zero area is essentially undefined, and hence non-deterministic.) Declaration public static bool IsCCWArea(Coordinate[] ring) Parameters Type Name Description Coordinate[] ring An array of Coordinates forming a ring (with first and last point identical) Returns Type Description bool true if the ring is oriented counter-clockwise. | Edit this page View Source ReOrient(OrientationIndex) Re-orients an orientation. Declaration public static OrientationIndex ReOrient(OrientationIndex orientation) Parameters Type Name Description OrientationIndex orientation The orientation Returns Type Description OrientationIndex"
  },
  "api/NetTopologySuite.Algorithm.OrientationIndex.html": {
    "href": "api/NetTopologySuite.Algorithm.OrientationIndex.html",
    "title": "Enum OrientationIndex | NetTopologySuite",
    "summary": "Enum OrientationIndex Angle orientation Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public enum OrientationIndex Fields Name Description Clockwise A value that indicates an orientation of clockwise or a right turn. Collinear A value that indicates an orientation of collinear, or no turn (straight) CounterClockwise A value that indicates an orientation of counterclockwise, or a left turn. Left A value that indicates an orientation of counterclockwise, or a left turn. None A value that indicates an orientation of collinear, or no turn (straight) Right A value that indicates an orientation of clockwise or a right turn. Straight A value that indicates an orientation of collinear, or no turn (straight)"
  },
  "api/NetTopologySuite.Algorithm.PointLocation.html": {
    "href": "api/NetTopologySuite.Algorithm.PointLocation.html",
    "title": "Class PointLocation | NetTopologySuite",
    "summary": "Class PointLocation Functions for locating points within basic geometric structures such as lines and rings. Inheritance object PointLocation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public static class PointLocation Methods | Edit this page View Source IsInRing(Coordinate, CoordinateSequence) Tests whether a point lies inside or on a ring. The ring may be oriented in either direction. A point lying exactly on the ring boundary is considered to be inside the ring. This method does not first check the point against the envelope of the ring. Declaration public static bool IsInRing(Coordinate p, CoordinateSequence ring) Parameters Type Name Description Coordinate p The point to check for ring inclusion CoordinateSequence ring A CoordinateSequence representing the ring (which must have first point identical to last point) Returns Type Description bool true if p is inside ring | Edit this page View Source IsInRing(Coordinate, Coordinate[]) Tests whether a point lies inside or on a ring. The ring may be oriented in either direction. A point lying exactly on the ring boundary is considered to be inside the ring. This method does not first check the point against the envelope of the ring. Declaration public static bool IsInRing(Coordinate p, Coordinate[] ring) Parameters Type Name Description Coordinate p The point to check for ring inclusion Coordinate[] ring An array of coordinates representing the ring (which must have first point identical to last point) Returns Type Description bool true if p is inside ring See Also LocateInRing(Coordinate, Coordinate[]) | Edit this page View Source IsOnLine(Coordinate, CoordinateSequence) Tests whether a point lies on the line defined by a list of coordinates. Declaration public static bool IsOnLine(Coordinate p, CoordinateSequence line) Parameters Type Name Description Coordinate p The point to test CoordinateSequence line The line coordinates Returns Type Description bool true if the point is a vertex of the line or lies in the interior of a line segment in the line | Edit this page View Source IsOnLine(Coordinate, Coordinate[]) Tests whether a point lies on the line defined by a list of coordinates. Declaration public static bool IsOnLine(Coordinate p, Coordinate[] line) Parameters Type Name Description Coordinate p The point to test Coordinate[] line The line coordinates Returns Type Description bool true if the point is a vertex of the line or lies in the interior of a line segment in the line | Edit this page View Source IsOnSegment(Coordinate, Coordinate, Coordinate) Tests whether a point lies on a line segment. Declaration public static bool IsOnSegment(Coordinate p, Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p The point to test Coordinate p0 A point of the line segment Coordinate p1 A point of the line segment Returns Type Description bool true if the point lies on the line segment | Edit this page View Source LocateInRing(Coordinate, CoordinateSequence) Determines whether a point lies in the interior, on the boundary, or in the exterior of a ring.The ring may be oriented in either direction. This method does not first check the point against the envelope of the ring. Declaration public static Location LocateInRing(Coordinate p, CoordinateSequence ring) Parameters Type Name Description Coordinate p The point to check for ring inclusion CoordinateSequence ring A CoordinateSequence representing the ring (which must have first point identical to last point) Returns Type Description Location | Edit this page View Source LocateInRing(Coordinate, Coordinate[]) Determines whether a point lies in the interior, on the boundary, or in the exterior of a ring.The ring may be oriented in either direction. This method does not first check the point against the envelope of the ring. Declaration public static Location LocateInRing(Coordinate p, Coordinate[] ring) Parameters Type Name Description Coordinate p The point to check for ring inclusion Coordinate[] ring A CoordinateSequence representing the ring (which must have first point identical to last point) Returns Type Description Location the Location of p relative to the ring"
  },
  "api/NetTopologySuite.Algorithm.PointLocator.html": {
    "href": "api/NetTopologySuite.Algorithm.PointLocator.html",
    "title": "Class PointLocator | NetTopologySuite",
    "summary": "Class PointLocator Computes the topological relationship (Location) of a single point to a Geometry. Inheritance object PointLocator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public class PointLocator Remarks A IBoundaryNodeRule may be specified to control the evaluation of whether the point lies on the boundary or not The default rule is to use the SFS Boundary Determination Rule Notes: Instances of this class are not reentrant. Constructors | Edit this page View Source PointLocator() Initializes a new instance of the PointLocator class. The default boundary rule is EndpointBoundaryRule. Declaration public PointLocator() | Edit this page View Source PointLocator(IBoundaryNodeRule) Initializes a new instance of the PointLocator class using the provided boundaryRule. Declaration public PointLocator(IBoundaryNodeRule boundaryRule) Parameters Type Name Description IBoundaryNodeRule boundaryRule The boundary rule to use. Methods | Edit this page View Source Intersects(Coordinate, Geometry) Convenience method to test a point for intersection with a Geometry Declaration public bool Intersects(Coordinate p, Geometry geom) Parameters Type Name Description Coordinate p The coordinate to test. Geometry geom The Geometry to test. Returns Type Description bool true if the point is in the interior or boundary of the Geometry. | Edit this page View Source Locate(Coordinate, Geometry) Computes the topological relationship ({Location}) of a single point to a Geometry. It handles both single-element and multi-element Geometries. The algorithm for multi-part Geometries takes into account the boundaryDetermination rule. Declaration public Location Locate(Coordinate p, Geometry geom) Parameters Type Name Description Coordinate p Geometry geom Returns Type Description Location The Location of the point relative to the input Geometry."
  },
  "api/NetTopologySuite.Algorithm.RayCrossingCounter.html": {
    "href": "api/NetTopologySuite.Algorithm.RayCrossingCounter.html",
    "title": "Class RayCrossingCounter | NetTopologySuite",
    "summary": "Class RayCrossingCounter Counts the number of segments crossed by a horizontal ray extending to the right from a given point, in an incremental fashion. This can be used to determine whether a point lies in a IPolygonal geometry. The class determines the situation where the point lies exactly on a segment. When being used for Point-In-Polygon determination, this case allows short-circuiting the evaluation. Inheritance object RayCrossingCounter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public class RayCrossingCounter Remarks This class handles polygonal geometries with any number of shells and holes. The orientation of the shell and hole rings is unimportant. In order to compute a correct location for a given polygonal geometry, it is essential that all segments are counted which touch the ray lie in in any ring which may contain the point The only exception is when the point-on-segment situation is detected, in which case no further processing is required. The implication of the above rule is that segments which can be a priori determined to not touch the ray (i.e. by a test of their bounding box or Y-extent) do not need to be counted. This allows for optimization by indexing. This implementation uses the extended-precision orientation test, to provide maximum robustness and consistency within other algorithms. Constructors | Edit this page View Source RayCrossingCounter(Coordinate) Creates an instance of this class Declaration public RayCrossingCounter(Coordinate p) Parameters Type Name Description Coordinate p A coordinate. Properties | Edit this page View Source Count Gets the count of crossings. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source IsOnSegment Reports whether the point lies exactly on one of the supplied segments. Declaration public bool IsOnSegment { get; } Property Value Type Description bool Remarks This method may be called at any time as segments are processed. If the result of this method is true, no further segments need be supplied, since the result will never change again. | Edit this page View Source IsPointInPolygon Tests whether the point lies in or on the ring, polygon or multipolygon from which the processed segments were provided. Declaration public bool IsPointInPolygon { get; } Property Value Type Description bool Remarks This property only determines the correct location if all relevant segments have been processed | Edit this page View Source Location Gets the Location of the point relative to the ring, polygon or multipolygon from which the processed segments were provided. Declaration public Location Location { get; } Property Value Type Description Location Remarks This property only determines the correct location if all relevant segments have been processed. Methods | Edit this page View Source CountSegment(Coordinate, Coordinate) Counts a segment Declaration public void CountSegment(Coordinate p1, Coordinate p2) Parameters Type Name Description Coordinate p1 An endpoint of the segment Coordinate p2 Another endpoint of the segment | Edit this page View Source LocatePointInRing(Coordinate, CoordinateSequence) Determines the Location of a point in a ring. Declaration public static Location LocatePointInRing(Coordinate p, CoordinateSequence ring) Parameters Type Name Description Coordinate p The point to test CoordinateSequence ring A coordinate sequence forming a ring Returns Type Description Location The location of the point in the ring | Edit this page View Source LocatePointInRing(Coordinate, Coordinate[]) Determines the Location of a point in a ring. This method is an exemplar of how to use this class. Declaration public static Location LocatePointInRing(Coordinate p, Coordinate[] ring) Parameters Type Name Description Coordinate p The point to test Coordinate[] ring An array of Coordinates forming a ring Returns Type Description Location The location of the point in the ring"
  },
  "api/NetTopologySuite.Algorithm.RectangleLineIntersector.html": {
    "href": "api/NetTopologySuite.Algorithm.RectangleLineIntersector.html",
    "title": "Class RectangleLineIntersector | NetTopologySuite",
    "summary": "Class RectangleLineIntersector Computes whether a rectangle intersects line segments. Inheritance object RectangleLineIntersector Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public class RectangleLineIntersector Remarks Rectangles contain a large amount of inherent symmetry (or to put it another way, although they contain four coordinates they only actually contain 4 ordinates worth of information). The algorithm used takes advantage of the symmetry of the geometric situation to optimize performance by minimizing the number of line intersection tests. Constructors | Edit this page View Source RectangleLineIntersector(Envelope) Creates a new intersector for the given query rectangle, specified as an Envelope. Declaration public RectangleLineIntersector(Envelope rectEnv) Parameters Type Name Description Envelope rectEnv The query rectangle, specified as an Envelope Methods | Edit this page View Source Intersects(Coordinate, Coordinate) Tests whether the query rectangle intersects a given line segment. Declaration public bool Intersects(Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p0 The first endpoint of the segment Coordinate p1 The second endpoint of the segment Returns Type Description bool true if the rectangle intersects the segment"
  },
  "api/NetTopologySuite.Algorithm.RobustDeterminant.html": {
    "href": "api/NetTopologySuite.Algorithm.RobustDeterminant.html",
    "title": "Class RobustDeterminant | NetTopologySuite",
    "summary": "Class RobustDeterminant Implements an algorithm to compute the sign of a 2x2 determinant for double precision values robustly. It is a direct translation of code developed by Olivier Devillers. The original code carries the following copyright notice: Author : Olivier Devillers Olivier.Devillers@sophia.inria.fr http:/www.inria.fr:/prisme/personnel/devillers/anglais/determinant.html Olivier Devillers has allowed the code to be distributed under the LGPL (2012-02-16) saying \"It is ok for LGPL distribution.\" Copyright (c) 1995 by INRIA Prisme Project BP 93 06902 Sophia Antipolis Cedex, France. All rights reserved Inheritance object RobustDeterminant Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public class RobustDeterminant Methods | Edit this page View Source OrientationIndex(Coordinate, Coordinate, Coordinate) Returns the index of the direction of the point q relative to a vector specified by p1-p2. Declaration public static int OrientationIndex(Coordinate p1, Coordinate p2, Coordinate q) Parameters Type Name Description Coordinate p1 The origin point of the vector Coordinate p2 The final point of the vector Coordinate q the point to compute the direction to Returns Type Description int 1 if q is counter-clockwise (left) from p1-p2 -1 if q is clockwise (right) from p1-p2 0 if q is collinear with p1-p2 | Edit this page View Source SignOfDet2x2(double, double, double, double) Computes the sign of the determinant of the 2x2 matrix with the given entries, in a robust way. Declaration public static int SignOfDet2x2(double x1, double y1, double x2, double y2) Parameters Type Name Description double x1 double y1 double x2 double y2 Returns Type Description int -1 if the determinant is negative, 1 if the determinant is positive, 0 if the determinant is null."
  },
  "api/NetTopologySuite.Algorithm.RobustLineIntersector.html": {
    "href": "api/NetTopologySuite.Algorithm.RobustLineIntersector.html",
    "title": "Class RobustLineIntersector | NetTopologySuite",
    "summary": "Class RobustLineIntersector A robust version of LineIntersector. Inheritance object LineIntersector RobustLineIntersector Inherited Members LineIntersector.NoIntersection LineIntersector.PointIntersection LineIntersector.CollinearIntersection LineIntersector.ComputeEdgeDistance(Coordinate, Coordinate, Coordinate) LineIntersector.NonRobustComputeEdgeDistance(Coordinate, Coordinate, Coordinate) LineIntersector.Result LineIntersector.InputLines LineIntersector.IntersectionPoint LineIntersector.IntersectionLineIndex LineIntersector.Pa LineIntersector.Pb LineIntersector.PrecisionModel LineIntersector.GetEndpoint(int, int) LineIntersector.IsCollinear LineIntersector.ComputeIntersection(Coordinate, Coordinate, Coordinate, Coordinate) LineIntersector.ToString() LineIntersector.IsEndPoint LineIntersector.HasIntersection LineIntersector.IntersectionNum LineIntersector.GetIntersection(int) LineIntersector.ComputeIntLineIndex() LineIntersector.IsIntersection(Coordinate) LineIntersector.IsInteriorIntersection() LineIntersector.IsInteriorIntersection(int) LineIntersector.IsProper LineIntersector.GetIntersectionAlongSegment(int, int) LineIntersector.GetIndexAlongSegment(int, int) LineIntersector.ComputeIntLineIndex(int) LineIntersector.GetEdgeDistance(int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Algorithm Assembly: NetTopologySuite.dll Syntax public class RobustLineIntersector : LineIntersector Constructors | Edit this page View Source RobustLineIntersector() Creates an instance of this class. No ElevationModel is assigned Declaration public RobustLineIntersector() | Edit this page View Source RobustLineIntersector(ElevationModel) Creates an instance of this class assigning the provided ElevationModel. Declaration public RobustLineIntersector(ElevationModel elevationModel) Parameters Type Name Description ElevationModel elevationModel Properties | Edit this page View Source ElevationModel Gets or sets a value indicating the elevation model to use when z-ordinate is not known Declaration public ElevationModel ElevationModel { get; } Property Value Type Description ElevationModel Methods | Edit this page View Source ComputeIntersect(Coordinate, Coordinate, Coordinate, Coordinate) Computes the intersection of two line segments, one defined by p1 and p2, the other by q1 and q2. Declaration public override int ComputeIntersect(Coordinate p1, Coordinate p2, Coordinate q1, Coordinate q2) Parameters Type Name Description Coordinate p1 The 1st point of the 1st segment Coordinate p2 The 2nd point of the 1st segment Coordinate q1 The 1st point of the 2nd segment Coordinate q2 The 2nd point of the 2nd segment Returns Type Description int Overrides LineIntersector.ComputeIntersect(Coordinate, Coordinate, Coordinate, Coordinate) Remarks Don't use this function directly, it is not meant for public use. Please call ComputeIntersection(Coordinate, Coordinate, Coordinate, Coordinate) and test HasIntersection or IsCollinear along with IsProper and IsEndPoint. | Edit this page View Source ComputeIntersection(Coordinate, Coordinate, Coordinate) Declaration public override void ComputeIntersection(Coordinate p, Coordinate p1, Coordinate p2) Parameters Type Name Description Coordinate p Coordinate p1 Coordinate p2 Overrides LineIntersector.ComputeIntersection(Coordinate, Coordinate, Coordinate)"
  },
  "api/NetTopologySuite.Algorithm.html": {
    "href": "api/NetTopologySuite.Algorithm.html",
    "title": "Namespace NetTopologySuite.Algorithm | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Algorithm Contains classes and interfaces implementing fundamental computational geometry algorithms. Robustness Geometrical algorithms involve a combination of combinatorial and numerical computation. As with all numerical computation using finite-precision numbers, the algorithms chosen are susceptible to problems of robustness. A robustness problem occurs when a numerical calculation produces an incorrect answer for some inputs due to round-off errors. Robustness problems are especially serious in geometric computation, since they can result in errors during topology building. There are many approaches to dealing with the problem of robustness in geometrical computation. Not surprisingly, most robust algorithms are substantially more complex and less performant than the non-robust versions. Fortunately, NTS is sensitive to robustness problems in only a few key functions (such as line intersection and the point-in-polygon test). There are efficient robust algorithms available for these functions, and these algorithms are implemented in NTS. Computational Performance Runtime performance is an important consideration for a production-quality implementation of geometric algorithms. The most computationally intensive algorithm used in NTS is intersection detection. NTS methods need to determine both all intersection between the line segments in a single Geometry (self-intersection) and all intersections between the line segments of two different Geometries. The obvious naive algorithm for intersection detection (comparing every segment with every other) has unacceptably slow performance. There is a large literature of faster algorithms for intersection detection. Unfortunately, many of them involve substantial code complexity. NTS tries to balance code simplicity with performance gains. It uses some simple techniques to produce substantial performance gains for common types of input data. Package Specification Java Topology Suite Technical Specifications OpenGIS Simple Features Specification for SQL Classes AngleUtility Utility functions for working with angles. Unless otherwise noted, methods in this class express angles in radians. Area Functions for computing area. BoundaryNodeRules Provides access to static instances of common IBoundaryNodeRules. CGAlgorithms3D Basic computational geometry algorithms for geometry and coordinates defined in 3-dimensional Cartesian space. CGAlgorithmsDD Implements basic computational geometry algorithms using DD arithmetic. Centroid Computes the centroid of a Geometry of any dimension. For collections the centroid is computed for the collection of non-empty elements of highest dimension. The centroid of an empty geometry is null ConvexHull Computes the convex hull of a Geometry. The convex hull is the smallest convex Geometry that contains all the points in the input Geometry. Uses the Graham Scan algorithm. Incorporates heuristics to optimize checking for degenerate results, and to reduce the number of points processed for large inputs. DistanceComputer Functions to compute distance between basic geometric structures. ElevationModel A base elevation model class. ElevationModels Extension methods to work with ElevationModels. HCoordinate Represents a homogeneous coordinate in a 2-D coordinate space. In NTS HCoordinates are used as a clean way of computing intersections between line segments. InteriorPoint Computes an interior point of a Geometry. An interior point is guaranteed to lie in the interior of the Geometry, if it possible to calculate such a point exactly. For collections the interior point is computed for the collection of non-empty elements of highest dimension. Otherwise, the point may lie on the boundary of the geometry. The interior point of an empty geometry is POINT EMPTY. Algorithm The point is chosen to be \"close to the center\" of the geometry. The location depends on the dimension of the input: Dimension 2the interior point is constructed in the middle of the longest interior segment of a line bisecting the area. Dimension 1the interior point is the interior or boundary vertex closest to the centroid. Dimension 0the point is the point closest to the centroid. Centroid MaximumInscribedCircle LargestEmptyCircle InteriorPointArea Computes a point in the interior of an areal geometry. The point will lie in the geometry interior in all except certain pathological cases. InteriorPointLine Computes a point in the interior of an linear point. Algorithm: Find an interior vertex which is closest to the centroid of the linestring. If there is no interior vertex, find the endpoint which is closest to the centroid. InteriorPointPoint Computes a point in the interior of an point point. Algorithm: Find a point which is closest to the centroid of the point. IntersectionComputer Functions to compute intersection points between lines and line segments. In general it is not possible to compute the intersection point of two lines exactly, due to numerical roundoff. This is particularly true when the lines are nearly parallel. These routines uses numerical conditioning on the input values to ensure that the computed value is very close to the correct value. The Z-ordinate is ignored, and not populated. Length Functions for computing length. LineIntersector A LineIntersector is an algorithm that can both test whether two line segments intersect and compute the intersection point(s) if they do. There are three possible outcomes when determining whether two line segments intersect: NoIntersection - the segments do not intersect PointIntersection - the segments intersect in a single point CollinearIntersection - the segments are collinear and they intersect in a line segment For segments which intersect in a single point, the point may be either an endpoint or in the interior of each segment. If the point lies in the interior of both segments, this is termed a proper intersection. The property IsProper test for this situation. The intersection point(s) may be computed in a precise or non-precise manner. Computing an intersection point precisely involves rounding it via a supplied PrecisionModel. LineIntersectors do not perform an initial envelope intersection test to determine if the segments are disjoint. This is because this class is likely to be used in a context where envelope overlap is already known to occur (or be likely). MinimumAreaRectangle Computes the minimum-area rectangle enclosing a Geometry. Unlike the Envelope, the rectangle may not be axis-parallel. The first step in the algorithm is computing the convex hull of the Geometry. If the input Geometry is known to be convex, a hint can be supplied to avoid this computation. In degenerate cases the minimum enclosing geometry may be a LineString or a Point. The minimum - area enclosing rectangle does not necessarily have the minimum possible width. Use {@link MinimumDiameter} to compute this. MinimumBoundingCircle Computes the Minimum Bounding Circle (MBC) for the points in a Geometry. The MBC is the smallest circle which cover s all the input points (this is also sometimes known as the Smallest Enclosing Circle). This is equivalent to computing the Maximum Diameter of the input point set. MinimumDiameter Computes the minimum diameter of a Geometry. NotRepresentableException Orientation Functions to compute the orientation of basic geometric structures including point triplets(triangles) and rings. Orientation is a fundamental property of planar geometries (and more generally geometry on two-dimensional manifolds). Determining triangle orientation is notoriously subject to numerical precision errors in the case of collinear or nearly collinear points. NTS uses extended-precision arithmetic to increase the robustness of the computation. PointLocation Functions for locating points within basic geometric structures such as lines and rings. PointLocator Computes the topological relationship (Location) of a single point to a Geometry. RayCrossingCounter Counts the number of segments crossed by a horizontal ray extending to the right from a given point, in an incremental fashion. This can be used to determine whether a point lies in a IPolygonal geometry. The class determines the situation where the point lies exactly on a segment. When being used for Point-In-Polygon determination, this case allows short-circuiting the evaluation. RectangleLineIntersector Computes whether a rectangle intersects line segments. RobustDeterminant Implements an algorithm to compute the sign of a 2x2 determinant for double precision values robustly. It is a direct translation of code developed by Olivier Devillers. The original code carries the following copyright notice: Author : Olivier Devillers Olivier.Devillers@sophia.inria.fr http:/www.inria.fr:/prisme/personnel/devillers/anglais/determinant.html Olivier Devillers has allowed the code to be distributed under the LGPL (2012-02-16) saying \"It is ok for LGPL distribution.\" Copyright (c) 1995 by INRIA Prisme Project BP 93 06902 Sophia Antipolis Cedex, France. All rights reserved RobustLineIntersector A robust version of LineIntersector. Interfaces IBoundaryNodeRule An interface for rules which determine whether node points which are in boundaries of ILineal geometry components are in the boundary of the parent geometry collection. The SFS specifies a single kind of boundary node rule, the BoundaryNodeRules.Mod2BoundaryNodeRule rule. However, other kinds of Boundary Node Rules are appropriate in specific situations (for instance, linear network topology usually follows the BoundaryNodeRules.EndPointBoundaryNodeRule.) Some JTS operations (such as RelateOp, BoundaryOp and IsSimpleOp) allow the BoundaryNodeRule to be specified, and respect the supplied rule when computing the results of the operation. An example use case for a non-SFS-standard Boundary Node Rule is that of checking that a set of LineStrings have valid linear network topology, when turn-arounds are represented as closed rings. In this situation, the entry road to the turn-around is only valid when it touches the turn-around ring at the single (common) endpoint. This is equivalent to requiring the set of LineString s to be simple under the BoundaryNodeRules.EndPointBoundaryNodeRule. The SFS-standard BoundaryNodeRules.Mod2BoundaryNodeRule is not sufficient to perform this test, since it states that closed rings have no boundary points. This interface and its subclasses follow the Strategy design pattern. IPointInAreaLocator An interface for classes which determine the Location of points in a Geometry Enums OrientationIndex Angle orientation Delegates ElevationModels.CoordinateSequenceToXYAndZ Method signature to extract xy- and z-ordinate values from a coordinate sequence"
  },
  "api/NetTopologySuite.Coverage.CoverageGapFinder.html": {
    "href": "api/NetTopologySuite.Coverage.CoverageGapFinder.html",
    "title": "Class CoverageGapFinder | NetTopologySuite",
    "summary": "Class CoverageGapFinder Finds gaps in a polygonal coverage. Gaps are holes in the coverage which are narrower than a given width. The coverage should be valid according to {@link CoverageValidator}. If this is not the case, some gaps may not be reported, or the invocation may fail. This is a more accurate way of identifying gaps than using {@link CoverageValidator#setGapWidth(double)}. Gaps which separate the coverage into two disjoint regions are not detected. Gores are not identified as gaps.> Inheritance object CoverageGapFinder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Coverage Assembly: NetTopologySuite.dll Syntax public class CoverageGapFinder Constructors | Edit this page View Source CoverageGapFinder(Geometry[]) Creates a new polygonal coverage gap finder Declaration public CoverageGapFinder(Geometry[] coverage) Parameters Type Name Description Geometry[] coverage A set of polygons forming a polygonal coverage Methods | Edit this page View Source FindGaps(Geometry[], double) Finds gaps in a polygonal coverage. Returns lines indicating the locations of the gaps. Declaration public static Geometry FindGaps(Geometry[] coverage, double gapWidth) Parameters Type Name Description Geometry[] coverage A set of polygons forming a polygonal coverage double gapWidth The maximum width of gap to detect Returns Type Description Geometry A geometry indicating the locations of gaps (which is empty if no gaps were found), or null if the coverage was empty | Edit this page View Source FindGaps(double) Finds gaps in the coverage. Returns lines indicating the locations of the gaps. Declaration public Geometry FindGaps(double gapWidth) Parameters Type Name Description double gapWidth The maximum width of gap to detect Returns Type Description Geometry A geometry indicating the locations of gaps (which is empty if no gaps were found), or null if the coverage was empty"
  },
  "api/NetTopologySuite.Coverage.CoveragePolygonValidator.html": {
    "href": "api/NetTopologySuite.Coverage.CoveragePolygonValidator.html",
    "title": "Class CoveragePolygonValidator | NetTopologySuite",
    "summary": "Class CoveragePolygonValidator Validates that a polygon forms a valid polygonal coverage with the set of polygons adjacent to it. If the polygon is coverage-valid an empty { @link LineString} is returned. Otherwise, the result is a linear geometry containing the polygon boundary linework causing the invalidity. A polygon is coverage-valid if: The polygon interior does not intersect the interior of other polygons. If the polygon boundary intersects another polygon boundary, the vertices and line segments of the intersection match exactly. The algorithm detects the following coverage errors: the polygon is a duplicate of another one a polygon boundary segment equals an adjacent segment (with same orientation). This determines that the polygons overlap a polygon boundary segment is collinear and overlaps an adjacent segment but is not equal to it a polygon boundary segment touches an adjacent segment at a non-vertex point a polygon boundary segment crosses into an adjacent polygon a polygon boundary segment is in the interior of an adjacent polygon If any of these errors is present, the target polygon does not form a valid coverage with the adjacent polygons. The validity rules do not preclude properly noded gaps between coverage polygons. However, this class can detect narrow gaps, by specifying a maximum gap width using {@link #setGapWidth(double)}. Note that this will also identify narrow gaps separating disjoint coverage regions, and narrow gores. In some situations it may also produce false positives (i.e.linework identified as part of a gap which is wider than the given width). To fully identify gaps it maybe necessary to use CoverageUnion and analyze the holes in the result to see if they are acceptable. A polygon may be coverage-valid with respect to a set of surrounding polygons, but the collection as a whole may not form a clean coverage.For example, the target polygon boundary may be fully matched by adjacent boundary segments, but the adjacent set contains polygons which are not coverage - valid relative to other ones in the set. A coverage is valid only if every polygon in the coverage is coverage - valid. Use CoverageValidator to validate an entire set of polygons. The adjacent set may contain polygons which do not intersect the target polygon. These are effectively ignored during validation (but may decrease performance). Inheritance object CoveragePolygonValidator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Coverage Assembly: NetTopologySuite.dll Syntax public class CoveragePolygonValidator Constructors | Edit this page View Source CoveragePolygonValidator(Geometry, Geometry[]) Create a new validator. If the gap width is specified, the set of surrounding polygons should include all polygons which are within the gap width distance of the target polygon. Declaration public CoveragePolygonValidator(Geometry geom, Geometry[] adjGeoms) Parameters Type Name Description Geometry geom Geometry[] adjGeoms Properties | Edit this page View Source GapWidth Gets or sets the maximum gap width, if narrow gaps are to be detected. Declaration public double GapWidth { get; set; } Property Value Type Description double Methods | Edit this page View Source Validate() Validates the coverage polygon against the set of adjacent polygons in the coverage. Declaration public Geometry Validate() Returns Type Description Geometry A linear geometry containing the segments causing invalidity (if any) | Edit this page View Source Validate(Geometry, Geometry[]) Validates that a polygon is coverage-valid against the surrounding polygons in a polygonal coverage. Declaration public static Geometry Validate(Geometry targetPolygon, Geometry[] adjPolygons) Parameters Type Name Description Geometry targetPolygon The polygon to validate Geometry[] adjPolygons The adjacent polygons Returns Type Description Geometry A linear geometry containing the segments causing invalidity (if any) | Edit this page View Source Validate(Geometry, Geometry[], double) Validates that a polygon is coverage-valid against the surrounding polygons in a polygonal coverage, and forms no gaps narrower than a specified width. The set of surrounding polygons should include all polygons which are within the gap width distance of the target polygon. Declaration public static Geometry Validate(Geometry targetPolygon, Geometry[] adjPolygons, double gapWidth) Parameters Type Name Description Geometry targetPolygon The polygon to validate Geometry[] adjPolygons The adjacent polygons double gapWidth The maximum width of invalid gaps Returns Type Description Geometry A linear geometry containing the segments causing invalidity (if any)/// See Also CoverageValidator"
  },
  "api/NetTopologySuite.Coverage.CoverageSimplifier.html": {
    "href": "api/NetTopologySuite.Coverage.CoverageSimplifier.html",
    "title": "Class CoverageSimplifier | NetTopologySuite",
    "summary": "Class CoverageSimplifier Simplifies the boundaries of the polygons in a polygonal coverage while preserving the original coverage topology. An area-based simplification algorithm (similar to Visvalingam-Whyatt simplification) is used to provide high-quality results. Also supports simplifying just the inner edges in a coverage, which allows simplifying \"patches\" without affecting their boundary. The amount of simplification is determined by a tolerance value, which is a non-negative quantity. It equates roughly to the maximum distance by which a simplified line can change from the original. (In fact, it is the square root of the area tolerance used in the Visvalingam-Whyatt algorithm.) The simplified result coverage has the following characteristics: It has the same number of polygonal geometries as the input If the input is a valid coverage, then so is the result Node points (inner vertices shared by three or more polygons, or boundary vertices shared by two or more) are not changed Polygons maintain their line-adjacency (edges are never removed) Rings are simplified to a minimum of 4 vertices, to better preserve their shape Rings smaller than the area tolerance are removed where possible. This applies to both holes and \"islands\" (multipolygon elements which are disjoint or touch another polygon at a single vertex). At least one polygon is retained for each input geometry (the one with largest area). This class supports simplification using different distance tolerances for inner and outer edges of the coverage(including no simplfication using a tolerance of 0.0). This allows, for example, inner simplification, which simplifies only edges of the coverage which are adjacent to two polygons. This allows partial simplification of a coverage, since a simplified subset of a coverage still matches the remainder of the coverage. The class allows specifying a separate tolerance for each element of the input coverage. The input coverage should be valid according to CoverageValidator. Invalid coverages may still be simplified, but the result will likely still be invalid. NOTE: Due to different implementations of the PriorityQueue classes used in JTS and NTS the results of the CoverageSimplifier's simplification methods are not guaranteed to be the same. Nonetheless both results are valid. Inheritance object CoverageSimplifier Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Coverage Assembly: NetTopologySuite.dll Syntax public sealed class CoverageSimplifier Remarks FUTURE WORK Constructors | Edit this page View Source CoverageSimplifier(Geometry[]) Create a new coverage simplifier instance. Declaration public CoverageSimplifier(Geometry[] coverage) Parameters Type Name Description Geometry[] coverage A set of polygonal geometries forming a coverage Properties | Edit this page View Source RemovableRingSizeFactor Gets or sets a value indicating the factor applied to the area tolerance to determine if small rings should be removed. Larger values cause more rings to be removed. A value of 0 prevents rings from being removed. Declaration public double RemovableRingSizeFactor { get; set; } Property Value Type Description double | Edit this page View Source SmoothWeight Gets or sets a value inidcating the weight influencing how smooth the simplification should be. The weight must be between 0 and 1. Larger values increase the smoothness of the simplified edges. Declaration public double SmoothWeight { get; set; } Property Value Type Description double Methods | Edit this page View Source Simplify(Geometry[], double) Simplifies the boundaries of a set of polygonal geometries forming a coverage, preserving the coverage topology. Declaration public static Geometry[] Simplify(Geometry[] coverage, double tolerance) Parameters Type Name Description Geometry[] coverage A set of polygonal geometries forming a coverage double tolerance The simplification tolerance Returns Type Description Geometry[] The simplified coverage polygons | Edit this page View Source Simplify(Geometry[], double[]) Simplifies the boundaries of a set of polygonal geometries forming a coverage, preserving the coverage topology, using a separate tolerance for each element of the coverage. Coverage edges are simplified using the lowest tolerance of each adjacent element. Declaration public static Geometry[] Simplify(Geometry[] coverage, double[] tolerances) Parameters Type Name Description Geometry[] coverage A set of polygonal geometries forming a coverage double[] tolerances The simplification tolerances (one per input element) Returns Type Description Geometry[] The simplified coverage polygons | Edit this page View Source Simplify(double) Computes the simplified coverage using a single distance tolerance, preserving the coverage topology. Declaration public Geometry[] Simplify(double tolerance) Parameters Type Name Description double tolerance The simplification distance tolerance Returns Type Description Geometry[] The simplified coverage polygons | Edit this page View Source Simplify(double, double) Computes the simplified coverage using separate distance tolerances for inner and outer edges, preserving the coverage topology. Declaration public Geometry[] Simplify(double toleranceInner, double toleranceOuter) Parameters Type Name Description double toleranceInner The distance tolerance for inner edges double toleranceOuter The distance tolerance for outer edges Returns Type Description Geometry[] The simplified coverage polygons | Edit this page View Source Simplify(double[]) Computes the simplified coverage using separate distance tolerances for each coverage element, preserving the coverage topology. Declaration public Geometry[] Simplify(double[] tolerances) Parameters Type Name Description double[] tolerances the distance tolerances for the coverage elements Returns Type Description Geometry[] The simplified coverage polygons | Edit this page View Source SimplifyInner(Geometry[], double) Simplifies the inner boundaries of a set of polygonal geometries forming a coverage, preserving the coverage topology. Edges which form the exterior boundary of the coverage are left unchanged. Declaration public static Geometry[] SimplifyInner(Geometry[] coverage, double tolerance) Parameters Type Name Description Geometry[] coverage A set of polygonal geometries forming a coverage double tolerance The simplification tolerance Returns Type Description Geometry[] The simplified coverage polygons | Edit this page View Source SimplifyOuter(Geometry[], double) Simplifies the outer boundaries of a set of polygonal geometries forming a coverage, preserving the coverage topology. Edges in the interior of the coverage are left unchanged. Declaration public static Geometry[] SimplifyOuter(Geometry[] coverage, double tolerance) Parameters Type Name Description Geometry[] coverage A set of polygonal geometries forming a coverage double tolerance The simplification tolerance Returns Type Description Geometry[] The simplified coverage polygons"
  },
  "api/NetTopologySuite.Coverage.CoverageUnion.html": {
    "href": "api/NetTopologySuite.Coverage.CoverageUnion.html",
    "title": "Class CoverageUnion | NetTopologySuite",
    "summary": "Class CoverageUnion Unions a polygonal coverage in an efficient way. Valid polygonal coverage topology allows merging polygons in a very efficient way. Inheritance object CoverageUnion Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Coverage Assembly: NetTopologySuite.dll Syntax public static class CoverageUnion Methods | Edit this page View Source Union(Geometry[]) Unions a polygonal coverage. Declaration public static Geometry Union(Geometry[] coverage) Parameters Type Name Description Geometry[] coverage The polygons in the coverage Returns Type Description Geometry The union of the coverage polygons"
  },
  "api/NetTopologySuite.Coverage.CoverageValidator.html": {
    "href": "api/NetTopologySuite.Coverage.CoverageValidator.html",
    "title": "Class CoverageValidator | NetTopologySuite",
    "summary": "Class CoverageValidator Validates a polygonal coverage, and returns the locations of invalid polygon boundary segments if found. A polygonal coverage is a set of polygons which may be edge-adjacent but do not overlap. Coverage algorithms(such as { @link CoverageUnion} or simplification) generally require the input coverage to be valid to produce correct results. A polygonal coverage is valid if: The interiors of all polygons do not intersect(are disjoint). This is the case if no polygon has a boundary which intersects the interior of another polygon, and no two polygons are identical. If the boundaries of polygons intersect, the vertices and line segments of the intersection match exactly. A valid coverage may contain holes(regions of no coverage). Sometimes it is desired to detect whether coverages contain narrow gaps between polygons (which can be a result of digitizing error or misaligned data). This class can detect narrow gaps, by specifying a maximum gap width using {@link #setGapWidth(double)}. Note that this also identifies narrow gaps separating disjoint coverage regions, and narrow gores. In some situations it may also produce false positives (linework identified as part of a gap which is actually wider). See CoverageGapFinder for an alternate way to detect gaps which may be more accurate. Inheritance object CoverageValidator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Coverage Assembly: NetTopologySuite.dll Syntax public class CoverageValidator Constructors | Edit this page View Source CoverageValidator(Geometry[]) Creates a new coverage validator Declaration public CoverageValidator(Geometry[] coverage) Parameters Type Name Description Geometry[] coverage An array of polygons representing a polygonal coverage Properties | Edit this page View Source GapWidth Gets or sets a value indicating the maximum gap, if narrow gaps are to be detected. Declaration public double GapWidth { get; set; } Property Value Type Description double Methods | Edit this page View Source HasInvalidResult(Geometry[]) Tests if some element of an array of geometries is a coverage invalidity indicator. Declaration public static bool HasInvalidResult(Geometry[] validateResult) Parameters Type Name Description Geometry[] validateResult An array produced by a polygonal coverage validation Returns Type Description bool true if the result has at least one invalid indicator | Edit this page View Source IsValid(Geometry[]) Tests whether a polygonal coverage is valid. Declaration public static bool IsValid(Geometry[] coverage) Parameters Type Name Description Geometry[] coverage An array of polygons forming a coverage Returns Type Description bool true if the coverage is valid Remarks Named isValid in JTS | Edit this page View Source Validate() Validates the polygonal coverage. The result is an array of the same size as the input coverage. Each array entry is either null, or if the polygon does not form a valid coverage, a linear geometry containing the boundary segments which intersect polygon interiors, which are mismatched, or form gaps (if checked). Declaration public Geometry[] Validate() Returns Type Description Geometry[] An array of nulls or linear geometries | Edit this page View Source Validate(Geometry[]) Validates that a set of polygons forms a valid polygonal coverage, and returns linear geometries indicating the locations of invalidities, if any. Declaration public static Geometry[] Validate(Geometry[] coverage) Parameters Type Name Description Geometry[] coverage An array of polygons forming a coverage Returns Type Description Geometry[] An array of linear geometries indicating coverage errors, or nulls | Edit this page View Source Validate(Geometry[], double) Validates that a set of polygons forms a valid polygonal coverage and contains no gaps narrower than a specified width. The result is an array of linear geometries indicating the locations of invalidities, or null if the polygon is coverage-valid. Declaration public static Geometry[] Validate(Geometry[] coverage, double gapWidth) Parameters Type Name Description Geometry[] coverage An array of polygons forming a coverage double gapWidth The maximum width of invalid gaps Returns Type Description Geometry[] An array of linear geometries indicating coverage errors, or nulls"
  },
  "api/NetTopologySuite.Coverage.html": {
    "href": "api/NetTopologySuite.Coverage.html",
    "title": "Namespace NetTopologySuite.Coverage | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Coverage Contains classes that operate on polygonal coverages. A polygonal coverage is a set of polygonal geometries which is non-overlapping and edge-matched (Polygon or MultiPolygon) A set of polygonal geometries is a valid coverage if: Each geometry is valid. The interiors of all polygons are disjoint (they are not overlapping). This is the case if no polygon has a boundary which intersects the interior of another polygon. Where polygons are adjacent (i.e. their boundaries intersect), they are edge matched: the vertices (and thus line segments) of the common boundary match exactly. A coverage may contain holes and disjoint regions. Coverage algorithms (such as CoverageUnion) generally require the input coverage to be valid to produce correct results. Coverages can be validated using {@link CoverageValidator}. Classes CoverageGapFinder Finds gaps in a polygonal coverage. Gaps are holes in the coverage which are narrower than a given width. The coverage should be valid according to {@link CoverageValidator}. If this is not the case, some gaps may not be reported, or the invocation may fail. This is a more accurate way of identifying gaps than using {@link CoverageValidator#setGapWidth(double)}. Gaps which separate the coverage into two disjoint regions are not detected. Gores are not identified as gaps.> CoveragePolygonValidator Validates that a polygon forms a valid polygonal coverage with the set of polygons adjacent to it. If the polygon is coverage-valid an empty { @link LineString} is returned. Otherwise, the result is a linear geometry containing the polygon boundary linework causing the invalidity. A polygon is coverage-valid if: The polygon interior does not intersect the interior of other polygons. If the polygon boundary intersects another polygon boundary, the vertices and line segments of the intersection match exactly. The algorithm detects the following coverage errors: the polygon is a duplicate of another one a polygon boundary segment equals an adjacent segment (with same orientation). This determines that the polygons overlap a polygon boundary segment is collinear and overlaps an adjacent segment but is not equal to it a polygon boundary segment touches an adjacent segment at a non-vertex point a polygon boundary segment crosses into an adjacent polygon a polygon boundary segment is in the interior of an adjacent polygon If any of these errors is present, the target polygon does not form a valid coverage with the adjacent polygons. The validity rules do not preclude properly noded gaps between coverage polygons. However, this class can detect narrow gaps, by specifying a maximum gap width using {@link #setGapWidth(double)}. Note that this will also identify narrow gaps separating disjoint coverage regions, and narrow gores. In some situations it may also produce false positives (i.e.linework identified as part of a gap which is wider than the given width). To fully identify gaps it maybe necessary to use CoverageUnion and analyze the holes in the result to see if they are acceptable. A polygon may be coverage-valid with respect to a set of surrounding polygons, but the collection as a whole may not form a clean coverage.For example, the target polygon boundary may be fully matched by adjacent boundary segments, but the adjacent set contains polygons which are not coverage - valid relative to other ones in the set. A coverage is valid only if every polygon in the coverage is coverage - valid. Use CoverageValidator to validate an entire set of polygons. The adjacent set may contain polygons which do not intersect the target polygon. These are effectively ignored during validation (but may decrease performance). CoverageSimplifier Simplifies the boundaries of the polygons in a polygonal coverage while preserving the original coverage topology. An area-based simplification algorithm (similar to Visvalingam-Whyatt simplification) is used to provide high-quality results. Also supports simplifying just the inner edges in a coverage, which allows simplifying \"patches\" without affecting their boundary. The amount of simplification is determined by a tolerance value, which is a non-negative quantity. It equates roughly to the maximum distance by which a simplified line can change from the original. (In fact, it is the square root of the area tolerance used in the Visvalingam-Whyatt algorithm.) The simplified result coverage has the following characteristics: It has the same number of polygonal geometries as the input If the input is a valid coverage, then so is the result Node points (inner vertices shared by three or more polygons, or boundary vertices shared by two or more) are not changed Polygons maintain their line-adjacency (edges are never removed) Rings are simplified to a minimum of 4 vertices, to better preserve their shape Rings smaller than the area tolerance are removed where possible. This applies to both holes and \"islands\" (multipolygon elements which are disjoint or touch another polygon at a single vertex). At least one polygon is retained for each input geometry (the one with largest area). This class supports simplification using different distance tolerances for inner and outer edges of the coverage(including no simplfication using a tolerance of 0.0). This allows, for example, inner simplification, which simplifies only edges of the coverage which are adjacent to two polygons. This allows partial simplification of a coverage, since a simplified subset of a coverage still matches the remainder of the coverage. The class allows specifying a separate tolerance for each element of the input coverage. The input coverage should be valid according to CoverageValidator. Invalid coverages may still be simplified, but the result will likely still be invalid. NOTE: Due to different implementations of the PriorityQueue classes used in JTS and NTS the results of the CoverageSimplifier's simplification methods are not guaranteed to be the same. Nonetheless both results are valid. CoverageUnion Unions a polygonal coverage in an efficient way. Valid polygonal coverage topology allows merging polygons in a very efficient way. CoverageValidator Validates a polygonal coverage, and returns the locations of invalid polygon boundary segments if found. A polygonal coverage is a set of polygons which may be edge-adjacent but do not overlap. Coverage algorithms(such as { @link CoverageUnion} or simplification) generally require the input coverage to be valid to produce correct results. A polygonal coverage is valid if: The interiors of all polygons do not intersect(are disjoint). This is the case if no polygon has a boundary which intersects the interior of another polygon, and no two polygons are identical. If the boundaries of polygons intersect, the vertices and line segments of the intersection match exactly. A valid coverage may contain holes(regions of no coverage). Sometimes it is desired to detect whether coverages contain narrow gaps between polygons (which can be a result of digitizing error or misaligned data). This class can detect narrow gaps, by specifying a maximum gap width using {@link #setGapWidth(double)}. Note that this also identifies narrow gaps separating disjoint coverage regions, and narrow gores. In some situations it may also produce false positives (linework identified as part of a gap which is actually wider). See CoverageGapFinder for an alternate way to detect gaps which may be more accurate."
  },
  "api/NetTopologySuite.DataStructures.Interval.html": {
    "href": "api/NetTopologySuite.DataStructures.Interval.html",
    "title": "Struct Interval | NetTopologySuite",
    "summary": "Struct Interval Structure for a closed 1-dimensional ℝ-interval Implements IEquatable<Interval> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.DataStructures Assembly: NetTopologySuite.dll Syntax [Serializable] public struct Interval : IEquatable<Interval> Fields | Edit this page View Source Max The upper bound of the interval Declaration public double Max Field Value Type Description double | Edit this page View Source Min The lower bound of the interval Declaration public readonly double Min Field Value Type Description double Properties | Edit this page View Source Centre Gets a value indicating the centre of the interval (Min + Width * 0.5) Declaration public double Centre { get; } Property Value Type Description double | Edit this page View Source Width Gets a value indicating the width of the Interval Declaration public double Width { get; } Property Value Type Description double Methods | Edit this page View Source Contains(Interval) Function to test if this Interval contains interval. Declaration public bool Contains(Interval interval) Parameters Type Name Description Interval interval The interval to test Returns Type Description bool true if this interval contains interval Remarks This is more rigid than Overlaps(Interval) | Edit this page View Source Contains(double) Function to test if this Interval contains the value p. Declaration public bool Contains(double p) Parameters Type Name Description double p The value to test Returns Type Description bool true if this interval contains the value p | Edit this page View Source Contains(double, double) Function to test if this Interval contains the interval ℝ[min, max]. Declaration public bool Contains(double min, double max) Parameters Type Name Description double min The minimum value of the interval double max The maximum value of the interval Returns Type Description bool true if this interval contains the interval ℝ[min, max] Remarks This is more rigid than Overlaps(double, double) | Edit this page View Source Create() Creates an empty or uninitialized Interval Declaration public static Interval Create() Returns Type Description Interval An empty or uninitialized Interval | Edit this page View Source Create(Interval) Creates an interval with the range ℝ[Min,Max]. Declaration public static Interval Create(Interval interval) Parameters Type Name Description Interval interval The template interval Returns Type Description Interval An Interval | Edit this page View Source Create(double) Creates an interval with the range ℝ[value,value] Declaration public static Interval Create(double value) Parameters Type Name Description double value The value Returns Type Description Interval An Interval | Edit this page View Source Create(double, double) Creates an interval with the range ℝ[val1,val2]. If necessary, val1 and val2 are exchanged. Declaration public static Interval Create(double val1, double val2) Parameters Type Name Description double val1 The minimum value double val2 The maximum value Returns Type Description Interval An Interval | Edit this page View Source Equals(Interval) Declaration public bool Equals(Interval other) Parameters Type Name Description Interval other Returns Type Description bool | Edit this page View Source Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) | Edit this page View Source ExpandedByInterval(Interval) Function to compute an interval that contains this and interval Interval Declaration public Interval ExpandedByInterval(Interval interval) Parameters Type Name Description Interval interval The interval Returns Type Description Interval An interval | Edit this page View Source ExpandedByValue(double) Method to expand Declaration public Interval ExpandedByValue(double p) Parameters Type Name Description double p Returns Type Description Interval | Edit this page View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() | Edit this page View Source Intersects(Interval) Function to test if this Interval intersects the interval other. Declaration public bool Intersects(Interval other) Parameters Type Name Description Interval other Returns Type Description bool | Edit this page View Source Intersects(double, double) Function to test if this Interval intersects the interval ℝ[min, max]. Declaration public bool Intersects(double min, double max) Parameters Type Name Description double min The minimum value of the interval double max The maximum value of the interval Returns Type Description bool true if this interval intersects the interval ℝ[min, max]. | Edit this page View Source Overlaps(Interval) Function to test if this Interval overlaps interval. Declaration public bool Overlaps(Interval interval) Parameters Type Name Description Interval interval The interval to test Returns Type Description bool true if this interval overlaps interval | Edit this page View Source Overlaps(double, double) Function to test if this Interval overlaps the interval ℝ[min, max]. Declaration public bool Overlaps(double min, double max) Parameters Type Name Description double min The minimum value of the interval double max The maximum value of the interval Returns Type Description bool true if this interval overlaps the interval ℝ[min, max] | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() Operators | Edit this page View Source operator ==(Interval, Interval) Equality operator for Intervals Declaration public static bool operator ==(Interval lhs, Interval rhs) Parameters Type Name Description Interval lhs The left-hand-side Interval Interval rhs The right-hand-side Interval Returns Type Description bool true if the Intervals are equal. | Edit this page View Source operator !=(Interval, Interval) Inequality operator for Intervals Declaration public static bool operator !=(Interval lhs, Interval rhs) Parameters Type Name Description Interval lhs The left-hand-side Interval Interval rhs The right-hand-side Interval Returns Type Description bool true if the Intervals are not equal. Implements IEquatable<T>"
  },
  "api/NetTopologySuite.DataStructures.html": {
    "href": "api/NetTopologySuite.DataStructures.html",
    "title": "Namespace NetTopologySuite.DataStructures | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.DataStructures Structs Interval Structure for a closed 1-dimensional ℝ-interval"
  },
  "api/NetTopologySuite.Densify.Densifier.html": {
    "href": "api/NetTopologySuite.Densify.Densifier.html",
    "title": "Class Densifier | NetTopologySuite",
    "summary": "Class Densifier Densifies a geometry by inserting extra vertices along the line segments contained in the geometry. All segments in the created densified geometry will be no longer than the given distance tolerance (that is, all segments in the output will have length less than or equal to the distance tolerance). Inheritance object Densifier Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Densify Assembly: NetTopologySuite.dll Syntax public class Densifier Remarks Densified polygonal geometries are guaranteed to be topologically correct. The coordinates created during densification respect the input geometry's PrecisionModel. By default polygonal results are processed to ensure they are valid. This processing is costly, and it is very rare for results to be invalid. Validation processing can be disabled by setting the Validate property to false. Note: At some future point this class will offer a variety of densification strategies. Constructors | Edit this page View Source Densifier(Geometry) Creates a new densifier instance Declaration public Densifier(Geometry inputGeom) Parameters Type Name Description Geometry inputGeom The geometry to densify Properties | Edit this page View Source DistanceTolerance Gets or sets the distance tolerance for the densification. All line segments in the densified geometry will be no longer than the distance tolerance. The distance tolerance must be positive. Declaration public double DistanceTolerance { get; set; } Property Value Type Description double | Edit this page View Source Validate Gets or sets whether polygonal results are processed to ensure they are valid. Declaration public bool Validate { get; set; } Property Value Type Description bool true if polygonal input is validated. Methods | Edit this page View Source Densify(Geometry, double) Densifies a geometry using a given distance tolerance, and respecting the input geometry's PrecisionModel. Declaration public static Geometry Densify(Geometry geom, double distanceTolerance) Parameters Type Name Description Geometry geom The geometry densify double distanceTolerance The distance tolerance (DistanceTolerance) Returns Type Description Geometry The densified geometry | Edit this page View Source GetResultGeometry() Gets the densified geometry. Declaration public Geometry GetResultGeometry() Returns Type Description Geometry The densified geometry"
  },
  "api/NetTopologySuite.Densify.html": {
    "href": "api/NetTopologySuite.Densify.html",
    "title": "Namespace NetTopologySuite.Densify | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Densify Classes to perform densification on geometries. Classes Densifier Densifies a geometry by inserting extra vertices along the line segments contained in the geometry. All segments in the created densified geometry will be no longer than the given distance tolerance (that is, all segments in the output will have length less than or equal to the distance tolerance)."
  },
  "api/NetTopologySuite.Dissolve.DissolveEdgeGraph.html": {
    "href": "api/NetTopologySuite.Dissolve.DissolveEdgeGraph.html",
    "title": "Class DissolveEdgeGraph | NetTopologySuite",
    "summary": "Class DissolveEdgeGraph A graph containing DissolveHalfEdges. Inheritance object EdgeGraph DissolveEdgeGraph Inherited Members EdgeGraph.AddEdge(Coordinate, Coordinate) EdgeGraph.IsValidEdge(Coordinate, Coordinate) EdgeGraph.GetVertexEdges() EdgeGraph.FindEdge(Coordinate, Coordinate) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Dissolve Assembly: NetTopologySuite.dll Syntax public class DissolveEdgeGraph : EdgeGraph Methods | Edit this page View Source CreateEdge(Coordinate) Creates a single HalfEdge. Override to use a different HalfEdge subclass. Declaration protected override HalfEdge CreateEdge(Coordinate p0) Parameters Type Name Description Coordinate p0 Returns Type Description HalfEdge a new HalfEdge with the given origin Overrides EdgeGraph.CreateEdge(Coordinate)"
  },
  "api/NetTopologySuite.Dissolve.DissolveHalfEdge.html": {
    "href": "api/NetTopologySuite.Dissolve.DissolveHalfEdge.html",
    "title": "Class DissolveHalfEdge | NetTopologySuite",
    "summary": "Class DissolveHalfEdge A HalfEdge which carries information required to support LineDissolver. Inheritance object HalfEdge MarkHalfEdge DissolveHalfEdge Implements IComparable<HalfEdge> Inherited Members MarkHalfEdge.IsMarked(HalfEdge) MarkHalfEdge.Mark(HalfEdge) MarkHalfEdge.SetMark(HalfEdge, bool) MarkHalfEdge.SetMarkBoth(HalfEdge, bool) MarkHalfEdge.MarkBoth(HalfEdge) MarkHalfEdge.Mark() MarkHalfEdge.Marked HalfEdge.Create(Coordinate, Coordinate) HalfEdge.Init(HalfEdge, HalfEdge) HalfEdge.Link(HalfEdge) HalfEdge.Init(HalfEdge) HalfEdge.Orig HalfEdge.Dest HalfEdge.DirectionPt HalfEdge.Sym HalfEdge.Next HalfEdge.Prev HalfEdge.ONext HalfEdge.Find(Coordinate) HalfEdge.Equals(Coordinate, Coordinate) HalfEdge.Insert(HalfEdge) HalfEdge.IsEdgesSorted HalfEdge.CompareTo(HalfEdge) HalfEdge.CompareAngularDirection(HalfEdge) HalfEdge.DeltaX HalfEdge.DeltaY HalfEdge.ToString() HalfEdge.ToStringNode() HalfEdge.Degree() HalfEdge.PrevNode() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Dissolve Assembly: NetTopologySuite.dll Syntax public class DissolveHalfEdge : MarkHalfEdge, IComparable<HalfEdge> Constructors | Edit this page View Source DissolveHalfEdge(Coordinate) Creates an instance of a DissolveHalfEdge using the provided origin. Declaration public DissolveHalfEdge(Coordinate orig) Parameters Type Name Description Coordinate orig The origin Properties | Edit this page View Source IsStart Tests whether this edge is the starting segment in a LineString being dissolved. Declaration public bool IsStart { get; } Property Value Type Description bool true if this edge is a start segment Methods | Edit this page View Source SetStart() Sets this edge to be the start segment of an input LineString. Declaration public void SetStart() Implements IComparable<T>"
  },
  "api/NetTopologySuite.Dissolve.LineDissolver.html": {
    "href": "api/NetTopologySuite.Dissolve.LineDissolver.html",
    "title": "Class LineDissolver | NetTopologySuite",
    "summary": "Class LineDissolver Dissolves the linear components from a collection of Geometrys. into a set of maximal-length LineStrings in which every unique segment appears once only. The output linestrings run between node vertices of the input, which are vertices which have either degree 1, or degree 3 or greater. Inheritance object LineDissolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Dissolve Assembly: NetTopologySuite.dll Syntax public class LineDissolver Remarks Use cases for dissolving linear components include generalization (in particular, simplifying polygonal coverages), and visualization (in particular, avoiding symbology conflicts when depicting shared polygon boundaries). Constructors | Edit this page View Source LineDissolver() Creates an instance of this class Declaration public LineDissolver() Methods | Edit this page View Source Add(Geometry) Adds a Geometry to be dissolved. Any number of geometries may be added by calling this method multiple times. Any type of Geometry may be added. The constituent linework will be extracted to be dissolved. Declaration public void Add(Geometry geometry) Parameters Type Name Description Geometry geometry geometry to be line-merged | Edit this page View Source Add(IEnumerable<Geometry>) Adds a collection of Geometries to be processed. May be called multiple times. Any dimension of Geometry may be added; the constituent linework will be extracted. Declaration public void Add(IEnumerable<Geometry> geometries) Parameters Type Name Description IEnumerable<Geometry> geometries the geometries to be line-merged | Edit this page View Source Dissolve(Geometry) Dissolves the linear components in a geometry. Declaration public static Geometry Dissolve(Geometry g) Parameters Type Name Description Geometry g the geometry to dissolve Returns Type Description Geometry the dissolved lines | Edit this page View Source GetResult() Gets the dissolved result as a MultiLineString. Declaration public Geometry GetResult() Returns Type Description Geometry the dissolved lines"
  },
  "api/NetTopologySuite.Dissolve.html": {
    "href": "api/NetTopologySuite.Dissolve.html",
    "title": "Namespace NetTopologySuite.Dissolve | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Dissolve Classes DissolveEdgeGraph A graph containing DissolveHalfEdges. DissolveHalfEdge A HalfEdge which carries information required to support LineDissolver. LineDissolver Dissolves the linear components from a collection of Geometrys. into a set of maximal-length LineStrings in which every unique segment appears once only. The output linestrings run between node vertices of the input, which are vertices which have either degree 1, or degree 3 or greater."
  },
  "api/NetTopologySuite.EdgeGraph.EdgeGraph.html": {
    "href": "api/NetTopologySuite.EdgeGraph.EdgeGraph.html",
    "title": "Class EdgeGraph | NetTopologySuite",
    "summary": "Class EdgeGraph A graph comprised of HalfEdges. It supports tracking the vertices in the graph via edges incident on them, to allow efficient lookup of edges and vertices. Inheritance object EdgeGraph DissolveEdgeGraph Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.EdgeGraph Assembly: NetTopologySuite.dll Syntax public class EdgeGraph Remarks This class may be subclassed to use a different subclass of HalfEdge, by overriding CreateEdge(Coordinate). If additional logic is required to initialize edges then AddEdge(Coordinate, Coordinate) can be overridden as well. Methods | Edit this page View Source AddEdge(Coordinate, Coordinate) Adds an edge between the coordinates orig and dest to this graph. Declaration public virtual HalfEdge AddEdge(Coordinate orig, Coordinate dest) Parameters Type Name Description Coordinate orig the edge origin location Coordinate dest the edge destination location Returns Type Description HalfEdge The created edge Remarks Only valid edges can be added (in particular, zero-length segments cannot be added) See Also IsValidEdge(Coordinate, Coordinate) | Edit this page View Source CreateEdge(Coordinate) Creates a single HalfEdge. Override to use a different HalfEdge subclass. Declaration protected virtual HalfEdge CreateEdge(Coordinate orig) Parameters Type Name Description Coordinate orig the origin location Returns Type Description HalfEdge a new HalfEdge with the given origin | Edit this page View Source FindEdge(Coordinate, Coordinate) Finds an edge in this graph with the given origin and destination, if one exists. Declaration public HalfEdge FindEdge(Coordinate orig, Coordinate dest) Parameters Type Name Description Coordinate orig the origin location Coordinate dest the destination location Returns Type Description HalfEdge an edge with the given orig and dest, or null if none exists | Edit this page View Source GetVertexEdges() Gets all HalfEdges in the graph. Both edges of edge pairs are included. Declaration public IEnumerable<HalfEdge> GetVertexEdges() Returns Type Description IEnumerable<HalfEdge> An enumeration of the graph edges | Edit this page View Source IsValidEdge(Coordinate, Coordinate) Test if an the coordinates for an edge form a valid edge (with non-zero length) Declaration public static bool IsValidEdge(Coordinate orig, Coordinate dest) Parameters Type Name Description Coordinate orig The start coordinate Coordinate dest The end coordinate Returns Type Description bool true of the edge formed is valid"
  },
  "api/NetTopologySuite.EdgeGraph.EdgeGraphBuilder.html": {
    "href": "api/NetTopologySuite.EdgeGraph.EdgeGraphBuilder.html",
    "title": "Class EdgeGraphBuilder | NetTopologySuite",
    "summary": "Class EdgeGraphBuilder Builds an edge graph from geometries containing edges. Inheritance object EdgeGraphBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.EdgeGraph Assembly: NetTopologySuite.dll Syntax public class EdgeGraphBuilder Constructors | Edit this page View Source EdgeGraphBuilder() Creates a new EdgeGraphBuilder. Declaration public EdgeGraphBuilder() Methods | Edit this page View Source Add(Geometry) Adds the edges of a Geometry to the graph. May be called multiple times. Any dimension of Geometry may be added; the constituent edges are extracted. Declaration public void Add(Geometry geometry) Parameters Type Name Description Geometry geometry geometry to be added | Edit this page View Source Add(IEnumerable<Geometry>) Adds the edges in a collection of Geometrys to the graph. May be called multiple times. Any dimension of Geometry may be added. Declaration public void Add(IEnumerable<Geometry> geometries) Parameters Type Name Description IEnumerable<Geometry> geometries the geometries to be added | Edit this page View Source Build(IEnumerable<Geometry>) Factory method to build an EdgeGraph. Declaration public static EdgeGraph Build(IEnumerable<Geometry> geoms) Parameters Type Name Description IEnumerable<Geometry> geoms The geometries to make up the EdgeGraph Returns Type Description EdgeGraph An EdgeGraph of the geoms | Edit this page View Source GetGraph() Gets the created EdgeGraph Declaration public EdgeGraph GetGraph() Returns Type Description EdgeGraph The created EdgeGraph"
  },
  "api/NetTopologySuite.EdgeGraph.HalfEdge.html": {
    "href": "api/NetTopologySuite.EdgeGraph.HalfEdge.html",
    "title": "Class HalfEdge | NetTopologySuite",
    "summary": "Class HalfEdge Represents a directed component of an edge in an EdgeGraph. HalfEdges link vertices whose locations are defined by Coordinates. HalfEdges start at an origin vertex, and terminate at a destination vertex. HalfEdges always occur in symmetric pairs, with the Sym method giving access to the oppositely-oriented component. HalfEdges and the methods on them form an edge algebra, which can be used to traverse and query the topology of the graph formed by the edges. To support graphs where the edges are sequences of coordinates each edge may also have a direction point supplied. This is used to determine the ordering of the edges around the origin. HalfEdges with the same origin are ordered so that the ring of edges formed by them is oriented CCW. By design HalfEdges carry minimal information about the actual usage of the graph they represent. They can be subclassed to carry more information if required. HalfEdges form a complete and consistent data structure by themselves, but an EdgeGraph is useful to allow retrieving edges by vertex and edge location, as well as ensuring edges are created and linked appropriately. Inheritance object HalfEdge MarkHalfEdge Implements IComparable<HalfEdge> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.EdgeGraph Assembly: NetTopologySuite.dll Syntax public class HalfEdge : IComparable<HalfEdge> Constructors | Edit this page View Source HalfEdge(Coordinate) Creates an edge originating from a given coordinate. Declaration public HalfEdge(Coordinate orig) Parameters Type Name Description Coordinate orig the origin coordinate Properties | Edit this page View Source DeltaX The X component of the distance between the orig and dest vertices. Declaration [Obsolete(\"Use DirectionX\")] public double DeltaX { get; } Property Value Type Description double | Edit this page View Source DeltaY The Y component of the distance between the orig and dest vertices. Declaration [Obsolete(\"Use DirectionY\")] public double DeltaY { get; } Property Value Type Description double | Edit this page View Source Dest Gets the destination coordinate of this edge. Declaration public Coordinate Dest { get; } Property Value Type Description Coordinate | Edit this page View Source DirectionPt Gets a value indicating the direction point of this edge. In the base case this is the dest coordinate of the edge. Subclasses may override to allow a HalfEdge to represent an edge with more than two coordinates. Declaration protected virtual Coordinate DirectionPt { get; } Property Value Type Description Coordinate The direction point for the edge | Edit this page View Source IsEdgesSorted Tests whether the edges around the origin are sorted correctly. Note that edges must be strictly increasing, which implies no two edges can have the same direction point. Declaration public bool IsEdgesSorted { get; } Property Value Type Description bool true if the origin edges are sorted correctly | Edit this page View Source Next Gets the next edge CCW around the destination vertex of this edge. If the destination vertex has degree 1 then this is the Sym edge. Declaration public HalfEdge Next { get; } Property Value Type Description HalfEdge The next outgoing edge CCW around the destination vertex | Edit this page View Source ONext Gets the next edge CCW around the origin of this edge, with the same origin. If the origin vertex has degree 1 then this is the edge itself. e.ONext is equal to e.Sym.Next() Declaration public HalfEdge ONext { get; } Property Value Type Description HalfEdge The next edge around the origin | Edit this page View Source Orig Gets the origin coordinate of this edge. Declaration public Coordinate Orig { get; } Property Value Type Description Coordinate | Edit this page View Source Prev Gets the previous edge CW around the origin vertex of this edge, with that vertex being its destination. It is always true that e.Next.Prev == e Note that this requires a scan of the origin edges, so may not be efficient for some uses. Declaration public HalfEdge Prev { get; } Property Value Type Description HalfEdge The previous edge CW around the origin vertex | Edit this page View Source Sym Gets or sets the symmetric (opposite) edge of this edge. Declaration public HalfEdge Sym { get; } Property Value Type Description HalfEdge Methods | Edit this page View Source CompareAngularDirection(HalfEdge) Implements the total order relation. The angle of edge a is greater than the angle of edge b, where the angle of an edge is the angle made by the first segment of the edge with the positive x-axis. When applied to a list of edges originating at the same point, this produces a CCW ordering of the edges around the point. Using the obvious algorithm of computing the angle is not robust, since the angle calculation is susceptible to round off error. Declaration public int CompareAngularDirection(HalfEdge e) Parameters Type Name Description HalfEdge e Returns Type Description int Remarks A robust algorithm is: compare the quadrants the edge vectors lie in. If the quadrants are different, it is trivial to determine which edge has a greater angle. If the vectors lie in the same quadrant, the Index(Coordinate, Coordinate, Coordinate) function can be used to determine the relative orientation of the vectors. | Edit this page View Source CompareTo(HalfEdge) Compares edges which originate at the same vertex based on the angle they make at their origin vertex with the positive X-axis. This allows sorting edges around their origin vertex in CCW order. Declaration public int CompareTo(HalfEdge e) Parameters Type Name Description HalfEdge e Returns Type Description int | Edit this page View Source Create(Coordinate, Coordinate) Creates a HalfEdge pair representing an edge between two vertices located at coordinates p0 and p1. Declaration public static HalfEdge Create(Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p0 a vertex coordinate Coordinate p1 a vertex coordinate Returns Type Description HalfEdge the HalfEdge with origin at p0 | Edit this page View Source Degree() Computes the degree of the origin vertex. The degree is the number of edges originating from the vertex. Declaration public int Degree() Returns Type Description int the degree of the origin vertex | Edit this page View Source Equals(Coordinate, Coordinate) Tests whether this edge has the given orig and dest vertices. Declaration public bool Equals(Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p0 the origin vertex to test Coordinate p1 the destination vertex to test Returns Type Description bool true if the vertices are equal to the ones of this edge | Edit this page View Source Find(Coordinate) Finds the edge starting at the origin of this edge with the given dest vertex, if any. Declaration public HalfEdge Find(Coordinate dest) Parameters Type Name Description Coordinate dest the dest vertex to search for Returns Type Description HalfEdge the edge with the required dest vertex, if it exists, or null | Edit this page View Source Init(HalfEdge) Initializes this edge with e as Sym edge. Declaration [Obsolete(\"Use Link\")] protected virtual void Init(HalfEdge e) Parameters Type Name Description HalfEdge e A symmetric half edge. | Edit this page View Source Init(HalfEdge, HalfEdge) Initialize a symmetric pair of halfedges. Intended for use by EdgeGraph subclasses. The edges are initialized to have each other as the Sym edge, and to have Next pointers which point to edge other. This effectively creates a graph containing a single edge. Declaration [Obsolete] public static HalfEdge Init(HalfEdge e0, HalfEdge e1) Parameters Type Name Description HalfEdge e0 A halfedge HalfEdge e1 A symmetric halfedge Returns Type Description HalfEdge The initialized edge e0 | Edit this page View Source Insert(HalfEdge) Inserts an edge into the ring of edges around the origin vertex of this edge, ensuring that the edges remain ordered CCW. The inserted edge must have the same origin as this edge. Declaration public void Insert(HalfEdge eAdd) Parameters Type Name Description HalfEdge eAdd the edge to insert | Edit this page View Source Link(HalfEdge) Links this edge with its sym (opposite) edge. This must be done for each pair of edges created. Declaration public virtual void Link(HalfEdge sym) Parameters Type Name Description HalfEdge sym The sym edge to link. | Edit this page View Source PrevNode() Finds the first node previous to this edge, if any. If no such node exists (i.e. the edge is part of a ring) then null is returned. Declaration public HalfEdge PrevNode() Returns Type Description HalfEdge an edge originating at the node prior to this edge, if any, or null if no node exists | Edit this page View Source ToString() Computes a string representation of a HalfEdge. Declaration public override string ToString() Returns Type Description string Overrides object.ToString() | Edit this page View Source ToStringNode() Provides a string representation of the edges around the origin node of this edge. Declaration public string ToStringNode() Returns Type Description string A string showing the edges around the origin Remarks Uses the subclass representation for each edge. Implements IComparable<T>"
  },
  "api/NetTopologySuite.EdgeGraph.MarkHalfEdge.html": {
    "href": "api/NetTopologySuite.EdgeGraph.MarkHalfEdge.html",
    "title": "Class MarkHalfEdge | NetTopologySuite",
    "summary": "Class MarkHalfEdge A HalfEdge which supports marking edges with a boolean flag. Useful for algorithms which perform graph traversals. Inheritance object HalfEdge MarkHalfEdge DissolveHalfEdge Implements IComparable<HalfEdge> Inherited Members HalfEdge.Create(Coordinate, Coordinate) HalfEdge.Init(HalfEdge, HalfEdge) HalfEdge.Link(HalfEdge) HalfEdge.Init(HalfEdge) HalfEdge.Orig HalfEdge.Dest HalfEdge.DirectionPt HalfEdge.Sym HalfEdge.Next HalfEdge.Prev HalfEdge.ONext HalfEdge.Find(Coordinate) HalfEdge.Equals(Coordinate, Coordinate) HalfEdge.Insert(HalfEdge) HalfEdge.IsEdgesSorted HalfEdge.CompareTo(HalfEdge) HalfEdge.CompareAngularDirection(HalfEdge) HalfEdge.DeltaX HalfEdge.DeltaY HalfEdge.ToString() HalfEdge.ToStringNode() HalfEdge.Degree() HalfEdge.PrevNode() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.EdgeGraph Assembly: NetTopologySuite.dll Syntax public class MarkHalfEdge : HalfEdge, IComparable<HalfEdge> Constructors | Edit this page View Source MarkHalfEdge(Coordinate) Creates a new marked edge. Declaration public MarkHalfEdge(Coordinate orig) Parameters Type Name Description Coordinate orig the coordinate of the edge origin Properties | Edit this page View Source Marked Gets or sets a value indicating if this MarkHalfEdge is marked Declaration public bool Marked { get; set; } Property Value Type Description bool Methods | Edit this page View Source IsMarked(HalfEdge) Returns a value indicating that the given edge is marked. Declaration public static bool IsMarked(HalfEdge e) Parameters Type Name Description HalfEdge e An edge Returns Type Description bool true if the edge is marked | Edit this page View Source Mark() Marks this edge. Declaration public void Mark() | Edit this page View Source Mark(HalfEdge) Marks the edge. Declaration public static void Mark(HalfEdge e) Parameters Type Name Description HalfEdge e An edge to mark | Edit this page View Source MarkBoth(HalfEdge) Marks the edges in a pair. Declaration public static void MarkBoth(HalfEdge e) Parameters Type Name Description HalfEdge e an edge of the pair to mark | Edit this page View Source SetMark(HalfEdge, bool) Sets the mark for the given edge to a boolean value. Declaration public static void SetMark(HalfEdge e, bool isMarked) Parameters Type Name Description HalfEdge e An Edge to update bool isMarked The mark value to set | Edit this page View Source SetMarkBoth(HalfEdge, bool) Sets the mark for the given edge pair to a boolean value. Declaration public static void SetMarkBoth(HalfEdge e, bool isMarked) Parameters Type Name Description HalfEdge e an edge of the pair to update bool isMarked the mark value to set Implements IComparable<T>"
  },
  "api/NetTopologySuite.EdgeGraph.html": {
    "href": "api/NetTopologySuite.EdgeGraph.html",
    "title": "Namespace NetTopologySuite.EdgeGraph | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.EdgeGraph Classes EdgeGraph A graph comprised of HalfEdges. It supports tracking the vertices in the graph via edges incident on them, to allow efficient lookup of edges and vertices. EdgeGraphBuilder Builds an edge graph from geometries containing edges. HalfEdge Represents a directed component of an edge in an EdgeGraph. HalfEdges link vertices whose locations are defined by Coordinates. HalfEdges start at an origin vertex, and terminate at a destination vertex. HalfEdges always occur in symmetric pairs, with the Sym method giving access to the oppositely-oriented component. HalfEdges and the methods on them form an edge algebra, which can be used to traverse and query the topology of the graph formed by the edges. To support graphs where the edges are sequences of coordinates each edge may also have a direction point supplied. This is used to determine the ordering of the edges around the origin. HalfEdges with the same origin are ordered so that the ring of edges formed by them is oriented CCW. By design HalfEdges carry minimal information about the actual usage of the graph they represent. They can be subclassed to carry more information if required. HalfEdges form a complete and consistent data structure by themselves, but an EdgeGraph is useful to allow retrieving edges by vertex and edge location, as well as ensuring edges are created and linked appropriately. MarkHalfEdge A HalfEdge which supports marking edges with a boolean flag. Useful for algorithms which perform graph traversals."
  },
  "api/NetTopologySuite.Geometries.Coordinate.html": {
    "href": "api/NetTopologySuite.Geometries.Coordinate.html",
    "title": "Class Coordinate | NetTopologySuite",
    "summary": "Class Coordinate A lightweight class used to store coordinates on the 2-dimensional Cartesian plane. The base data object is suitable for use with coordinate sequences with dimension = 2 and measures = 0. Inheritance object Coordinate CoordinateM CoordinateZ Implements IComparable IComparable<Coordinate> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax [Serializable] public class Coordinate : IComparable, IComparable<Coordinate> Remarks It is distinct from Point, which is a subclass of Geometry. Unlike objects of type Point (which contain additional information such as an envelope, a precision model, and spatial reference system information), a Coordinate only contains ordinate values and properties. Implementations may optionally support Z-ordinate and M-measure values as appropriate for a CoordinateSequence. Use of Z and M setters or NetTopologySuite.Geometries.Coordinate.this[int] indexer are recommended. Constructors | Edit this page View Source Coordinate() Constructs a Coordinate at (0,0). Declaration public Coordinate() | Edit this page View Source Coordinate(Coordinate) Constructs a Coordinate having the same (x,y,z) values as c. Declaration public Coordinate(Coordinate c) Parameters Type Name Description Coordinate c Coordinate to copy. | Edit this page View Source Coordinate(double, double) Constructs a Coordinate at (x,y). Declaration public Coordinate(double x, double y) Parameters Type Name Description double x The X value double y The Y value Fields | Edit this page View Source NullOrdinate The value used to indicate a null or missing ordinate value. In particular, used for the value of ordinates for dimensions greater than the defined dimension of a coordinate. Declaration public const double NullOrdinate = NaN Field Value Type Description double Properties | Edit this page View Source CoordinateValue Gets/Sets Coordinates (x,y,z) values. Declaration public virtual Coordinate CoordinateValue { get; set; } Property Value Type Description Coordinate | Edit this page View Source IsValid Gets a value indicating if the Coordinate has valid x- and y ordinate values An ordinate value is valid if it is finite. Declaration public bool IsValid { get; } Property Value Type Description bool true if the coordinate is valid | Edit this page View Source this[Ordinate] Gets or sets the value for the given ordinate. Declaration public virtual double this[Ordinate ordinate] { get; set; } Parameters Type Name Description Ordinate ordinate The ordinate. Property Value Type Description double The ordinate value Exceptions Type Condition ArgumentOutOfRangeException Thrown if ordinate is not one of X, Y, Z, or M. | Edit this page View Source this[int] Gets or sets the ordinate value for the given index. Declaration public virtual double this[int ordinateIndex] { get; set; } Parameters Type Name Description int ordinateIndex The ordinate index Property Value Type Description double The ordinate value Remarks The base implementation supports 0 (X) and 1 (Y) as values for the index. Exceptions Type Condition ArgumentOutOfRangeException Thrown if ordinateIndex is not in the valid range. | Edit this page View Source M Gets or sets the value of the measure, if supported. If no measure value is present, returns NullOrdinate. Declaration public virtual double M { get; set; } Property Value Type Description double Exceptions Type Condition InvalidOperationException Thrown if an attempt is made to set the measure value on an instance where measures are not supported. | Edit this page View Source X Gets or sets the X-ordinate value. Declaration public double X { get; set; } Property Value Type Description double | Edit this page View Source Y Gets or sets the Y-ordinate value. Declaration public double Y { get; set; } Property Value Type Description double | Edit this page View Source Z Gets or sets the Z-ordinate value, if supported. If no Z value is present, returns NullOrdinate. Declaration public virtual double Z { get; set; } Property Value Type Description double Exceptions Type Condition InvalidOperationException Thrown if an attempt is made to set the Z-ordinate value on an instance where the Z-ordinate value is not supported. Methods | Edit this page View Source CompareTo(Coordinate) Compares this object with the specified object for order. Since Coordinates are 2.5D, this routine ignores the z value when making the comparison. Returns -1 : this.x < other.x || ((this.x == other.x) AND (this.y < other.y)) 0 : this.x == other.x AND this.y = other.y 1 : this.x > other.x || ((this.x == other.x) AND (this.y > other.y)) Declaration public int CompareTo(Coordinate other) Parameters Type Name Description Coordinate other Coordinate with which this Coordinate is being compared. Returns Type Description int A negative integer, zero, or a positive integer as this Coordinate is less than, equal to, or greater than the specified Coordinate. | Edit this page View Source CompareTo(object) Compares this object with the specified object for order. Since Coordinates are 2.5D, this routine ignores the z value when making the comparison. Returns -1 : this.x < other.x || ((this.x == other.x) AND (this.y < other.y)) 0 : this.x == other.x AND this.y = other.y 1 : this.x > other.x || ((this.x == other.x) AND (this.y > other.y)) Declaration public int CompareTo(object o) Parameters Type Name Description object o Coordinate with which this Coordinate is being compared. Returns Type Description int A negative integer, zero, or a positive integer as this Coordinate is less than, equal to, or greater than the specified Coordinate. | Edit this page View Source Copy() Create a copy of this Coordinate. Declaration public virtual Coordinate Copy() Returns Type Description Coordinate A copy of this coordinate. | Edit this page View Source Create(double, double, double, double) Create a Coordinate of the same type as this Coordinate, using the provided values. Declaration public virtual Coordinate Create(double x = 0, double y = 0, double z = NaN, double m = NaN) Parameters Type Name Description double x The x-ordinate value, if not provided, it is 0d. double y The y-ordinate value, if not provided, it is 0d. double z The z-ordinate value, if not provided, it is NullOrdinate. double m The m-ordinate value, if not provided, it is NullOrdinate. Returns Type Description Coordinate A new Coordinate Remarks Depending on the actual type the following limitations are in place: Coordinate (Sub-)Class Limitation Coordinate z-parameter and m-parameter are silently dropped. CoordinateZ m-parameter is silently dropped. CoordinateM z-parameter is silently dropped. CoordinateZM No parameter is dropped. | Edit this page View Source Deconstruct(out double, out double) Deconstructs this Coordinate into its components. Declaration public void Deconstruct(out double x, out double y) Parameters Type Name Description double x double y | Edit this page View Source Distance(Coordinate) Computes the 2-dimensional Euclidean distance to another location. Declaration public double Distance(Coordinate c) Parameters Type Name Description Coordinate c A Coordinate with which to do the distance comparison. Returns Type Description double the 2-dimensional Euclidean distance between the locations. Remarks The Z-ordinate is ignored. | Edit this page View Source Equals(Coordinate) Declaration public bool Equals(Coordinate other) Parameters Type Name Description Coordinate other Returns Type Description bool | Edit this page View Source Equals(object) Returns true if other has the same values for the x and y ordinates. Since Coordinates are 2.5D, this routine ignores the z value when making the comparison. Declaration public override sealed bool Equals(object o) Parameters Type Name Description object o Coordinate with which to do the comparison. Returns Type Description bool true if other is a Coordinate with the same values for the x and y ordinates. Overrides object.Equals(object) | Edit this page View Source Equals2D(Coordinate) Returns whether the planar projections of the two Coordinates are equal. Declaration public bool Equals2D(Coordinate other) Parameters Type Name Description Coordinate other Coordinate with which to do the 2D comparison. Returns Type Description bool true if the x- and y-coordinates are equal; the Z coordinates do not have to be equal. | Edit this page View Source Equals2D(Coordinate, double) Tests if another Coordinate has the same values for the X and Y ordinates, within a specified tolerance value. The Z ordinate is ignored. Declaration public bool Equals2D(Coordinate c, double tolerance) Parameters Type Name Description Coordinate c A Coordinate. double tolerance The tolerance value to use. Returns Type Description bool true if the X and Y ordinates are within the given tolerance. Remarks The Z ordinate is ignored. | Edit this page View Source EqualsWithTolerance(double, double, double) Declaration protected static bool EqualsWithTolerance(double v1, double v2, double tolerance) Parameters Type Name Description double v1 double v2 double tolerance Returns Type Description bool | Edit this page View Source GetHashCode() Gets a hashcode for this coordinate. Declaration public override sealed int GetHashCode() Returns Type Description int A hashcode for this coordinate. Overrides object.GetHashCode() | Edit this page View Source ToString() Returns a string of the form (x,y,z) . Declaration public override string ToString() Returns Type Description string string of the form (x,y,z) Overrides object.ToString() Operators | Edit this page View Source implicit operator Coordinate((double x, double y)) Implicitly cast a tuple to a new Coordinate as a copy of this instance. Declaration public static implicit operator Coordinate((double x, double y) value) Parameters Type Name Description (double x, double y) value Returns Type Description Coordinate Implements IComparable IComparable<T>"
  },
  "api/NetTopologySuite.Geometries.CoordinateArrays.BidirectionalComparator.html": {
    "href": "api/NetTopologySuite.Geometries.CoordinateArrays.BidirectionalComparator.html",
    "title": "Class CoordinateArrays.BidirectionalComparator | NetTopologySuite",
    "summary": "Class CoordinateArrays.BidirectionalComparator A comparator for Coordinate arrays modulo their directionality. E.g. if two coordinate arrays are identical but reversed they will compare as equal under this ordering. If the arrays are not equal, the ordering returned is the ordering in the forward direction. Inheritance object CoordinateArrays.BidirectionalComparator Implements IComparer<Coordinate[]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public class CoordinateArrays.BidirectionalComparator : IComparer<Coordinate[]> Methods | Edit this page View Source Compare(Coordinate[], Coordinate[]) Compares the specified Coordinates arrays. Declaration public int Compare(Coordinate[] pts1, Coordinate[] pts2) Parameters Type Name Description Coordinate[] pts1 An array of coordinates Coordinate[] pts2 An array of coordinates Returns Type Description int | Edit this page View Source OldCompare(Coordinate[], Coordinate[]) Declaration [Obsolete(\"Old\")] public int OldCompare(Coordinate[] pts1, Coordinate[] pts2) Parameters Type Name Description Coordinate[] pts1 Coordinate[] pts2 Returns Type Description int Implements IComparer<T>"
  },
  "api/NetTopologySuite.Geometries.CoordinateArrays.ForwardComparator.html": {
    "href": "api/NetTopologySuite.Geometries.CoordinateArrays.ForwardComparator.html",
    "title": "Class CoordinateArrays.ForwardComparator | NetTopologySuite",
    "summary": "Class CoordinateArrays.ForwardComparator Compares two Coordinate arrays in the forward direction of their coordinates, using lexicographic ordering. Inheritance object CoordinateArrays.ForwardComparator Implements IComparer<Coordinate[]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public class CoordinateArrays.ForwardComparator : IComparer<Coordinate[]> Methods | Edit this page View Source Compare(Coordinate[], Coordinate[]) Compares the specified Coordinates arrays. Declaration public int Compare(Coordinate[] pts1, Coordinate[] pts2) Parameters Type Name Description Coordinate[] pts1 An array of coordinates Coordinate[] pts2 An array of coordinates Returns Type Description int Implements IComparer<T>"
  },
  "api/NetTopologySuite.Geometries.CoordinateArrays.html": {
    "href": "api/NetTopologySuite.Geometries.CoordinateArrays.html",
    "title": "Class CoordinateArrays | NetTopologySuite",
    "summary": "Class CoordinateArrays Useful utility functions for handling Coordinate arrays. Inheritance object CoordinateArrays Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public static class CoordinateArrays Methods | Edit this page View Source AtLeastNCoordinatesOrNothing(int, Coordinate[]) Returns either the given coordinate array if its length is greater than the given amount, or an empty coordinate array. Declaration public static Coordinate[] AtLeastNCoordinatesOrNothing(int n, Coordinate[] c) Parameters Type Name Description int n Length amount. Coordinate[] c Array of Coordinates. Returns Type Description Coordinate[] New Coordinate array. | Edit this page View Source Compare(Coordinate[], Coordinate[]) Compares two Coordinate arrays in the forward direction of their coordinates, using lexicographic ordering. Declaration public static int Compare(Coordinate[] pts1, Coordinate[] pts2) Parameters Type Name Description Coordinate[] pts1 Coordinate[] pts2 Returns Type Description int | Edit this page View Source CopyDeep(Coordinate[]) Creates a deep copy of the argument Coordinate array. Declaration public static Coordinate[] CopyDeep(Coordinate[] coordinates) Parameters Type Name Description Coordinate[] coordinates Array of Coordinates. Returns Type Description Coordinate[] Deep copy of the input. | Edit this page View Source CopyDeep(Coordinate[], int, Coordinate[], int, int) Creates a deep copy of a given section of a source Coordinate array into a destination Coordinate array. The destination array must be an appropriate size to receive the copied coordinates. Declaration public static void CopyDeep(Coordinate[] src, int srcStart, Coordinate[] dest, int destStart, int length) Parameters Type Name Description Coordinate[] src An array of Coordinates int srcStart The index to start copying from Coordinate[] dest The array to receive the deep-copied coordinates int destStart The destination index to start copying to int length The number of items to copy | Edit this page View Source Dimension(Coordinate[]) Determine dimension based on subclass of Coordinate. Declaration public static int Dimension(Coordinate[] pts) Parameters Type Name Description Coordinate[] pts pts supplied coordinates Returns Type Description int number of ordinates recorded | Edit this page View Source EnforceConsistency(Coordinate[]) Utility method ensuring array contents are of consistent dimension and measures. Array is modified in place if required, coordinates are replaced in the array as required to ensure all coordinates have the same dimension and measures. The final dimension and measures used are the maximum found when checking the array. Declaration public static void EnforceConsistency(Coordinate[] array) Parameters Type Name Description Coordinate[] array Modified in place to coordinates of consistent dimension and measures. | Edit this page View Source EnforceConsistency(Coordinate[], int, int) Utility method ensuring array contents are of the specified dimension and measures. Array is returned unmodified if consistent, or a copy of the array is made with each inconsistent coordinate duplicated into an instance of the correct dimension and measures. Declaration public static Coordinate[] EnforceConsistency(Coordinate[] array, int dimension, int measures) Parameters Type Name Description Coordinate[] array A coordinate array int dimension int measures Returns Type Description Coordinate[] Input array or copy created if required to enforce consistency. | Edit this page View Source Envelope(Coordinate[]) Computes the Envelope(Coordinate[]) of the coordinates. Declaration public static Envelope Envelope(Coordinate[] coordinates) Parameters Type Name Description Coordinate[] coordinates the Coordinate array to scan. Returns Type Description Envelope the Envelope(Coordinate[]) of the coordinates. | Edit this page View Source Equals(Coordinate[], Coordinate[]) Returns true if the two arrays are identical, both null, or pointwise equal (as compared using Coordinate.Equals). Declaration public static bool Equals(Coordinate[] coord1, Coordinate[] coord2) Parameters Type Name Description Coordinate[] coord1 First array of Coordinates. Coordinate[] coord2 Second array of Coordinates. Returns Type Description bool true if two Coordinates array are equals; false otherwise | Edit this page View Source Equals(Coordinate[], Coordinate[], IComparer<Coordinate[]>) Returns true if the two arrays are identical, both null, or pointwise equal, using a user-defined IComparer for Coordinates. Declaration public static bool Equals(Coordinate[] coord1, Coordinate[] coord2, IComparer<Coordinate[]> coordinateComparer) Parameters Type Name Description Coordinate[] coord1 An array of Coordinates. Coordinate[] coord2 Another array of Coordinates. IComparer<Coordinate[]> coordinateComparer A IComparer for Coordinates. Returns Type Description bool | Edit this page View Source Extract(Coordinate[], int, int) Extracts a subsequence of the input Coordinate array from indices start to end (inclusive). The input indices are clamped to the array size; If the end index is less than the start index, the extracted array will be empty. Declaration public static Coordinate[] Extract(Coordinate[] pts, int start, int end) Parameters Type Name Description Coordinate[] pts The input array. int start The index of the start of the subsequence to extract. int end The index of the end of the subsequence to extract. Returns Type Description Coordinate[] A subsequence of the input array. | Edit this page View Source HasRepeatedOrInvalidPoints(Coordinate[]) Tests whether an array has any repeated or invalid coordinates. Declaration public static bool HasRepeatedOrInvalidPoints(Coordinate[] coord) Parameters Type Name Description Coordinate[] coord An array of coordinates Returns Type Description bool true if the array contains repeated or invalid coordinates | Edit this page View Source HasRepeatedPoints(Coordinate[]) Returns whether Equals(object) returns true for any two consecutive coordinates in the given array. Declaration public static bool HasRepeatedPoints(Coordinate[] coord) Parameters Type Name Description Coordinate[] coord An array of Coordinates. Returns Type Description bool true if coord has repeated points; false otherwise. | Edit this page View Source IncreasingDirection(Coordinate[]) Determines which orientation of the Coordinate array is (overall) increasing. In other words, determines which end of the array is \"smaller\" (using the standard ordering on Coordinate). Returns an integer indicating the increasing direction. If the sequence is a palindrome, it is defined to be oriented in a positive direction. Declaration public static int IncreasingDirection(Coordinate[] pts) Parameters Type Name Description Coordinate[] pts The array of Coordinates to test. Returns Type Description int 1 if the array is smaller at the start or is a palindrome, -1 if smaller at the end. | Edit this page View Source IndexOf(Coordinate, Coordinate[]) Returns the index of coordinate in coordinates. The first position is 0; the second is 1; etc. Declaration public static int IndexOf(Coordinate coordinate, Coordinate[] coordinates) Parameters Type Name Description Coordinate coordinate A Coordinate to search for. Coordinate[] coordinates A Coordinate array to search. Returns Type Description int The position of coordinate, or -1 if it is not found. | Edit this page View Source Intersection(Coordinate[], Envelope) Extracts the coordinates which intersect an Envelope(Coordinate[]). Declaration public static Coordinate[] Intersection(Coordinate[] coordinates, Envelope env) Parameters Type Name Description Coordinate[] coordinates The coordinates to scan Envelope env The envelope to intersect with Returns Type Description Coordinate[] An array of coordinates which intersect with the envelope | Edit this page View Source IsRing(Coordinate[]) Tests whether an array of Coordinates forms a ring, by checking length and closure. Self-intersection is not checked. Declaration public static bool IsRing(Coordinate[] pts) Parameters Type Name Description Coordinate[] pts An array of Coordinates Returns Type Description bool true if the coordinate form a ring. | Edit this page View Source Measures(Coordinate[]) Determine number of measures based on subclass of Coordinate. Declaration public static int Measures(Coordinate[] pts) Parameters Type Name Description Coordinate[] pts supplied coordinates Returns Type Description int number of measures recorded | Edit this page View Source MinCoordinate(Coordinate[]) Returns the minimum coordinate, using the usual lexicographic comparison. Declaration public static Coordinate MinCoordinate(Coordinate[] coordinates) Parameters Type Name Description Coordinate[] coordinates Array to search. Returns Type Description Coordinate The minimum coordinate in the array, found using CompareTo. | Edit this page View Source PointNotInList(Coordinate[], Coordinate[]) Finds a Coordinate in a list of Coordinates which is not contained in another list of Coordinates. Declaration public static Coordinate PointNotInList(Coordinate[] testPts, Coordinate[] pts) Parameters Type Name Description Coordinate[] testPts The Coordinates to test. Coordinate[] pts An array of Coordinates to test the input points against. Returns Type Description Coordinate A Coordinate from testPts which is not in pts, or null. | Edit this page View Source RemoveNull(Coordinate[]) Collapses a coordinate array to remove all null elements. Declaration public static Coordinate[] RemoveNull(Coordinate[] coord) Parameters Type Name Description Coordinate[] coord The coordinate array to collapse Returns Type Description Coordinate[] An Array containing only non-null elements | Edit this page View Source RemoveRepeatedOrInvalidPoints(Coordinate[]) If the coordinate array argument has repeated or invalid points, constructs a new array containing no repeated points. Otherwise, returns the argument. Declaration public static Coordinate[] RemoveRepeatedOrInvalidPoints(Coordinate[] coord) Parameters Type Name Description Coordinate[] coord An array of coordinates Returns Type Description Coordinate[] The array with repeated or invalid coordinates removed. | Edit this page View Source RemoveRepeatedPoints(Coordinate[]) If the coordinate array argument has repeated points, constructs a new array containing no repeated points. Otherwise, returns the argument. Declaration public static Coordinate[] RemoveRepeatedPoints(Coordinate[] coord) Parameters Type Name Description Coordinate[] coord An array of Coordinates Returns Type Description Coordinate[] The array with repeated coordinates removed | Edit this page View Source Reverse(Coordinate[]) Reverses the coordinates in an array in-place. Declaration public static void Reverse(Coordinate[] coord) Parameters Type Name Description Coordinate[] coord Array of Coordinates. | Edit this page View Source Scroll(Coordinate[], Coordinate) Shifts the positions of the coordinates until firstCoordinate is first. Declaration public static void Scroll(Coordinate[] coordinates, Coordinate firstCoordinate) Parameters Type Name Description Coordinate[] coordinates Array to rearrange. Coordinate firstCoordinate Coordinate to make first. | Edit this page View Source Scroll(Coordinate[], int) Shifts the positions of the coordinates until the coordinate at indexOfFirstCoordinate is first. Declaration public static void Scroll(Coordinate[] coordinates, int indexOfFirstCoordinate) Parameters Type Name Description Coordinate[] coordinates The array of coordinates to arrange int indexOfFirstCoordinate The index of the coordinate to make first | Edit this page View Source Scroll(Coordinate[], int, bool) Shifts the positions of the coordinates until the coordinate at indexOfFirstCoordinate is first. Declaration public static void Scroll(Coordinate[] coordinates, int indexOfFirstCoordinate, bool ensureRing) Parameters Type Name Description Coordinate[] coordinates The array of coordinates to arrange int indexOfFirstCoordinate The index of the coordinate to make first bool ensureRing A flag indicating if returned array should form a ring. Remarks If ensureRing is true, first and last coordinate of the returned array are equal. | Edit this page View Source ToCoordinateArray(IEnumerable<Coordinate>) Converts the given IEnumerable<T> of Coordinates into a Coordinate array. Declaration public static Coordinate[] ToCoordinateArray(IEnumerable<Coordinate> coordList) Parameters Type Name Description IEnumerable<Coordinate> coordList IEnumerable<T> of coordinates. Returns Type Description Coordinate[]"
  },
  "api/NetTopologySuite.Geometries.CoordinateEqualityComparer.html": {
    "href": "api/NetTopologySuite.Geometries.CoordinateEqualityComparer.html",
    "title": "Class CoordinateEqualityComparer | NetTopologySuite",
    "summary": "Class CoordinateEqualityComparer A class that can be used to test coordinates for equality. It uses the algorithm that was default for NTS prior to v2.2, i.e. checks if the 2d distance between coordinates x and y is less than or equal to a tolerance value. Inheritance object EqualityComparer<Coordinate> CoordinateEqualityComparer PerOrdinateEqualityComparer Implements IEqualityComparer<Coordinate> IEqualityComparer Inherited Members EqualityComparer<Coordinate>.Default object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public class CoordinateEqualityComparer : EqualityComparer<Coordinate>, IEqualityComparer<Coordinate>, IEqualityComparer Methods | Edit this page View Source AreEqual(Coordinate, Coordinate, double) Method to test 2 Coordinates for equality, allowing a tolerance. Declaration protected virtual bool AreEqual(Coordinate a, Coordinate b, double tolerance) Parameters Type Name Description Coordinate a The 1st Coordinate Coordinate b The 2nd Coordinate double tolerance A tolerance value Returns Type Description bool true if a and b can be considered equal. | Edit this page View Source Equals(Coordinate, Coordinate) Declaration public override sealed bool Equals(Coordinate x, Coordinate y) Parameters Type Name Description Coordinate x Coordinate y Returns Type Description bool Overrides EqualityComparer<Coordinate>.Equals(Coordinate, Coordinate) | Edit this page View Source Equals(Coordinate, Coordinate, double) Compares Coordinates x and y for equality allowing for a tolerance. Declaration public bool Equals(Coordinate x, Coordinate y, double tolerance) Parameters Type Name Description Coordinate x A Coordinate Coordinate y A Coordinate double tolerance A tolerance value. Returns Type Description bool true if x and y can be considered equal; otherwise false. | Edit this page View Source GetHashCode(Coordinate) Declaration public override sealed int GetHashCode(Coordinate c) Parameters Type Name Description Coordinate c Returns Type Description int Overrides EqualityComparer<Coordinate>.GetHashCode(Coordinate) Implements IEqualityComparer<T> IEqualityComparer"
  },
  "api/NetTopologySuite.Geometries.CoordinateFilter.html": {
    "href": "api/NetTopologySuite.Geometries.CoordinateFilter.html",
    "title": "Class CoordinateFilter | NetTopologySuite",
    "summary": "Class CoordinateFilter An implementation of ICoordinateFilter that delegates the filter action to a provided method. Inheritance object CoordinateFilter Implements ICoordinateFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public class CoordinateFilter : ICoordinateFilter Constructors | Edit this page View Source CoordinateFilter(Action<Coordinate>) Creates an instance of this class providing the action to perform on any coordinate. Declaration public CoordinateFilter(Action<Coordinate> coordFilterAction) Parameters Type Name Description Action<Coordinate> coordFilterAction The action Exceptions Type Condition ArgumentNullException thrown if coordFilterAction is null. Methods | Edit this page View Source Filter(Coordinate) Performs an operation with the provided coord. Note that there is no guarantee that the input coordinate is the actual object stored in the source geometry, so changes to the coordinate object may not be persistent. Declaration public void Filter(Coordinate coord) Parameters Type Name Description Coordinate coord A Coordinate to which the filter is applied. Implements ICoordinateFilter"
  },
  "api/NetTopologySuite.Geometries.CoordinateList.html": {
    "href": "api/NetTopologySuite.Geometries.CoordinateList.html",
    "title": "Class CoordinateList | NetTopologySuite",
    "summary": "Class CoordinateList A list of Coordinates, which may be set to prevent repeated coordinates from occurring in the list. Inheritance object List<Coordinate> CoordinateList Implements IList<Coordinate> ICollection<Coordinate> IReadOnlyList<Coordinate> IReadOnlyCollection<Coordinate> IEnumerable<Coordinate> IList ICollection IEnumerable ICloneable Inherited Members List<Coordinate>.Add(Coordinate) List<Coordinate>.AddRange(IEnumerable<Coordinate>) List<Coordinate>.AsReadOnly() List<Coordinate>.BinarySearch(Coordinate) List<Coordinate>.BinarySearch(Coordinate, IComparer<Coordinate>) List<Coordinate>.BinarySearch(int, int, Coordinate, IComparer<Coordinate>) List<Coordinate>.Clear() List<Coordinate>.Contains(Coordinate) List<Coordinate>.ConvertAll<TOutput>(Converter<Coordinate, TOutput>) List<Coordinate>.CopyTo(Coordinate[]) List<Coordinate>.CopyTo(Coordinate[], int) List<Coordinate>.CopyTo(int, Coordinate[], int, int) List<Coordinate>.Exists(Predicate<Coordinate>) List<Coordinate>.Find(Predicate<Coordinate>) List<Coordinate>.FindAll(Predicate<Coordinate>) List<Coordinate>.FindIndex(int, int, Predicate<Coordinate>) List<Coordinate>.FindIndex(int, Predicate<Coordinate>) List<Coordinate>.FindIndex(Predicate<Coordinate>) List<Coordinate>.FindLast(Predicate<Coordinate>) List<Coordinate>.FindLastIndex(int, int, Predicate<Coordinate>) List<Coordinate>.FindLastIndex(int, Predicate<Coordinate>) List<Coordinate>.FindLastIndex(Predicate<Coordinate>) List<Coordinate>.ForEach(Action<Coordinate>) List<Coordinate>.GetEnumerator() List<Coordinate>.GetRange(int, int) List<Coordinate>.IndexOf(Coordinate) List<Coordinate>.IndexOf(Coordinate, int) List<Coordinate>.IndexOf(Coordinate, int, int) List<Coordinate>.Insert(int, Coordinate) List<Coordinate>.InsertRange(int, IEnumerable<Coordinate>) List<Coordinate>.LastIndexOf(Coordinate) List<Coordinate>.LastIndexOf(Coordinate, int) List<Coordinate>.LastIndexOf(Coordinate, int, int) List<Coordinate>.Remove(Coordinate) List<Coordinate>.RemoveAll(Predicate<Coordinate>) List<Coordinate>.RemoveAt(int) List<Coordinate>.RemoveRange(int, int) List<Coordinate>.Reverse() List<Coordinate>.Reverse(int, int) List<Coordinate>.Sort() List<Coordinate>.Sort(IComparer<Coordinate>) List<Coordinate>.Sort(Comparison<Coordinate>) List<Coordinate>.Sort(int, int, IComparer<Coordinate>) List<Coordinate>.ToArray() List<Coordinate>.TrimExcess() List<Coordinate>.TrueForAll(Predicate<Coordinate>) List<Coordinate>.Capacity List<Coordinate>.Count List<Coordinate>.this[int] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public class CoordinateList : List<Coordinate>, IList<Coordinate>, ICollection<Coordinate>, IReadOnlyList<Coordinate>, IReadOnlyCollection<Coordinate>, IEnumerable<Coordinate>, IList, ICollection, IEnumerable, ICloneable Constructors | Edit this page View Source CoordinateList() Constructs a new list without any coordinates Declaration public CoordinateList() | Edit this page View Source CoordinateList(Coordinate[]) Constructs a new list from an array of Coordinates, allowing repeated points. (I.e. this constructor produces a CoordinateList with exactly the same set of points as the input array.) Declaration public CoordinateList(Coordinate[] coord) Parameters Type Name Description Coordinate[] coord Initial coordinates | Edit this page View Source CoordinateList(Coordinate[], bool) Constructs a new list from an array of Coordinates, allowing caller to specify if repeated points are to be removed. Declaration public CoordinateList(Coordinate[] coord, bool allowRepeated) Parameters Type Name Description Coordinate[] coord Array of coordinates to load into the list. bool allowRepeated If false, repeated points are removed. | Edit this page View Source CoordinateList(IList<Coordinate>) Constructs a new list from a collection of Coordinates, allows repeated points. Declaration public CoordinateList(IList<Coordinate> coordList) Parameters Type Name Description IList<Coordinate> coordList Collection of coordinates to load into the list. | Edit this page View Source CoordinateList(IList<Coordinate>, bool) Constructs a new list from a collection of Coordinates, allowing caller to specify if repeated points are to be removed. Declaration public CoordinateList(IList<Coordinate> coordList, bool allowRepeated) Parameters Type Name Description IList<Coordinate> coordList Collection of coordinates to load into the list. bool allowRepeated If false, repeated points are removed. | Edit this page View Source CoordinateList(int) Constructs a new list without any coordinates but an initial capacity Declaration public CoordinateList(int capacity) Parameters Type Name Description int capacity The initial capacity of the list. Methods | Edit this page View Source Add(Coordinate, bool) Adds a coordinate to the end of this list. Declaration public bool Add(Coordinate coord, bool allowRepeated) Parameters Type Name Description Coordinate coord Coordinate to be inserted. bool allowRepeated If set to false, repeated coordinates are collapsed. Returns Type Description bool Return true if all ok. | Edit this page View Source Add(Coordinate[], bool) Adds an array of coordinates to the list. Declaration public bool Add(Coordinate[] coord, bool allowRepeated) Parameters Type Name Description Coordinate[] coord Coordinates to be inserted. bool allowRepeated If set to false, repeated coordinates are collapsed. Returns Type Description bool Return true. | Edit this page View Source Add(Coordinate[], bool, bool) Adds an array of coordinates to the list. Declaration public bool Add(Coordinate[] coord, bool allowRepeated, bool direction) Parameters Type Name Description Coordinate[] coord Coordinates to be inserted. bool allowRepeated If set to false, repeated coordinates are collapsed. bool direction If false, the array is added in reverse order. Returns Type Description bool Return true. | Edit this page View Source Add(Coordinate[], bool, int, int) Adds a section of an array of coordinates to the list. Declaration public bool Add(Coordinate[] coord, bool allowRepeated, int start, int end) Parameters Type Name Description Coordinate[] coord The coordinates bool allowRepeated If set to false, repeated coordinates are collapsed int start The index to start from int end The index to add up to but not including Returns Type Description bool true (as by general collection contract) | Edit this page View Source Add(int, Coordinate, bool) Inserts the specified coordinate at the specified position in this list. Declaration public void Add(int i, Coordinate coord, bool allowRepeated) Parameters Type Name Description int i The position at which to insert Coordinate coord the coordinate to insert bool allowRepeated if set to false, repeated coordinates are collapsed | Edit this page View Source Add(object, bool) Adds a coordinate to the list. Declaration public bool Add(object obj, bool allowRepeated) Parameters Type Name Description object obj Coordinate to be inserted, as object. bool allowRepeated If set to false, repeated coordinates are collapsed. Returns Type Description bool Return true. | Edit this page View Source AddAll(IEnumerable<Coordinate>, bool) Add an array of coordinates. Declaration public bool AddAll(IEnumerable<Coordinate> coll, bool allowRepeated) Parameters Type Name Description IEnumerable<Coordinate> coll Coordinates collection to be inserted. bool allowRepeated If set to false, repeated coordinates are collapsed. Returns Type Description bool Return true if at least one element has added (IList not empty). | Edit this page View Source Clone() Returns a deep copy of this collection. Declaration public object Clone() Returns Type Description object The copied object. | Edit this page View Source CloseRing() Ensure this coordList is a ring, by adding the start point if necessary. Declaration public void CloseRing() | Edit this page View Source GetCoordinate(int) Returns the coordinate at specified index. Declaration public Coordinate GetCoordinate(int i) Parameters Type Name Description int i Coordinate index. Returns Type Description Coordinate | Edit this page View Source ToCoordinateArray() Returns the Coordinates in this collection. Declaration public Coordinate[] ToCoordinateArray() Returns Type Description Coordinate[] Coordinates as Coordinate[] array. | Edit this page View Source ToCoordinateArray(bool) Creates an array containing the coordinates in this list, oriented in the given direction (forward or reverse). Declaration public Coordinate[] ToCoordinateArray(bool isForward) Parameters Type Name Description bool isForward The direction value: true for forward, false for reverse Returns Type Description Coordinate[] An oriented array of coordinates Implements IList<T> ICollection<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IList ICollection IEnumerable ICloneable"
  },
  "api/NetTopologySuite.Geometries.CoordinateM.html": {
    "href": "api/NetTopologySuite.Geometries.CoordinateM.html",
    "title": "Class CoordinateM | NetTopologySuite",
    "summary": "Class CoordinateM A lightweight class used to store coordinates on the 2-dimensional Cartesian plane and an additional measure (M) value. This data object is suitable for use with coordinate sequences with dimension = 3 and measures = 1. Inheritance object Coordinate CoordinateM Implements IComparable IComparable<Coordinate> Inherited Members Coordinate.NullOrdinate Coordinate.X Coordinate.Y Coordinate.Z Coordinate.this[Ordinate] Coordinate.Deconstruct(out double, out double) Coordinate.IsValid Coordinate.Equals2D(Coordinate) Coordinate.Equals2D(Coordinate, double) Coordinate.Equals(Coordinate) Coordinate.CompareTo(object) Coordinate.CompareTo(Coordinate) Coordinate.Copy() Coordinate.Distance(Coordinate) Coordinate.Equals(object) Coordinate.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax [Serializable] public sealed class CoordinateM : Coordinate, IComparable, IComparable<Coordinate> Remarks It is distinct from Point, which is a subclass of Geometry. Unlike objects of type Point (which contain additional information such as an envelope, a precision model, and spatial reference system information), a CoordinateM only contains ordinate values and properties. CoordinateMs are two-dimensional points, with an additional M-ordinate. If an M-ordinate value is not specified or not defined, constructed coordinates have a M-ordinate of NaN (which is also the value of NullOrdinate). Apart from the basic accessor functions, NTS supports only specific operations involving the M-ordinate. Implementations may optionally support Z-ordinate and M-measure values as appropriate for a CoordinateSequence. Use of Z and M setters or NetTopologySuite.Geometries.CoordinateM.this[int] indexer are recommended. Constructors | Edit this page View Source CoordinateM() Constructs a CoordinateM at (0,0,NaN). Declaration public CoordinateM() | Edit this page View Source CoordinateM(Coordinate) Constructs a CoordinateM having the same (x,y) values as c. Declaration public CoordinateM(Coordinate c) Parameters Type Name Description Coordinate c Coordinate to copy. | Edit this page View Source CoordinateM(double, double) Constructs a CoordinateM at (x,y,NaN). Declaration public CoordinateM(double x, double y) Parameters Type Name Description double x X value. double y Y value. | Edit this page View Source CoordinateM(double, double, double) Constructs a CoordinateM at (x,y,z). Declaration public CoordinateM(double x, double y, double m) Parameters Type Name Description double x The X value double y The Y value double m The measure value Properties | Edit this page View Source CoordinateValue Gets/Sets CoordinateMs (x,y,z) values. Declaration public override Coordinate CoordinateValue { get; set; } Property Value Type Description Coordinate Overrides Coordinate.CoordinateValue | Edit this page View Source this[int] Gets or sets the ordinate value for the given index. Declaration public override double this[int ordinateIndex] { get; set; } Parameters Type Name Description int ordinateIndex The ordinate index Property Value Type Description double The ordinate value Overrides Coordinate.this[int] Remarks The base implementation supports 0 (X), 1 (Y) and 2 (M) as values for the index. Exceptions Type Condition ArgumentOutOfRangeException Thrown if ordinateIndex is not in the valid range. | Edit this page View Source M Gets or sets the M-ordinate value. Declaration public override double M { get; set; } Property Value Type Description double Overrides Coordinate.M Methods | Edit this page View Source Create(double, double, double, double) Create a Coordinate of the same type as this Coordinate, using the provided values for x, y and m. Declaration public override Coordinate Create(double x = 0, double y = 0, double z = NaN, double m = NaN) Parameters Type Name Description double x The x-ordinate value, if not provided, it is 0d. double y The y-ordinate value, if not provided, it is 0d. double z The z-ordinate value, if not provided, it is NullOrdinate. double m The m-ordinate value, if not provided, it is NullOrdinate. Returns Type Description Coordinate A new CoordinateM Overrides Coordinate.Create(double, double, double, double) Remarks A provided value for z will be silently dropped. | Edit this page View Source Deconstruct(out double, out double, out double) Deconstructs this CoordinateM into its x, y and m values. Declaration public void Deconstruct(out double x, out double y, out double m) Parameters Type Name Description double x double y double m | Edit this page View Source ToString() Returns a string of the form (x, y, m=m). Declaration public override string ToString() Returns Type Description string string of the form (x, y, m=m) Overrides Coordinate.ToString() Operators | Edit this page View Source implicit operator CoordinateM((double x, double y, double m)) Implicit conversion of a (double x, double y, double m) value to a CoordinateM. Declaration public static implicit operator CoordinateM((double x, double y, double m) value) Parameters Type Name Description (double x, double y, double m) value Returns Type Description CoordinateM | Edit this page View Source implicit operator CoordinateM((double x, double y)) Implicit conversion of a (double x, double y) value to a CoordinateM. Declaration public static implicit operator CoordinateM((double x, double y) value) Parameters Type Name Description (double x, double y) value Returns Type Description CoordinateM Implements IComparable IComparable<T>"
  },
  "api/NetTopologySuite.Geometries.CoordinateSequence.html": {
    "href": "api/NetTopologySuite.Geometries.CoordinateSequence.html",
    "title": "Class CoordinateSequence | NetTopologySuite",
    "summary": "Class CoordinateSequence Inheritance object CoordinateSequence CoordinateArraySequence DotSpatialAffineCoordinateSequence PackedCoordinateSequence RawCoordinateSequence AxisPlaneCoordinateSequence Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax [Serializable] public abstract class CoordinateSequence Constructors | Edit this page View Source CoordinateSequence(int, int, int) Initializes a new instance of the CoordinateSequence class. Declaration protected CoordinateSequence(int count, int dimension, int measures) Parameters Type Name Description int count The value for Count. int dimension The value for Dimension. int measures The value for Measures. Exceptions Type Condition ArgumentOutOfRangeException Thrown when any argument is negative. ArgumentException Thrown when dimension and measures specify fewer than two (2) spatial dimensions. Properties | Edit this page View Source Count Gets a value indicating the number of coordinates in this sequence. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source Dimension Returns the dimension (number of ordinates in each coordinate) for this sequence. This total includes any measures, indicated by non-zero Measures. Declaration public int Dimension { get; } Property Value Type Description int | Edit this page View Source First Gets a value indicating the first Coordinate in this sequence. For LineStrings e.g. this is the starting point. Declaration public Coordinate First { get; } Property Value Type Description Coordinate First Coordinate in sequence or null if empty. | Edit this page View Source HasM Gets a value indicating if GetM(int) is supported. Declaration public bool HasM { get; } Property Value Type Description bool | Edit this page View Source HasZ Gets a value indicating if GetZ(int) is supported. Declaration public bool HasZ { get; } Property Value Type Description bool | Edit this page View Source Last Gets a value indicating the last Coordinate in this sequence. For LineStrings e.g. this is the ending point. Declaration public Coordinate Last { get; } Property Value Type Description Coordinate Last Coordinate in sequence or null if empty. | Edit this page View Source MOrdinateIndex Gets the index of the M ordinate (for use with GetOrdinate(int, int) or SetOrdinate(int, int, double)), or -1 if HasM is false. Declaration public int MOrdinateIndex { get; } Property Value Type Description int Remarks It's just a cache for TryGetOrdinateIndex(Ordinate, out int) with M. | Edit this page View Source Measures Gets the number of measures included in Dimension for each coordinate for this sequence. Declaration public int Measures { get; } Property Value Type Description int Remarks For a measured coordinate sequence a non-zero value is returned. For XY sequence measures is zero For XYM sequence measure is one For XYZ sequence measure is zero For XYZM sequence measure is one Values greater than one are supported | Edit this page View Source Ordinates Gets the kind of ordinates this sequence supplies. Declaration public Ordinates Ordinates { get; } Property Value Type Description Ordinates | Edit this page View Source Spatial Gets the number of non-measure dimensions included in Dimension for each coordinate for this sequence. Equivalent to Dimension - Measures. Declaration public int Spatial { get; } Property Value Type Description int | Edit this page View Source ZOrdinateIndex Gets the index of the Z ordinate (for use with GetOrdinate(int, int) or SetOrdinate(int, int, double)), or -1 if HasZ is false. Declaration public int ZOrdinateIndex { get; } Property Value Type Description int Remarks It's just a cache for TryGetOrdinateIndex(Ordinate, out int) with Z. Methods | Edit this page View Source Copy() Returns a deep copy of this collection. Declaration public abstract CoordinateSequence Copy() Returns Type Description CoordinateSequence A copy of the coordinate sequence containing copies of all points | Edit this page View Source CreateCoordinate() Creates a coordinate for use in this sequence. Declaration public virtual Coordinate CreateCoordinate() Returns Type Description Coordinate A coordinate for use with this sequence Remarks The coordinate is created supporting the same number of Dimension and Measures as this sequence and is suitable for use with GetCoordinate(int, Coordinate). | Edit this page View Source ExpandEnvelope(Envelope) Expands the given Envelope to include the coordinates in the sequence. Allows implementing classes to optimize access to coordinate values. Declaration public virtual Envelope ExpandEnvelope(Envelope env) Parameters Type Name Description Envelope env The envelope to expand. Returns Type Description Envelope A reference to the expanded envelope. | Edit this page View Source GetCoordinate(int) Returns (possibly a copy of) the ith Coordinate in this collection. Whether or not the Coordinate returned is the actual underlying Coordinate or merely a copy depends on the implementation. Note that in the future the semantics of this method may change to guarantee that the Coordinate returned is always a copy. Callers are advised not to assume that they can modify a CoordinateSequence by modifying the Coordinate returned by this method. Declaration public virtual Coordinate GetCoordinate(int i) Parameters Type Name Description int i Returns Type Description Coordinate | Edit this page View Source GetCoordinate(int, Coordinate) Copies the i'th coordinate in the sequence to the supplied Coordinate. At least the first two dimensions must be copied. Declaration public virtual void GetCoordinate(int index, Coordinate coord) Parameters Type Name Description int index The index of the coordinate to copy. Coordinate coord A Coordinate to receive the value. | Edit this page View Source GetCoordinateCopy(int) Returns a copy of the i'th coordinate in this sequence. This method optimizes the situation where the caller is going to make a copy anyway - if the implementation has already created a new Coordinate object, no further copy is needed. Declaration public virtual Coordinate GetCoordinateCopy(int i) Parameters Type Name Description int i The index of the coordinate to retrieve. Returns Type Description Coordinate A copy of the i'th coordinate in the sequence | Edit this page View Source GetM(int) Returns ordinate M of the specified coordinate if available. Declaration public virtual double GetM(int index) Parameters Type Name Description int index Returns Type Description double The value of the M ordinate in the index'th coordinate, or NullOrdinate if not defined. | Edit this page View Source GetOrdinate(int, Ordinate) Returns the ordinate of a coordinate in this sequence. Declaration public double GetOrdinate(int index, Ordinate ordinate) Parameters Type Name Description int index The coordinate index in the sequence. Ordinate ordinate The ordinate value to get. Returns Type Description double The ordinate value, or NullOrdinate if the sequence does not provide values for ordinate\"/> | Edit this page View Source GetOrdinate(int, int) Returns the ordinate of a coordinate in this sequence. Ordinate indices 0 and 1 are assumed to be X and Y. Ordinate indices greater than 1 have user-defined semantics (for instance, they may contain other dimensions or measure values as described by Dimension and Measures. Declaration public abstract double GetOrdinate(int index, int ordinateIndex) Parameters Type Name Description int index The coordinate index in the sequence. int ordinateIndex The ordinate index in the coordinate (in range [0, dimension-1]). Returns Type Description double The ordinate value, or NullOrdinate if the sequence does not provide values for ordinateIndex\"/> Remarks If the sequence does not provide value for the required ordinate, the implementation must not throw an exception, it should return NullOrdinate. | Edit this page View Source GetX(int) Returns ordinate X (0) of the specified coordinate. Declaration public virtual double GetX(int index) Parameters Type Name Description int index Returns Type Description double The value of the X ordinate in the index'th coordinate. | Edit this page View Source GetY(int) Returns ordinate Y (1) of the specified coordinate. Declaration public virtual double GetY(int index) Parameters Type Name Description int index Returns Type Description double The value of the Y ordinate in the index'th coordinate. | Edit this page View Source GetZ(int) Returns ordinate Z of the specified coordinate if available. Declaration public virtual double GetZ(int index) Parameters Type Name Description int index Returns Type Description double The value of the Z ordinate in the index'th coordinate, or NullOrdinate if not defined. | Edit this page View Source Reversed() Returns a reversed copy of this CoordinateSequence. Declaration public virtual CoordinateSequence Reversed() Returns Type Description CoordinateSequence A reversed copy of this CoordinateSequence. Exceptions Type Condition InvalidOperationException Thrown when Copy() returned null. | Edit this page View Source SetM(int, double) Sets ordinate M of the specified coordinate to the specified value if present. Declaration public virtual void SetM(int index, double value) Parameters Type Name Description int index The index of the coordinate whose M value to set if present. double value The value to set the coordinate's M value to if present. | Edit this page View Source SetOrdinate(int, Ordinate, double) Sets the value for a given ordinate of a coordinate in this sequence. Declaration public void SetOrdinate(int index, Ordinate ordinate, double value) Parameters Type Name Description int index The coordinate index in the sequence. Ordinate ordinate The ordinate value to set. double value The new ordinate value. | Edit this page View Source SetOrdinate(int, int, double) Sets the value for a given ordinate of a coordinate in this sequence. Declaration public abstract void SetOrdinate(int index, int ordinateIndex, double value) Parameters Type Name Description int index The coordinate index in the sequence. int ordinateIndex The ordinate index in the coordinate (in range [0, dimension-1]). double value The new ordinate value. Remarks If the sequence can't store the ordinate value, the implementation must not throw an exception, it should simply ignore the call. | Edit this page View Source SetX(int, double) Sets ordinate X (0) of the specified coordinate to the specified value. Declaration public virtual void SetX(int index, double value) Parameters Type Name Description int index The index of the coordinate whose X value to set. double value The value to set the coordinate's X value to. | Edit this page View Source SetY(int, double) Sets ordinate Y (1) of the specified coordinate to the specified value. Declaration public virtual void SetY(int index, double value) Parameters Type Name Description int index The index of the coordinate whose Y value to set. double value The value to set the coordinate's Y value to. | Edit this page View Source SetZ(int, double) Sets ordinate Z of the specified coordinate to the specified value if present. Declaration public virtual void SetZ(int index, double value) Parameters Type Name Description int index The index of the coordinate whose Z value to set if present. double value The value to set the coordinate's Z value to if present. | Edit this page View Source ToCoordinateArray() Returns (possibly copies of) the Coordinates in this collection. Whether or not the Coordinates returned are the actual underlying Coordinates or merely copies depends on the implementation. Note that if this implementation does not store its data as an array of Coordinates, this method will incur a performance penalty because the array needs to be built from scratch. Declaration public virtual Coordinate[] ToCoordinateArray() Returns Type Description Coordinate[] | Edit this page View Source TryGetOrdinateIndex(Ordinate, out int) Retrieves the index at which this sequence stores a particular Ordinate's values, if that ordinate is present in Ordinates. Declaration public bool TryGetOrdinateIndex(Ordinate ordinate, out int ordinateIndex) Parameters Type Name Description Ordinate ordinate The Ordinate value whose index to retrieve. int ordinateIndex When this method returns, contains the index of the requested ordinate, if the ordinate is present in this sequence; otherwise, -1. This parameter is passed uninitialized. Returns Type Description bool true if this sequence contains ordinate; otherwise, false. Extension Methods CoordinateSequenceEx.GetHashCode(CoordinateSequence, int, Func<int, int>) See Also PackedCoordinateSequenceFactory"
  },
  "api/NetTopologySuite.Geometries.CoordinateSequenceComparator.html": {
    "href": "api/NetTopologySuite.Geometries.CoordinateSequenceComparator.html",
    "title": "Class CoordinateSequenceComparator | NetTopologySuite",
    "summary": "Class CoordinateSequenceComparator Compares two CoordinateSequences. Inheritance object CoordinateSequenceComparator Implements IComparer<CoordinateSequence> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public class CoordinateSequenceComparator : IComparer<CoordinateSequence> Remarks For sequences of the same dimension, the ordering is lexicographic. Otherwise, lower dimensions are sorted before higher. The dimensions compared can be limited; if this is done ordinate dimensions above the limit will not be compared. If different behaviour is required for comparing size, dimension, or coordinate values, any or all methods can be overridden. Constructors | Edit this page View Source CoordinateSequenceComparator() Creates a comparator which will test all dimensions. Declaration public CoordinateSequenceComparator() | Edit this page View Source CoordinateSequenceComparator(int) Creates a comparator which will test only the specified number of dimensions. Declaration public CoordinateSequenceComparator(int dimensionLimit) Parameters Type Name Description int dimensionLimit The number of dimensions to test Fields | Edit this page View Source DimensionLimit The number of dimensions to test Declaration protected int DimensionLimit Field Value Type Description int Methods | Edit this page View Source Compare(CoordinateSequence, CoordinateSequence) Compares two CoordinateSequences for relative order. Declaration public int Compare(CoordinateSequence s1, CoordinateSequence s2) Parameters Type Name Description CoordinateSequence s1 A coordinate sequence CoordinateSequence s2 A coordinate sequence Returns Type Description int -1, 0, or 1 depending on whether s1 is less than, equal to, or greater than s2 | Edit this page View Source Compare(double, double) Compare two doubles, allowing for NaN values. NaN is treated as being less than any valid number. Declaration public static int Compare(double a, double b) Parameters Type Name Description double a A double double b A double Returns Type Description int -1, 0, or 1 depending on whether a is less than, equal to or greater than b | Edit this page View Source Compare(object, object) Compares two CoordinateSequences for relative order. Declaration public int Compare(object o1, object o2) Parameters Type Name Description object o1 A coordinate sequence object o2 A coordinate sequence Returns Type Description int -1, 0, or 1 depending on whether o1 is less than, equal to, or greater than o2 | Edit this page View Source CompareCoordinate(CoordinateSequence, CoordinateSequence, int, int) Compares the same coordinate of two CoordinateSequences Declaration protected int CompareCoordinate(CoordinateSequence s1, CoordinateSequence s2, int i, int dimension) Parameters Type Name Description CoordinateSequence s1 A coordinate sequence CoordinateSequence s2 A coordinate sequence int i The index of the coordinate to test int dimension the number of dimensions to test Returns Type Description int Implements IComparer<T>"
  },
  "api/NetTopologySuite.Geometries.CoordinateSequenceEx.html": {
    "href": "api/NetTopologySuite.Geometries.CoordinateSequenceEx.html",
    "title": "Class CoordinateSequenceEx | NetTopologySuite",
    "summary": "Class CoordinateSequenceEx Inheritance object CoordinateSequenceEx Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public static class CoordinateSequenceEx Methods | Edit this page View Source GetHashCode(CoordinateSequence, int, Func<int, int>) Declaration public static int GetHashCode(this CoordinateSequence sequence, int baseValue, Func<int, int> operation) Parameters Type Name Description CoordinateSequence sequence int baseValue Func<int, int> operation Returns Type Description int"
  },
  "api/NetTopologySuite.Geometries.CoordinateSequenceFactory.html": {
    "href": "api/NetTopologySuite.Geometries.CoordinateSequenceFactory.html",
    "title": "Class CoordinateSequenceFactory | NetTopologySuite",
    "summary": "Class CoordinateSequenceFactory An object that knows how to build a particular implementation of CoordinateSequence from an array of Coordinates. Inheritance object CoordinateSequenceFactory CoordinateArraySequenceFactory DotSpatialAffineCoordinateSequenceFactory PackedCoordinateSequenceFactory RawCoordinateSequenceFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax [Serializable] public abstract class CoordinateSequenceFactory Constructors | Edit this page View Source CoordinateSequenceFactory() Initializes a new instance of the CoordinateSequenceFactory class.` Declaration protected CoordinateSequenceFactory() | Edit this page View Source CoordinateSequenceFactory(Ordinates) Initializes a new instance of the CoordinateSequenceFactory class. Declaration protected CoordinateSequenceFactory(Ordinates ordinates) Parameters Type Name Description Ordinates ordinates The maximum set of Ordinates flags that this instance will be able to create sequences for. Properties | Edit this page View Source Ordinates Gets the Ordinate flags that sequences created by this factory can maximal cope with. Declaration public Ordinates Ordinates { get; } Property Value Type Description Ordinates Methods | Edit this page View Source Create(CoordinateSequence) Creates a CoordinateSequence which is a copy of the given CoordinateSequence. This method must handle null arguments by creating an empty sequence. Declaration public virtual CoordinateSequence Create(CoordinateSequence coordSeq) Parameters Type Name Description CoordinateSequence coordSeq Returns Type Description CoordinateSequence A coordinate sequence | Edit this page View Source Create(Coordinate[]) Returns a CoordinateSequence based on the given array; whether or not the array is copied is implementation-dependent. Declaration public virtual CoordinateSequence Create(Coordinate[] coordinates) Parameters Type Name Description Coordinate[] coordinates A coordinates array, which may not be null nor contain null elements Returns Type Description CoordinateSequence A coordinate sequence. | Edit this page View Source Create(int, Ordinates) Creates a CoordinateSequence of the specified size and ordinates. For this to be useful, the CoordinateSequence implementation must be mutable. Declaration public virtual CoordinateSequence Create(int size, Ordinates ordinates) Parameters Type Name Description int size The number of coordinates. Ordinates ordinates The ordinates each coordinate has. XY is fix, Z and M can be set. Returns Type Description CoordinateSequence A coordinate sequence. | Edit this page View Source Create(int, int) Creates a CoordinateSequence of the specified size and dimension. For this to be useful, the CoordinateSequence implementation must be mutable. Declaration [Obsolete(\"Use an overload that accepts measures. This overload will be removed in a future release.\")] public CoordinateSequence Create(int size, int dimension) Parameters Type Name Description int size int dimension the dimension of the coordinates in the sequence (if user-specifiable, otherwise ignored) Returns Type Description CoordinateSequence A coordinate sequence Remarks If the requested dimension is larger than the CoordinateSequence implementation can provide, then a sequence of maximum possible dimension should be created. An error should not be thrown. | Edit this page View Source Create(int, int, int) Creates a CoordinateSequence of the specified size and dimension with measure support. For this to be useful, the CoordinateSequence implementation must be mutable. Declaration public abstract CoordinateSequence Create(int size, int dimension, int measures) Parameters Type Name Description int size The number of coordinates in the sequence int dimension The dimension of the coordinates in the sequence (if user-specifiable, otherwise ignored) int measures The number of measures of the coordinates in the sequence (if user-specifiable, otherwise ignored) Returns Type Description CoordinateSequence Remarks If the requested dimension or measures are larger than the CoordinateSequence implementation can provide, then a sequence of maximum possible dimension should be created. An error should not be thrown. | Edit this page View Source GetCommonSequenceParameters(Coordinate[]) Gets the three parameters needed to create any CoordinateSequence instance (Count, Dimension, and Measures) such that the sequence can store all the data from a given array of Coordinate instances. Declaration public static (int Count, int Dimension, int Measures) GetCommonSequenceParameters(Coordinate[] coordinates) Parameters Type Name Description Coordinate[] coordinates The array of Coordinate instances that the sequence will be created from. Returns Type Description (int Count, int Dimension, int Measures) The values of the three parameters to use for creating the sequence. See Also CoordinateSequence"
  },
  "api/NetTopologySuite.Geometries.CoordinateSequences.html": {
    "href": "api/NetTopologySuite.Geometries.CoordinateSequences.html",
    "title": "Class CoordinateSequences | NetTopologySuite",
    "summary": "Class CoordinateSequences Utility functions for manipulating CoordinateSequences. Inheritance object CoordinateSequences Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public static class CoordinateSequences Methods | Edit this page View Source Copy(CoordinateSequence, int, CoordinateSequence, int, int) Copies a section of a CoordinateSequence to another CoordinateSequence. The sequences may have different dimensions; in this case only the common dimensions are copied. Declaration public static void Copy(CoordinateSequence src, int srcPos, CoordinateSequence dest, int destPos, int length) Parameters Type Name Description CoordinateSequence src The sequence to copy coordinates from int srcPos The starting index of the coordinates to copy CoordinateSequence dest The sequence to which the coordinates should be copied to int destPos The starting index of the coordinates in int length The number of coordinates to copy | Edit this page View Source CopyCoord(CoordinateSequence, int, CoordinateSequence, int) Copies a coordinate of a CoordinateSequence to another CoordinateSequence. The sequences may have different dimensions; in this case only the common dimensions are copied. Declaration public static void CopyCoord(CoordinateSequence src, int srcPos, CoordinateSequence dest, int destPos) Parameters Type Name Description CoordinateSequence src The sequence to copy coordinate from int srcPos The index of the coordinate to copy CoordinateSequence dest The sequence to which the coordinate should be copied to int destPos The index of the coordinate in | Edit this page View Source EnsureValidRing(CoordinateSequenceFactory, CoordinateSequence) Ensures that a CoordinateSequence forms a valid ring, returning a new closed sequence of the correct length if required. If the input sequence is already a valid ring, it is returned without modification. If the input sequence is too short or is not closed, it is extended with one or more copies of the start point. Declaration public static CoordinateSequence EnsureValidRing(CoordinateSequenceFactory fact, CoordinateSequence seq) Parameters Type Name Description CoordinateSequenceFactory fact The CoordinateSequenceFactory to use to create the new sequence CoordinateSequence seq The sequence to test Returns Type Description CoordinateSequence The original sequence, if it was a valid ring, or a new sequence which is valid. | Edit this page View Source Extend(CoordinateSequenceFactory, CoordinateSequence, int) Extends a given CoordinateSequence. Because coordinate sequences are fix in size, extending is done by creating a new coordinate sequence of the requested size. The new, trailing coordinate entries (if any) are filled with the last coordinate of the input sequence Declaration public static CoordinateSequence Extend(CoordinateSequenceFactory fact, CoordinateSequence seq, int size) Parameters Type Name Description CoordinateSequenceFactory fact The factory to use when creating the new sequence. CoordinateSequence seq The sequence to extend. int size The required size of the extended sequence Returns Type Description CoordinateSequence The extended sequence | Edit this page View Source IndexOf(Coordinate, CoordinateSequence) Returns the index of coordinate in a CoordinateSequence The first position is 0; the second, 1; etc. Declaration public static int IndexOf(Coordinate coordinate, CoordinateSequence seq) Parameters Type Name Description Coordinate coordinate The Coordinate to search for CoordinateSequence seq The coordinate sequence to search Returns Type Description int The position of coordinate, or -1 if it is not found | Edit this page View Source IsEqual(CoordinateSequence, CoordinateSequence) Tests whether two CoordinateSequences are equal. To be equal, the sequences must be the same length. They do not need to be of the same dimension, but the ordinate values for the smallest dimension of the two must be equal. Two NaN ordinates values are considered to be equal. Declaration public static bool IsEqual(CoordinateSequence seq1, CoordinateSequence seq2) Parameters Type Name Description CoordinateSequence seq1 a CoordinateSequence CoordinateSequence seq2 a CoordinateSequence Returns Type Description bool true if the sequences are equal in the common dimensions | Edit this page View Source IsEqualAt(CoordinateSequence, int, CoordinateSequence, int) Tests whether two Coordinates CoordinateSequences are equal. They do not need to be of the same dimension, but the ordinate values for the common ordinates of the two must be equal. Two NaN ordinates values are considered to be equal. Declaration public static bool IsEqualAt(CoordinateSequence seq1, int pos1, CoordinateSequence seq2, int pos2) Parameters Type Name Description CoordinateSequence seq1 A CoordinateSequence int pos1 The index of the Coordinate in seq1. CoordinateSequence seq2 a CoordinateSequence int pos2 The index of the Coordinate in seq2. Returns Type Description bool true if the sequences are equal in the common dimensions | Edit this page View Source IsRing(CoordinateSequence) Tests whether a CoordinateSequence forms a valid LinearRing, by checking the sequence length and closure (whether the first and last points are identical in 2D). Self-intersection is not checked. Declaration public static bool IsRing(CoordinateSequence seq) Parameters Type Name Description CoordinateSequence seq The sequence to test Returns Type Description bool True if the sequence is a ring See Also LinearRing | Edit this page View Source MinCoordinate(CoordinateSequence) Returns the minimum coordinate, using the usual lexicographic comparison. Declaration public static Coordinate MinCoordinate(CoordinateSequence seq) Parameters Type Name Description CoordinateSequence seq The coordinate sequence to search Returns Type Description Coordinate The minimum coordinate in the sequence, found using CompareTo(Coordinate) | Edit this page View Source MinCoordinateIndex(CoordinateSequence) Returns the index of the minimum coordinate of the whole coordinate sequence, using the usual lexicographic comparison. Declaration public static int MinCoordinateIndex(CoordinateSequence seq) Parameters Type Name Description CoordinateSequence seq The coordinate sequence to search Returns Type Description int The index of the minimum coordinate in the sequence, found using CompareTo(Coordinate) | Edit this page View Source MinCoordinateIndex(CoordinateSequence, int, int) Returns the index of the minimum coordinate of a part of the coordinate sequence (defined by from and to), using the usual lexicographic comparison. Declaration public static int MinCoordinateIndex(CoordinateSequence seq, int from, int to) Parameters Type Name Description CoordinateSequence seq The coordinate sequence to search int from The lower search index int to The upper search index Returns Type Description int The index of the minimum coordinate in the sequence, found using CompareTo(Coordinate) | Edit this page View Source Reverse(CoordinateSequence) Reverses the coordinates in a sequence in-place. Declaration public static void Reverse(CoordinateSequence seq) Parameters Type Name Description CoordinateSequence seq The coordinate sequence to reverse. | Edit this page View Source Scroll(CoordinateSequence, Coordinate) Shifts the positions of the coordinates until firstCoordinate is first. Declaration public static void Scroll(CoordinateSequence seq, Coordinate firstCoordinate) Parameters Type Name Description CoordinateSequence seq The coordinate sequence to rearrange Coordinate firstCoordinate The coordinate to make first\"> | Edit this page View Source Scroll(CoordinateSequence, int) Shifts the positions of the coordinates until the coordinate at firstCoordinateIndex is first. Declaration public static void Scroll(CoordinateSequence seq, int indexOfFirstCoordinate) Parameters Type Name Description CoordinateSequence seq The coordinate sequence to rearrange int indexOfFirstCoordinate The index of the coordinate to make first | Edit this page View Source Scroll(CoordinateSequence, int, bool) Shifts the positions of the coordinates until the coordinate at firstCoordinateIndex is first. Declaration public static void Scroll(CoordinateSequence seq, int indexOfFirstCoordinate, bool ensureRing) Parameters Type Name Description CoordinateSequence seq The coordinate sequence to rearrange int indexOfFirstCoordinate The index of the coordinate to make first bool ensureRing Makes sure that seq will be a closed ring upon exit | Edit this page View Source Swap(CoordinateSequence, int, int) Swaps two coordinates in a sequence. Declaration public static void Swap(CoordinateSequence seq, int i, int j) Parameters Type Name Description CoordinateSequence seq seq the sequence to modify int i the index of a coordinate to swap int j the index of a coordinate to swap | Edit this page View Source ToString(CoordinateSequence) Creates a string representation of a CoordinateSequence. The format is: ( ord0,ord1.. ord0,ord1,... ... ) Declaration public static string ToString(CoordinateSequence cs) Parameters Type Name Description CoordinateSequence cs the sequence to output Returns Type Description string the string representation of the sequence | Edit this page View Source TryRawCopy(PackedFloatCoordinateSequence, int, PackedFloatCoordinateSequence, int, int) Copies a section of a PackedFloatCoordinateSequence to another PackedFloatCoordinateSequence. The sequences must have same dimensions. Declaration public static bool TryRawCopy(PackedFloatCoordinateSequence src, int srcPos, PackedFloatCoordinateSequence dest, int destPos, int length) Parameters Type Name Description PackedFloatCoordinateSequence src The sequence to copy coordinates from int srcPos The starting index of the coordinates to copy PackedFloatCoordinateSequence dest The sequence to which the coordinates should be copied to int destPos The starting index of the coordinates in int length The number of coordinates to copy Returns Type Description bool"
  },
  "api/NetTopologySuite.Geometries.CoordinateZ.html": {
    "href": "api/NetTopologySuite.Geometries.CoordinateZ.html",
    "title": "Class CoordinateZ | NetTopologySuite",
    "summary": "Class CoordinateZ A lightweight class used to store coordinates on the 2-dimensional Cartesian plane and an additional z-ordinate (Z) value. This base data object is suitable for use with coordinate sequences with dimension = 3 and measures = 0. Inheritance object Coordinate CoordinateZ CoordinateZM Implements IComparable IComparable<Coordinate> Inherited Members Coordinate.NullOrdinate Coordinate.X Coordinate.Y Coordinate.M Coordinate.this[Ordinate] Coordinate.Deconstruct(out double, out double) Coordinate.IsValid Coordinate.Equals2D(Coordinate) Coordinate.Equals2D(Coordinate, double) Coordinate.EqualsWithTolerance(double, double, double) Coordinate.Equals(Coordinate) Coordinate.CompareTo(object) Coordinate.CompareTo(Coordinate) Coordinate.Copy() Coordinate.Distance(Coordinate) Coordinate.Equals(object) Coordinate.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax [Serializable] public class CoordinateZ : Coordinate, IComparable, IComparable<Coordinate> Remarks It is distinct from Point, which is a subclass of Geometry. Unlike objects of type Point (which contain additional information such as an envelope, a precision model, and spatial reference system information), a CoordinateZ only contains ordinate values and properties. CoordinateZs are two-dimensional points, with an additional Z-ordinate. If an Z-ordinate value is not specified or not defined, constructed coordinates have a Z-ordinate of NaN (which is also the value of NullOrdinate). Apart from the basic accessor functions, NTS supports only specific operations involving the Z-ordinate. Implementations may optionally support Z-ordinate and M-measure values as appropriate for a CoordinateSequence. Use of Z and M setters or NetTopologySuite.Geometries.CoordinateZ.this[int] indexer are recommended. Constructors | Edit this page View Source CoordinateZ() Constructs a CoordinateZ at (0,0,NaN). Declaration public CoordinateZ() | Edit this page View Source CoordinateZ(Coordinate) Constructs a CoordinateZ having the same (x,y) values as c. Declaration public CoordinateZ(Coordinate c) Parameters Type Name Description Coordinate c Coordinate to copy. | Edit this page View Source CoordinateZ(double, double) Constructs a CoordinateZ at (x,y,NaN). Declaration public CoordinateZ(double x, double y) Parameters Type Name Description double x X value. double y Y value. | Edit this page View Source CoordinateZ(double, double, double) Constructs a CoordinateZ at (x,y,z). Declaration public CoordinateZ(double x, double y, double z) Parameters Type Name Description double x The X value double y The Y value double z The Z value Properties | Edit this page View Source CoordinateValue Gets/Sets CoordinateZs (x,y,z) values. Declaration public override Coordinate CoordinateValue { get; set; } Property Value Type Description Coordinate Overrides Coordinate.CoordinateValue | Edit this page View Source this[int] Gets or sets the ordinate value for the given index. Declaration public override double this[int ordinateIndex] { get; set; } Parameters Type Name Description int ordinateIndex The ordinate index Property Value Type Description double The ordinate value Overrides Coordinate.this[int] Remarks The base implementation supports 0 (X), 1 (Y) and 2 (Z) as values for the index. Exceptions Type Condition ArgumentOutOfRangeException Thrown if ordinateIndex is not in the valid range. | Edit this page View Source Z Gets or sets the Z-ordinate value. Declaration public override sealed double Z { get; set; } Property Value Type Description double Overrides Coordinate.Z Methods | Edit this page View Source Create(double, double, double, double) Create a Coordinate of the same type as this Coordinate, using the provided values for x, y and z. Declaration public override Coordinate Create(double x = 0, double y = 0, double z = NaN, double m = NaN) Parameters Type Name Description double x The x-ordinate value, if not provided, it is 0d. double y The y-ordinate value, if not provided, it is 0d. double z The z-ordinate value, if not provided, it is NullOrdinate. double m The m-ordinate value, if not provided, it is NullOrdinate. Returns Type Description Coordinate A new CoordinateZ Overrides Coordinate.Create(double, double, double, double) Remarks A provided value for m will be silently dropped. | Edit this page View Source Deconstruct(out double, out double, out double) Deconstructs this CoordinateZ into its x, y and z values. Declaration public void Deconstruct(out double x, out double y, out double z) Parameters Type Name Description double x The x-ordinate value double y The y-ordinate value double z The z-ordinate value | Edit this page View Source Distance3D(CoordinateZ) Computes the 3-dimensional Euclidean distance to another location. Declaration public double Distance3D(CoordinateZ c) Parameters Type Name Description CoordinateZ c A CoordinateZ with which to do the distance comparison. Returns Type Description double the 3-dimensional Euclidean distance between the locations. | Edit this page View Source EqualInZ(CoordinateZ, double) Tests if another CoordinateZ has the same value for Z, within a tolerance. Declaration public bool EqualInZ(CoordinateZ c, double tolerance) Parameters Type Name Description CoordinateZ c A CoordinateZ. double tolerance The tolerance value. Returns Type Description bool true if the Z ordinates are within the given tolerance. | Edit this page View Source Equals3D(CoordinateZ) Returns true if other has the same values for X, Y and Z. Declaration public bool Equals3D(CoordinateZ other) Parameters Type Name Description CoordinateZ other A CoordinateZ with which to do the 3D comparison. Returns Type Description bool true if other is a CoordinateZ with the same values for X, Y and Z. | Edit this page View Source ToString() Returns a string of the form (x, y, z) . Declaration public override string ToString() Returns Type Description string string of the form (x, y, z) Overrides Coordinate.ToString() Operators | Edit this page View Source implicit operator CoordinateZ((double x, double y, double z)) Implicit conversion of a Tuple to a CoordinateZ. Declaration public static implicit operator CoordinateZ((double x, double y, double z) value) Parameters Type Name Description (double x, double y, double m) value Returns Type Description CoordinateZ | Edit this page View Source implicit operator CoordinateZ((double x, double y)) Implicit conversion of a Tuple to a CoordinateZ. Declaration public static implicit operator CoordinateZ((double x, double y) value) Parameters Type Name Description (double x, double y) value Returns Type Description CoordinateZ Implements IComparable IComparable<T>"
  },
  "api/NetTopologySuite.Geometries.CoordinateZM.html": {
    "href": "api/NetTopologySuite.Geometries.CoordinateZM.html",
    "title": "Class CoordinateZM | NetTopologySuite",
    "summary": "Class CoordinateZM A lightweight class used to store coordinates on the 2-dimensional Cartesian plane and additional z- and m-ordinate values (Z, M). This data object is suitable for use with coordinate sequences with dimension = 4 and measures = 1. Inheritance object Coordinate CoordinateZ CoordinateZM Implements IComparable IComparable<Coordinate> Inherited Members CoordinateZ.Z CoordinateZ.Deconstruct(out double, out double, out double) CoordinateZ.Equals3D(CoordinateZ) CoordinateZ.EqualInZ(CoordinateZ, double) CoordinateZ.Distance3D(CoordinateZ) Coordinate.NullOrdinate Coordinate.X Coordinate.Y Coordinate.this[Ordinate] Coordinate.Deconstruct(out double, out double) Coordinate.IsValid Coordinate.Equals2D(Coordinate) Coordinate.Equals2D(Coordinate, double) Coordinate.Equals(Coordinate) Coordinate.CompareTo(object) Coordinate.CompareTo(Coordinate) Coordinate.Copy() Coordinate.Distance(Coordinate) Coordinate.Equals(object) Coordinate.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax [Serializable] public sealed class CoordinateZM : CoordinateZ, IComparable, IComparable<Coordinate> Remarks It is distinct from Point, which is a subclass of Geometry. Unlike objects of type Point (which contain additional information such as an envelope, a precision model, and spatial reference system information), a CoordinateZM only contains ordinate values and properties. CoordinateZMs are two-dimensional points, with an additional Z-ordinate. If an Z-ordinate value is not specified or not defined, constructed coordinates have a Z-ordinate of NaN (which is also the value of NullOrdinate). Apart from the basic accessor functions, NTS supports only specific operations involving the Z- and/or M-ordinate. Implementations may optionally support Z-ordinate and M-measure values as appropriate for a CoordinateSequence. Use of Z and M setters or NetTopologySuite.Geometries.CoordinateZM.this[int] indexer are recommended. Constructors | Edit this page View Source CoordinateZM() Constructs a CoordinateZM at (0,0,NaN,NaN). Declaration public CoordinateZM() | Edit this page View Source CoordinateZM(Coordinate) Constructs a CoordinateZM having the same (x,y) values as c. Declaration public CoordinateZM(Coordinate c) Parameters Type Name Description Coordinate c Coordinate to copy. | Edit this page View Source CoordinateZM(double, double) Constructs a CoordinateZM at (x,y,NaN). Declaration public CoordinateZM(double x, double y) Parameters Type Name Description double x X value. double y Y value. | Edit this page View Source CoordinateZM(double, double, double, double) Constructs a CoordinateZM at (x,y,z). Declaration public CoordinateZM(double x, double y, double z, double m) Parameters Type Name Description double x The X value double y The Y value double z The Z value double m The Measure value Properties | Edit this page View Source CoordinateValue Gets/Sets CoordinateZMs (x,y,z) values. Declaration public override Coordinate CoordinateValue { get; set; } Property Value Type Description Coordinate Overrides CoordinateZ.CoordinateValue | Edit this page View Source this[int] Gets or sets the ordinate value for the given index. Declaration public override double this[int ordinateIndex] { get; set; } Parameters Type Name Description int ordinateIndex The ordinate index Property Value Type Description double The ordinate value Overrides CoordinateZ.this[int] Remarks The base implementation supports 0 (X), 1 (Y) and 2 (Z) as values for the index. Exceptions Type Condition ArgumentOutOfRangeException Thrown if ordinateIndex is not in the valid range. | Edit this page View Source M Gets or sets the measure-ordinate value. Declaration public override double M { get; set; } Property Value Type Description double Overrides Coordinate.M Methods | Edit this page View Source Create(double, double, double, double) Create a Coordinate of the same type as this Coordinate, using the provided values for x, y, z and m. Declaration public override Coordinate Create(double x = 0, double y = 0, double z = NaN, double m = NaN) Parameters Type Name Description double x The x-ordinate value, if not provided, it is 0d. double y The y-ordinate value, if not provided, it is 0d. double z The z-ordinate value, if not provided, it is NullOrdinate. double m The m-ordinate value, if not provided, it is NullOrdinate. Returns Type Description Coordinate A new CoordinateZM Overrides CoordinateZ.Create(double, double, double, double) | Edit this page View Source Deconstruct(out double, out double, out double, out double) Deconstructs this CoordinateZM into its x, y, z and values. Declaration public void Deconstruct(out double x, out double y, out double z, out double m) Parameters Type Name Description double x The x-ordinate value double y The y-ordinate value double z The z-ordinate value double m | Edit this page View Source ToString() Returns a string of the form (x, y, z, m=m) . Declaration public override string ToString() Returns Type Description string string of the form (x, y, z, m=m) Overrides CoordinateZ.ToString() Operators | Edit this page View Source implicit operator CoordinateZM((double x, double y, double z, double m)) Implicit conversion of a Tuple to a CoordinateZM. Declaration public static implicit operator CoordinateZM((double x, double y, double z, double m) value) Parameters Type Name Description (double x, double y, double z, double m) value Returns Type Description CoordinateZM | Edit this page View Source implicit operator CoordinateZM((double x, double y)) Implicit conversion of a Tuple to a CoordinateZM. Declaration public static implicit operator CoordinateZM((double x, double y) value) Parameters Type Name Description (double x, double y) value Returns Type Description CoordinateZM Implements IComparable IComparable<T>"
  },
  "api/NetTopologySuite.Geometries.Coordinates.html": {
    "href": "api/NetTopologySuite.Geometries.Coordinates.html",
    "title": "Class Coordinates | NetTopologySuite",
    "summary": "Class Coordinates Useful utility functions for handling Coordinate objects. Inheritance object Coordinates Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public static class Coordinates Methods | Edit this page View Source Create(int) Factory method providing access to common Coordinate implementations. Declaration public static Coordinate Create(int dimension) Parameters Type Name Description int dimension Returns Type Description Coordinate created coordinate | Edit this page View Source Create(int, int) Factory method providing access to common Coordinate implementations. Declaration public static Coordinate Create(int dimension, int measures) Parameters Type Name Description int dimension int measures Returns Type Description Coordinate created coordinate | Edit this page View Source Dimension(Coordinate) Determine dimension based on subclass of Coordinate. Declaration public static int Dimension(Coordinate coordinate) Parameters Type Name Description Coordinate coordinate supplied coordinate Returns Type Description int number of ordinates recorded | Edit this page View Source HasZ(Coordinate) Check if coordinate can store a z-ordinate value, based on subclass of Coordinate. Declaration public static bool HasZ(Coordinate coordinate) Parameters Type Name Description Coordinate coordinate A coordinate Returns Type Description bool true if coordinate can carry a z-ordinate value | Edit this page View Source Measures(Coordinate) Determine number of measures based on subclass of Coordinate. Declaration public static int Measures(Coordinate coordinate) Parameters Type Name Description Coordinate coordinate supplied coordinate Returns Type Description int number of measures recorded | Edit this page View Source SpatialDimension(Coordinate) Evaluates the number of spatial dimensions (x, y, z) that a coordinate can carry. Declaration public static int SpatialDimension(Coordinate c) Parameters Type Name Description Coordinate c A coordinate Returns Type Description int The number of spatial dimensions"
  },
  "api/NetTopologySuite.Geometries.Dimension.html": {
    "href": "api/NetTopologySuite.Geometries.Dimension.html",
    "title": "Enum Dimension | NetTopologySuite",
    "summary": "Enum Dimension Provides constants representing the dimensions of a point, a curve and a surface. Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public enum Dimension Remarks Also provides constants representing the dimensions of the empty geometry and non-empty geometries, and the wildcard constant Dontcare meaning \"any dimension\". These constants are used as the entries in IntersectionMatrixs. Fields Name Description A Dimension value of a surface (2). Collapse Dimension value for a collapsed surface or curve Curve Dimension value of a curve (1). Dontcare Dimension value for any dimension (= {False, True}). False Dimension value of a empty point (-1). L Dimension value of a curve (1). P Dimension value of a point (0). Point Dimension value of a point (0). Surface Dimension value of a surface (2). True Dimension value of non-empty geometries (= {Point,Curve,Surface}). Unknown Dimension value for a unknown spatial object"
  },
  "api/NetTopologySuite.Geometries.DimensionUtility.html": {
    "href": "api/NetTopologySuite.Geometries.DimensionUtility.html",
    "title": "Class DimensionUtility | NetTopologySuite",
    "summary": "Class DimensionUtility Class containing static methods for conversions between dimension values and characters. Inheritance object DimensionUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public class DimensionUtility Fields | Edit this page View Source SymA Symbol for the A (dimension 2) pattern matrix entry Declaration public const char SymA = '2' Field Value Type Description char | Edit this page View Source SymDontcare Symbol for the DONTCARE pattern matrix entry Declaration public const char SymDontcare = '*' Field Value Type Description char | Edit this page View Source SymFalse Symbol for the FALSE pattern matrix entry Declaration public const char SymFalse = 'F' Field Value Type Description char | Edit this page View Source SymL Symbol for the L (dimension 1) pattern matrix entry Declaration public const char SymL = '1' Field Value Type Description char | Edit this page View Source SymP Symbol for the P (dimension 0) pattern matrix entry Declaration public const char SymP = '0' Field Value Type Description char | Edit this page View Source SymTrue Symbol for the TRUE pattern matrix entry Declaration public const char SymTrue = 'T' Field Value Type Description char Methods | Edit this page View Source ToDimensionSymbol(Dimension) Converts the dimension value to a dimension symbol, for example, True => 'T' Declaration public static char ToDimensionSymbol(Dimension dimensionValue) Parameters Type Name Description Dimension dimensionValue Number that can be stored in the IntersectionMatrix. Possible values are True, False, Dontcare, 0, 1, 2. Returns Type Description char Character for use in the string representation of an IntersectionMatrix. Possible values are T, F, * , 0, 1, 2. | Edit this page View Source ToDimensionValue(char) Converts the dimension symbol to a dimension value, for example, '*' => Dontcare Declaration public static Dimension ToDimensionValue(char dimensionSymbol) Parameters Type Name Description char dimensionSymbol Character for use in the string representation of an IntersectionMatrix. Possible values are T, F, * , 0, 1, 2. Returns Type Description Dimension Number that can be stored in the IntersectionMatrix. Possible values are True, False, Dontcare, 0, 1, 2."
  },
  "api/NetTopologySuite.Geometries.Envelope.html": {
    "href": "api/NetTopologySuite.Geometries.Envelope.html",
    "title": "Class Envelope | NetTopologySuite",
    "summary": "Class Envelope Defines a rectangular region of the 2D coordinate plane. Inheritance object Envelope Implements IComparable<Envelope> IIntersectable<Envelope> IExpandable<Envelope> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax [Serializable] public class Envelope : IComparable<Envelope>, IIntersectable<Envelope>, IExpandable<Envelope> Remarks It is often used to represent the bounding box of a Geometry, e.g. the minimum and maximum x and y values of the Coordinates. Note that Envelopes support infinite or half-infinite regions, by using the values of Double.PositiveInfinity and Double.NegativeInfinity. When Envelope objects are created or initialized, the supplied extent values are automatically sorted into the correct order. Constructors | Edit this page View Source Envelope() Creates a null Envelope. Declaration public Envelope() | Edit this page View Source Envelope(Coordinate) Creates an Envelope for a region defined by a single Coordinate. Declaration public Envelope(Coordinate p) Parameters Type Name Description Coordinate p The Coordinate. | Edit this page View Source Envelope(Coordinate, Coordinate) Creates an Envelope for a region defined by two Coordinates. Declaration public Envelope(Coordinate p1, Coordinate p2) Parameters Type Name Description Coordinate p1 The first Coordinate. Coordinate p2 The second Coordinate. | Edit this page View Source Envelope(CoordinateSequence) Creates an Envelope for a region defined by a CoordinateSequences. Declaration public Envelope(CoordinateSequence sequence) Parameters Type Name Description CoordinateSequence sequence The CoordinateSequence. | Edit this page View Source Envelope(Envelope) Create an Envelope from an existing Envelope. Declaration public Envelope(Envelope env) Parameters Type Name Description Envelope env The Envelope to initialize from. | Edit this page View Source Envelope(IEnumerable<Coordinate>) Creates an Envelope for a region defined by an enumeration of Coordinates. Declaration public Envelope(IEnumerable<Coordinate> pts) Parameters Type Name Description IEnumerable<Coordinate> pts The Coordinates. | Edit this page View Source Envelope(double, double, double, double) Creates an Envelope for a region defined by maximum and minimum values. Declaration public Envelope(double x1, double x2, double y1, double y2) Parameters Type Name Description double x1 The first x-value. double x2 The second x-value. double y1 The first y-value. double y2 The second y-value. Properties | Edit this page View Source Area Gets the area of this envelope. Declaration public double Area { get; } Property Value Type Description double The area of the envelope, or 0.0 if envelope is null | Edit this page View Source Centre Computes the coordinate of the centre of this envelope (as long as it is non-null). Declaration public Coordinate Centre { get; } Property Value Type Description Coordinate The centre coordinate of this envelope, or null if the envelope is null. | Edit this page View Source Diameter Gets the length of the diameter (diagonal) of the envelope. Declaration public double Diameter { get; } Property Value Type Description double The diameter length | Edit this page View Source Height Returns the difference between the maximum and minimum y values. Declaration public double Height { get; } Property Value Type Description double max y - min y, or 0 if this is a null Envelope. | Edit this page View Source IsNull Returns true if this Envelope is a \"null\" envelope. Declaration public bool IsNull { get; } Property Value Type Description bool true if this Envelope is uninitialized or is the envelope of the empty point. | Edit this page View Source MaxExtent Gets the maximum extent of this envelope across both dimensions. Declaration public double MaxExtent { get; } Property Value Type Description double | Edit this page View Source MaxX Returns the Envelopes maximum x-value. min x > max x indicates that this is a null Envelope. Declaration public double MaxX { get; } Property Value Type Description double The maximum x-coordinate. | Edit this page View Source MaxY Returns the Envelopes maximum y-value. min y > max y indicates that this is a null Envelope. Declaration public double MaxY { get; } Property Value Type Description double The maximum y-coordinate. | Edit this page View Source MinExtent Gets the minimum extent of this envelope across both dimensions. Declaration public double MinExtent { get; } Property Value Type Description double | Edit this page View Source MinX Returns the Envelopes minimum x-value. min x > max x indicates that this is a null Envelope. Declaration public double MinX { get; } Property Value Type Description double The minimum x-coordinate. | Edit this page View Source MinY Returns the Envelopes minimum y-value. min y > max y indicates that this is a null Envelope. Declaration public double MinY { get; } Property Value Type Description double The minimum y-coordinate. | Edit this page View Source Width Returns the difference between the maximum and minimum x values. Declaration public double Width { get; } Property Value Type Description double max x - min x, or 0 if this is a null Envelope. Methods | Edit this page View Source CompareTo(Envelope) Compares two envelopes using lexicographic ordering. The ordering comparison is based on the usual numerical comparison between the sequence of ordinates. Null envelopes are less than all non-null envelopes. Declaration public int CompareTo(Envelope env) Parameters Type Name Description Envelope env An envelope Returns Type Description int | Edit this page View Source CompareTo(object) Compares two envelopes using lexicographic ordering. The ordering comparison is based on the usual numerical comparison between the sequence of ordinates. Null envelopes are less than all non-null envelopes. Declaration public int CompareTo(object o) Parameters Type Name Description object o An envelope Returns Type Description int | Edit this page View Source Contains(Coordinate) Tests if the given point lies in or on the envelope. Declaration public bool Contains(Coordinate p) Parameters Type Name Description Coordinate p the point which this Envelope is being checked for containing Returns Type Description bool true if the point lies in the interior or on the boundary of this Envelope. Remarks Note that this is not the same definition as the SFS contains, which would exclude the envelope boundary. | Edit this page View Source Contains(Envelope) Tests if the Envelope other lies wholely inside this Envelope (inclusive of the boundary). Declaration public bool Contains(Envelope other) Parameters Type Name Description Envelope other Returns Type Description bool true if other is contained in this Envelope Remarks Note that this is not the same definition as the SFS contains, which would exclude the envelope boundary. | Edit this page View Source Contains(double, double) Tests if the given point lies in or on the envelope. Declaration public bool Contains(double x, double y) Parameters Type Name Description double x the x-coordinate of the point which this Envelope is being checked for containing double y the y-coordinate of the point which this Envelope is being checked for containing Returns Type Description bool true if (x, y) lies in the interior or on the boundary of this Envelope. Remarks Note that this is not the same definition as the SFS contains, which would exclude the envelope boundary. | Edit this page View Source ContainsProperly(Envelope) Tests if an envelope is properly contained in this one. The envelope is properly contained if it is contained by this one but not equal to it. Declaration public bool ContainsProperly(Envelope other) Parameters Type Name Description Envelope other The envelope to test Returns Type Description bool true if the envelope is properly contained | Edit this page View Source Copy() Creates a deep copy of the current envelope. Declaration public Envelope Copy() Returns Type Description Envelope | Edit this page View Source Covers(Coordinate) Tests if the given point lies in or on the envelope. Declaration public bool Covers(Coordinate p) Parameters Type Name Description Coordinate p the point which this Envelope is being checked for containing Returns Type Description bool true if the point lies in the interior or on the boundary of this Envelope. | Edit this page View Source Covers(Envelope) Tests if the Envelope other lies wholely inside this Envelope (inclusive of the boundary). Declaration public bool Covers(Envelope other) Parameters Type Name Description Envelope other the Envelope to check Returns Type Description bool true if this Envelope covers the other | Edit this page View Source Covers(double, double) Tests if the given point lies in or on the envelope. Declaration public bool Covers(double x, double y) Parameters Type Name Description double x the x-coordinate of the point which this Envelope is being checked for containing double y the y-coordinate of the point which this Envelope is being checked for containing Returns Type Description bool true if (x, y) lies in the interior or on the boundary of this Envelope. | Edit this page View Source Disjoint(Envelope) Tests if the region defined by other is disjoint from the region of this Envelope. Declaration public bool Disjoint(Envelope other) Parameters Type Name Description Envelope other The Envelope being checked for disjointness Returns Type Description bool true if the Envelopes are disjoint See Also Intersects(Envelope) | Edit this page View Source Distance(Envelope) Computes the distance between this and another Envelope. The distance between overlapping Envelopes is 0. Otherwise, the distance is the Euclidean distance between the closest points. Declaration public double Distance(Envelope env) Parameters Type Name Description Envelope env Returns Type Description double The distance between this and another Envelope. | Edit this page View Source Equals(Envelope) Declaration public bool Equals(Envelope other) Parameters Type Name Description Envelope other Returns Type Description bool | Edit this page View Source Equals(object) Declaration public override bool Equals(object o) Parameters Type Name Description object o Returns Type Description bool Overrides object.Equals(object) | Edit this page View Source ExpandBy(double) Expands this envelope by a given distance in all directions. Both positive and negative distances are supported. Declaration public void ExpandBy(double distance) Parameters Type Name Description double distance The distance to expand the envelope. | Edit this page View Source ExpandBy(double, double) Expands this envelope by a given distance in all directions. Both positive and negative distances are supported. Declaration public void ExpandBy(double deltaX, double deltaY) Parameters Type Name Description double deltaX The distance to expand the envelope along the the X axis. double deltaY The distance to expand the envelope along the the Y axis. | Edit this page View Source ExpandToInclude(Coordinate) Enlarges this Envelope so that it contains the given Coordinate. Has no effect if the point is already on or within the envelope. Declaration public void ExpandToInclude(Coordinate p) Parameters Type Name Description Coordinate p The Coordinate. | Edit this page View Source ExpandToInclude(Envelope) Enlarges this Envelope so that it contains the other Envelope. Has no effect if other is wholly on or within the envelope. Declaration public void ExpandToInclude(Envelope other) Parameters Type Name Description Envelope other the Envelope to expand to include. | Edit this page View Source ExpandToInclude(double, double) Enlarges this Envelope so that it contains the given Coordinate. Declaration public void ExpandToInclude(double x, double y) Parameters Type Name Description double x The value to lower the minimum x to or to raise the maximum x to. double y The value to lower the minimum y to or to raise the maximum y to. Remarks Has no effect if the point is already on or within the envelope. | Edit this page View Source ExpandedBy(Envelope) Enlarges this Envelope so that it contains the other Envelope. Has no effect if other is wholly on or within the envelope. Declaration public Envelope ExpandedBy(Envelope other) Parameters Type Name Description Envelope other the Envelope to expand to include. Returns Type Description Envelope | Edit this page View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() | Edit this page View Source Init() Initialize to a null Envelope. Declaration public void Init() | Edit this page View Source Init(Coordinate) Initialize an Envelope for a region defined by a single Coordinate. Declaration public void Init(Coordinate p) Parameters Type Name Description Coordinate p The Coordinate. | Edit this page View Source Init(Coordinate, Coordinate) Initialize an Envelope for a region defined by two Coordinates. Declaration public void Init(Coordinate p1, Coordinate p2) Parameters Type Name Description Coordinate p1 The first Coordinate. Coordinate p2 The second Coordinate. | Edit this page View Source Init(Envelope) Initialize an Envelope from an existing Envelope. Declaration public void Init(Envelope env) Parameters Type Name Description Envelope env The Envelope to initialize from. | Edit this page View Source Init(double, double, double, double) Initialize an Envelope for a region defined by maximum and minimum values. Declaration public void Init(double x1, double x2, double y1, double y2) Parameters Type Name Description double x1 The first x-value. double x2 The second x-value. double y1 The first y-value. double y2 The second y-value. | Edit this page View Source Intersection(Envelope) Computes the intersection of two Envelopes. Declaration public Envelope Intersection(Envelope env) Parameters Type Name Description Envelope env The envelope to intersect with Returns Type Description Envelope A new Envelope representing the intersection of the envelopes (this will be the null envelope if either argument is null, or they do not intersect | Edit this page View Source Intersects(Coordinate) Check if the point p overlaps (lies inside) the region of this Envelope. Declaration public bool Intersects(Coordinate p) Parameters Type Name Description Coordinate p the Coordinate to be tested. Returns Type Description bool true if the point overlaps this Envelope. | Edit this page View Source Intersects(Coordinate, Coordinate) Tests if the extent defined by two extremal points intersects the extent of this Envelope. Declaration public bool Intersects(Coordinate a, Coordinate b) Parameters Type Name Description Coordinate a A point Coordinate b Another point Returns Type Description bool true if the extents intersect | Edit this page View Source Intersects(Coordinate, Coordinate, Coordinate) Test the point q to see whether it intersects the Envelope defined by p1-p2. Declaration public static bool Intersects(Coordinate p1, Coordinate p2, Coordinate q) Parameters Type Name Description Coordinate p1 One extremal point of the envelope. Coordinate p2 Another extremal point of the envelope. Coordinate q Point to test for intersection. Returns Type Description bool true if q intersects the envelope p1-p2. | Edit this page View Source Intersects(Coordinate, Coordinate, Coordinate, Coordinate) Tests whether the envelope defined by p1-p2 and the envelope defined by q1-q2 intersect. Declaration public static bool Intersects(Coordinate p1, Coordinate p2, Coordinate q1, Coordinate q2) Parameters Type Name Description Coordinate p1 One extremal point of the envelope Point. Coordinate p2 Another extremal point of the envelope Point. Coordinate q1 One extremal point of the envelope Q. Coordinate q2 Another extremal point of the envelope Q. Returns Type Description bool true if Q intersects Point | Edit this page View Source Intersects(Envelope) Check if the region defined by other intersects the region of this Envelope. A null envelope never intersects. Declaration public bool Intersects(Envelope other) Parameters Type Name Description Envelope other The Envelope which this Envelope is being checked for intersecting. Returns Type Description bool true if the Envelopes intersect. | Edit this page View Source Intersects(double, double) Check if the point (x, y) overlaps (lies inside) the region of this Envelope. Declaration public bool Intersects(double x, double y) Parameters Type Name Description double x the x-ordinate of the point. double y the y-ordinate of the point. Returns Type Description bool true if the point overlaps this Envelope. | Edit this page View Source Parse(string) Method to parse an envelope from its ToString() value Declaration public static Envelope Parse(string envelope) Parameters Type Name Description string envelope The envelope string Returns Type Description Envelope The envelope | Edit this page View Source SetToNull() Makes this Envelope a \"null\" envelope.. Declaration public void SetToNull() | Edit this page View Source ToString() Function to get a textual representation of this envelope Declaration public override string ToString() Returns Type Description string A textual representation of this envelope Overrides object.ToString() | Edit this page View Source Translate(double, double) Translates this envelope by given amounts in the X and Y direction. Declaration public void Translate(double transX, double transY) Parameters Type Name Description double transX The amount to translate along the X axis. double transY The amount to translate along the Y axis. Implements IComparable<T> IIntersectable<T> IExpandable<T>"
  },
  "api/NetTopologySuite.Geometries.FilterMethod.html": {
    "href": "api/NetTopologySuite.Geometries.FilterMethod.html",
    "title": "Delegate FilterMethod | NetTopologySuite",
    "summary": "Delegate FilterMethod Delegate function declaration to handle filter operation Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public delegate void FilterMethod(Geometry geom) Parameters Type Name Description Geometry geom The geometry to filter"
  },
  "api/NetTopologySuite.Geometries.Geometry.SortIndexValue.html": {
    "href": "api/NetTopologySuite.Geometries.Geometry.SortIndexValue.html",
    "title": "Enum Geometry.SortIndexValue | NetTopologySuite",
    "summary": "Enum Geometry.SortIndexValue An enumeration of sort values for geometries Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax protected enum Geometry.SortIndexValue Remarks NOTE: For JTS v1.17 the values in this enum have been renamed to 'TYPECODE...' In order not to break binary compatibility we did not follow. Fields Name Description GeometryCollection Sort hierarchy value of a GeometryCollection LineString Sort hierarchy value of a LineString LinearRing Sort hierarchy value of a LinearRing MultiLineString Sort hierarchy value of a MultiLineString MultiPoint Sort hierarchy value of a MultiPoint MultiPolygon Sort hierarchy value of a MultiPolygon Point Sort hierarchy value of a Point Polygon Sort hierarchy value of a Polygon"
  },
  "api/NetTopologySuite.Geometries.Geometry.html": {
    "href": "api/NetTopologySuite.Geometries.Geometry.html",
    "title": "Class Geometry | NetTopologySuite",
    "summary": "Class Geometry A representation of a planar, linear vector geometry. Inheritance object Geometry GeometryCollection LineString Point Polygon Implements IComparable IComparable<Geometry> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax [Serializable] public abstract class Geometry : IComparable, IComparable<Geometry> Remarks Binary Predicates: Because it is not clear at this time what semantics for spatial analysis methods involving GeometryCollections would be useful, GeometryCollections are not supported as arguments to binary predicates or the Relate method. Overlay Methods: The spatial analysis methods will return the most specific class possible to represent the result. If the result is homogeneous, a Point, LineString, or Polygon will be returned if the result contains a single element; otherwise, a MultiPoint, MultiLineString, or MultiPolygon will be returned. If the result is heterogeneous a GeometryCollection will be returned. Representation of Computed Geometries: The SFS states that the result of a set-theoretic method is the \"point-set\" result of the usual set-theoretic definition of the operation (SFS 3.2.21.1). However, there are sometimes many ways of representing a point set as a Geometry. The SFS does not specify an unambiguous representation of a given point set returned from a spatial analysis method. One goal of NTS is to make this specification precise and unambiguous. NTS uses a canonical form for Geometrys returned from overlay methods. The canonical form is a Geometry which is simple and noded: Simple means that the Geometry returned will be simple according to the NTS definition of IsSimple. Noded applies only to overlays involving LineStrings. It means that all intersection points on LineStrings will be present as endpoints of LineStrings in the result. This definition implies that non-simple geometries which are arguments to spatial analysis methods must be subjected to a line-dissolve process to ensure that the results are simple. Constructed Points And The Precision Model: The results computed by the set-theoretic methods may contain constructed points which are not present in the input Geometrys. These new points arise from intersections between line segments in the edges of the input Geometrys. In the general case it is not possible to represent constructed points exactly. This is due to the fact that the coordinates of an intersection point may contain twice as many bits of precision as the coordinates of the input line segments. In order to represent these constructed points explicitly, NTS must truncate them to fit the PrecisionModel. Unfortunately, truncating coordinates moves them slightly. Line segments which would not be coincident in the exact result may become coincident in the truncated representation. This in turn leads to \"topology collapses\" -- situations where a computed element has a lower dimension than it would in the exact result. When NTS detects topology collapses during the computation of spatial analysis methods, it will throw an exception. If possible the exception will report the location of the collapse. Geometry Equality There are two ways of comparing geometries for equality: structural equality and topological equality. Structural Equality Structural Equality is provided by the EqualsExact(Geometry) method. This implements a comparison based on exact, structural pointwise equality. The Equals(object) is a synonym for this method, to provide structural equality semantics for use in collections. It is important to note that structural pointwise equality is easily affected by things like ring order and component order. In many situations it will be desirable to normalize geometries before comparing them (using the Normalized() or Normalize() methods). EqualsNormalized(Geometry) is provided as a convenience method to compute equality over normalized geometries, but it is expensive to use. Finally, EqualsExact(Geometry, double) allows using a tolerance value for point comparison. Topological Equality Topological Equality is provided by the EqualsTopologically(Geometry) method. It implements the SFS definition of point-set equality defined in terms of the DE-9IM matrix. To support the SFS naming convention, the method Equals(Geometry) is also provided as a synonym. However, due to the potential for confusion with Equals(object) its use is discouraged. Since Equals(object) and GetHashCode() are overridden, Geometries can be used effectively in .Net collections. Constructors | Edit this page View Source Geometry(GeometryFactory) Creates a new Geometry via the specified GeometryFactory. Declaration protected Geometry(GeometryFactory factory) Parameters Type Name Description GeometryFactory factory The factory Fields | Edit this page View Source DefaultFactory A predefined GeometryFactory with PrecisionModel == Fixed. Declaration public static readonly GeometryFactory DefaultFactory Field Value Type Description GeometryFactory See Also Default Fixed | Edit this page View Source TypeNameGeometryCollection The name of geometry collection geometries. Declaration public const string TypeNameGeometryCollection = \"GeometryCollection\" Field Value Type Description string | Edit this page View Source TypeNameLineString The name of linestring geometries Declaration public const string TypeNameLineString = \"LineString\" Field Value Type Description string | Edit this page View Source TypeNameLinearRing The name of linearring geometries Declaration public const string TypeNameLinearRing = \"LinearRing\" Field Value Type Description string | Edit this page View Source TypeNameMultiLineString The name of multi-linestring geometries Declaration public const string TypeNameMultiLineString = \"MultiLineString\" Field Value Type Description string | Edit this page View Source TypeNameMultiPoint The name of multi-point geometries Declaration public const string TypeNameMultiPoint = \"MultiPoint\" Field Value Type Description string | Edit this page View Source TypeNameMultiPolygon The name of multi-polygon geometries Declaration public const string TypeNameMultiPolygon = \"MultiPolygon\" Field Value Type Description string | Edit this page View Source TypeNamePoint The name of point geometries Declaration public const string TypeNamePoint = \"Point\" Field Value Type Description string | Edit this page View Source TypeNamePolygon The name of polygon geometries Declaration public const string TypeNamePolygon = \"Polygon\" Field Value Type Description string Properties | Edit this page View Source Area Returns the area of this Geometry. Areal Geometries have a non-zero area. They override this function to compute the area. Others return 0.0 Declaration public virtual double Area { get; } Property Value Type Description double The area of the Geometry. | Edit this page View Source Boundary Returns the boundary, or an empty geometry of appropriate dimension if this Geometry is empty. For a discussion of this function, see the OpenGIS Simple Features Specification. As stated in SFS Section 2.1.13.1, \"the boundary of a Geometry is a set of Geometries of the next lower dimension.\" Declaration public abstract Geometry Boundary { get; } Property Value Type Description Geometry The closure of the combinatorial boundary of this Geometry. | Edit this page View Source BoundaryDimension Returns the dimension of this Geometrys inherent boundary. Declaration public abstract Dimension BoundaryDimension { get; } Property Value Type Description Dimension The dimension of the boundary of the class implementing this interface, whether or not this object is the empty point. Returns Dimension.False if the boundary is the empty point. | Edit this page View Source Centroid Computes the centroid of this Geometry. The centroid is equal to the centroid of the set of component Geometries of highest dimension (since the lower-dimension geometries contribute zero \"weight\" to the centroid). The centroid of an empty geometry is POINT EMPTY. Declaration public virtual Point Centroid { get; } Property Value Type Description Point A Point which is the centroid of this Geometry. | Edit this page View Source Coordinate Returns a vertex of this geometry (usually, but not necessarily, the first one), or null if the geometry is empty. Declaration public abstract Coordinate Coordinate { get; } Property Value Type Description Coordinate A coordinate which is a vertex of this Geometry. Remarks The returned coordinate should not be assumed to be an actual Coordinate object used in the internal representation. | Edit this page View Source Coordinates Returns an array containing the values of all the vertices for this geometry. Declaration public abstract Coordinate[] Coordinates { get; } Property Value Type Description Coordinate[] The vertices of this Geometry. Remarks If the geometry is a composite, the array will contain all the vertices for the components, in the order in which the components occur in the geometry. In general, the array cannot be assumed to be the actual internal storage for the vertices. Thus modifying the array may not modify the geometry itself. Use the SetOrdinate(int, int, double) or SetOrdinate(int, Ordinate, double) method (possibly on the components) to modify the underlying data. If the coordinates are modified, GeometryChanged() must be called afterwards. See Also GeometryChanged() SetOrdinate(int, int, double) SetOrdinate(int, Ordinate, double) | Edit this page View Source Dimension Returns the dimension of this geometry. Declaration public abstract Dimension Dimension { get; } Property Value Type Description Dimension The topological dimensions of this geometry Remarks The dimension of a geometry is is the topological dimension of its embedding in the 2-D Euclidean plane. In the NTS spatial model, dimension values are in the set {0,1,2}. Note that this is a different concept to the dimension of the vertex Coordinates. The geometry dimension can never be greater than the coordinate dimension. For example, a 0-dimensional geometry (e.g. a Point) may have a coordinate dimension of 3 (X,Y,Z). See Also HasDimension(Dimension) | Edit this page View Source Envelope Gets a geometry representing the envelope (bounding box) of this Geometry. Declaration public Geometry Envelope { get; } Property Value Type Description Geometry A Geometry representing the envelope of this Geometry Remarks If this Geometry is empty, returns an empty Point a point, returns a Point a line parallel to an axis, a two-vertex LineString, otherwise, returns a Polygon whose vertices are (minx, miny), (maxx, miny), (maxx, maxy), (minx, maxy), (minx, miny). See Also ToGeometry(Envelope) | Edit this page View Source EnvelopeInternal Gets an Envelope containing the minimum and maximum x and y values in this Geometry. If the geometry is empty, an empty Envelope is returned. Declaration public Envelope EnvelopeInternal { get; } Property Value Type Description Envelope the envelope of this Geometry. Remarks The returned object is a copy of the one maintained internally, to avoid aliasing issues. For best performance, clients which access this envelope frequently should cache the return value. | Edit this page View Source Factory Gets the factory which contains the context in which this point was created. Declaration public GeometryFactory Factory { get; } Property Value Type Description GeometryFactory The factory for this point. | Edit this page View Source GeometryType Returns the name of this Geometry's actual class. Declaration public abstract string GeometryType { get; } Property Value Type Description string The name of this Geometrys actual class. | Edit this page View Source InteriorPoint Computes an interior point of this Geometry. Declaration public virtual Point InteriorPoint { get; } Property Value Type Description Point A Point which is in the interior of this Geometry. Remarks An interior point is guaranteed to lie in the interior of the Geometry, if it possible to calculate such a point exactly. Otherwise, the point may lie on the boundary of the point. The interior point of an empty geometry is POINT EMPTY. | Edit this page View Source IsEmpty Tests whether the set of points covered in this Geometry is empty. Note this test is for topological emptiness, not structural emptiness. A collection containing only empty elements is reported as empty. To check structural emptiness use NumGeometries. Declaration public abstract bool IsEmpty { get; } Property Value Type Description bool true if this Geometry does not cover any points. | Edit this page View Source IsGeometryCollection Tests whether this is an instance of a general {@link GeometryCollection}, rather than a homogeneous subclass. Declaration protected bool IsGeometryCollection { get; } Property Value Type Description bool true if this is a heterogeneous GeometryCollection | Edit this page View Source IsRectangle Tests whether this is a rectangular Polygon. Declaration public virtual bool IsRectangle { get; } Property Value Type Description bool true if the geometry is a rectangle. Remarks Polygon overrides to check for actual rectangle. | Edit this page View Source IsSimple Tests whether this Geometry is simple. The SFS definition of simplicity follows the general rule that a Geometry is simple if it has no points of self-tangency, self-intersection or other anomalous points. Simplicity is defined for each Geometry subclass as follows: Valid polygonal geometries are simple, since their rings must not self-intersect. IsSimple tests for this condition and reports false if it is not met. (This is a looser test than checking for validity). Linear rings have the same semantics. Linear geometries are simple if they do not self-intersect at points other than boundary points. Zero-dimensional geometries (points) are simple if they have no repeated points. Empty Geometrys are always simple. Declaration public virtual bool IsSimple { get; } Property Value Type Description bool true if this Geometry is simple See Also IsValid | Edit this page View Source IsValid Tests whether this Geometry is topologically valid, according to the OGC SFS specification. For validity rules see the documentation for the specific geometry subclass. Declaration public virtual bool IsValid { get; } Property Value Type Description bool true if this Geometry is valid. | Edit this page View Source Length Returns the length of this Geometry. Linear geometries return their length. Areal geometries return their perimeter. They override this function to compute the length. Others return 0.0 Declaration public virtual double Length { get; } Property Value Type Description double The length of the Geometry. | Edit this page View Source NumGeometries Returns the number of Geometryes in a GeometryCollection, or 1, if the geometry is not a collection. Declaration public virtual int NumGeometries { get; } Property Value Type Description int | Edit this page View Source NumPoints Returns the count of this Geometrys vertices. The Geometry s contained by composite Geometrys must be Geometry's; that is, they must implement NumPoints. Declaration public abstract int NumPoints { get; } Property Value Type Description int The number of vertices in this Geometry. | Edit this page View Source OgcGeometryType Gets the OGC geometry type Declaration public abstract OgcGeometryType OgcGeometryType { get; } Property Value Type Description OgcGeometryType | Edit this page View Source PointOnSurface InteriorPoint Declaration public Point PointOnSurface { get; } Property Value Type Description Point | Edit this page View Source PrecisionModel Returns the PrecisionModel used by the Geometry. Declaration public PrecisionModel PrecisionModel { get; } Property Value Type Description PrecisionModel the specification of the grid of allowable points, for this Geometry and all other Geometrys. | Edit this page View Source SRID Sets the ID of the Spatial Reference System used by the Geometry. Declaration public int SRID { get; set; } Property Value Type Description int Remarks NOTE: This method should only be used for exceptional circumstances or for backwards compatibility. Normally the SRID should be set on the GeometryFactory used to create the geometry. SRIDs set using this method will change the Factory. See Also GeometryFactory | Edit this page View Source SortIndex Gets a value to sort the geometry Declaration protected abstract Geometry.SortIndexValue SortIndex { get; } Property Value Type Description Geometry.SortIndexValue Remarks NOTE: For JTS v1.17 this property's getter has been renamed to getTypeCode(). In order not to break binary compatibility we did not follow. | Edit this page View Source UserData Gets/Sets the user data object for this point, if any. Declaration public object UserData { get; set; } Property Value Type Description object Remarks A simple scheme for applications to add their own custom data to a Geometry. An example use might be to add an object representing a Coordinate Reference System. Note that user data objects are not present in geometries created by construction methods. Methods | Edit this page View Source Apply(ICoordinateFilter) Performs an operation with or on this Geometry's coordinates. Declaration public abstract void Apply(ICoordinateFilter filter) Parameters Type Name Description ICoordinateFilter filter The filter to apply to this Geometry's coordinates Remarks If this method modifies any coordinate values, GeometryChanged() must be called to update the geometry state. Note that you cannot use this method to modify this Geometry if its underlying CoordinateSequence's #get method returns a copy of the Coordinate, rather than the actual Coordinate stored (if it even stores Coordinate objects at all). | Edit this page View Source Apply(ICoordinateSequenceFilter) Performs an operation on the coordinates in this Geometry's CoordinateSequences. Declaration public abstract void Apply(ICoordinateSequenceFilter filter) Parameters Type Name Description ICoordinateSequenceFilter filter The filter to apply Remarks If the filter reports that a coordinate value has been changed, GeometryChanged() will be called automatically. | Edit this page View Source Apply(IEntireCoordinateSequenceFilter) Performs an operation on this Geometry's CoordinateSequences. Declaration public virtual void Apply(IEntireCoordinateSequenceFilter filter) Parameters Type Name Description IEntireCoordinateSequenceFilter filter The filter to apply Remarks If the filter reports that a coordinate value has been changed, GeometryChanged() will be called automatically. | Edit this page View Source Apply(IGeometryComponentFilter) Performs an operation with or on this Geometry and its component Geometry's. Only GeometryCollections and Polygons have component Geometry's; for Polygons they are the LinearRings of the shell and holes. Declaration public abstract void Apply(IGeometryComponentFilter filter) Parameters Type Name Description IGeometryComponentFilter filter The filter to apply to this Geometry. | Edit this page View Source Apply(IGeometryFilter) Performs an operation with or on this Geometry and its subelement Geometrys (if any). Only GeometryCollections and subclasses have subelement Geometry's. Declaration public abstract void Apply(IGeometryFilter filter) Parameters Type Name Description IGeometryFilter filter The filter to apply to this Geometry (and its children, if it is a GeometryCollection). | Edit this page View Source AsBinary() ToBinary() Declaration public byte[] AsBinary() Returns Type Description byte[] | Edit this page View Source AsText() ToText() Declaration public string AsText() Returns Type Description string | Edit this page View Source Buffer(double) Computes a buffer area around this geometry having the given width. The buffer of a Geometry is the Minkowski sum or difference of the geometry with a disc of radius Abs(distance). Declaration public Geometry Buffer(double distance) Parameters Type Name Description double distance The width of the buffer (may be positive, negative or 0), interpreted according to the PrecisionModel of the Geometry. Returns Type Description Geometry a polygonal geometry representing the buffer region (which may be empty) Remarks Mathematically-exact buffer area boundaries can contain circular arcs. To represent these arcs using linear geometry they must be approximated with line segments. The buffer geometry is constructed using 8 segments per quadrant to approximate the circular arcs. The end cap style is EndCapStyle.Round. The buffer operation always returns a polygonal result. The negative or zero-distance buffer of lines and points is always an empty IPolygonal. This is also the result for the buffers of degenerate (zero-area) polygons. Exceptions Type Condition TopologyException If a robustness error occurs See Also Buffer(double, EndCapStyle) Buffer(double, BufferParameters) Buffer(double, int) Buffer(double, int, EndCapStyle) | Edit this page View Source Buffer(double, BufferParameters) Computes a buffer region around this Geometry having the given width and with a specified number of segments used to approximate curves. The buffer of a Geometry is the Minkowski sum of the Geometry with a disc of radius distance. Curves in the buffer polygon are approximated with line segments. This method allows specifying the accuracy of that approximation. Declaration public Geometry Buffer(double distance, BufferParameters bufferParameters) Parameters Type Name Description double distance The width of the buffer, interpreted according to the PrecisionModel of the Geometry. BufferParameters bufferParameters This argument type has a number of properties that control the construction of the buffer, including QuadrantSegments, EndCapStyle, JoinStyle, and MitreLimit Returns Type Description Geometry a polygonal geometry representing the buffer region (which may be empty) Remarks Mathematically-exact buffer area boundaries can contain circular arcs. To represent these arcs using linear geometry they must be approximated with line segments. The bufferParameters argument has a property QuadrantSegments controlling the accuracy of the approximation by specifying the number of line segments used to represent a quadrant of a circle The EndCapStyle property of the bufferParameters argument specifies the buffer geometry that will be created at the ends of linestrings. The styles provided are: Round - (default) a semi-circle Flat - a straight line perpendicular to the end segment Square - a half-square The buffer operation always returns a polygonal result. The negative or zero-distance buffer of lines and points is always an empty IPolygonal. This is also the result for the buffers of degenerate (zero-area) polygons. Exceptions Type Condition TopologyException If a robustness error occurs See Also Buffer(double) Buffer(double, EndCapStyle) Buffer(double, int) Buffer(double, int, EndCapStyle) | Edit this page View Source Buffer(double, EndCapStyle) Computes a buffer region around this Geometry having the given width. The buffer of a Geometry is the Minkowski sum or difference of the geometry with a disc of radius Abs(distance). Declaration public Geometry Buffer(double distance, EndCapStyle endCapStyle) Parameters Type Name Description double distance The width of the buffer, interpreted according to the PrecisionModel of the Geometry. EndCapStyle endCapStyle Cap Style to use for compute buffer. Returns Type Description Geometry a polygonal geometry representing the buffer region (which may be empty) Remarks The end cap style specifies the buffer geometry that will be created at the ends of linestrings. The styles provided are: Round - (default) a semi-circle Flat - a straight line perpendicular to the end segment Square - a half-square The buffer operation always returns a polygonal result. The negative or zero-distance buffer of lines and points is always an empty IPolygonal. Exceptions Type Condition TopologyException If a robustness error occurs See Also Buffer(double) Buffer(double, BufferParameters) Buffer(double, int) Buffer(double, int, EndCapStyle) | Edit this page View Source Buffer(double, int) Computes a buffer region around this Geometry having the given width and with a specified accuracy of approximation for circular arcs. The buffer of a Geometry is the Minkowski sum of the Geometry with a disc of radius distance. Curves in the buffer polygon are approximated with line segments. This method allows specifying the accuracy of that approximation. Declaration public Geometry Buffer(double distance, int quadrantSegments) Parameters Type Name Description double distance The width of the buffer (may be positive, negative or 0), interpreted according to the PrecisionModel of the Geometry. int quadrantSegments The number of segments to use to approximate a quadrant of a circle. Returns Type Description Geometry a polygonal geometry representing the buffer region (which may be empty) Remarks Mathematically-exact buffer area boundaries can contain circular arcs. To represent these arcs using linear geometry they must be approximated with line segments. The quadrantSegments argument allows controlling the accuracy of the approximation by specifying the number of line segments used to represent a quadrant of a circle The buffer operation always returns a polygonal result. The negative or zero-distance buffer of lines and points is always an empty IPolygonal. This is also the result for the buffers of degenerate (zero-area) polygons. Exceptions Type Condition TopologyException If a robustness error occurs See Also Buffer(double) Buffer(double, EndCapStyle) Buffer(double, BufferParameters) Buffer(double, int, EndCapStyle) | Edit this page View Source Buffer(double, int, EndCapStyle) Computes a buffer region around this Geometry having the given width and with a specified number of segments used to approximate curves. The buffer of a Geometry is the Minkowski sum of the Geometry with a disc of radius distance. Curves in the buffer polygon are approximated with line segments. This method allows specifying the accuracy of that approximation. Declaration public Geometry Buffer(double distance, int quadrantSegments, EndCapStyle endCapStyle) Parameters Type Name Description double distance The width of the buffer, interpreted according to the PrecisionModel of the Geometry. int quadrantSegments The number of segments to use to approximate a quadrant of a circle. EndCapStyle endCapStyle Cap Style to use for compute buffer. Returns Type Description Geometry a polygonal geometry representing the buffer region (which may be empty) Remarks Mathematically-exact buffer area boundaries can contain circular arcs. To represent these arcs using linear geometry they must be approximated with line segments. The quadrantSegments argument allows controlling the accuracy of the approximation by specifying the number of line segments used to represent a quadrant of a circle The end cap style specifies the buffer geometry that will be created at the ends of linestrings. The styles provided are: Round - (default) a semi-circle Flat - a straight line perpendicular to the end segment Square - a half-square The buffer operation always returns a polygonal result. The negative or zero-distance buffer of lines and points is always an empty IPolygonal. This is also the result for the buffers of degenerate (zero-area) polygons. Exceptions Type Condition TopologyException If a robustness error occurs See Also Buffer(double) Buffer(double, EndCapStyle) Buffer(double, BufferParameters) Buffer(double, int) | Edit this page View Source CheckNotGeometryCollection(Geometry) Throws an exception if g's type is a GeometryCollection. (Its subclasses do not trigger an exception). Declaration protected static void CheckNotGeometryCollection(Geometry g) Parameters Type Name Description Geometry g The Geometry to check. Exceptions Type Condition ArgumentException if g is a GeometryCollection, but not one of its subclasses. | Edit this page View Source Compare(List<Geometry>, List<Geometry>) Returns the first non-zero result of CompareTo encountered as the two Collections are iterated over. If, by the time one of the iterations is complete, no non-zero result has been encountered, returns 0 if the other iteration is also complete. If b completes before a, a positive number is returned; if a before b, a negative number. Declaration protected static int Compare(List<Geometry> a, List<Geometry> b) Parameters Type Name Description List<Geometry> a A Collection of IComparables. List<Geometry> b A Collection of IComparables. Returns Type Description int The first non-zero compareTo result, if any; otherwise, zero. | Edit this page View Source CompareTo(Geometry) Returns whether this Geometry is greater than, equal to, or less than another Geometry. Declaration public int CompareTo(Geometry geom) Parameters Type Name Description Geometry geom A Geometry with which to compare this Geometry Returns Type Description int A positive number, 0, or a negative number, depending on whether this object is greater than, equal to, or less than o, as defined in \"Normal Form For Geometry\" in the NTS Technical Specifications. Remarks If their classes are different, they are compared using the following ordering: Point (lowest), MultiPoint, LineString, LinearRing, MultiLineString, Polygon, MultiPolygon, GeometryCollection (highest). If the two Geometrys have the same class, their first elements are compared. If those are the same, the second elements are compared, etc. | Edit this page View Source CompareTo(object) Returns whether this Geometry is greater than, equal to, or less than another Geometry. Declaration public int CompareTo(object o) Parameters Type Name Description object o A Geometry with which to compare this Geometry Returns Type Description int A positive number, 0, or a negative number, depending on whether this object is greater than, equal to, or less than o, as defined in \"Normal Form For Geometry\" in the NTS Technical Specifications. Remarks If their classes are different, they are compared using the following ordering: Point (lowest), MultiPoint, LineString, LinearRing, MultiLineString, Polygon, MultiPolygon, GeometryCollection (highest). If the two Geometrys have the same class, their first elements are compared. If those are the same, the second elements are compared, etc. | Edit this page View Source CompareTo(object, IComparer<CoordinateSequence>) Returns whether this Geometry is greater than, equal to, or less than another Geometry, using the given . Declaration public int CompareTo(object o, IComparer<CoordinateSequence> comp) Parameters Type Name Description object o A Geometry with which to compare this Geometry IComparer<CoordinateSequence> comp A IComparer<CoordinateSequence> Returns Type Description int A positive number, 0, or a negative number, depending on whether this object is greater than, equal to, or less than o, as defined in \"Normal Form For Geometry\" in the NTS Technical Specifications. Remarks If their classes are different, they are compared using the following ordering: Point (lowest), MultiPoint, LineString, LinearRing, MultiLineString, Polygon, MultiPolygon, GeometryCollection (highest). If the two Geometrys have the same class, their first elements are compared. If those are the same, the second elements are compared, etc. | Edit this page View Source CompareToSameClass(object) Returns whether this Geometry is greater than, equal to, or less than another Geometry having the same class. Declaration protected abstract int CompareToSameClass(object o) Parameters Type Name Description object o A Geometry having the same class as this Geometry. Returns Type Description int A positive number, 0, or a negative number, depending on whether this object is greater than, equal to, or less than o, as defined in \"Normal Form For Geometry\" in the NTS Technical Specifications. | Edit this page View Source CompareToSameClass(object, IComparer<CoordinateSequence>) Returns whether this Geometry is greater than, equal to, or less than another Geometry of the same class. using the given IComparer<T>. Declaration protected abstract int CompareToSameClass(object o, IComparer<CoordinateSequence> comp) Parameters Type Name Description object o A Geometry having the same class as this Geometry IComparer<CoordinateSequence> comp The comparer Returns Type Description int A positive number, 0, or a negative number, depending on whether this object is greater than, equal to, or less than o, as defined in \"Normal Form For Geometry\" in the JTS Technical Specifications | Edit this page View Source ComputeEnvelopeInternal() Returns the minimum and maximum x and y values in this Geometry, or a null Envelope if this Geometry is empty. Unlike EnvelopeInternal, this method calculates the Envelope each time it is called; EnvelopeInternal caches the result of this method. Declaration protected abstract Envelope ComputeEnvelopeInternal() Returns Type Description Envelope This Geometrys bounding box; if the Geometry is empty, Envelope.IsNull will return true. | Edit this page View Source Contains(Geometry) Tests whether this geometry contains the argument geometry. Declaration public virtual bool Contains(Geometry g) Parameters Type Name Description Geometry g the Geometry with which to compare this Geometry Returns Type Description bool true if this Geometry contains g Remarks The Contains predicate has the following equivalent definitions: Every point of the other geometry is a point of this geometry, and the interiors of the two geometries have at least one point in common. The DE-9IM Intersection Matrix for the two geometries matches the pattern [T*****FF*] g.within(this) (Contains is the converse of Within(Geometry)) An implication of the definition is that \"Geometries do not contain their boundary\". In other words, if a geometry A is a subset of the points in the boundary of a geometry B, B.Contains(A) == false. (As a concrete example, take A to be a LineString which lies in the boundary of a Polygon B.) For a predicate with similar behaviour but avoiding this subtle limitation, see Covers(Geometry). | Edit this page View Source ConvexHull() Returns the smallest convex Polygon that contains all the points in the Geometry. This obviously applies only to Geometry s which contain 3 or more points. Declaration public virtual Geometry ConvexHull() Returns Type Description Geometry the minimum-area convex polygon containing this Geometry's points. | Edit this page View Source Copy() Creates a deep copy of this Geometry object. Coordinate sequences contained in it are copied. All instance fields are copied (i.e. the SRID, EnvelopeInternal and UserData). Declaration public Geometry Copy() Returns Type Description Geometry A deep copy of this geometry Remarks NOTE: The UserData object reference (if present) is copied, but the value itself is not copied. If a deep copy is required this must be performed by the caller. | Edit this page View Source CopyInternal() An internal method to copy subclass-specific geometry data. Declaration protected abstract Geometry CopyInternal() Returns Type Description Geometry A copy of the target geometry object. | Edit this page View Source CoveredBy(Geometry) Tests whether this geometry is covered by the specified geometry. Declaration public bool CoveredBy(Geometry g) Parameters Type Name Description Geometry g the Geometry with which to compare this Geometry Returns Type Description bool true if this Geometry is covered by g Remarks The CoveredBy predicate has the following equivalent definitions: Every point of this geometry is a point of the other geometry. The DE-9IM Intersection Matrix for the two geometries matches at least one of the following patterns: [T*F**F***] [*TF**F***] [**FT*F***] [**F*TF***] g.Covers(this) == true (CoveredBy is the converse of Covers(Geometry)) If either geometry is empty, the value of this predicate is false. This predicate is similar to Within(Geometry), but is more inclusive (i.e. returns true for more cases). See Also Within(Geometry) Covers(Geometry) | Edit this page View Source Covers(Geometry) Tests whether this geometry covers the argument geometry Declaration public virtual bool Covers(Geometry g) Parameters Type Name Description Geometry g The Geometry with which to compare this Geometry Returns Type Description bool true if this Geometry covers g Remarks The covers predicate has the following equivalent definitions: Every point of the other geometry is a point of this geometry. The DE-9IM Intersection Matrix for the two geometries matches at least one of the following patterns: [T*****FF*] or [*T****FF*] or [***T**FF*] or [****T*FF*] g.CoveredBy(this) == true (covers is the converse of CoveredBy(Geometry)) If either geometry is empty, the value of this predicate is false. This predicate is similar to Contains(Geometry), but is more inclusive (i.e. returns true for more cases). In particular, unlike Contains it does not distinguish between points in the boundary and in the interior of geometries. For most situations, Covers should be used in preference to Contains. As an added benefit, Covers is more amenable to optimization, and hence should be more performant. See Also Contains(Geometry) CoveredBy(Geometry) | Edit this page View Source CreateArray(CoordinateSequence, Ordinate) Declaration protected static double[] CreateArray(CoordinateSequence sequence, Ordinate ordinate) Parameters Type Name Description CoordinateSequence sequence Ordinate ordinate Returns Type Description double[] | Edit this page View Source CreateArray(int, double) Declaration protected static double[] CreateArray(int size, double value) Parameters Type Name Description int size double value Returns Type Description double[] | Edit this page View Source Crosses(Geometry) Tests whether this geometry crosses the specified geometry. Declaration public virtual bool Crosses(Geometry g) Parameters Type Name Description Geometry g The Geometry with which to compare this Geometry Returns Type Description bool true if the two Geometrys cross. Remarks The Crosses predicate has the following equivalent definitions: The geometries have some but not all interior points in common. The DE-9IM Intersection Matrix for the two geometries matches one of the following patterns: Code Description [T*T******] for P/L, P/A, and L/A situations [T*****T**] for L/P, A/P, and A/L situations) [0********] for L/L situations For the A/A and P/P situations this predicate returns false. The SFS defined this predicate only for P/L, P/A, L/L, and L/A situations. To make the relation symmetric, NTS extends the definition to apply to L/P, A/P and A/L situations as well. | Edit this page View Source Difference(Geometry) Computes a Geometry representing the closure of the point-set of the points contained in this Geometry that are not contained in the other Geometry. If the result is empty, it is an atomic geometry with the dimension of the left-hand input. Non-empty GeometryCollection arguments are not supported. Declaration public Geometry Difference(Geometry other) Parameters Type Name Description Geometry other The Geometry with which to compute the difference. Returns Type Description Geometry A Geometry representing the point-set difference of this Geometry with other. Exceptions Type Condition ArgumentException if the argument has a factory with a different GeometryOverlay object assigned | Edit this page View Source Disjoint(Geometry) Tests whether this geometry is disjoint from the argument geometry. Declaration public bool Disjoint(Geometry g) Parameters Type Name Description Geometry g The Geometry with which to compare this Geometry. Returns Type Description bool true if the two Geometrys are disjoint. Remarks The Disjoint predicate has the following equivalent definitions: The DE-9IM intersection matrix for the two geometries matches FF*FF****. !g.intersects(this) == true (Disjoint is the inverse of Intersects) | Edit this page View Source Distance(Geometry) Returns the minimum distance between this Geometry and another Geometry g. Declaration public virtual double Distance(Geometry g) Parameters Type Name Description Geometry g The Geometry from which to compute the distance. Returns Type Description double The distance between the geometries Exceptions Type Condition ArgumentException if g is null | Edit this page View Source Equal(Coordinate, Coordinate, double) Declaration [Obsolete(\"Will be removed in a future version\")] protected static bool Equal(Coordinate a, Coordinate b, double tolerance) Parameters Type Name Description Coordinate a Coordinate b double tolerance Returns Type Description bool | Edit this page View Source Equals(Geometry) Tests whether this geometry is topologically equal to the argument geometry. This method is included for backward compatibility reasons. It has been superseded by the EqualsTopologically(Geometry) method, which has been named to clearly denote its functionality. This method should NOT be confused with the method Equals(object), which implements an exact equality comparison. Declaration public bool Equals(Geometry g) Parameters Type Name Description Geometry g The Geometry with which to compare this Geometry Returns Type Description bool true if the two Geometrys are topologically equal. See Also EqualsTopologically(Geometry) | Edit this page View Source Equals(object) Tests whether this geometry is structurally and numerically equal to a given Object . Declaration public override bool Equals(object o) Parameters Type Name Description object o The object to compare Returns Type Description bool true if this geometry is exactly equal to the argument Overrides object.Equals(object) Remarks If the argument Object is not a Geometry, the result is false. Otherwise, the result is computed using EqualsExact(Geometry). This method is provided to fulfill the Java contract for value-based object equality. In conjunction with GetHashCode() it provides semantics which are most useful for using Geometrys as keys and values in Java collections. Note that to produce the expected result the input geometries should be in normal form. It is the caller's responsibility to perform this where required (using Normalized() or Normalize() as appropriate). See Also EqualsExact(Geometry) GetHashCode() Normalized() Normalize() | Edit this page View Source EqualsExact(Geometry) Returns true if the two Geometrys are exactly equal. Two Geometries are exactly equal if: they have the same class, they have the same values of Coordinates in their internal Coordinate lists, in exactly the same order. This provides a stricter test of equality than EqualsTopologically(Geometry), which is more useful in certain situations (such as using geometries as keys in collections). This method does not test the values of the GeometryFactory, the SRID, or the UserData fields. To properly test equality between different geometries, it is usually necessary to Normalize() them first. Declaration public bool EqualsExact(Geometry other) Parameters Type Name Description Geometry other The Geometry with which to compare this Geometry. Returns Type Description bool true if this and the other Geometry have identical structure and point values. | Edit this page View Source EqualsExact(Geometry, double) Returns true if the two Geometrys are exactly equal, up to a specified tolerance. Two Geometries are exactly within a tolerance equal if: they have the same class, they have the same values of Coordinates, within the given tolerance distance, in their internal Coordinate lists, in exactly the same order. This method does not test the values of the GeometryFactory, the SRID, or the UserData fields. To properly test equality between different geometries, it is usually necessary to Normalize() them first. Declaration public abstract bool EqualsExact(Geometry other, double tolerance) Parameters Type Name Description Geometry other The Geometry with which to compare this Geometry have identical structure and point values, up to the distance tolerance. double tolerance Distance at or below which two Coordinates will be considered equal. Returns Type Description bool true if this and the other Geometry are of the same class and have equal internal data. See Also EqualsExact(Geometry) Normalize() Normalized() | Edit this page View Source EqualsNormalized(Geometry) Tests whether two geometries are exactly equal in their normalized forms. This is a convenience method which creates normalized versions of both geometries before computing EqualsExact(Geometry). This method is relatively expensive to compute. For maximum performance, the client should instead perform normalization on the individual geometries at an appropriate point during processing. Declaration public bool EqualsNormalized(Geometry g) Parameters Type Name Description Geometry g A geometry Returns Type Description bool true if the input geometries are exactly equal in their normalized form See Also EqualsExact(Geometry) | Edit this page View Source EqualsTopologically(Geometry) Tests whether this geometry is topologically equal to the argument geometry as defined by the SFS Equals predicate. Declaration public virtual bool EqualsTopologically(Geometry g) Parameters Type Name Description Geometry g the Geometry with which to compare this Geometry Returns Type Description bool true if the two Geometrys are topologically equal Remarks The SFS equals predicate has the following equivalent definitions: The two geometries have at least one point in common, and no point of either geometry lies in the exterior of the other geometry. The DE-9IM Intersection Matrix for the two geometries matches the pattern T*F**FFF* T*F **F FF* Note that this method computes topologically equality. For structural equality, see {@link #equalsExact(Geometry)}. | Edit this page View Source GeometryChanged() Notifies this geometry that its coordinates have been changed by an external party (for example, via a ICoordinateFilter). Declaration public void GeometryChanged() Remarks When this method is called the geometry will flush and/or update any derived information it has cached (such as its Envelope ). The operation is applied to all component Geometries. | Edit this page View Source GeometryChangedAction() Notifies this Geometry that its Coordinates have been changed by an external party. When GeometryChanged is called, this method will be called for this Geometry and its component Geometries. Declaration public void GeometryChangedAction() | Edit this page View Source GetGeometryN(int) Returns an element Geometry from a GeometryCollection, or this, if the geometry is not a collection. Declaration public virtual Geometry GetGeometryN(int n) Parameters Type Name Description int n The index of the geometry element. Returns Type Description Geometry The n'th geometry contained in this geometry. | Edit this page View Source GetHashCode() Gets a hash code for the Geometry. Declaration public override int GetHashCode() Returns Type Description int An integer value suitable for use as a hashcode Overrides object.GetHashCode() | Edit this page View Source GetOrdinates(Ordinate) Gets an array of double ordinate values Declaration public abstract double[] GetOrdinates(Ordinate ordinate) Parameters Type Name Description Ordinate ordinate The ordinate index Returns Type Description double[] An array of ordinate values | Edit this page View Source HasDimension(Dimension) Tests whether an atomic geometry or any element of a collection has the specified dimension. In particular, this can be used with mixed-dimension GeometryCollections to test if they contain an element of the specified dimension. Declaration public virtual bool HasDimension(Dimension dim) Parameters Type Name Description Dimension dim The dimension to test Returns Type Description bool true if the geometry has or contains an element with the dimension See Also Dimension | Edit this page View Source HasNonEmptyElements(Geometry[]) Returns true if the array contains any non-empty Geometrys. Declaration protected static bool HasNonEmptyElements(Geometry[] geometries) Parameters Type Name Description Geometry[] geometries an array of Geometrys; no elements may be null Returns Type Description bool true if any of the Geometrys IsEmpty methods return false. | Edit this page View Source HasNullElements(object[]) Returns true if the array contains any null elements. Declaration [Obsolete(\"Use HasNullElements<T>\")] public static bool HasNullElements(object[] array) Parameters Type Name Description object[] array an array to validate. Returns Type Description bool true if any of arrays elements are null. | Edit this page View Source HasNullElements<T>(IEnumerable<T>) Returns true if the array contains any null elements. Declaration public static bool HasNullElements<T>(IEnumerable<T> array) where T : class Parameters Type Name Description IEnumerable<T> array an array to validate. Returns Type Description bool true if any of arrays elements are null. Type Parameters Name Description T | Edit this page View Source Intersection(Geometry) Computes a Geometry representing the point-set which is common to both this Geometry and the other Geometry. The intersection of two geometries of different dimension produces a result geometry of dimension less than or equal to the minimum dimension of the input geometries. The result geometry may be a heterogeneous GeometryCollection. If the result is empty, it is an atomic geometry with the dimension of the lowest input dimension. Intersection of GeometryCollections is supported only for homogeneous collection types. Non-empty heterogeneous GeometryCollection arguments are not supported. Declaration public Geometry Intersection(Geometry other) Parameters Type Name Description Geometry other The Geometry with which to compute the intersection. Returns Type Description Geometry A geometry representing the point-set common to the two Geometrys. Exceptions Type Condition TopologyException if a robustness error occurs. ArgumentException if the argument is a non-empty heterogeneous GeometryCollection ArgumentException if the argument has a factory with a different GeometryOverlay object assigned | Edit this page View Source Intersects(Geometry) Tests whether this geometry intersects the argument geometry. Declaration public virtual bool Intersects(Geometry g) Parameters Type Name Description Geometry g The Geometry with which to compare this Geometry. Returns Type Description bool true if the two Geometrys intersect. Remarks The Intersects predicate has the following equivalent definitions: The two geometries have at least one point in common The DE-9IM Intersection Matrix for the two geometries matches [T********] or [*T*******] or [***T*****] or [****T****] !g.disjoint(this) (Intersects is the inverse of Disjoint) | Edit this page View Source IsEquivalentClass(Geometry) Returns whether the two Geometrys are equal, from the point of view of the EqualsExact method. Called by EqualsExact . In general, two Geometry classes are considered to be \"equivalent\" only if they are the same class. An exception is LineString , which is considered to be equivalent to its subclasses. Declaration protected virtual bool IsEquivalentClass(Geometry other) Parameters Type Name Description Geometry other The Geometry with which to compare this Geometry for equality. Returns Type Description bool true if the classes of the two Geometry s are considered to be equal by the equalsExact method. | Edit this page View Source IsWithinDistance(Geometry, double) Tests whether the distance from this Geometry to another is less than or equal to a specified value. Declaration public virtual bool IsWithinDistance(Geometry geom, double distance) Parameters Type Name Description Geometry geom the Geometry to check the distance to. double distance the distance value to compare. Returns Type Description bool true if the geometries are less than distance apart. | Edit this page View Source Normalize() Converts this Geometry to normal form (or canonical form ). Declaration public abstract void Normalize() Remarks Normal form is a unique representation for Geometrys. It can be used to test whether two Geometrys are equal in a way that is independent of the ordering of the coordinates within them. Normal form equality is a stronger condition than topological equality, but weaker than pointwise equality. The definitions for normal form use the standard lexicographical ordering for coordinates. \"Sorted in order of coordinates\" means the obvious extension of this ordering to sequences of coordinates. NOTE that this method mutates the value of this geometry in-place. If this is not safe and/or wanted, the geometry should be cloned prior to normalization. | Edit this page View Source Normalized() Creates a new Geometry which is a normalized copy of this Geometry. Declaration public Geometry Normalized() Returns Type Description Geometry A normalized copy of this geometry. See Also Normalize() | Edit this page View Source Overlaps(Geometry) Tests whether this geometry overlaps the specified geometry. Declaration public virtual bool Overlaps(Geometry g) Parameters Type Name Description Geometry g The Geometry with which to compare this Geometry. Returns Type Description bool true if the two Geometrys overlap. For this function to return true, the Geometry s must be two points, two curves or two surfaces. Remarks The Overlaps predicate has the following equivalent definitions: The geometries have at least one point each not shared by the other (or equivalently neither covers the other), they have the same dimension, and the intersection of the interiors of the two geometries has the same dimension as the geometries themselves. The DE-9IM Intersection Matrix for the two geometries matches [T*T***T**] (for two points or two surfaces) or [1*T***T**] (for two curves) If the geometries are of different dimension this predicate returns false. | Edit this page View Source Relate(Geometry) Returns the DE-9IM intersection matrix for the two Geometrys. Declaration public virtual IntersectionMatrix Relate(Geometry g) Parameters Type Name Description Geometry g The Geometry with which to compare this Geometry Returns Type Description IntersectionMatrix A matrix describing the intersections of the interiors, boundaries and exteriors of the two Geometrys. | Edit this page View Source Relate(Geometry, string) Tests whether the elements in the DE-9IM IntersectionMatrix for the two Geometrys match the elements in intersectionPattern. Declaration public virtual bool Relate(Geometry g, string intersectionPattern) Parameters Type Name Description Geometry g the Geometry with which to compare this Geometry string intersectionPattern the pattern against which to check the intersection matrix for the two Geometrys Returns Type Description bool true if the DE-9IM intersection matrix for the two Geometrys match intersectionPattern Remarks The pattern is a 9-character string, with symbols drawn from the following set: 0 (dimension 0) 1 (dimension 1) 2 (dimension 2) T ( matches 0, 1 or 2) F ( matches FALSE) * ( matches any value) For more information on the DE-9IM, see the OpenGIS Simple Features Specification. See Also IntersectionMatrix | Edit this page View Source Reverse() Computes a new geometry which has all component coordinate sequences in reverse order (opposite orientation) to this one. Declaration public virtual Geometry Reverse() Returns Type Description Geometry A reversed geometry Remarks Don't override this function, implement ReverseInternal(). | Edit this page View Source ReverseInternal() The actual implementation of the Reverse() function Declaration protected virtual Geometry ReverseInternal() Returns Type Description Geometry A reversed geometry Remarks In JTS this function is abstract, but that would break binary compatibility of current version. | Edit this page View Source SymmetricDifference(Geometry) Computes a Geometry representing the closure of the point-set which is the union of the points in this Geometry which are not contained in the other Geometry, with the points in the other Geometry not contained in this Geometry. If the result is empty, it is an atomic geometry with the dimension of the highest input dimension. Non-empty GeometryCollection arguments are not supported. Declaration public Geometry SymmetricDifference(Geometry other) Parameters Type Name Description Geometry other The Geometry with which to compute the symmetric difference. Returns Type Description Geometry a Geometry representing the point-set symmetric difference of this Geometry with other. Exceptions Type Condition ArgumentException if the argument has a factory with a different GeometryOverlay object assigned | Edit this page View Source ToBinary() Returns the Well-known Binary representation of this Geometry. For a definition of the Well-known Binary format, see the OpenGIS Simple Features Specification. Declaration public byte[] ToBinary() Returns Type Description byte[] The Well-known Binary representation of this Geometry. | Edit this page View Source ToGMLFeature() Returns the feature representation as GML 2.1.1 XML document. This XML document is based on Geometry.xsd schema. NO features or XLink are implemented here! Declaration public XmlReader ToGMLFeature() Returns Type Description XmlReader | Edit this page View Source ToString() Returns the Well-known Text representation of this Geometry. For a definition of the Well-known Text format, see the OpenGIS Simple Features Specification. Declaration public override string ToString() Returns Type Description string The Well-known Text representation of this Geometry. Overrides object.ToString() | Edit this page View Source ToText() Returns the Well-known Text representation of this Geometry. For a definition of the Well-known Text format, see the OpenGIS Simple Features Specification. Declaration public string ToText() Returns Type Description string The Well-known Text representation of this Geometry. | Edit this page View Source Touches(Geometry) Tests whether this geometry touches the argument geometry Declaration public virtual bool Touches(Geometry g) Parameters Type Name Description Geometry g The Geometry with which to compare this Geometry. Returns Type Description bool true if the two Geometrys touch; Returns false if both Geometrys are points. Remarks The Touches predicate has the following equivalent definitions: The geometries have at least one point in common, but their interiors do not intersect The DE-9IM Intersection Matrix for the two geometries matches at least one of the following patterns FT*******, F**T***** or F***T****. If both geometries have dimension 0, the predicate returns false, since points have only interiors. This predicate is symmetric. | Edit this page View Source Union() Computes the union of all the elements of this geometry. Declaration public Geometry Union() Returns Type Description Geometry Remarks This method supports GeometryCollections (which the other overlay operations currently do not). Exceptions Type Condition TopologyException Thrown if a robustness error occurs | Edit this page View Source Union(Geometry) Computes a Geometry representing the point-set which is contained in both this Geometry and the other Geometry. Declaration public Geometry Union(Geometry other) Parameters Type Name Description Geometry other the Geometry with which to compute the union Returns Type Description Geometry A point-set combining the points of this Geometry and the points of other Remarks The method may be used on arguments of different dimension, but it does not support GeometryCollection arguments. The union of two geometries of different dimension produces a result geometry of dimension equal to the maximum dimension of the input geometries. The result geometry may be a heterogeneous GeometryCollection. If the result is empty, it is an atomic geometry with the dimension of the highest input dimension. Unioning LineStrings has the effect of noding and dissolving the input linework. In this context \"noding\" means that there will be a node or endpoint in the result for every endpoint or line segment crossing in the input. \"Dissolving\" means that any duplicate (i.e. coincident) line segments or portions of line segments will be reduced to a single line segment in the result. If merged linework is required, the LineMerger class can be used. Non-empty GeometryCollection arguments are not supported. Exceptions Type Condition TopologyException Thrown if a robustness error occurs ArgumentException Thrown if either input is a non-empty GeometryCollection ArgumentException if the argument has a factory with a different GeometryOverlay object assigned See Also LineMerger | Edit this page View Source Within(Geometry) Tests whether this geometry is within the specified geometry. Declaration public bool Within(Geometry g) Parameters Type Name Description Geometry g The Geometry with which to compare this Geometry. Returns Type Description bool true if this Geometry is within other. Remarks The within predicate has the following equivalent definitions: Every point of this geometry is a point of the other geometry, and the interiors of the two geometries have at least one point in common. The DE-9IM Intersection Matrix for the two geometries matches [T*F**F***] g.contains(this) == true (Within is the converse of Contains(Geometry)) An implication of the definition is that \"The boundary of a geometry is not within the Polygon\". In other words, if a geometry A is a subset of the points in the boundary of a geometry B, A.within(B) == false (As a concrete example, take A to be a LineString which lies in the boundary of a Polygon B.) For a predicate with similar behaviour but avoiding this subtle limitation, see CoveredBy(Geometry). Operators | Edit this page View Source operator ==(Geometry, Geometry) Declaration public static bool operator ==(Geometry obj1, Geometry obj2) Parameters Type Name Description Geometry obj1 Geometry obj2 Returns Type Description bool | Edit this page View Source operator !=(Geometry, Geometry) Declaration public static bool operator !=(Geometry obj1, Geometry obj2) Parameters Type Name Description Geometry obj1 Geometry obj2 Returns Type Description bool Implements IComparable IComparable<T> Extension Methods PolygonalExtracter.GetPolygonals<TCollection>(Geometry) PolygonalExtracter.GetPolygonals<TCollection>(Geometry, TCollection)"
  },
  "api/NetTopologySuite.Geometries.GeometryCollection.html": {
    "href": "api/NetTopologySuite.Geometries.GeometryCollection.html",
    "title": "Class GeometryCollection | NetTopologySuite",
    "summary": "Class GeometryCollection Basic implementation of GeometryCollection. Inheritance object Geometry GeometryCollection MultiLineString MultiPoint MultiPolygon Implements IComparable IComparable<Geometry> IReadOnlyList<Geometry> IReadOnlyCollection<Geometry> IEnumerable<Geometry> IEnumerable Inherited Members Geometry.TypeNamePoint Geometry.TypeNameMultiPoint Geometry.TypeNameLineString Geometry.TypeNameLinearRing Geometry.TypeNameMultiLineString Geometry.TypeNamePolygon Geometry.TypeNameMultiPolygon Geometry.TypeNameGeometryCollection Geometry.Factory Geometry.UserData Geometry.SRID Geometry.HasNonEmptyElements(Geometry[]) Geometry.HasNullElements(object[]) Geometry.HasNullElements<T>(IEnumerable<T>) Geometry.PrecisionModel Geometry.IsSimple Geometry.IsValid Geometry.Distance(Geometry) Geometry.IsWithinDistance(Geometry, double) Geometry.Centroid Geometry.InteriorPoint Geometry.PointOnSurface Geometry.Envelope Geometry.EnvelopeInternal Geometry.GeometryChanged() Geometry.GeometryChangedAction() Geometry.Disjoint(Geometry) Geometry.Touches(Geometry) Geometry.Intersects(Geometry) Geometry.Crosses(Geometry) Geometry.Within(Geometry) Geometry.Contains(Geometry) Geometry.Overlaps(Geometry) Geometry.Covers(Geometry) Geometry.CoveredBy(Geometry) Geometry.Relate(Geometry, string) Geometry.Relate(Geometry) Geometry.Equals(Geometry) Geometry.EqualsTopologically(Geometry) Geometry.Equals(object) Geometry.GetHashCode() Geometry.ToString() Geometry.ToText() Geometry.AsText() Geometry.ToBinary() Geometry.AsBinary() Geometry.ToGMLFeature() Geometry.Buffer(double) Geometry.Buffer(double, EndCapStyle) Geometry.Buffer(double, int) Geometry.Buffer(double, int, EndCapStyle) Geometry.Buffer(double, BufferParameters) Geometry.ConvexHull() Geometry.Intersection(Geometry) Geometry.Union(Geometry) Geometry.Difference(Geometry) Geometry.SymmetricDifference(Geometry) Geometry.Union() Geometry.EqualsExact(Geometry) Geometry.EqualsNormalized(Geometry) Geometry.Copy() Geometry.Normalized() Geometry.CompareTo(object) Geometry.CompareTo(Geometry) Geometry.CompareTo(object, IComparer<CoordinateSequence>) Geometry.IsEquivalentClass(Geometry) Geometry.CheckNotGeometryCollection(Geometry) Geometry.IsGeometryCollection Geometry.Compare(List<Geometry>, List<Geometry>) Geometry.Equal(Coordinate, Coordinate, double) Geometry.IsRectangle Geometry.DefaultFactory Geometry.CreateArray(int, double) Geometry.CreateArray(CoordinateSequence, Ordinate) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax [Serializable] public class GeometryCollection : Geometry, IComparable, IComparable<Geometry>, IReadOnlyList<Geometry>, IReadOnlyCollection<Geometry>, IEnumerable<Geometry>, IEnumerable Constructors | Edit this page View Source GeometryCollection(Geometry[]) Declaration public GeometryCollection(Geometry[] geometries) Parameters Type Name Description Geometry[] geometries The Geometrys for this GeometryCollection, or null or an empty array to create the empty point. Elements may be empty Geometrys, but not nulls. Remarks For create this Geometry is used a standard GeometryFactory with PrecisionModel == Floating. | Edit this page View Source GeometryCollection(Geometry[], GeometryFactory) Declaration public GeometryCollection(Geometry[] geometries, GeometryFactory factory) Parameters Type Name Description Geometry[] geometries The Geometrys for this GeometryCollection, or null or an empty array to create the empty point. Elements may be empty Geometrys, but not nulls. GeometryFactory factory Fields | Edit this page View Source Empty Represents an empty GeometryCollection. Declaration public static readonly GeometryCollection Empty Field Value Type Description GeometryCollection Properties | Edit this page View Source Area Returns the area of this GeometryCollection. Declaration public override double Area { get; } Property Value Type Description double Overrides Geometry.Area | Edit this page View Source Boundary Returns the boundary, or an empty geometry of appropriate dimension if this Geometry is empty. For a discussion of this function, see the OpenGIS Simple Features Specification. As stated in SFS Section 2.1.13.1, \"the boundary of a Geometry is a set of Geometries of the next lower dimension.\" Declaration public override Geometry Boundary { get; } Property Value Type Description Geometry The closure of the combinatorial boundary of this Geometry. Overrides Geometry.Boundary | Edit this page View Source BoundaryDimension Returns the dimension of this Geometrys inherent boundary. Declaration public override Dimension BoundaryDimension { get; } Property Value Type Description Dimension The dimension of the boundary of the class implementing this interface, whether or not this object is the empty point. Returns Dimension.False if the boundary is the empty point. Overrides Geometry.BoundaryDimension | Edit this page View Source Coordinate Returns a vertex of this geometry (usually, but not necessarily, the first one), or null if the geometry is empty. Declaration public override Coordinate Coordinate { get; } Property Value Type Description Coordinate A coordinate which is a vertex of this Geometry. Overrides Geometry.Coordinate Remarks The returned coordinate should not be assumed to be an actual Coordinate object used in the internal representation. | Edit this page View Source Coordinates Collects all coordinates of all subgeometries into an Array. Note that while changes to the coordinate objects themselves may modify the Geometries in place, the returned Array as such is only a temporary container which is not synchronized back. Declaration public override Coordinate[] Coordinates { get; } Property Value Type Description Coordinate[] The collected coordinates. Overrides Geometry.Coordinates | Edit this page View Source Count Returns the number of geometries contained by this GeometryCollection. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source Dimension Returns the dimension of this geometry. Declaration public override Dimension Dimension { get; } Property Value Type Description Dimension The topological dimensions of this geometry Overrides Geometry.Dimension Remarks The dimension of a geometry is is the topological dimension of its embedding in the 2-D Euclidean plane. In the NTS spatial model, dimension values are in the set {0,1,2}. Note that this is a different concept to the dimension of the vertex Coordinates. The geometry dimension can never be greater than the coordinate dimension. For example, a 0-dimensional geometry (e.g. a Point) may have a coordinate dimension of 3 (X,Y,Z). See Also HasDimension(Dimension) | Edit this page View Source Geometries Declaration public Geometry[] Geometries { get; protected set; } Property Value Type Description Geometry[] | Edit this page View Source GeometryType Returns the name of this object's interface. Declaration public override string GeometryType { get; } Property Value Type Description string \"GeometryCollection\" Overrides Geometry.GeometryType | Edit this page View Source IsEmpty Tests whether the set of points covered in this Geometry is empty. Note this test is for topological emptiness, not structural emptiness. A collection containing only empty elements is reported as empty. To check structural emptiness use NumGeometries. Declaration public override bool IsEmpty { get; } Property Value Type Description bool true if this Geometry does not cover any points. Overrides Geometry.IsEmpty | Edit this page View Source IsHomogeneous Return true if all features in collection are of the same type. Declaration public bool IsHomogeneous { get; } Property Value Type Description bool | Edit this page View Source this[int] Returns the iTh element in the collection. Declaration public Geometry this[int i] { get; } Parameters Type Name Description int i Property Value Type Description Geometry | Edit this page View Source Length Returns the length of this GeometryCollection. Declaration public override double Length { get; } Property Value Type Description double Overrides Geometry.Length | Edit this page View Source NumGeometries Returns the number of Geometryes in a GeometryCollection, or 1, if the geometry is not a collection. Declaration public override int NumGeometries { get; } Property Value Type Description int Overrides Geometry.NumGeometries | Edit this page View Source NumPoints Returns the count of this Geometrys vertices. The Geometry s contained by composite Geometrys must be Geometry's; that is, they must implement NumPoints. Declaration public override int NumPoints { get; } Property Value Type Description int The number of vertices in this Geometry. Overrides Geometry.NumPoints | Edit this page View Source OgcGeometryType Gets the OGC geometry type Declaration public override OgcGeometryType OgcGeometryType { get; } Property Value Type Description OgcGeometryType Overrides Geometry.OgcGeometryType | Edit this page View Source SortIndex Gets a value to sort the geometry Declaration protected override Geometry.SortIndexValue SortIndex { get; } Property Value Type Description Geometry.SortIndexValue Overrides Geometry.SortIndex Remarks NOTE: For JTS v1.17 this property's getter has been renamed to getTypeCode(). In order not to break binary compatibility we did not follow. Methods | Edit this page View Source Apply(ICoordinateFilter) Declaration public override void Apply(ICoordinateFilter filter) Parameters Type Name Description ICoordinateFilter filter Overrides Geometry.Apply(ICoordinateFilter) | Edit this page View Source Apply(ICoordinateSequenceFilter) Declaration public override void Apply(ICoordinateSequenceFilter filter) Parameters Type Name Description ICoordinateSequenceFilter filter Overrides Geometry.Apply(ICoordinateSequenceFilter) | Edit this page View Source Apply(IEntireCoordinateSequenceFilter) Performs an operation on this Geometry's CoordinateSequences. Declaration public override void Apply(IEntireCoordinateSequenceFilter filter) Parameters Type Name Description IEntireCoordinateSequenceFilter filter The filter to apply Overrides Geometry.Apply(IEntireCoordinateSequenceFilter) Remarks If the filter reports that a coordinate value has been changed, GeometryChanged() will be called automatically. | Edit this page View Source Apply(IGeometryComponentFilter) Declaration public override void Apply(IGeometryComponentFilter filter) Parameters Type Name Description IGeometryComponentFilter filter Overrides Geometry.Apply(IGeometryComponentFilter) | Edit this page View Source Apply(IGeometryFilter) Declaration public override void Apply(IGeometryFilter filter) Parameters Type Name Description IGeometryFilter filter Overrides Geometry.Apply(IGeometryFilter) | Edit this page View Source CompareToSameClass(object) Returns whether this Geometry is greater than, equal to, or less than another Geometry having the same class. Declaration protected override int CompareToSameClass(object o) Parameters Type Name Description object o A Geometry having the same class as this Geometry. Returns Type Description int A positive number, 0, or a negative number, depending on whether this object is greater than, equal to, or less than o, as defined in \"Normal Form For Geometry\" in the NTS Technical Specifications. Overrides Geometry.CompareToSameClass(object) | Edit this page View Source CompareToSameClass(object, IComparer<CoordinateSequence>) Returns whether this Geometry is greater than, equal to, or less than another Geometry of the same class. using the given IComparer<T>. Declaration protected override int CompareToSameClass(object o, IComparer<CoordinateSequence> comp) Parameters Type Name Description object o A Geometry having the same class as this Geometry IComparer<CoordinateSequence> comp The comparer Returns Type Description int A positive number, 0, or a negative number, depending on whether this object is greater than, equal to, or less than o, as defined in \"Normal Form For Geometry\" in the JTS Technical Specifications Overrides Geometry.CompareToSameClass(object, IComparer<CoordinateSequence>) | Edit this page View Source ComputeEnvelopeInternal() Declaration protected override Envelope ComputeEnvelopeInternal() Returns Type Description Envelope Overrides Geometry.ComputeEnvelopeInternal() | Edit this page View Source CopyInternal() An internal method to copy subclass-specific geometry data. Declaration protected override Geometry CopyInternal() Returns Type Description Geometry A copy of the target geometry object. Overrides Geometry.CopyInternal() | Edit this page View Source EqualsExact(Geometry, double) Declaration public override bool EqualsExact(Geometry other, double tolerance) Parameters Type Name Description Geometry other double tolerance Returns Type Description bool Overrides Geometry.EqualsExact(Geometry, double) | Edit this page View Source GetEnumerator() Declaration public IEnumerator<Geometry> GetEnumerator() Returns Type Description IEnumerator<Geometry> | Edit this page View Source GetGeometryN(int) Returns an element Geometry from a GeometryCollection, or this, if the geometry is not a collection. Declaration public override Geometry GetGeometryN(int n) Parameters Type Name Description int n The index of the geometry element. Returns Type Description Geometry The n'th geometry contained in this geometry. Overrides Geometry.GetGeometryN(int) | Edit this page View Source GetOrdinates(Ordinate) Gets an array of double ordinate values Declaration public override double[] GetOrdinates(Ordinate ordinate) Parameters Type Name Description Ordinate ordinate The ordinate index Returns Type Description double[] An array of ordinate values Overrides Geometry.GetOrdinates(Ordinate) | Edit this page View Source HasDimension(Dimension) Tests whether an atomic geometry or any element of a collection has the specified dimension. In particular, this can be used with mixed-dimension GeometryCollections to test if they contain an element of the specified dimension. Declaration public override bool HasDimension(Dimension dim) Parameters Type Name Description Dimension dim The dimension to test Returns Type Description bool true if the geometry has or contains an element with the dimension Overrides Geometry.HasDimension(Dimension) See Also Dimension | Edit this page View Source Normalize() Declaration public override void Normalize() Overrides Geometry.Normalize() | Edit this page View Source Reverse() Creates a GeometryCollection with every component reversed. The order of the components in the collection are not reversed. Declaration [Obsolete(\"Call Geometry.Reverse()\")] public override Geometry Reverse() Returns Type Description Geometry A GeometryCollection Overrides Geometry.Reverse() | Edit this page View Source ReverseInternal() The actual implementation of the Reverse() function for GeometryCollections. Declaration protected override Geometry ReverseInternal() Returns Type Description Geometry A reversed geometry Overrides Geometry.ReverseInternal() Implements IComparable IComparable<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Extension Methods PolygonalExtracter.GetPolygonals<TCollection>(Geometry) PolygonalExtracter.GetPolygonals<TCollection>(Geometry, TCollection)"
  },
  "api/NetTopologySuite.Geometries.GeometryCollectionEnumerator.html": {
    "href": "api/NetTopologySuite.Geometries.GeometryCollectionEnumerator.html",
    "title": "Class GeometryCollectionEnumerator | NetTopologySuite",
    "summary": "Class GeometryCollectionEnumerator Iterates over all Geometry's in a GeometryCollection. Implements a pre-order depth-first traversal of the GeometryCollection (which may be nested). The original GeometryCollection is returned as well (as the first object), as are all sub-collections. It is simple to ignore the GeometryCollection objects if they are not needed. Inheritance object GeometryCollectionEnumerator Implements IEnumerator<Geometry> IEnumerator IDisposable IEnumerable<Geometry> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public class GeometryCollectionEnumerator : IEnumerator<Geometry>, IEnumerator, IDisposable, IEnumerable<Geometry>, IEnumerable Constructors | Edit this page View Source GeometryCollectionEnumerator(Geometry) Constructs an iterator over the given GeometryCollection. Declaration public GeometryCollectionEnumerator(Geometry parent) Parameters Type Name Description Geometry parent The collection over which to iterate; also, the first element returned by the iterator. Properties | Edit this page View Source Current Declaration public Geometry Current { get; } Property Value Type Description Geometry Methods | Edit this page View Source Dispose() Declaration public void Dispose() | Edit this page View Source GetEnumerator() Declaration public IEnumerator<Geometry> GetEnumerator() Returns Type Description IEnumerator<Geometry> | Edit this page View Source MoveNext() Declaration public bool MoveNext() Returns Type Description bool | Edit this page View Source Reset() Declaration public void Reset() Implements IEnumerator<T> IEnumerator IDisposable IEnumerable<T> IEnumerable"
  },
  "api/NetTopologySuite.Geometries.GeometryComponentFilter.html": {
    "href": "api/NetTopologySuite.Geometries.GeometryComponentFilter.html",
    "title": "Class GeometryComponentFilter | NetTopologySuite",
    "summary": "Class GeometryComponentFilter An IGeometryComponentFilter implementation that applies filtering with the provided FilterMethod Inheritance object GeometryComponentFilter Implements IGeometryComponentFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public class GeometryComponentFilter : IGeometryComponentFilter Constructors | Edit this page View Source GeometryComponentFilter(FilterMethod) Creates an instance of this class Declaration public GeometryComponentFilter(FilterMethod filterMethod) Parameters Type Name Description FilterMethod filterMethod The filter method to be used Methods | Edit this page View Source Filter(Geometry) Performs an operation with or on a geometry component. Declaration public void Filter(Geometry geom) Parameters Type Name Description Geometry geom A component of the geometry to which the filter is applied. Implements IGeometryComponentFilter"
  },
  "api/NetTopologySuite.Geometries.GeometryFactory.html": {
    "href": "api/NetTopologySuite.Geometries.GeometryFactory.html",
    "title": "Class GeometryFactory | NetTopologySuite",
    "summary": "Class GeometryFactory Supplies a set of utility methods for building Geometry objects from lists of Coordinates. Inheritance object GeometryFactory GeometryFactoryEx OgcCompliantGeometryFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax [Serializable] public class GeometryFactory Remarks Note that the factory constructor methods do not change the input coordinates in any way. In particular, they are not rounded to the supplied PrecisionModel. It is assumed that input Coordinates meet the given precision. Instances of this class are thread-safe. Constructors | Edit this page View Source GeometryFactory() Constructs a GeometryFactory that generates Geometries having a floating PrecisionModel and a spatial-reference ID of 0. Declaration public GeometryFactory() | Edit this page View Source GeometryFactory(CoordinateSequenceFactory) Constructs a GeometryFactory that generates Geometries having the given CoordinateSequence implementation, a double-precision floating PrecisionModel and a spatial-reference ID of 0. Declaration public GeometryFactory(CoordinateSequenceFactory coordinateSequenceFactory) Parameters Type Name Description CoordinateSequenceFactory coordinateSequenceFactory | Edit this page View Source GeometryFactory(PrecisionModel) Constructs a GeometryFactory that generates Geometries having the given {PrecisionModel} and the default CoordinateSequence implementation. Declaration public GeometryFactory(PrecisionModel precisionModel) Parameters Type Name Description PrecisionModel precisionModel The PrecisionModel to use. | Edit this page View Source GeometryFactory(PrecisionModel, ElevationModel, int, CoordinateSequenceFactory, NtsGeometryServices) Constructs a GeometryFactory that generates Geometries having the given precisionModel, elevationModel, srid, coordinateSequenceFactory and services. Declaration public GeometryFactory(PrecisionModel precisionModel, ElevationModel elevationModel, int srid, CoordinateSequenceFactory coordinateSequenceFactory, NtsGeometryServices services) Parameters Type Name Description PrecisionModel precisionModel A precision model ElevationModel elevationModel An elevation model. May be null int srid A spatial reference id CoordinateSequenceFactory coordinateSequenceFactory A coordinate sequence factory NtsGeometryServices services NtsGeometryServices object creating this factory | Edit this page View Source GeometryFactory(PrecisionModel, int) Constructs a GeometryFactory that generates Geometries having the given PrecisionModel and spatial-reference ID, and the default CoordinateSequence implementation. Declaration public GeometryFactory(PrecisionModel precisionModel, int srid) Parameters Type Name Description PrecisionModel precisionModel The PrecisionModel to use. int srid The SRID to use. | Edit this page View Source GeometryFactory(PrecisionModel, int, CoordinateSequenceFactory) Constructs a GeometryFactory that generates Geometries having the given PrecisionModel, spatial-reference ID, and CoordinateSequence implementation. Declaration public GeometryFactory(PrecisionModel precisionModel, int srid, CoordinateSequenceFactory coordinateSequenceFactory) Parameters Type Name Description PrecisionModel precisionModel int srid CoordinateSequenceFactory coordinateSequenceFactory | Edit this page View Source GeometryFactory(PrecisionModel, int, CoordinateSequenceFactory, NtsGeometryServices) Constructs a GeometryFactory that generates Geometries having the given precisionModel, srid, coordinateSequenceFactory and services. Declaration public GeometryFactory(PrecisionModel precisionModel, int srid, CoordinateSequenceFactory coordinateSequenceFactory, NtsGeometryServices services) Parameters Type Name Description PrecisionModel precisionModel A precision model int srid A spatial reference id CoordinateSequenceFactory coordinateSequenceFactory A coordinate sequence factory NtsGeometryServices services NtsGeometryServices object creating this factory Fields | Edit this page View Source Default A predefined GeometryFactory with PrecisionModelc == Floating. Declaration public static readonly GeometryFactory Default Field Value Type Description GeometryFactory | Edit this page View Source Fixed A predefined GeometryFactory with PrecisionModel == Fixed. Declaration public static readonly GeometryFactory Fixed Field Value Type Description GeometryFactory | Edit this page View Source Floating A predefined GeometryFactory with PrecisionModel == Floating. Declaration public static readonly GeometryFactory Floating Field Value Type Description GeometryFactory Remarks A shortcut for Default. | Edit this page View Source FloatingSingle A predefined GeometryFactory with PrecisionModel == FloatingSingle. Declaration public static readonly GeometryFactory FloatingSingle Field Value Type Description GeometryFactory Properties | Edit this page View Source CoordinateSequenceFactory Gets a value indicating the factory to use for creating CoordinateSequences Declaration public CoordinateSequenceFactory CoordinateSequenceFactory { get; } Property Value Type Description CoordinateSequenceFactory | Edit this page View Source ElevationModel Gets a value indicating the elevation model that is attached to this geometry factory Declaration public ElevationModel ElevationModel { get; } Property Value Type Description ElevationModel | Edit this page View Source GeometryServices Gets a value indicating the NtsGeometryServices object that created this factory. Declaration public NtsGeometryServices GeometryServices { get; } Property Value Type Description NtsGeometryServices | Edit this page View Source PrecisionModel Returns the PrecisionModel that Geometries created by this factory will be associated with. Declaration public PrecisionModel PrecisionModel { get; } Property Value Type Description PrecisionModel | Edit this page View Source SRID The SRID value defined for this factory. Declaration public int SRID { get; } Property Value Type Description int Methods | Edit this page View Source BuildGeometry(IEnumerable<Geometry>) Build an appropriate Geometry, MultiGeometry, or GeometryCollection to contain the Geometrys in it. Declaration public virtual Geometry BuildGeometry(IEnumerable<Geometry> geomList) Parameters Type Name Description IEnumerable<Geometry> geomList The Geometry to combine. Returns Type Description Geometry A Geometry of the \"smallest\", \"most type-specific\" class that can contain the elements of geomList. Remarks If geomList contains a single Polygon, the Polygon is returned. If geomList contains several Polygons, a MultiPolygon is returned. If geomList contains some Polygons and some LineStrings, a GeometryCollection is returned. If geomList is empty, an empty GeometryCollection is returned. Note that this method does not \"flatten\" Geometries in the input, and hence if any MultiGeometries are contained in the input a GeometryCollection containing them will be returned. | Edit this page View Source CreateEmpty(Dimension) Creates an empty atomic geometry of the given dimension. If passed a dimension of False will create an empty GeometryCollection. Declaration public Geometry CreateEmpty(Dimension dimension) Parameters Type Name Description Dimension dimension The required dimension (False, Point, Curve or Surface) Returns Type Description Geometry An empty atomic geometry of given dimension | Edit this page View Source CreateGeometry(Geometry) Creates a deep copy of the input Geometry. The CoordinateSequenceFactory defined for this factory is used to copy the CoordinateSequences of the input geometry. This is a convenient way to change the CoordinateSequence used to represent a geometry, or to change the factory used for a geometry. Copy() can also be used to make a deep copy, but it does not allow changing the CoordinateSequence type. Declaration public virtual Geometry CreateGeometry(Geometry g) Parameters Type Name Description Geometry g The geometry Returns Type Description Geometry A deep copy of the input geometry, using the CoordinateSequence type of this factory See Also Copy() | Edit this page View Source CreateGeometryCollection() Creates an empty GeometryCollection Declaration public GeometryCollection CreateGeometryCollection() Returns Type Description GeometryCollection An empty GeometryCollection | Edit this page View Source CreateGeometryCollection(Geometry[]) Creates a GeometryCollection using the given Geometries; a null or empty array will create an empty GeometryCollection. Declaration public virtual GeometryCollection CreateGeometryCollection(Geometry[] geometries) Parameters Type Name Description Geometry[] geometries an array of Geometries, each of which may be empty but not null, or null Returns Type Description GeometryCollection A GeometryCollection object | Edit this page View Source CreateLineString() Creates an empty LineString Declaration public LineString CreateLineString() Returns Type Description LineString An empty LineString | Edit this page View Source CreateLineString(CoordinateSequence) Creates a LineString using the given CoordinateSequence. A null or empty CoordinateSequence creates an empty LineString. Declaration public virtual LineString CreateLineString(CoordinateSequence coordinates) Parameters Type Name Description CoordinateSequence coordinates A CoordinateSequence (possibly empty), or null. Returns Type Description LineString A LineString object | Edit this page View Source CreateLineString(Coordinate[]) Creates a LineString using the given Coordinates. A null or empty array creates an empty LineString. Declaration public LineString CreateLineString(Coordinate[] coordinates) Parameters Type Name Description Coordinate[] coordinates An array without null elements, or an empty array, or null. Returns Type Description LineString A LineString object | Edit this page View Source CreateLinearRing() Creates an empty LinearRing Declaration public LinearRing CreateLinearRing() Returns Type Description LinearRing An empty LinearRing | Edit this page View Source CreateLinearRing(CoordinateSequence) Creates a LinearRing using the given CoordinateSequence; a null or empty CoordinateSequence creates an empty LinearRing. The points must form a closed and simple linestring. Consecutive points must not be equal. Declaration public virtual LinearRing CreateLinearRing(CoordinateSequence coordinates) Parameters Type Name Description CoordinateSequence coordinates A CoordinateSequence (possibly empty), or null. Returns Type Description LinearRing A LinearRing object Exceptions Type Condition ArgumentException If the ring is not closed, or has too few points | Edit this page View Source CreateLinearRing(Coordinate[]) Creates a LinearRing using the given Coordinates; a null or empty array creates an empty LinearRing. The points must form a closed and simple linestring. Consecutive points must not be equal. Declaration public LinearRing CreateLinearRing(Coordinate[] coordinates) Parameters Type Name Description Coordinate[] coordinates An array without null elements, or an empty array, or null. Returns Type Description LinearRing A LinearRing object Exceptions Type Condition ArgumentException If the ring is not closed, or has too few points | Edit this page View Source CreateMultiLineString() Creates an empty MultiLineString Declaration public MultiLineString CreateMultiLineString() Returns Type Description MultiLineString An empty MultiLineString | Edit this page View Source CreateMultiLineString(LineString[]) Creates a MultiLineString using the given LineStrings; a null or empty array will create an empty MultiLineString. Declaration public virtual MultiLineString CreateMultiLineString(LineString[] lineStrings) Parameters Type Name Description LineString[] lineStrings LineStrings, each of which may be empty but not null- Returns Type Description MultiLineString A MultiLineString object | Edit this page View Source CreateMultiPoint() Creates an empty MultiPoint Declaration public MultiPoint CreateMultiPoint() Returns Type Description MultiPoint An empty MultiPoint | Edit this page View Source CreateMultiPoint(CoordinateSequence) Creates a MultiPoint using the given CoordinateSequence. A null or empty CoordinateSequence will create an empty MultiPoint. Declaration public MultiPoint CreateMultiPoint(CoordinateSequence coordinates) Parameters Type Name Description CoordinateSequence coordinates A CoordinateSequence (possibly empty), or null. Returns Type Description MultiPoint A MultiPoint object | Edit this page View Source CreateMultiPoint(Point[]) Creates a MultiPoint using the given Points. A null or empty array will create an empty MultiPoint. Declaration public virtual MultiPoint CreateMultiPoint(Point[] point) Parameters Type Name Description Point[] point An array (without null elements), or an empty array, or null. Returns Type Description MultiPoint A MultiPoint object | Edit this page View Source CreateMultiPointFromCoords(Coordinate[]) Creates a MultiPoint using the given Coordinates. A null or empty array will create an empty MultiPoint. Declaration public MultiPoint CreateMultiPointFromCoords(Coordinate[] coordinates) Parameters Type Name Description Coordinate[] coordinates An array (without null elements), or an empty array, or null Returns Type Description MultiPoint A MultiPoint object | Edit this page View Source CreateMultiPolygon() Creates an empty MultiPolygon Declaration public MultiPolygon CreateMultiPolygon() Returns Type Description MultiPolygon An empty MultiPolygon | Edit this page View Source CreateMultiPolygon(Polygon[]) Creates a MultiPolygon using the given Polygons; a null or empty array will create an empty Polygon. The polygons must conform to the assertions specified in the http://www.opengis.org/techno/specs.htm OpenGIS Simple Features Specification for SQL. Declaration public virtual MultiPolygon CreateMultiPolygon(Polygon[] polygons) Parameters Type Name Description Polygon[] polygons Polygons, each of which may be empty but not null. Returns Type Description MultiPolygon A MultiPolygon object | Edit this page View Source CreatePoint() Creates an empty Point Declaration public Point CreatePoint() Returns Type Description Point An empty Point | Edit this page View Source CreatePoint(Coordinate) Creates a Point using the given Coordinate. A null coordinate creates an empty Geometry. Declaration public Point CreatePoint(Coordinate coordinate) Parameters Type Name Description Coordinate coordinate a Coordinate, or null Returns Type Description Point A Point object | Edit this page View Source CreatePoint(CoordinateSequence) Creates a Point using the given CoordinateSequence; a null or empty CoordinateSequence will create an empty Point. Declaration public virtual Point CreatePoint(CoordinateSequence coordinates) Parameters Type Name Description CoordinateSequence coordinates a CoordinateSequence (possibly empty), or null Returns Type Description Point A Point object | Edit this page View Source CreatePointFromInternalCoord(Coordinate, Geometry) Declaration public static Point CreatePointFromInternalCoord(Coordinate coord, Geometry exemplar) Parameters Type Name Description Coordinate coord Geometry exemplar Returns Type Description Point | Edit this page View Source CreatePolygon() Creates an empty Polygon Declaration public Polygon CreatePolygon() Returns Type Description Polygon An empty Polygon | Edit this page View Source CreatePolygon(CoordinateSequence) Constructs a Polygon with the given exterior boundary. Declaration public virtual Polygon CreatePolygon(CoordinateSequence coordinates) Parameters Type Name Description CoordinateSequence coordinates the outer boundary of the new Polygon, or null or an empty LinearRing if the empty geometry is to be created. Returns Type Description Polygon A Polygon object Exceptions Type Condition ArgumentException If the boundary ring is invalid | Edit this page View Source CreatePolygon(Coordinate[]) Constructs a Polygon with the given exterior boundary. Declaration public virtual Polygon CreatePolygon(Coordinate[] coordinates) Parameters Type Name Description Coordinate[] coordinates the outer boundary of the new Polygon, or null or an empty LinearRing if the empty geometry is to be created. Returns Type Description Polygon A Polygon object Exceptions Type Condition ArgumentException If the boundary ring is invalid | Edit this page View Source CreatePolygon(LinearRing) Constructs a Polygon with the given exterior boundary. Declaration public virtual Polygon CreatePolygon(LinearRing shell) Parameters Type Name Description LinearRing shell the outer boundary of the new Polygon, or null or an empty LinearRing if the empty geometry is to be created. Returns Type Description Polygon the created Polygon Exceptions Type Condition ArgumentException If the boundary ring is invalid | Edit this page View Source CreatePolygon(LinearRing, LinearRing[]) Constructs a Polygon with the given exterior boundary and interior boundaries. Declaration public virtual Polygon CreatePolygon(LinearRing shell, LinearRing[] holes) Parameters Type Name Description LinearRing shell The outer boundary of the new Polygon, or null or an empty LinearRing if the empty point is to be created. LinearRing[] holes The inner boundaries of the new Polygon, or null or empty LinearRing s if the empty point is to be created. Returns Type Description Polygon A Polygon object | Edit this page View Source OnDeserialized(StreamingContext) Declaration [OnDeserialized] protected void OnDeserialized(StreamingContext context) Parameters Type Name Description StreamingContext context | Edit this page View Source ToGeometry(Envelope) Creates a Geometry with the same extent as the given envelope. Declaration public virtual Geometry ToGeometry(Envelope envelope) Parameters Type Name Description Envelope envelope The Envelope Returns Type Description Geometry An empty Point (for null Envelopes), a Point (when min x = max x and min y = max y) or a Polygon (in all other cases) Remarks The Geometry returned is guaranteed to be valid. To provide this behavior, the following cases occur: If the Envelope is: null returns an empty Point a point returns a non-empty Point a line returns a two-point LineString a rectangle returns a Polygon whose points are (minx, maxy), (minx, maxy), (maxx, maxy), (maxx, miny). | Edit this page View Source ToGeometryArray(IEnumerable<Geometry>) Converts the IEnumerable to an array. Declaration public static Geometry[] ToGeometryArray(IEnumerable<Geometry> geometries) Parameters Type Name Description IEnumerable<Geometry> geometries The IEnumerable of Geometry's to convert. Returns Type Description Geometry[] The IEnumerable in array format. | Edit this page View Source ToLineStringArray(IEnumerable<Geometry>) Converts the IEnumerable to an array. Declaration public static LineString[] ToLineStringArray(IEnumerable<Geometry> lineStrings) Parameters Type Name Description IEnumerable<Geometry> lineStrings The IEnumerable of LineStrings to convert. Returns Type Description LineString[] The IEnumerable in array format. | Edit this page View Source ToLinearRingArray(IEnumerable<Geometry>) Converts the IEnumerable to an array. Declaration public static LinearRing[] ToLinearRingArray(IEnumerable<Geometry> linearRings) Parameters Type Name Description IEnumerable<Geometry> linearRings The IEnumerable of LinearRings to convert. Returns Type Description LinearRing[] The IEnumerable in array format. | Edit this page View Source ToMultiLineStringArray(IEnumerable<Geometry>) Converts the IEnumerable to an array. Declaration public static MultiLineString[] ToMultiLineStringArray(IEnumerable<Geometry> multiLineStrings) Parameters Type Name Description IEnumerable<Geometry> multiLineStrings The IEnumerable of MultiLineStrings to convert. Returns Type Description MultiLineString[] The IEnumerable in array format. | Edit this page View Source ToMultiPointArray(IEnumerable<Geometry>) Converts the IEnumerable to an array. Declaration public static MultiPoint[] ToMultiPointArray(IEnumerable<Geometry> multiPoints) Parameters Type Name Description IEnumerable<Geometry> multiPoints The IEnumerable of MultiPoints to convert. Returns Type Description MultiPoint[] The IEnumerable in array format. | Edit this page View Source ToMultiPolygonArray(IEnumerable<Geometry>) Converts the IEnumerable to an array. Declaration public static MultiPolygon[] ToMultiPolygonArray(IEnumerable<Geometry> multiPolygons) Parameters Type Name Description IEnumerable<Geometry> multiPolygons The IEnumerable of MultiPolygons to convert. Returns Type Description MultiPolygon[] The IEnumerable in array format. | Edit this page View Source ToPointArray(IEnumerable<Geometry>) Converts the IEnumerable to an array. Declaration public static Point[] ToPointArray(IEnumerable<Geometry> points) Parameters Type Name Description IEnumerable<Geometry> points The IEnumerable of Points to convert. Returns Type Description Point[] The IEnumerable in array format. | Edit this page View Source ToPolygonArray(IEnumerable<Geometry>) Converts the IEnumerable to an array. Declaration public static Polygon[] ToPolygonArray(IEnumerable<Geometry> polygons) Parameters Type Name Description IEnumerable<Geometry> polygons The IEnumerable of Polygons to convert. Returns Type Description Polygon[] The IEnumerable in array format. | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() | Edit this page View Source WithSRID(int) Returns a new GeometryFactory whose SRID is the given value and whose other values and behavior are, as near as we possibly can make it, the same as our own. Declaration public virtual GeometryFactory WithSRID(int srid) Parameters Type Name Description int srid The SRID for the result. Returns Type Description GeometryFactory The cloned instance."
  },
  "api/NetTopologySuite.Geometries.GeometryFactoryEx.html": {
    "href": "api/NetTopologySuite.Geometries.GeometryFactoryEx.html",
    "title": "Class GeometryFactoryEx | NetTopologySuite",
    "summary": "Class GeometryFactoryEx An extended GeometryFactory that is capable of enforcing a ring orientation for polygons. Inheritance object GeometryFactory GeometryFactoryEx Inherited Members GeometryFactory.Default GeometryFactory.Floating GeometryFactory.FloatingSingle GeometryFactory.Fixed GeometryFactory.PrecisionModel GeometryFactory.CoordinateSequenceFactory GeometryFactory.SRID GeometryFactory.ElevationModel GeometryFactory.GeometryServices GeometryFactory.CreatePointFromInternalCoord(Coordinate, Geometry) GeometryFactory.ToPointArray(IEnumerable<Geometry>) GeometryFactory.ToGeometryArray(IEnumerable<Geometry>) GeometryFactory.ToLineStringArray(IEnumerable<Geometry>) GeometryFactory.ToLinearRingArray(IEnumerable<Geometry>) GeometryFactory.ToPolygonArray(IEnumerable<Geometry>) GeometryFactory.ToMultiPointArray(IEnumerable<Geometry>) GeometryFactory.ToMultiLineStringArray(IEnumerable<Geometry>) GeometryFactory.ToMultiPolygonArray(IEnumerable<Geometry>) GeometryFactory.ToGeometry(Envelope) GeometryFactory.CreatePoint() GeometryFactory.CreatePoint(Coordinate) GeometryFactory.CreatePoint(CoordinateSequence) GeometryFactory.CreateLineString() GeometryFactory.CreateLineString(Coordinate[]) GeometryFactory.CreateLineString(CoordinateSequence) GeometryFactory.CreateLinearRing() GeometryFactory.CreateLinearRing(Coordinate[]) GeometryFactory.CreateLinearRing(CoordinateSequence) GeometryFactory.CreatePolygon() GeometryFactory.CreatePolygon(CoordinateSequence) GeometryFactory.CreatePolygon(Coordinate[]) GeometryFactory.CreatePolygon(LinearRing) GeometryFactory.CreateMultiPoint() GeometryFactory.CreateMultiPoint(Point[]) GeometryFactory.CreateMultiPointFromCoords(Coordinate[]) GeometryFactory.CreateMultiPoint(CoordinateSequence) GeometryFactory.CreateMultiLineString() GeometryFactory.CreateMultiLineString(LineString[]) GeometryFactory.CreateMultiPolygon() GeometryFactory.CreateGeometryCollection() GeometryFactory.CreateGeometryCollection(Geometry[]) GeometryFactory.BuildGeometry(IEnumerable<Geometry>) GeometryFactory.CreateEmpty(Dimension) GeometryFactory.CreateGeometry(Geometry) GeometryFactory.ToString() GeometryFactory.OnDeserialized(StreamingContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public class GeometryFactoryEx : GeometryFactory Constructors | Edit this page View Source GeometryFactoryEx() Constructs a GeometryFactory that generates Geometries having a floating PrecisionModel and a spatial-reference ID of 0. Declaration public GeometryFactoryEx() | Edit this page View Source GeometryFactoryEx(CoordinateSequenceFactory) Constructs a GeometryFactory that generates Geometries having the given CoordinateSequence implementation, a double-precision floating PrecisionModel and a spatial-reference ID of 0. Declaration public GeometryFactoryEx(CoordinateSequenceFactory coordinateSequenceFactory) Parameters Type Name Description CoordinateSequenceFactory coordinateSequenceFactory | Edit this page View Source GeometryFactoryEx(PrecisionModel) Constructs a GeometryFactory that generates Geometries having the given {PrecisionModel} and the default CoordinateSequence implementation. Declaration public GeometryFactoryEx(PrecisionModel precisionModel) Parameters Type Name Description PrecisionModel precisionModel The PrecisionModel to use. | Edit this page View Source GeometryFactoryEx(PrecisionModel, int) Constructs a GeometryFactory that generates Geometries having the given PrecisionModel and spatial-reference ID, and the default CoordinateSequence implementation. Declaration public GeometryFactoryEx(PrecisionModel precisionModel, int srid) Parameters Type Name Description PrecisionModel precisionModel The PrecisionModel to use. int srid The SRID to use. | Edit this page View Source GeometryFactoryEx(PrecisionModel, int, CoordinateSequenceFactory) Constructs a GeometryFactory that generates Geometries having the given PrecisionModel, spatial-reference ID, and CoordinateSequence implementation. Declaration public GeometryFactoryEx(PrecisionModel precisionModel, int srid, CoordinateSequenceFactory coordinateSequenceFactory) Parameters Type Name Description PrecisionModel precisionModel int srid CoordinateSequenceFactory coordinateSequenceFactory | Edit this page View Source GeometryFactoryEx(PrecisionModel, int, CoordinateSequenceFactory, NtsGeometryServices) Constructs a GeometryFactory that generates Geometries having the given PrecisionModel, spatial-reference ID, and CoordinateSequence implementation. Declaration public GeometryFactoryEx(PrecisionModel precisionModel, int srid, CoordinateSequenceFactory coordinateSequenceFactory, NtsGeometryServices services) Parameters Type Name Description PrecisionModel precisionModel int srid CoordinateSequenceFactory coordinateSequenceFactory NtsGeometryServices services Properties | Edit this page View Source DefaultCoordinateSequenceFactory Gets or sets the default coordinate sequence factory to use with these geometry factories Declaration public static CoordinateSequenceFactory DefaultCoordinateSequenceFactory { get; set; } Property Value Type Description CoordinateSequenceFactory | Edit this page View Source DefaultPrecisionModel Gets or sets the default precision model to use with these geometry factories Declaration public static PrecisionModel DefaultPrecisionModel { get; set; } Property Value Type Description PrecisionModel | Edit this page View Source DefaultSRID Gets or sets the default spatial reference id. Declaration public static int DefaultSRID { get; set; } Property Value Type Description int | Edit this page View Source OrientationOfExteriorRing Gets or sets a value indicating the ring orientation of the Polygon's exterior rings. If its value is DontCare, this factory behaves just like the base GeometryFactory. Declaration public LinearRingOrientation OrientationOfExteriorRing { get; set; } Property Value Type Description LinearRingOrientation Remarks The setter of this property has to be used prior to any call to CreatePolygon, CreateMultiPolygon, or ReplaceSRID See Also CreatePolygon(Coordinate[]) CreatePolygon(CoordinateSequence) CreatePolygon(LinearRing) CreatePolygon(LinearRing, LinearRing[]) CreateMultiPolygon(Polygon[]) Methods | Edit this page View Source CreateMultiPolygon(Polygon[]) Creates a MultiPolygon using the given Polygons; a null or empty array will create an empty Polygon. The polygons must conform to the assertions specified in the http://www.opengis.org/techno/specs.htm OpenGIS Simple Features Specification for SQL. The OrientationOfExteriorRing is enforced on each polygon. Declaration public override MultiPolygon CreateMultiPolygon(Polygon[] polygons) Parameters Type Name Description Polygon[] polygons Polygons, each of which may be empty but not null. Returns Type Description MultiPolygon A MultiPolygon object Overrides GeometryFactory.CreateMultiPolygon(Polygon[]) | Edit this page View Source CreatePolygon(LinearRing, LinearRing[]) Constructs a Polygon with the given exterior boundary and interior boundaries. The OrientationOfExteriorRing is enforced on the constructed polygon. Declaration public override Polygon CreatePolygon(LinearRing shell, LinearRing[] holes) Parameters Type Name Description LinearRing shell The outer boundary of the new Polygon, or null or an empty LinearRing if the empty point is to be created. LinearRing[] holes The inner boundaries of the new Polygon, or null or empty LinearRing s if the empty point is to be created. Returns Type Description Polygon A Polygon object Overrides GeometryFactory.CreatePolygon(LinearRing, LinearRing[]) | Edit this page View Source WithSRID(int) Returns a new GeometryFactory whose SRID is the given value and whose other values and behavior are, as near as we possibly can make it, the same as our own. Declaration public override GeometryFactory WithSRID(int srid) Parameters Type Name Description int srid The SRID for the result. Returns Type Description GeometryFactory The cloned instance. Overrides GeometryFactory.WithSRID(int)"
  },
  "api/NetTopologySuite.Geometries.GeometryOverlay.html": {
    "href": "api/NetTopologySuite.Geometries.GeometryOverlay.html",
    "title": "Class GeometryOverlay | NetTopologySuite",
    "summary": "Class GeometryOverlay A class that encapsulates geometry overlay functionality Inheritance object GeometryOverlay Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public abstract class GeometryOverlay Properties | Edit this page View Source Legacy Gets a value indicating a geometry overlay operation class that uses old NTS overlay operation set. Declaration public static GeometryOverlay Legacy { get; } Property Value Type Description GeometryOverlay | Edit this page View Source NG Gets a value indicating a geometry overlay operation class that uses next-generation NTS overlay operation set. Declaration public static GeometryOverlay NG { get; } Property Value Type Description GeometryOverlay Methods | Edit this page View Source Difference(Geometry, Geometry) Computes a Geometry representing the closure of the point-set of the points contained in this Geometry that are not contained in the other Geometry. Declaration public virtual Geometry Difference(Geometry a, Geometry b) Parameters Type Name Description Geometry a The 1st Geometry Geometry b The 2nd Geometry Returns Type Description Geometry A Geometry representing the point-set difference of Geometry's a and b. See Also Difference(Geometry) | Edit this page View Source Intersection(Geometry, Geometry) Computes a Geometry representing the point-set which is common to both a and b Geometry. Declaration public virtual Geometry Intersection(Geometry a, Geometry b) Parameters Type Name Description Geometry a The 1st Geometry Geometry b The 2nd Geometry Returns Type Description Geometry A geometry representing the point-set common to the two Geometrys. See Also Intersection(Geometry) | Edit this page View Source Overlay(Geometry, Geometry, SpatialFunction) Computes a Geometry representing the overlay of geometries a and b using the spatial function defined by opCode. Declaration protected abstract Geometry Overlay(Geometry a, Geometry b, SpatialFunction opCode) Parameters Type Name Description Geometry a The 1st geometry Geometry b The 2nd geometry SpatialFunction opCode The spatial function for the overlay operation Returns Type Description Geometry The computed geometry | Edit this page View Source SymmetricDifference(Geometry, Geometry) Computes a Geometry representing the closure of the point-set which is the union of the points in Geometry a which are not contained in the Geometry b, with the points in the b Geometry not contained in the Geometry a. Declaration public virtual Geometry SymmetricDifference(Geometry a, Geometry b) Parameters Type Name Description Geometry a The 1st Geometry Geometry b The 2nd Geometry Returns Type Description Geometry A Geometry representing the point-set symmetric difference of Geometry's a and b. See Also SymmetricDifference(Geometry) | Edit this page View Source Union(Geometry) Computes the union of all the elements in the Geometry a. Declaration public abstract Geometry Union(Geometry a) Parameters Type Name Description Geometry a The Geometry Returns Type Description Geometry The union of a See Also Union() | Edit this page View Source Union(Geometry, Geometry) Computes a Geometry representing the point-set which is contained in both input Geometrys . Declaration public virtual Geometry Union(Geometry a, Geometry b) Parameters Type Name Description Geometry a The 1st Geometry Geometry b The 2nd Geometry Returns Type Description Geometry A point-set combining the points of Geometry's a and b. See Also Union(Geometry)"
  },
  "api/NetTopologySuite.Geometries.GeometryRelate.html": {
    "href": "api/NetTopologySuite.Geometries.GeometryRelate.html",
    "title": "Class GeometryRelate | NetTopologySuite",
    "summary": "Class GeometryRelate Class which provides the available Relate operations for NtsGeometryServices. Inheritance object GeometryRelate Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public abstract class GeometryRelate Properties | Edit this page View Source Legacy Gets a value indicating a geometry relation predicate computation class that uses old NTS relate function set. Declaration public static GeometryRelate Legacy { get; } Property Value Type Description GeometryRelate | Edit this page View Source NG Gets a value indicating a geometry relation predicate computation class that uses next-generation NTS relate function set. Declaration public static GeometryRelate NG { get; } Property Value Type Description GeometryRelate Methods | Edit this page View Source Contains(Geometry, Geometry) Tests if the input geometry a contains the input geometry b. The Contains predicate has the following equivalent definitions: Every point of the other geometry is a point of this geometry, and the interiors of the two geometries have at least one point in common. The DE-9IM Intersection Matrix for the two geometries matches the pattern [T*****FF*] within(B, A) = true ( contains is the converse of Within(Geometry, Geometry)) An implication of the definition is that \"Geometries do not contain their boundary\". In other words, if a geometry A is a subset of the points in the boundary of a geometry B, B.contains(A) = false. (As a concrete example, take A to be a LineString which lies in the boundary of a Polygon B.) For a predicate with similar behavior but avoiding this subtle limitation, see Covers(Geometry, Geometry). Declaration public abstract bool Contains(Geometry a, Geometry b) Parameters Type Name Description Geometry a The A input geometry Geometry b The B input geometry Returns Type Description bool true if the geometry a contains b. See Also Within(Geometry, Geometry) | Edit this page View Source CoveredBy(Geometry, Geometry) Tests if the input geometry a is covered by the input geometry b The CoveredBy predicate has the following equivalent definitions: Every point of this geometry is a point of the other geometry. The DE-9IM Intersection Matrix for the two geometries matches at least one of the following patterns: [T*F**F***] [*TF**F***] [**FT*F***] [**F*TF***] Covers(B, A) = true (CoveredBy is the converse of Covers(Geometry, Geometry)) If either geometry is empty, the value of this predicate is false. This predicate is similar to {@link #within}, but is more inclusive (i.e. returns true for more cases). Declaration public abstract bool CoveredBy(Geometry a, Geometry b) Parameters Type Name Description Geometry a The A input geometry Geometry b The B input geometry Returns Type Description bool trueif the geometry a is covered by b See Also Covers(Geometry, Geometry) | Edit this page View Source Covers(Geometry, Geometry) Tests if the input geometry a covers the input geometry b The Covers predicate has the following equivalent definitions: Every point of the other geometry is a point of this geometry. The DE-9IM Intersection Matrix for the two geometries matches at least one of the following patterns: [T*****FF*] [*T****FF*] [***T**FF*] [****T*FF*] CoveredBy(b, a) = true (Covers is the converse of CoveredBy(Geometry, Geometry)) If either geometry is empty, the value of this predicate is false. This predicate is similar to Contains(Geometry, Geometry), but is more inclusive (i.e. returns true for more cases). In particular, unlike Contains it does not distinguish between points in the boundary and in the interior of geometries. For most cases, Covers should be used in preference to Contains. As an added benefit, Covers is more amenable to optimization, and hence should be more performant. Declaration public abstract bool Covers(Geometry a, Geometry b) Parameters Type Name Description Geometry a The A input geometry Geometry b The B input geometry Returns Type Description bool true if the geometry a covers b. See Also CoveredBy(Geometry, Geometry) | Edit this page View Source Crosses(Geometry, Geometry) Tests if the input geometry a crosses the input geometry b The Crosses predicate has the following equivalent definitions: The geometries have some but not all interior points in common. The DE-9IM Intersection Matrix for the two geometries matches one of the following patterns: [T*T******] (for P/L, P/A, and L/A cases) [T*****T**] (for L/P, A/P, and A/L cases) [0********] (for L/L cases) For the A/A and P/P cases this predicate returns false. The SFS defined this predicate only for P/L, P/A, L/L, and L/A cases. To make the relation symmetric NTS extends the definition to apply to L/P, A/P and A/L cases as well. Declaration public abstract bool Crosses(Geometry a, Geometry b) Parameters Type Name Description Geometry a The A input geometry Geometry b The B input geometry Returns Type Description bool true if the geometry a crosses b | Edit this page View Source Disjoint(Geometry, Geometry) Tests if the input geometry a and b are disjoint. The Disjoint predicate has the following equivalent definitions: The two geometries have no point in common The DE-9IM Intersection Matrix for the two geometries matches [FF*FF****] Intersects() = false (Disjoint is the inverse of Intersects) Declaration public abstract bool Disjoint(Geometry a, Geometry b) Parameters Type Name Description Geometry a The A input geometry Geometry b The B input geometry Returns Type Description bool true> if geometries a and b are disjoint. See Also Intersects(Geometry, Geometry) | Edit this page View Source EqualsTopologically(Geometry, Geometry) Tests if the input geometry a and b are topologically equal. The Equals predicate has the following equivalent definitions: The two geometries have at least one point in common, and no point of either geometry lies in the exterior of the other geometry. The DE-9IM Intersection Matrix for the two geometries matches the pattern T*F**FFF* Declaration public abstract bool EqualsTopologically(Geometry a, Geometry b) Parameters Type Name Description Geometry a The A input geometry Geometry b The B input geometry Returns Type Description bool true if the geometries a and b are topologically equal | Edit this page View Source Intersects(Geometry, Geometry) Tests if the input geometries a and b intersect. The Intersects predicate has the following equivalent definitions: The two geometries have at least one point in common The DE-9IM Intersection Matrix for the two geometries matches at least one of the patterns [T********] [*T*******] [***T*****] [****T****] Disjoint() = false (Intersects is the inverse of Disjoint) Declaration public abstract bool Intersects(Geometry a, Geometry b) Parameters Type Name Description Geometry a The A input geometry Geometry b The B input geometry Returns Type Description bool true if geometries a and b intersect. See Also Disjoint(Geometry, Geometry) | Edit this page View Source Overlaps(Geometry, Geometry) Test if the input geometry a overlaps the input geometry b. The Overlaps predicate has the following equivalent definitions: The geometries have at least one point each not shared by the other (or equivalently neither covers the other), they have the same dimension, and the intersection of the interiors of the two geometries has the same dimension as the geometries themselves. The DE-9IM Intersection Matrix for the two geometries matches [T*T***T**] (for P/P and A/A cases) or [1*T***T**] (for L/L cases) If the geometries are of different dimension this predicate returns false. This predicate is symmetric. Declaration public abstract bool Overlaps(Geometry a, Geometry b) Parameters Type Name Description Geometry a The A input geometry Geometry b The B input geometry Returns Type Description bool true if the geometry a overlaps b | Edit this page View Source Relate(Geometry, Geometry) Computes the DE-9IM matrix for the topological relationship between two geometries. Declaration public abstract IntersectionMatrix Relate(Geometry a, Geometry b) Parameters Type Name Description Geometry a The A input geometry Geometry b The B input geometry Returns Type Description IntersectionMatrix The DE-9IM matrix for the topological relationship | Edit this page View Source Relate(Geometry, Geometry, string) Tests if the input geometry b relates to a in the way defined by intersectionPattern Declaration public abstract bool Relate(Geometry a, Geometry b, string intersectionPattern) Parameters Type Name Description Geometry a The A input geometry Geometry b The B input geometry string intersectionPattern The encoded DE-9IM pattern describing the topological relation to test Returns Type Description bool true if the geometry b relates to a in the way defined by intersectionPattern. | Edit this page View Source Touches(Geometry, Geometry) Tests if the input geometry a touches the b. The Touches predicate has the following equivalent definitions: The geometries have at least one point in common, but their interiors do not intersect. The DE-9IM Intersection Matrix for the two geometries matches at least one of the following patterns [FT*******] [F**T*****] [F***T****] If both geometries have dimension 0, the predicate returns false, since points have only interiors. This predicate is symmetric. Declaration public abstract bool Touches(Geometry a, Geometry b) Parameters Type Name Description Geometry a The A input geometry Geometry b The B input geometry Returns Type Description bool true if geometry a touches b | Edit this page View Source Within(Geometry, Geometry) Tests if the the input geometry a is within the input geometry b. The Within predicate has the following equivalent definitions: Every point of this geometry is a point of the other geometry, and the interiors of the two geometries have at least one point in common. The DE-9IM Intersection Matrix for the two geometries matches [T*F**F***] contains(B, A) = true (Within is the converse of Contains(Geometry, Geometry)) An implication of the definition is that \"The boundary of a Geometry is not within the Geometry\". In other words, if a geometry A is a subset of the points in the boundary of a geometry B, within(B, A) = false (As a concrete example, take A to be a LineString which lies in the boundary of a Polygon B.) For a predicate with similar behavior but avoiding this subtle limitation, see CoveredBy(Geometry, Geometry). Declaration public abstract bool Within(Geometry a, Geometry b) Parameters Type Name Description Geometry a The A input geometry Geometry b The B input geometry Returns Type Description bool true if the geometry a is within b. See Also Contains(Geometry, Geometry) CoveredBy(Geometry, Geometry)"
  },
  "api/NetTopologySuite.Geometries.IBoundable-2.html": {
    "href": "api/NetTopologySuite.Geometries.IBoundable-2.html",
    "title": "Interface IBoundable<T, TItem> | NetTopologySuite",
    "summary": "Interface IBoundable<T, TItem> A spatial object in an AbstractSTRtree. Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public interface IBoundable<out T, out TItem> where T : IIntersectable<out T>, IExpandable<out T> Type Parameters Name Description T TItem Properties | Edit this page View Source Bounds Returns a representation of space that encloses this Boundable, preferably not much bigger than this Boundable's boundary yet fast to test for intersection with the bounds of other Boundables. The class of object returned depends on the subclass of AbstractSTRtree. Declaration T Bounds { get; } Property Value Type Description T An Envelope (for STRtrees), an Interval (for SIRtrees), or other object (for other subclasses of AbstractSTRtree). | Edit this page View Source Item Gets the item that is bounded Declaration TItem Item { get; } Property Value Type Description TItem"
  },
  "api/NetTopologySuite.Geometries.ICoordinateFilter.html": {
    "href": "api/NetTopologySuite.Geometries.ICoordinateFilter.html",
    "title": "Interface ICoordinateFilter | NetTopologySuite",
    "summary": "Interface ICoordinateFilter An interface for classes which use the values of the coordinates in a Geometry. Coordinate filters can be used to implement centroid and envelope computation, and many other functions. ICoordinateFilter is an example of the Gang-of-Four Visitor pattern. Note: it is not recommended to use these filters to mutate the coordinates. There is no guarantee that the coordinate is the actual object stored in the source geometry. In particular, modified values may not be preserved if the source Geometry uses a non-default CoordinateSequence. If in-place mutation is required, use ICoordinateSequenceFilter. Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public interface ICoordinateFilter Methods | Edit this page View Source Filter(Coordinate) Performs an operation with the provided coord. Note that there is no guarantee that the input coordinate is the actual object stored in the source geometry, so changes to the coordinate object may not be persistent. Declaration void Filter(Coordinate coord) Parameters Type Name Description Coordinate coord A Coordinate to which the filter is applied. See Also Apply(ICoordinateFilter) ICoordinateSequenceFilter"
  },
  "api/NetTopologySuite.Geometries.ICoordinateSequenceFilter.html": {
    "href": "api/NetTopologySuite.Geometries.ICoordinateSequenceFilter.html",
    "title": "Interface ICoordinateSequenceFilter | NetTopologySuite",
    "summary": "Interface ICoordinateSequenceFilter An interface for classes which process the coordinates in a CoordinateSequence. A filter can either record information about each coordinate, or change the value of the coordinate. Filters can be used to implement operations such as coordinate transformations, centroid and envelope computation, and many other functions. Geometry classes support the concept of applying a CoordinateSequenceFilter to each CoordinateSequences they contain. For maximum efficiency, the execution of filters can be short-circuited by using the Done property. Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public interface ICoordinateSequenceFilter Remarks CoordinateSequenceFilter is an example of the Gang-of-Four Visitor pattern. Note: In general, it is preferable to treat Geometrys as immutable. Mutation should be performed by creating a new Geometry object (see GeometryEditor and GeometryTransformer for convenient ways to do this). An exception to this rule is when a new Geometry has been created via Copy(). In this case mutating the Geometry will not cause aliasing issues, and a filter is a convenient way to implement coordinate transformation. Properties | Edit this page View Source Done Reports whether the application of this filter can be terminated. Declaration bool Done { get; } Property Value Type Description bool Remarks Once this method returns true, it must continue to return true on every subsequent call. | Edit this page View Source GeometryChanged Reports whether the execution of this filter has modified the coordinates of the geometry. If so, GeometryChanged() will be executed after this filter has finished being executed. Declaration bool GeometryChanged { get; } Property Value Type Description bool Remarks Most filters can simply return a constant value reflecting whether they are able to change the coordinates. Methods | Edit this page View Source Filter(CoordinateSequence, int) Performs an operation on a coordinate in a CoordinateSequence. Declaration void Filter(CoordinateSequence seq, int i) Parameters Type Name Description CoordinateSequence seq the CoordinateSequence to which the filter is applied int i i the index of the coordinate to apply the filter to See Also Apply(ICoordinateFilter) GeometryTransformer"
  },
  "api/NetTopologySuite.Geometries.IEntireCoordinateSequenceFilter.html": {
    "href": "api/NetTopologySuite.Geometries.IEntireCoordinateSequenceFilter.html",
    "title": "Interface IEntireCoordinateSequenceFilter | NetTopologySuite",
    "summary": "Interface IEntireCoordinateSequenceFilter A variant of ICoordinateSequenceFilter, except it receives each CoordinateSequence just once, instead of once for each of its coordinates. Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public interface IEntireCoordinateSequenceFilter Properties | Edit this page View Source Done Reports whether the application of this filter can be terminated. Declaration bool Done { get; } Property Value Type Description bool Remarks Once this method returns true it must continue to return true on every subsequent call. | Edit this page View Source GeometryChanged Reports whether the execution of this filter has modified the coordinates of the geometry. If so, GeometryChanged() will be executed after this filter has finished being executed. Declaration bool GeometryChanged { get; } Property Value Type Description bool Remarks Most filters can simply return a constant value reflecting whether they are able to change the coordinates. Methods | Edit this page View Source Filter(CoordinateSequence) Performs an operation on a CoordinateSequence. Declaration void Filter(CoordinateSequence seq) Parameters Type Name Description CoordinateSequence seq The CoordinateSequence."
  },
  "api/NetTopologySuite.Geometries.IExpandable-1.html": {
    "href": "api/NetTopologySuite.Geometries.IExpandable-1.html",
    "title": "Interface IExpandable<T> | NetTopologySuite",
    "summary": "Interface IExpandable<T> Interface describing objects that can expand themselves by objects of type T. Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public interface IExpandable<T> Type Parameters Name Description T The type of objects that can expand clients Methods | Edit this page View Source ExpandToInclude(T) Method to expand this object by other Declaration void ExpandToInclude(T other) Parameters Type Name Description T other The object to expand with | Edit this page View Source ExpandedBy(T) Function to expand compute a new object that is this object by expanded by other. Declaration T ExpandedBy(T other) Parameters Type Name Description T other The object to expand with Returns Type Description T The expanded object"
  },
  "api/NetTopologySuite.Geometries.IGeometryComponentFilter.html": {
    "href": "api/NetTopologySuite.Geometries.IGeometryComponentFilter.html",
    "title": "Interface IGeometryComponentFilter | NetTopologySuite",
    "summary": "Interface IGeometryComponentFilter Geometry classes support the concept of applying an IGeometryComponentFilter filter to a geometry. Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public interface IGeometryComponentFilter Remarks The filter is applied to every component of a geometry as well as to the geometry itself. For instance, in a Polygon, all the LinearRing components for the shell and holes are visited, as well as the polygon itself. In order to process only atomic components, the Filter(Geometry) method code must explicitly handle only LineStrings, LinearRings and Points. An IGeometryComponentFilter filter can either record information about the Geometry or change the Geometry in some way. IGeometryComponentFilter is an example of the Gang-of-Four Visitor pattern. Methods | Edit this page View Source Filter(Geometry) Performs an operation with or on a geometry component. Declaration void Filter(Geometry geom) Parameters Type Name Description Geometry geom A component of the geometry to which the filter is applied."
  },
  "api/NetTopologySuite.Geometries.IGeometryFilter.html": {
    "href": "api/NetTopologySuite.Geometries.IGeometryFilter.html",
    "title": "Interface IGeometryFilter | NetTopologySuite",
    "summary": "Interface IGeometryFilter GeometryCollection classes support the concept of applying a IGeometryFilter to the Geometry. The filter is applied to every element Geometry. A IGeometryFilter can either record information about the Geometry or change the Geometry in some way. IGeometryFilter is an example of the Gang-of-Four Visitor pattern. Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public interface IGeometryFilter Methods | Edit this page View Source Filter(Geometry) Performs an operation with or on geom. Declaration void Filter(Geometry geom) Parameters Type Name Description Geometry geom A Geometry to which the filter is applied."
  },
  "api/NetTopologySuite.Geometries.IIntersectable-1.html": {
    "href": "api/NetTopologySuite.Geometries.IIntersectable-1.html",
    "title": "Interface IIntersectable<T> | NetTopologySuite",
    "summary": "Interface IIntersectable<T> Interface describing objects that can perform an intersects predicate with T objects. Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public interface IIntersectable<in T> Type Parameters Name Description T The type of the component that can intersect Methods | Edit this page View Source Intersects(T) Predicate function to test if other intersects with this object. Declaration bool Intersects(T other) Parameters Type Name Description T other The object to test Returns Type Description bool true if this objects intersects with other"
  },
  "api/NetTopologySuite.Geometries.ILineal.html": {
    "href": "api/NetTopologySuite.Geometries.ILineal.html",
    "title": "Interface ILineal | NetTopologySuite",
    "summary": "Interface ILineal Interface to identify all Geometry subclasses that have a Dimension of Curve and have components which are LineStrings. Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public interface ILineal See Also IPuntal IPolygonal"
  },
  "api/NetTopologySuite.Geometries.IPolygonal.html": {
    "href": "api/NetTopologySuite.Geometries.IPolygonal.html",
    "title": "Interface IPolygonal | NetTopologySuite",
    "summary": "Interface IPolygonal Interface to identify all Geometry subclasses that have a Dimension of Surface and have components that are Polygons. Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public interface IPolygonal See Also IPuntal ILineal"
  },
  "api/NetTopologySuite.Geometries.IPuntal.html": {
    "href": "api/NetTopologySuite.Geometries.IPuntal.html",
    "title": "Interface IPuntal | NetTopologySuite",
    "summary": "Interface IPuntal Interface to identify all Geometry subclasses that have a Dimension of Point and have components that ar Points. Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public interface IPuntal See Also ILineal IPolygonal"
  },
  "api/NetTopologySuite.Geometries.Implementation.CoordinateArraySequence.html": {
    "href": "api/NetTopologySuite.Geometries.Implementation.CoordinateArraySequence.html",
    "title": "Class CoordinateArraySequence | NetTopologySuite",
    "summary": "Class CoordinateArraySequence A CoordinateSequence backed by an array of Coordinates. This is the implementation that Geometrys use by default. Coordinates returned by ToCoordinateArray(), GetCoordinate(int) and GetCoordinate(int, Coordinate) are live -- modifications to them are actually changing the CoordinateSequence's underlying data. A dimension may be specified for the coordinates in the sequence, which may be 2 or 3. The actual coordinates will always have 3 ordinates, but the dimension is useful as metadata in some situations. Inheritance object CoordinateSequence CoordinateArraySequence Inherited Members CoordinateSequence.Dimension CoordinateSequence.Measures CoordinateSequence.Spatial CoordinateSequence.Ordinates CoordinateSequence.HasZ CoordinateSequence.HasM CoordinateSequence.ZOrdinateIndex CoordinateSequence.MOrdinateIndex CoordinateSequence.CreateCoordinate() CoordinateSequence.SetX(int, double) CoordinateSequence.SetY(int, double) CoordinateSequence.SetZ(int, double) CoordinateSequence.SetM(int, double) CoordinateSequence.GetOrdinate(int, Ordinate) CoordinateSequence.First CoordinateSequence.Last CoordinateSequence.Count CoordinateSequence.SetOrdinate(int, Ordinate, double) CoordinateSequence.TryGetOrdinateIndex(Ordinate, out int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries.Implementation Assembly: NetTopologySuite.dll Syntax [Serializable] public class CoordinateArraySequence : CoordinateSequence Constructors | Edit this page View Source CoordinateArraySequence(CoordinateSequence) Creates a new sequence based on a deep copy of the given CoordinateSequence. Declaration public CoordinateArraySequence(CoordinateSequence coordSeq) Parameters Type Name Description CoordinateSequence coordSeq The coordinate sequence that will be copied | Edit this page View Source CoordinateArraySequence(Coordinate[]) Constructs a sequence based on the given array of Coordinates. The coordinate dimension defaults to 2 Declaration public CoordinateArraySequence(Coordinate[] coordinates) Parameters Type Name Description Coordinate[] coordinates The coordinate array that will be referenced. Remarks The array is not copied. | Edit this page View Source CoordinateArraySequence(Coordinate[], int) Constructs a sequence based on the given array of Coordinates. Declaration [Obsolete(\"Use an overload that accepts measures. This overload will be removed in a future release.\")] public CoordinateArraySequence(Coordinate[] coordinates, int dimension) Parameters Type Name Description Coordinate[] coordinates The coordinate array that will be referenced. int dimension The dimension of the coordinates Remarks The Array is not copied | Edit this page View Source CoordinateArraySequence(Coordinate[], int, int) Constructs a sequence based on the given array of Coordinates. The Array is not copied It is your responsibility to ensure the array contains Coordinates of the indicated dimension and measures (See EnforceConsistency(Coordinate[])). Declaration public CoordinateArraySequence(Coordinate[] coordinates, int dimension, int measures) Parameters Type Name Description Coordinate[] coordinates The coordinate array that will be referenced. int dimension The dimension of the coordinates int measures The number of measure ordinate values. | Edit this page View Source CoordinateArraySequence(int) Constructs a sequence of a given size, populated with new Coordinates. Declaration public CoordinateArraySequence(int size) Parameters Type Name Description int size The size of the sequence to create. | Edit this page View Source CoordinateArraySequence(int, int) Constructs a sequence of a given size, populated with new Coordinates of the given dimension. Declaration [Obsolete(\"Use an overload that accepts measures. This overload will be removed in a future release.\")] public CoordinateArraySequence(int size, int dimension) Parameters Type Name Description int size The size of the sequence to create. int dimension the dimension of the coordinates | Edit this page View Source CoordinateArraySequence(int, int, int) Constructs a sequence of a given size, populated with new Coordinates of the given dimension with the given number of measures Declaration public CoordinateArraySequence(int size, int dimension, int measures) Parameters Type Name Description int size The size of the sequence to create. int dimension the dimension of the coordinates int measures the number of measures of the coordinates Fields | Edit this page View Source Coordinates Array of coordinates in sequence Declaration protected Coordinate[] Coordinates Field Value Type Description Coordinate[] Methods | Edit this page View Source Copy() Creates a deep copy of the CoordinateArraySequence. Declaration public override CoordinateSequence Copy() Returns Type Description CoordinateSequence The deep copy. Overrides CoordinateSequence.Copy() | Edit this page View Source EnforceArrayConsistency(Coordinate[]) Ensure array contents of the same type, making use of CreateCoordinate() as needed. A new array will be created if needed to return a consistent result. Declaration [Obsolete(\"It is the clients responsibility to provide consistent arrays\")] protected Coordinate[] EnforceArrayConsistency(Coordinate[] array) Parameters Type Name Description Coordinate[] array array containing consistent coordinate instances Returns Type Description Coordinate[] | Edit this page View Source ExpandEnvelope(Envelope) Expands the given Envelope to include the coordinates in the sequence. Allows implementing classes to optimize access to coordinate values. Declaration public override Envelope ExpandEnvelope(Envelope env) Parameters Type Name Description Envelope env The envelope to expand. Returns Type Description Envelope A reference to the expanded envelope. Overrides CoordinateSequence.ExpandEnvelope(Envelope) | Edit this page View Source GetClonedCoordinates() Declaration protected Coordinate[] GetClonedCoordinates() Returns Type Description Coordinate[] | Edit this page View Source GetCoordinate(int) Get the Coordinate with index i. Declaration public override Coordinate GetCoordinate(int i) Parameters Type Name Description int i The index of the coordinate. Returns Type Description Coordinate The requested Coordinate instance. Overrides CoordinateSequence.GetCoordinate(int) | Edit this page View Source GetCoordinate(int, Coordinate) Copies the i'th coordinate in the sequence to the supplied Coordinate. Declaration public override void GetCoordinate(int index, Coordinate coord) Parameters Type Name Description int index The index of the coordinate to copy. Coordinate coord A Coordinate to receive the value. Overrides CoordinateSequence.GetCoordinate(int, Coordinate) | Edit this page View Source GetCoordinateCopy(int) Get a copy of the Coordinate with index i. Declaration public override Coordinate GetCoordinateCopy(int i) Parameters Type Name Description int i The index of the coordinate. Returns Type Description Coordinate A copy of the requested Coordinate. Overrides CoordinateSequence.GetCoordinateCopy(int) | Edit this page View Source GetM(int) Returns ordinate M of the specified coordinate if available. Declaration public override double GetM(int index) Parameters Type Name Description int index Returns Type Description double The value of the M ordinate in the index'th coordinate, or Double.NaN if not defined. Overrides CoordinateSequence.GetM(int) | Edit this page View Source GetOrdinate(int, int) Returns the ordinate of a coordinate in this sequence. Ordinate indices 0 and 1 are assumed to be X and Y. Ordinate indices greater than 1 have user-defined semantics (for instance, they may contain other dimensions or measure values). Declaration public override double GetOrdinate(int index, int ordinateIndex) Parameters Type Name Description int index The coordinate index in the sequence. int ordinateIndex The ordinate index in the coordinate (in range [0, dimension-1]). Returns Type Description double Overrides CoordinateSequence.GetOrdinate(int, int) | Edit this page View Source GetX(int) Returns ordinate X (0) of the specified coordinate. Declaration public override double GetX(int index) Parameters Type Name Description int index Returns Type Description double The value of the X ordinate in the index'th coordinate. Overrides CoordinateSequence.GetX(int) | Edit this page View Source GetY(int) Returns ordinate Y (1) of the specified coordinate. Declaration public override double GetY(int index) Parameters Type Name Description int index Returns Type Description double The value of the Y ordinate in the index'th coordinate. Overrides CoordinateSequence.GetY(int) | Edit this page View Source GetZ(int) Returns ordinate Z of the specified coordinate if available. Declaration public override double GetZ(int index) Parameters Type Name Description int index Returns Type Description double The value of the Z ordinate in the index'th coordinate, or Double.NaN if not defined. Overrides CoordinateSequence.GetZ(int) | Edit this page View Source Reversed() Returns a reversed copy of this CoordinateSequence. Declaration public override CoordinateSequence Reversed() Returns Type Description CoordinateSequence A reversed copy of this CoordinateSequence. Overrides CoordinateSequence.Reversed() Exceptions Type Condition InvalidOperationException Thrown when Copy() returned null. | Edit this page View Source SetOrdinate(int, int, double) Sets the value for a given ordinate of a coordinate in this sequence. Declaration public override void SetOrdinate(int index, int ordinateIndex, double value) Parameters Type Name Description int index The coordinate index in the sequence. int ordinateIndex The ordinate index in the coordinate (in range [0, dimension-1]). double value The new ordinate value. Overrides CoordinateSequence.SetOrdinate(int, int, double) | Edit this page View Source ToCoordinateArray() This method exposes the internal Array of Coordinate Objects. Declaration public override Coordinate[] ToCoordinateArray() Returns Type Description Coordinate[] Overrides CoordinateSequence.ToCoordinateArray() | Edit this page View Source ToString() Returns the string representation of the coordinate array. Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Extension Methods CoordinateSequenceEx.GetHashCode(CoordinateSequence, int, Func<int, int>)"
  },
  "api/NetTopologySuite.Geometries.Implementation.CoordinateArraySequenceFactory.html": {
    "href": "api/NetTopologySuite.Geometries.Implementation.CoordinateArraySequenceFactory.html",
    "title": "Class CoordinateArraySequenceFactory | NetTopologySuite",
    "summary": "Class CoordinateArraySequenceFactory Creates CoordinateSequences represented as an array of Coordinates. Inheritance object CoordinateSequenceFactory CoordinateArraySequenceFactory Inherited Members CoordinateSequenceFactory.Ordinates CoordinateSequenceFactory.Create(int, int) CoordinateSequenceFactory.Create(int, Ordinates) CoordinateSequenceFactory.GetCommonSequenceParameters(Coordinate[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Implementation Assembly: NetTopologySuite.dll Syntax [Serializable] public sealed class CoordinateArraySequenceFactory : CoordinateSequenceFactory Properties | Edit this page View Source Instance Returns the singleton instance of CoordinateArraySequenceFactory. Declaration public static CoordinateArraySequenceFactory Instance { get; } Property Value Type Description CoordinateArraySequenceFactory Methods | Edit this page View Source Create(CoordinateSequence) Creates a CoordinateSequence which is a copy of the given CoordinateSequence. This method must handle null arguments by creating an empty sequence. Declaration public override CoordinateSequence Create(CoordinateSequence coordSeq) Parameters Type Name Description CoordinateSequence coordSeq Returns Type Description CoordinateSequence A coordinate sequence Overrides CoordinateSequenceFactory.Create(CoordinateSequence) | Edit this page View Source Create(Coordinate[]) Returns a CoordinateArraySequence based on the given array (the array is not copied). Declaration public override CoordinateSequence Create(Coordinate[] coordinates) Parameters Type Name Description Coordinate[] coordinates the coordinates, which may not be null nor contain null elements. Returns Type Description CoordinateSequence Overrides CoordinateSequenceFactory.Create(Coordinate[]) | Edit this page View Source Create(int, int, int) Creates a CoordinateSequence of the specified size and dimension with measure support. For this to be useful, the CoordinateSequence implementation must be mutable. Declaration public override CoordinateSequence Create(int size, int dimension, int measures) Parameters Type Name Description int size The number of coordinates in the sequence int dimension The dimension of the coordinates in the sequence (if user-specifiable, otherwise ignored) int measures The number of measures of the coordinates in the sequence (if user-specifiable, otherwise ignored) Returns Type Description CoordinateSequence Overrides CoordinateSequenceFactory.Create(int, int, int) Remarks If the requested dimension or measures are larger than the CoordinateSequence implementation can provide, then a sequence of maximum possible dimension should be created. An error should not be thrown."
  },
  "api/NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence.html": {
    "href": "api/NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence.html",
    "title": "Class DotSpatialAffineCoordinateSequence | NetTopologySuite",
    "summary": "Class DotSpatialAffineCoordinateSequence A coordinate sequence that follows the dotspatial shape range Inheritance object CoordinateSequence DotSpatialAffineCoordinateSequence Inherited Members CoordinateSequence.Dimension CoordinateSequence.Measures CoordinateSequence.Spatial CoordinateSequence.Ordinates CoordinateSequence.HasZ CoordinateSequence.HasM CoordinateSequence.ZOrdinateIndex CoordinateSequence.MOrdinateIndex CoordinateSequence.CreateCoordinate() CoordinateSequence.GetCoordinate(int) CoordinateSequence.GetOrdinate(int, Ordinate) CoordinateSequence.First CoordinateSequence.Last CoordinateSequence.Count CoordinateSequence.SetOrdinate(int, Ordinate, double) CoordinateSequence.TryGetOrdinateIndex(Ordinate, out int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Implementation Assembly: NetTopologySuite.dll Syntax [Serializable] public class DotSpatialAffineCoordinateSequence : CoordinateSequence Constructors | Edit this page View Source DotSpatialAffineCoordinateSequence(CoordinateSequence, Ordinates) Creates a sequence based on the given coordinate sequence. Declaration public DotSpatialAffineCoordinateSequence(CoordinateSequence coordSeq, Ordinates ordinates) Parameters Type Name Description CoordinateSequence coordSeq The coordinate sequence. Ordinates ordinates The ordinates to copy | Edit this page View Source DotSpatialAffineCoordinateSequence(IReadOnlyCollection<Coordinate>, Ordinates) Creates an instance of this class Declaration public DotSpatialAffineCoordinateSequence(IReadOnlyCollection<Coordinate> coordinates, Ordinates ordinates) Parameters Type Name Description IReadOnlyCollection<Coordinate> coordinates The coordinates Ordinates ordinates | Edit this page View Source DotSpatialAffineCoordinateSequence(double[], double[], double[]) Declaration public DotSpatialAffineCoordinateSequence(double[] xy, double[] z, double[] m) Parameters Type Name Description double[] xy double[] z double[] m | Edit this page View Source DotSpatialAffineCoordinateSequence(int, Ordinates) Constructs a sequence of a given size, populated with new Coordinates. Declaration public DotSpatialAffineCoordinateSequence(int size, Ordinates ordinates) Parameters Type Name Description int size The size of the sequence to create. Ordinates ordinates The kind of ordinates. | Edit this page View Source DotSpatialAffineCoordinateSequence(int, int, int) Constructs a sequence of a given size, populated with new Coordinates. Declaration public DotSpatialAffineCoordinateSequence(int size, int dimension, int measures) Parameters Type Name Description int size The size of the sequence to create. int dimension The number of dimensions. int measures The number of measures. Properties | Edit this page View Source M Gets the vector with measure values Declaration public double[] M { get; } Property Value Type Description double[] Remarks If you modify the values of this vector externally, you need to call ReleaseCoordinateArray()! | Edit this page View Source XY Gets the vector with x- and y-ordinate values; Declaration public double[] XY { get; } Property Value Type Description double[] Remarks If you modify the values of this vector externally, you need to call ReleaseCoordinateArray()! | Edit this page View Source Z Gets the vector with z-ordinate values Declaration public double[] Z { get; } Property Value Type Description double[] Remarks If you modify the values of this vector externally, you need to call ReleaseCoordinateArray()! Methods | Edit this page View Source Copy() Returns a deep copy of this collection. Declaration public override CoordinateSequence Copy() Returns Type Description CoordinateSequence A copy of the coordinate sequence containing copies of all points Overrides CoordinateSequence.Copy() | Edit this page View Source ExpandEnvelope(Envelope) Expands the given Envelope to include the coordinates in the sequence. Allows implementing classes to optimize access to coordinate values. Declaration public override Envelope ExpandEnvelope(Envelope env) Parameters Type Name Description Envelope env The envelope to expand. Returns Type Description Envelope A reference to the expanded envelope. Overrides CoordinateSequence.ExpandEnvelope(Envelope) | Edit this page View Source GetCoordinate(int, Coordinate) Copies the i'th coordinate in the sequence to the supplied Coordinate. At least the first two dimensions must be copied. Declaration public override void GetCoordinate(int index, Coordinate coord) Parameters Type Name Description int index The index of the coordinate to copy. Coordinate coord A Coordinate to receive the value. Overrides CoordinateSequence.GetCoordinate(int, Coordinate) | Edit this page View Source GetCoordinateCopy(int) Returns a copy of the i'th coordinate in this sequence. This method optimizes the situation where the caller is going to make a copy anyway - if the implementation has already created a new Coordinate object, no further copy is needed. Declaration public override Coordinate GetCoordinateCopy(int i) Parameters Type Name Description int i The index of the coordinate to retrieve. Returns Type Description Coordinate A copy of the i'th coordinate in the sequence Overrides CoordinateSequence.GetCoordinateCopy(int) | Edit this page View Source GetM(int) Returns ordinate M of the specified coordinate if available. Declaration public override double GetM(int index) Parameters Type Name Description int index Returns Type Description double The value of the M ordinate in the index'th coordinate, or NullOrdinate if not defined. Overrides CoordinateSequence.GetM(int) | Edit this page View Source GetOrdinate(int, int) Returns the ordinate of a coordinate in this sequence. Ordinate indices 0 and 1 are assumed to be X and Y. Ordinate indices greater than 1 have user-defined semantics (for instance, they may contain other dimensions or measure values as described by Dimension and Measures. Declaration public override double GetOrdinate(int index, int ordinateIndex) Parameters Type Name Description int index The coordinate index in the sequence. int ordinateIndex The ordinate index in the coordinate (in range [0, dimension-1]). Returns Type Description double The ordinate value, or NullOrdinate if the sequence does not provide values for ordinateIndex\"/> Overrides CoordinateSequence.GetOrdinate(int, int) Remarks If the sequence does not provide value for the required ordinate, the implementation must not throw an exception, it should return NullOrdinate. | Edit this page View Source GetX(int) Returns ordinate X (0) of the specified coordinate. Declaration public override double GetX(int index) Parameters Type Name Description int index Returns Type Description double The value of the X ordinate in the index'th coordinate. Overrides CoordinateSequence.GetX(int) | Edit this page View Source GetY(int) Returns ordinate Y (1) of the specified coordinate. Declaration public override double GetY(int index) Parameters Type Name Description int index Returns Type Description double The value of the Y ordinate in the index'th coordinate. Overrides CoordinateSequence.GetY(int) | Edit this page View Source GetZ(int) Returns ordinate Z of the specified coordinate if available. Declaration public override double GetZ(int index) Parameters Type Name Description int index Returns Type Description double The value of the Z ordinate in the index'th coordinate, or NullOrdinate if not defined. Overrides CoordinateSequence.GetZ(int) | Edit this page View Source ReleaseCoordinateArray() Releases the weak reference to the weak referenced coordinate array Declaration public void ReleaseCoordinateArray() Remarks This is necessary if you modify the values of the XY, Z, M arrays externally. | Edit this page View Source Reversed() Creates a reversed version of this coordinate sequence with cloned Coordinates Declaration public override CoordinateSequence Reversed() Returns Type Description CoordinateSequence A reversed version of this sequence Overrides CoordinateSequence.Reversed() | Edit this page View Source SetM(int, double) Sets ordinate M of the specified coordinate to the specified value if present. Declaration public override void SetM(int index, double value) Parameters Type Name Description int index The index of the coordinate whose M value to set if present. double value The value to set the coordinate's M value to if present. Overrides CoordinateSequence.SetM(int, double) | Edit this page View Source SetOrdinate(int, int, double) Sets the value for a given ordinate of a coordinate in this sequence. Declaration public override void SetOrdinate(int index, int ordinateIndex, double value) Parameters Type Name Description int index The coordinate index in the sequence. int ordinateIndex The ordinate index in the coordinate (in range [0, dimension-1]). double value The new ordinate value. Overrides CoordinateSequence.SetOrdinate(int, int, double) Remarks If the sequence can't store the ordinate value, the implementation must not throw an exception, it should simply ignore the call. | Edit this page View Source SetX(int, double) Sets ordinate X (0) of the specified coordinate to the specified value. Declaration public override void SetX(int index, double value) Parameters Type Name Description int index The index of the coordinate whose X value to set. double value The value to set the coordinate's X value to. Overrides CoordinateSequence.SetX(int, double) | Edit this page View Source SetY(int, double) Sets ordinate Y (1) of the specified coordinate to the specified value. Declaration public override void SetY(int index, double value) Parameters Type Name Description int index The index of the coordinate whose Y value to set. double value The value to set the coordinate's Y value to. Overrides CoordinateSequence.SetY(int, double) | Edit this page View Source SetZ(int, double) Sets ordinate Z of the specified coordinate to the specified value if present. Declaration public override void SetZ(int index, double value) Parameters Type Name Description int index The index of the coordinate whose Z value to set if present. double value The value to set the coordinate's Z value to if present. Overrides CoordinateSequence.SetZ(int, double) | Edit this page View Source ToCoordinateArray() Returns (possibly copies of) the Coordinates in this collection. Whether or not the Coordinates returned are the actual underlying Coordinates or merely copies depends on the implementation. Note that if this implementation does not store its data as an array of Coordinates, this method will incur a performance penalty because the array needs to be built from scratch. Declaration public override Coordinate[] ToCoordinateArray() Returns Type Description Coordinate[] Overrides CoordinateSequence.ToCoordinateArray() Extension Methods CoordinateSequenceEx.GetHashCode(CoordinateSequence, int, Func<int, int>)"
  },
  "api/NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequenceFactory.html": {
    "href": "api/NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequenceFactory.html",
    "title": "Class DotSpatialAffineCoordinateSequenceFactory | NetTopologySuite",
    "summary": "Class DotSpatialAffineCoordinateSequenceFactory A coordinate sequence factory class that creates DotSpatial's Shape/ShapeRange like coordinate sequences. Inheritance object CoordinateSequenceFactory DotSpatialAffineCoordinateSequenceFactory Inherited Members CoordinateSequenceFactory.Ordinates CoordinateSequenceFactory.Create(int, int) CoordinateSequenceFactory.GetCommonSequenceParameters(Coordinate[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Implementation Assembly: NetTopologySuite.dll Syntax [Serializable] public class DotSpatialAffineCoordinateSequenceFactory : CoordinateSequenceFactory Constructors | Edit this page View Source DotSpatialAffineCoordinateSequenceFactory(Ordinates) Declaration public DotSpatialAffineCoordinateSequenceFactory(Ordinates ordinates) Parameters Type Name Description Ordinates ordinates Properties | Edit this page View Source Instance Returns the singleton instance of DotSpatialAffineCoordinateSequenceFactory. Declaration public static DotSpatialAffineCoordinateSequenceFactory Instance { get; } Property Value Type Description DotSpatialAffineCoordinateSequenceFactory Methods | Edit this page View Source Create(CoordinateSequence) Creates a CoordinateSequence which is a copy of the given CoordinateSequence. This method must handle null arguments by creating an empty sequence. Declaration public override CoordinateSequence Create(CoordinateSequence coordSeq) Parameters Type Name Description CoordinateSequence coordSeq Returns Type Description CoordinateSequence A coordinate sequence Overrides CoordinateSequenceFactory.Create(CoordinateSequence) | Edit this page View Source Create(Coordinate[]) Returns a CoordinateArraySequence based on the given array (the array is not copied). Declaration public override CoordinateSequence Create(Coordinate[] coordinates) Parameters Type Name Description Coordinate[] coordinates the coordinates, which may not be null nor contain null elements. Returns Type Description CoordinateSequence Overrides CoordinateSequenceFactory.Create(Coordinate[]) | Edit this page View Source Create(double[]) Creates an instance of this class using the provided xy array for x- and y ordinates Declaration public CoordinateSequence Create(double[] xy) Parameters Type Name Description double[] xy The x- and y-ordinates Returns Type Description CoordinateSequence A coordinate sequence | Edit this page View Source Create(double[], double[], bool) Creates an instance of this class using the provided xy array for x- and y ordinates, the zm array for either z-ordinates or measure values. This is indicated by isMeasure. Declaration public CoordinateSequence Create(double[] xy, double[] zm, bool isMeasure = false) Parameters Type Name Description double[] xy The x- and y-ordinates double[] zm An array of z- or measure values bool isMeasure A value indicating if zm contains z-ordinates or measure values. Returns Type Description CoordinateSequence A coordinate sequence | Edit this page View Source Create(double[], double[], double[]) Creates an instance of this class using the provided xy array for x- and y ordinates, the z array for z ordinates and m for measure values. Declaration public CoordinateSequence Create(double[] xy, double[] z, double[] m) Parameters Type Name Description double[] xy The x- and y-ordinates double[] z An array of z- or measure values double[] m An array of measure values. Returns Type Description CoordinateSequence A coordinate sequence | Edit this page View Source Create(int, Ordinates) Creates a CoordinateSequence of the specified size and ordinates. For this to be useful, the CoordinateSequence implementation must be mutable. Declaration public override CoordinateSequence Create(int size, Ordinates ordinates) Parameters Type Name Description int size The number of coordinates. Ordinates ordinates The ordinates each coordinate has. XY is fix, Z and M can be set. Returns Type Description CoordinateSequence A coordinate sequence. Overrides CoordinateSequenceFactory.Create(int, Ordinates) | Edit this page View Source Create(int, int, int) Creates a CoordinateSequence of the specified size and dimension with measure support. For this to be useful, the CoordinateSequence implementation must be mutable. Declaration public override CoordinateSequence Create(int size, int dimension, int measures) Parameters Type Name Description int size The number of coordinates in the sequence int dimension The dimension of the coordinates in the sequence (if user-specifiable, otherwise ignored) int measures The number of measures of the coordinates in the sequence (if user-specifiable, otherwise ignored) Returns Type Description CoordinateSequence Overrides CoordinateSequenceFactory.Create(int, int, int) Remarks If the requested dimension or measures are larger than the CoordinateSequence implementation can provide, then a sequence of maximum possible dimension should be created. An error should not be thrown."
  },
  "api/NetTopologySuite.Geometries.Implementation.PackedCoordinateSequence.html": {
    "href": "api/NetTopologySuite.Geometries.Implementation.PackedCoordinateSequence.html",
    "title": "Class PackedCoordinateSequence | NetTopologySuite",
    "summary": "Class PackedCoordinateSequence A CoordinateSequence implementation based on a packed arrays. Inheritance object CoordinateSequence PackedCoordinateSequence PackedDoubleCoordinateSequence PackedFloatCoordinateSequence Inherited Members CoordinateSequence.Dimension CoordinateSequence.Measures CoordinateSequence.Spatial CoordinateSequence.Ordinates CoordinateSequence.HasZ CoordinateSequence.HasM CoordinateSequence.ZOrdinateIndex CoordinateSequence.MOrdinateIndex CoordinateSequence.CreateCoordinate() CoordinateSequence.GetCoordinateCopy(int) CoordinateSequence.GetCoordinate(int, Coordinate) CoordinateSequence.GetX(int) CoordinateSequence.GetY(int) CoordinateSequence.GetZ(int) CoordinateSequence.GetM(int) CoordinateSequence.SetX(int, double) CoordinateSequence.SetY(int, double) CoordinateSequence.SetZ(int, double) CoordinateSequence.SetM(int, double) CoordinateSequence.GetOrdinate(int, int) CoordinateSequence.GetOrdinate(int, Ordinate) CoordinateSequence.First CoordinateSequence.Last CoordinateSequence.Count CoordinateSequence.SetOrdinate(int, int, double) CoordinateSequence.SetOrdinate(int, Ordinate, double) CoordinateSequence.ExpandEnvelope(Envelope) CoordinateSequence.Copy() CoordinateSequence.Reversed() CoordinateSequence.TryGetOrdinateIndex(Ordinate, out int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries.Implementation Assembly: NetTopologySuite.dll Syntax [Serializable] public abstract class PackedCoordinateSequence : CoordinateSequence Constructors | Edit this page View Source PackedCoordinateSequence(int, int, int) Creates an instance of this class Declaration protected PackedCoordinateSequence(int count, int dimension, int measures) Parameters Type Name Description int count The number of Coordinates in the sequence. int dimension The total number of ordinates that make up a Coordinate in this sequence. int measures the number of measure-ordinates each {Coordinate in this sequence has. Fields | Edit this page View Source CoordRef A soft reference to the Coordinate[] representation of this sequence. Makes repeated coordinate array accesses more efficient. Declaration [NonSerialized] protected WeakReference CoordRef Field Value Type Description WeakReference Methods | Edit this page View Source GetCoordinate(int) Returns (possibly a copy of) the ith Coordinate in this collection. Whether or not the Coordinate returned is the actual underlying Coordinate or merely a copy depends on the implementation. Note that in the future the semantics of this method may change to guarantee that the Coordinate returned is always a copy. Callers are advised not to assume that they can modify a CoordinateSequence by modifying the Coordinate returned by this method. Declaration public override sealed Coordinate GetCoordinate(int i) Parameters Type Name Description int i Returns Type Description Coordinate Overrides CoordinateSequence.GetCoordinate(int) | Edit this page View Source GetCoordinateInternal(int) Returns a Coordinate representation of the specified coordinate, by always building a new Coordinate object. Declaration [Obsolete(\"Unused. This will be removed in a future release.\")] protected virtual Coordinate GetCoordinateInternal(int index) Parameters Type Name Description int index The coordinate index Returns Type Description Coordinate The Coordinate at the given index | Edit this page View Source ReleaseCoordinateArray() Releases the weak reference to the coordinate array. Declaration public void ReleaseCoordinateArray() Remarks This is necessary if you directly modify the array from GetRawCoordinates. | Edit this page View Source ToCoordinateArray() Returns (possibly copies of) the Coordinates in this collection. Whether or not the Coordinates returned are the actual underlying Coordinates or merely copies depends on the implementation. Note that if this implementation does not store its data as an array of Coordinates, this method will incur a performance penalty because the array needs to be built from scratch. Declaration public override sealed Coordinate[] ToCoordinateArray() Returns Type Description Coordinate[] Overrides CoordinateSequence.ToCoordinateArray() | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Extension Methods CoordinateSequenceEx.GetHashCode(CoordinateSequence, int, Func<int, int>)"
  },
  "api/NetTopologySuite.Geometries.Implementation.PackedCoordinateSequenceFactory.PackedType.html": {
    "href": "api/NetTopologySuite.Geometries.Implementation.PackedCoordinateSequenceFactory.PackedType.html",
    "title": "Enum PackedCoordinateSequenceFactory.PackedType | NetTopologySuite",
    "summary": "Enum PackedCoordinateSequenceFactory.PackedType An enumeration of valid type codes Namespace: NetTopologySuite.Geometries.Implementation Assembly: NetTopologySuite.dll Syntax public enum PackedCoordinateSequenceFactory.PackedType Fields Name Description Double Type code for arrays of type double. Float Type code for arrays of type float."
  },
  "api/NetTopologySuite.Geometries.Implementation.PackedCoordinateSequenceFactory.html": {
    "href": "api/NetTopologySuite.Geometries.Implementation.PackedCoordinateSequenceFactory.html",
    "title": "Class PackedCoordinateSequenceFactory | NetTopologySuite",
    "summary": "Class PackedCoordinateSequenceFactory Builds packed array coordinate sequences. The array data type can be either double or float, and defaults to double. Inheritance object CoordinateSequenceFactory PackedCoordinateSequenceFactory Inherited Members CoordinateSequenceFactory.Ordinates CoordinateSequenceFactory.Create(int, int) CoordinateSequenceFactory.Create(int, Ordinates) CoordinateSequenceFactory.GetCommonSequenceParameters(Coordinate[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Implementation Assembly: NetTopologySuite.dll Syntax [Serializable] public class PackedCoordinateSequenceFactory : CoordinateSequenceFactory Constructors | Edit this page View Source PackedCoordinateSequenceFactory() Initializes a new instance of the PackedCoordinateSequenceFactory class, using double values. Declaration public PackedCoordinateSequenceFactory() | Edit this page View Source PackedCoordinateSequenceFactory(PackedType) Initializes a new instance of the PackedCoordinateSequenceFactory class. Declaration public PackedCoordinateSequenceFactory(PackedCoordinateSequenceFactory.PackedType type) Parameters Type Name Description PackedCoordinateSequenceFactory.PackedType type The type. Fields | Edit this page View Source DoubleFactory A factory creating Double coordinate sequences Declaration public static readonly PackedCoordinateSequenceFactory DoubleFactory Field Value Type Description PackedCoordinateSequenceFactory | Edit this page View Source FloatFactory A factory creating Float coordinate sequences Declaration public static readonly PackedCoordinateSequenceFactory FloatFactory Field Value Type Description PackedCoordinateSequenceFactory Properties | Edit this page View Source Type Gets the type of packed coordinate sequence this factory builds, either Float or Double Declaration public PackedCoordinateSequenceFactory.PackedType Type { get; set; } Property Value Type Description PackedCoordinateSequenceFactory.PackedType The type of packed array built. Methods | Edit this page View Source Create(CoordinateSequence) Returns a CoordinateSequence based on the given coordinate sequence; whether or not the array is copied is implementation-dependent. Declaration public override CoordinateSequence Create(CoordinateSequence coordSeq) Parameters Type Name Description CoordinateSequence coordSeq Returns Type Description CoordinateSequence Overrides CoordinateSequenceFactory.Create(CoordinateSequence) | Edit this page View Source Create(Coordinate[]) Returns a CoordinateSequence based on the given array; whether or not the array is copied is implementation-dependent. Declaration public override CoordinateSequence Create(Coordinate[] coordinates) Parameters Type Name Description Coordinate[] coordinates Coordinates array, which may not be null nor contain null elements Returns Type Description CoordinateSequence Overrides CoordinateSequenceFactory.Create(Coordinate[]) | Edit this page View Source Create(double[], int) Creates a packed coordinate sequence of type Type from the provided double array using the provided dimension and a measure of 0. Declaration [Obsolete(\"Use an overload that accepts measures. This overload will be removed in a future release.\")] public CoordinateSequence Create(double[] packedCoordinates, int dimension) Parameters Type Name Description double[] packedCoordinates The array containing coordinate values int dimension The coordinate dimension Returns Type Description CoordinateSequence A packed coordinate sequence of Type | Edit this page View Source Create(double[], int, int) Creates a packed coordinate sequence of type Type from the provided double array using the provided dimension and a measure of 0. Declaration public CoordinateSequence Create(double[] packedCoordinates, int dimension, int measures) Parameters Type Name Description double[] packedCoordinates The array containing coordinate values int dimension The coordinate dimension int measures The coordinate measure count Returns Type Description CoordinateSequence A packed coordinate sequence of Type | Edit this page View Source Create(int, int, int) Creates a CoordinateSequence of the specified size and dimension with measure support. For this to be useful, the CoordinateSequence implementation must be mutable. Declaration public override CoordinateSequence Create(int size, int dimension, int measures) Parameters Type Name Description int size The number of coordinates in the sequence int dimension The dimension of the coordinates in the sequence (if user-specifiable, otherwise ignored) int measures The number of measures of the coordinates in the sequence (if user-specifiable, otherwise ignored) Returns Type Description CoordinateSequence Overrides CoordinateSequenceFactory.Create(int, int, int) Remarks If the requested dimension or measures are larger than the CoordinateSequence implementation can provide, then a sequence of maximum possible dimension should be created. An error should not be thrown. | Edit this page View Source Create(float[], int) Creates a packed coordinate sequence of type Type from the provided float array using the provided dimension and a measure of 0. Declaration [Obsolete(\"Use an overload that accepts measures. This overload will be removed in a future release.\")] public CoordinateSequence Create(float[] packedCoordinates, int dimension) Parameters Type Name Description float[] packedCoordinates The array containing coordinate values int dimension The coordinate dimension Returns Type Description CoordinateSequence A packed coordinate sequence of Type | Edit this page View Source Create(float[], int, int) Creates a packed coordinate sequence of type Type from the provided float array using the provided dimension and a measure of 0. Declaration public CoordinateSequence Create(float[] packedCoordinates, int dimension, int measures) Parameters Type Name Description float[] packedCoordinates The array containing coordinate values int dimension The coordinate dimension int measures The coordinate measure count Returns Type Description CoordinateSequence A packed coordinate sequence of Type"
  },
  "api/NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence.html": {
    "href": "api/NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence.html",
    "title": "Class PackedDoubleCoordinateSequence | NetTopologySuite",
    "summary": "Class PackedDoubleCoordinateSequence Packed coordinate sequence implementation based on doubles. Inheritance object CoordinateSequence PackedCoordinateSequence PackedDoubleCoordinateSequence Inherited Members PackedCoordinateSequence.CoordRef PackedCoordinateSequence.GetCoordinate(int) PackedCoordinateSequence.ToCoordinateArray() PackedCoordinateSequence.ReleaseCoordinateArray() PackedCoordinateSequence.ToString() PackedCoordinateSequence.GetCoordinateInternal(int) CoordinateSequence.Dimension CoordinateSequence.Measures CoordinateSequence.Spatial CoordinateSequence.Ordinates CoordinateSequence.HasZ CoordinateSequence.HasM CoordinateSequence.ZOrdinateIndex CoordinateSequence.MOrdinateIndex CoordinateSequence.CreateCoordinate() CoordinateSequence.GetCoordinateCopy(int) CoordinateSequence.GetCoordinate(int, Coordinate) CoordinateSequence.GetX(int) CoordinateSequence.GetY(int) CoordinateSequence.GetZ(int) CoordinateSequence.GetM(int) CoordinateSequence.SetX(int, double) CoordinateSequence.SetY(int, double) CoordinateSequence.SetZ(int, double) CoordinateSequence.SetM(int, double) CoordinateSequence.GetOrdinate(int, Ordinate) CoordinateSequence.First CoordinateSequence.Last CoordinateSequence.Count CoordinateSequence.SetOrdinate(int, Ordinate, double) CoordinateSequence.TryGetOrdinateIndex(Ordinate, out int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries.Implementation Assembly: NetTopologySuite.dll Syntax [Serializable] public class PackedDoubleCoordinateSequence : PackedCoordinateSequence Constructors | Edit this page View Source PackedDoubleCoordinateSequence(Coordinate[]) Initializes a new instance of the PackedDoubleCoordinateSequence class. Declaration public PackedDoubleCoordinateSequence(Coordinate[] coords) Parameters Type Name Description Coordinate[] coords An array of Coordinates. | Edit this page View Source PackedDoubleCoordinateSequence(Coordinate[], int) Initializes a new instance of the PackedDoubleCoordinateSequence class. Declaration [Obsolete(\"Use an overload that accepts measures. This overload will be removed in a future release.\")] public PackedDoubleCoordinateSequence(Coordinate[] coords, int dimension) Parameters Type Name Description Coordinate[] coords An array of Coordinates. int dimension The total number of ordinates that make up a Coordinate in this sequence. | Edit this page View Source PackedDoubleCoordinateSequence(Coordinate[], int, int) Initializes a new instance of the PackedDoubleCoordinateSequence class. Declaration public PackedDoubleCoordinateSequence(Coordinate[] coords, int dimension, int measures) Parameters Type Name Description Coordinate[] coords An array of Coordinates. int dimension The total number of ordinates that make up a Coordinate in this sequence. int measures The number of measure-ordinates each Coordinate in this sequence has. | Edit this page View Source PackedDoubleCoordinateSequence(double[], int, int) Initializes a new instance of the PackedDoubleCoordinateSequence class. Declaration public PackedDoubleCoordinateSequence(double[] coords, int dimension, int measures) Parameters Type Name Description double[] coords An array of double values that contains the ordinate values of the sequence. int dimension The total number of ordinates that make up a Coordinate in this sequence. int measures The number of measure-ordinates each Coordinate in this sequence has. | Edit this page View Source PackedDoubleCoordinateSequence(int, int, int) Initializes a new instance of the PackedDoubleCoordinateSequence class. Declaration public PackedDoubleCoordinateSequence(int size, int dimension, int measures) Parameters Type Name Description int size The number of coordinates in this sequence int dimension The total number of ordinates that make up a Coordinate in this sequence. int measures The number of measure-ordinates each Coordinate in this sequence has. | Edit this page View Source PackedDoubleCoordinateSequence(float[], int, int) Initializes a new instance of the PackedDoubleCoordinateSequence class. Declaration public PackedDoubleCoordinateSequence(float[] coords, int dimension, int measures) Parameters Type Name Description float[] coords An array of float values that contains the ordinate values of the sequence. int dimension The total number of ordinates that make up a Coordinate in this sequence. int measures The number of measure-ordinates each Coordinate in this sequence has. Methods | Edit this page View Source Copy() Returns a deep copy of this collection. Declaration public override CoordinateSequence Copy() Returns Type Description CoordinateSequence A copy of the coordinate sequence containing copies of all points Overrides CoordinateSequence.Copy() | Edit this page View Source ExpandEnvelope(Envelope) Expands the given Envelope to include the coordinates in the sequence. Allows implementing classes to optimize access to coordinate values. Declaration public override Envelope ExpandEnvelope(Envelope env) Parameters Type Name Description Envelope env The envelope to expand. Returns Type Description Envelope A reference to the expanded envelope. Overrides CoordinateSequence.ExpandEnvelope(Envelope) | Edit this page View Source GetOrdinate(int, int) Returns the ordinate of a coordinate in this sequence. Ordinate indices 0 and 1 are assumed to be X and Y. Ordinate indices greater than 1 have user-defined semantics (for instance, they may contain other dimensions or measure values). Declaration public override double GetOrdinate(int index, int ordinateIndex) Parameters Type Name Description int index The coordinate index in the sequence. int ordinateIndex The ordinate index in the coordinate (in range [0, dimension-1]). Returns Type Description double Overrides CoordinateSequence.GetOrdinate(int, int) Remarks Beware, for performance reasons the ordinate index is not checked, if it's over dimensions you may not get an exception but a meaningless value. | Edit this page View Source GetRawCoordinates() Gets the underlying array containing the coordinate values. Declaration public double[] GetRawCoordinates() Returns Type Description double[] The array of coordinate values | Edit this page View Source Reversed() Returns a reversed copy of this CoordinateSequence. Declaration public override CoordinateSequence Reversed() Returns Type Description CoordinateSequence A reversed copy of this CoordinateSequence. Overrides CoordinateSequence.Reversed() Exceptions Type Condition InvalidOperationException Thrown when Copy() returned null. | Edit this page View Source SetOrdinate(int, int, double) Sets the ordinate of a coordinate in this sequence. Declaration public override void SetOrdinate(int index, int ordinateIndex, double value) Parameters Type Name Description int index The coordinate index. int ordinateIndex The ordinate index in the coordinate, 0 based, smaller than the number of dimensions. double value The new ordinate value. Overrides CoordinateSequence.SetOrdinate(int, int, double) Remarks Warning: for performance reasons the ordinate index is not checked. If it is larger than the dimension a meaningless value may be returned. Extension Methods CoordinateSequenceEx.GetHashCode(CoordinateSequence, int, Func<int, int>)"
  },
  "api/NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence.html": {
    "href": "api/NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence.html",
    "title": "Class PackedFloatCoordinateSequence | NetTopologySuite",
    "summary": "Class PackedFloatCoordinateSequence Packed coordinate sequence implementation based on floats. Inheritance object CoordinateSequence PackedCoordinateSequence PackedFloatCoordinateSequence Inherited Members PackedCoordinateSequence.CoordRef PackedCoordinateSequence.GetCoordinate(int) PackedCoordinateSequence.ToCoordinateArray() PackedCoordinateSequence.ReleaseCoordinateArray() PackedCoordinateSequence.ToString() PackedCoordinateSequence.GetCoordinateInternal(int) CoordinateSequence.Dimension CoordinateSequence.Measures CoordinateSequence.Spatial CoordinateSequence.Ordinates CoordinateSequence.HasZ CoordinateSequence.HasM CoordinateSequence.ZOrdinateIndex CoordinateSequence.MOrdinateIndex CoordinateSequence.CreateCoordinate() CoordinateSequence.GetCoordinateCopy(int) CoordinateSequence.GetCoordinate(int, Coordinate) CoordinateSequence.GetX(int) CoordinateSequence.GetY(int) CoordinateSequence.GetZ(int) CoordinateSequence.GetM(int) CoordinateSequence.SetX(int, double) CoordinateSequence.SetY(int, double) CoordinateSequence.SetZ(int, double) CoordinateSequence.SetM(int, double) CoordinateSequence.GetOrdinate(int, Ordinate) CoordinateSequence.First CoordinateSequence.Last CoordinateSequence.Count CoordinateSequence.SetOrdinate(int, Ordinate, double) CoordinateSequence.TryGetOrdinateIndex(Ordinate, out int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries.Implementation Assembly: NetTopologySuite.dll Syntax [Serializable] public class PackedFloatCoordinateSequence : PackedCoordinateSequence Constructors | Edit this page View Source PackedFloatCoordinateSequence(Coordinate[]) Initializes a new instance of the PackedDoubleCoordinateSequence class. Declaration public PackedFloatCoordinateSequence(Coordinate[] coords) Parameters Type Name Description Coordinate[] coords An array of Coordinates. | Edit this page View Source PackedFloatCoordinateSequence(Coordinate[], int) Initializes a new instance of the PackedFloatCoordinateSequence class. Declaration [Obsolete(\"Use an overload that accepts measures. This overload will be removed in a future release.\")] public PackedFloatCoordinateSequence(Coordinate[] coords, int dimension) Parameters Type Name Description Coordinate[] coords An array of Coordinates. int dimension The total number of ordinates that make up a Coordinate in this sequence. | Edit this page View Source PackedFloatCoordinateSequence(Coordinate[], int, int) Initializes a new instance of the PackedFloatCoordinateSequence class. Declaration public PackedFloatCoordinateSequence(Coordinate[] coords, int dimension, int measures) Parameters Type Name Description Coordinate[] coords An array of Coordinates. int dimension The total number of ordinates that make up a Coordinate in this sequence. int measures The number of measure-ordinates each Coordinate in this sequence has. | Edit this page View Source PackedFloatCoordinateSequence(double[], int, int) Initializes a new instance of the PackedFloatCoordinateSequence class. Declaration public PackedFloatCoordinateSequence(double[] coords, int dimension, int measures) Parameters Type Name Description double[] coords An array of double values that contains the ordinate values of the sequence. int dimension The total number of ordinates that make up a Coordinate in this sequence. int measures The number of measure-ordinates each Coordinate in this sequence has. | Edit this page View Source PackedFloatCoordinateSequence(int, int, int) Initializes a new instance of the PackedFloatCoordinateSequence class. Declaration public PackedFloatCoordinateSequence(int size, int dimension, int measures) Parameters Type Name Description int size int dimension int measures | Edit this page View Source PackedFloatCoordinateSequence(float[], int, int) Initializes a new instance of the PackedFloatCoordinateSequence class. Declaration public PackedFloatCoordinateSequence(float[] coords, int dimension, int measures) Parameters Type Name Description float[] coords An array of float values that contains the ordinate values of the sequence. int dimension The total number of ordinates that make up a Coordinate in this sequence. int measures The number of measure-ordinates each Coordinate in this sequence has. Methods | Edit this page View Source Copy() Returns a deep copy of this collection. Declaration public override CoordinateSequence Copy() Returns Type Description CoordinateSequence A copy of the coordinate sequence containing copies of all points Overrides CoordinateSequence.Copy() | Edit this page View Source ExpandEnvelope(Envelope) Expands the given Envelope to include the coordinates in the sequence. Allows implementing classes to optimize access to coordinate values. Declaration public override Envelope ExpandEnvelope(Envelope env) Parameters Type Name Description Envelope env The envelope to expand. Returns Type Description Envelope A reference to the expanded envelope. Overrides CoordinateSequence.ExpandEnvelope(Envelope) | Edit this page View Source GetOrdinate(int, int) Returns the ordinate of a coordinate in this sequence. Ordinate indices 0 and 1 are assumed to be X and Y. Ordinate indices greater than 1 have user-defined semantics (for instance, they may contain other dimensions or measure values). Declaration public override double GetOrdinate(int index, int ordinateIndex) Parameters Type Name Description int index The coordinate index in the sequence. int ordinateIndex The ordinate index in the coordinate (in range [0, dimension-1]). Returns Type Description double Overrides CoordinateSequence.GetOrdinate(int, int) Remarks Beware, for performance reasons the ordinate index is not checked, if it's over dimensions you may not get an exception but a meaningless value. | Edit this page View Source GetRawCoordinates() Gets the underlying array containing the coordinate values. Declaration public float[] GetRawCoordinates() Returns Type Description float[] The array of coordinate values | Edit this page View Source Reversed() Returns a reversed copy of this CoordinateSequence. Declaration public override CoordinateSequence Reversed() Returns Type Description CoordinateSequence A reversed copy of this CoordinateSequence. Overrides CoordinateSequence.Reversed() Exceptions Type Condition InvalidOperationException Thrown when Copy() returned null. | Edit this page View Source SetOrdinate(int, int, double) Sets the ordinate of a coordinate in this sequence. Declaration public override void SetOrdinate(int index, int ordinateIndex, double value) Parameters Type Name Description int index The coordinate index. int ordinateIndex The ordinate index in the coordinate, 0 based, smaller than the number of dimensions. double value The new ordinate value. Overrides CoordinateSequence.SetOrdinate(int, int, double) Remarks Warning: for performance reasons the ordinate index is not checked: if it is over dimensions you may not get an exception but a meaningless value. Extension Methods CoordinateSequenceEx.GetHashCode(CoordinateSequence, int, Func<int, int>)"
  },
  "api/NetTopologySuite.Geometries.Implementation.RawCoordinateSequence.html": {
    "href": "api/NetTopologySuite.Geometries.Implementation.RawCoordinateSequence.html",
    "title": "Class RawCoordinateSequence | NetTopologySuite",
    "summary": "Class RawCoordinateSequence An implementation of CoordinateSequence that packs its contents in a way that can be customized by the creator. Inheritance object CoordinateSequence RawCoordinateSequence Implements ISerializable Inherited Members CoordinateSequence.Dimension CoordinateSequence.Measures CoordinateSequence.Spatial CoordinateSequence.Ordinates CoordinateSequence.HasZ CoordinateSequence.HasM CoordinateSequence.ZOrdinateIndex CoordinateSequence.MOrdinateIndex CoordinateSequence.CreateCoordinate() CoordinateSequence.GetCoordinate(int) CoordinateSequence.GetCoordinateCopy(int) CoordinateSequence.GetCoordinate(int, Coordinate) CoordinateSequence.GetX(int) CoordinateSequence.GetY(int) CoordinateSequence.GetZ(int) CoordinateSequence.GetM(int) CoordinateSequence.SetX(int, double) CoordinateSequence.SetY(int, double) CoordinateSequence.SetZ(int, double) CoordinateSequence.SetM(int, double) CoordinateSequence.GetOrdinate(int, Ordinate) CoordinateSequence.First CoordinateSequence.Last CoordinateSequence.Count CoordinateSequence.SetOrdinate(int, Ordinate, double) CoordinateSequence.TryGetOrdinateIndex(Ordinate, out int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Implementation Assembly: NetTopologySuite.dll Syntax [Serializable] public sealed class RawCoordinateSequence : CoordinateSequence, ISerializable Constructors | Edit this page View Source RawCoordinateSequence(Memory<double>[], (int RawDataIndex, int DimensionIndex)[], int) Initializes a new instance of the RawCoordinateSequence class. Declaration public RawCoordinateSequence(Memory<double>[] rawData, (int RawDataIndex, int DimensionIndex)[] dimensionMap, int measures) Parameters Type Name Description Memory<double>[] rawData Contains the raw data for this sequence. (int RawDataIndex, int DimensionIndex)[] dimensionMap Contains a pair of indexes to tell us, for each dimension, where to find its data in rawData. int measures The value for Measures. Methods | Edit this page View Source Copy() Returns a deep copy of this collection. Declaration public override CoordinateSequence Copy() Returns Type Description CoordinateSequence A copy of the coordinate sequence containing copies of all points Overrides CoordinateSequence.Copy() | Edit this page View Source ExpandEnvelope(Envelope) Expands the given Envelope to include the coordinates in the sequence. Allows implementing classes to optimize access to coordinate values. Declaration public override Envelope ExpandEnvelope(Envelope env) Parameters Type Name Description Envelope env The envelope to expand. Returns Type Description Envelope A reference to the expanded envelope. Overrides CoordinateSequence.ExpandEnvelope(Envelope) | Edit this page View Source GetOrdinate(int, int) Returns the ordinate of a coordinate in this sequence. Ordinate indices 0 and 1 are assumed to be X and Y. Ordinate indices greater than 1 have user-defined semantics (for instance, they may contain other dimensions or measure values as described by Dimension and Measures. Declaration public override double GetOrdinate(int index, int ordinateIndex) Parameters Type Name Description int index The coordinate index in the sequence. int ordinateIndex The ordinate index in the coordinate (in range [0, dimension-1]). Returns Type Description double The ordinate value, or NullOrdinate if the sequence does not provide values for ordinateIndex\"/> Overrides CoordinateSequence.GetOrdinate(int, int) Remarks If the sequence does not provide value for the required ordinate, the implementation must not throw an exception, it should return NullOrdinate. | Edit this page View Source GetRawCoordinatesAndStride(int) Gets the underlying Memory<T> for the ordinates at the given index, along with a \"stride\" value that represents how many slots there are between elements. Declaration public (Memory<double> Array, int Stride) GetRawCoordinatesAndStride(int ordinateIndex) Parameters Type Name Description int ordinateIndex The index of the ordinate whose values to get, from TryGetOrdinateIndex(Ordinate, out int). Returns Type Description (Memory<double> Array, int Stride) The underlying Memory<T> and stride. Remarks Assuming Count is nonzero, the first element of the returned array holds the first coordinate's value for the requested ordinate, and the last element of the returned array holds the last coordinate's value for the requested ordinate. | Edit this page View Source Reversed() Returns a reversed copy of this CoordinateSequence. Declaration public override CoordinateSequence Reversed() Returns Type Description CoordinateSequence A reversed copy of this CoordinateSequence. Overrides CoordinateSequence.Reversed() Exceptions Type Condition InvalidOperationException Thrown when Copy() returned null. | Edit this page View Source SetOrdinate(int, int, double) Sets the value for a given ordinate of a coordinate in this sequence. Declaration public override void SetOrdinate(int index, int ordinateIndex, double value) Parameters Type Name Description int index The coordinate index in the sequence. int ordinateIndex The ordinate index in the coordinate (in range [0, dimension-1]). double value The new ordinate value. Overrides CoordinateSequence.SetOrdinate(int, int, double) Remarks If the sequence can't store the ordinate value, the implementation must not throw an exception, it should simply ignore the call. | Edit this page View Source ToCoordinateArray() Returns (possibly copies of) the Coordinates in this collection. Whether or not the Coordinates returned are the actual underlying Coordinates or merely copies depends on the implementation. Note that if this implementation does not store its data as an array of Coordinates, this method will incur a performance penalty because the array needs to be built from scratch. Declaration public override Coordinate[] ToCoordinateArray() Returns Type Description Coordinate[] Overrides CoordinateSequence.ToCoordinateArray() Implements ISerializable Extension Methods CoordinateSequenceEx.GetHashCode(CoordinateSequence, int, Func<int, int>)"
  },
  "api/NetTopologySuite.Geometries.Implementation.RawCoordinateSequenceFactory.html": {
    "href": "api/NetTopologySuite.Geometries.Implementation.RawCoordinateSequenceFactory.html",
    "title": "Class RawCoordinateSequenceFactory | NetTopologySuite",
    "summary": "Class RawCoordinateSequenceFactory Factory for creating RawCoordinateSequence instances. Inheritance object CoordinateSequenceFactory RawCoordinateSequenceFactory Inherited Members CoordinateSequenceFactory.Ordinates CoordinateSequenceFactory.Create(Coordinate[]) CoordinateSequenceFactory.Create(CoordinateSequence) CoordinateSequenceFactory.Create(int, int) CoordinateSequenceFactory.Create(int, Ordinates) CoordinateSequenceFactory.GetCommonSequenceParameters(Coordinate[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Implementation Assembly: NetTopologySuite.dll Syntax public sealed class RawCoordinateSequenceFactory : CoordinateSequenceFactory Constructors | Edit this page View Source RawCoordinateSequenceFactory(IEnumerable<Ordinates>) Initializes a new instance of the RawCoordinateSequenceFactory class. Declaration public RawCoordinateSequenceFactory(IEnumerable<Ordinates> ordinateGroups) Parameters Type Name Description IEnumerable<Ordinates> ordinateGroups A sequence of zero or more Ordinates flags representing ordinate values that should be allocated together. Remarks Any flags not represented in ordinateGroups, and any spatial or measure dimensions beyond the 16th, will be allocated together, SoA-style. Elements without any bits set will be silently ignored. Exceptions Type Condition ArgumentNullException Thrown when ordinateGroups is null. ArgumentException Thrown when a given flag appears in more than one element of ordinateGroups. Methods | Edit this page View Source Create(int, int, int) Creates a CoordinateSequence of the specified size and dimension with measure support. For this to be useful, the CoordinateSequence implementation must be mutable. Declaration public override CoordinateSequence Create(int size, int dimension, int measures) Parameters Type Name Description int size The number of coordinates in the sequence int dimension The dimension of the coordinates in the sequence (if user-specifiable, otherwise ignored) int measures The number of measures of the coordinates in the sequence (if user-specifiable, otherwise ignored) Returns Type Description CoordinateSequence Overrides CoordinateSequenceFactory.Create(int, int, int) Remarks If the requested dimension or measures are larger than the CoordinateSequence implementation can provide, then a sequence of maximum possible dimension should be created. An error should not be thrown. | Edit this page View Source CreateXY(Memory<double>) Creates a new RawCoordinateSequence that uses the given array for reading and writing X and Y data ignoring the Ordinates flags that were passed into the constructor for this factory instance. Declaration public static RawCoordinateSequence CreateXY(Memory<double> xy) Parameters Type Name Description Memory<double> xy An array of X and Y values, laid out as [x0, y0, x1, y1, x2, y2, ..., xn, yn]. Returns Type Description RawCoordinateSequence A RawCoordinateSequence instance that's backed by the given array. Remarks The resulting instance is essentially a PackedDoubleCoordinateSequence with slightly more overhead, so the main reason to prefer this over that one would be if you really need to avoid copying the data to fit it into that format. Exceptions Type Condition ArgumentException Thrown when the length of xy is not a multiple of 2. | Edit this page View Source CreateXY(Memory<double>, Memory<double>) Creates a new RawCoordinateSequence that uses the given arrays for reading and writing X and Y data ignoring the Ordinates flags that were passed into the constructor for this factory instance. Declaration public static RawCoordinateSequence CreateXY(Memory<double> x, Memory<double> y) Parameters Type Name Description Memory<double> x An array of X values, laid out as [x0, x1, x2, ..., xn]. Memory<double> y An array of Y values, laid out as [y0, y1, y2, ..., yn]. Returns Type Description RawCoordinateSequence A RawCoordinateSequence instance that's backed by the given arrays. Exceptions Type Condition ArgumentException Thrown when the input arrays do not contain data for the same number of coordinates. | Edit this page View Source CreateXYM(Memory<double>) Creates a new RawCoordinateSequence that uses the given array for reading and writing X, Y, and M data ignoring the Ordinates flags that were passed into the constructor for this factory instance. Declaration public static RawCoordinateSequence CreateXYM(Memory<double> xym) Parameters Type Name Description Memory<double> xym An array of X, Y, and M values, laid out as [x0, y0, m0, x1, y1, m1, x2, y2, m2, ..., xn, yn, mn]. Returns Type Description RawCoordinateSequence A RawCoordinateSequence instance that's backed by the given array. Remarks The resulting instance is essentially a PackedDoubleCoordinateSequence with slightly more overhead, so the main reason to prefer this over that one would be if you really need to avoid copying the data to fit it into that format. Exceptions Type Condition ArgumentException Thrown when the length of xym is not a multiple of 3. | Edit this page View Source CreateXYM(Memory<double>, Memory<double>) Creates a new RawCoordinateSequence that uses the given array for reading and writing X, Y, and M data ignoring the Ordinates flags that were passed into the constructor for this factory instance. Declaration public static RawCoordinateSequence CreateXYM(Memory<double> xy, Memory<double> m) Parameters Type Name Description Memory<double> xy An array of X and Y values, laid out as [x0, y0, x1, y1, x2, y2, ..., xn, yn]. Memory<double> m An array of M values, laid out as [m0, m1, m2, ..., mn]. Returns Type Description RawCoordinateSequence A RawCoordinateSequence instance that's backed by the given array. Remarks The resulting instance is essentially a DotSpatialAffineCoordinateSequence with slightly more overhead, so the main reason to prefer this over that one would be if you really need to avoid copying the data to fit it into that format. Exceptions Type Condition ArgumentException Thrown when the length of xy is not a multiple of 2, or when the input arrays do not contain data for the same number of coordinates. | Edit this page View Source CreateXYM(Memory<double>, Memory<double>, Memory<double>) Creates a new RawCoordinateSequence that uses the given arrays for reading and writing X, Y, and M data ignoring the Ordinates flags that were passed into the constructor for this factory instance. Declaration public static RawCoordinateSequence CreateXYM(Memory<double> x, Memory<double> y, Memory<double> m) Parameters Type Name Description Memory<double> x An array of X values, laid out as [x0, x1, x2, ..., xn]. Memory<double> y An array of Y values, laid out as [y0, y1, y2, ..., yn]. Memory<double> m An array of M values, laid out as [m0, m1, m2, ..., mn]. Returns Type Description RawCoordinateSequence A RawCoordinateSequence instance that's backed by the given arrays. Exceptions Type Condition ArgumentException Thrown when the input arrays do not contain data for the same number of coordinates. | Edit this page View Source CreateXYZ(Memory<double>) Creates a new RawCoordinateSequence that uses the given array for reading and writing X, Y, and Z data ignoring the Ordinates flags that were passed into the constructor for this factory instance. Declaration public static RawCoordinateSequence CreateXYZ(Memory<double> xyz) Parameters Type Name Description Memory<double> xyz An array of X, Y, and Z values, laid out as [x0, y0, z0, x1, y1, z1, x2, y2, z2, ..., xn, yn, zn]. Returns Type Description RawCoordinateSequence A RawCoordinateSequence instance that's backed by the given array. Remarks The resulting instance is essentially a PackedDoubleCoordinateSequence with slightly more overhead, so the main reason to prefer this over that one would be if you really need to avoid copying the data to fit it into that format. Exceptions Type Condition ArgumentException Thrown when the length of xyz is not a multiple of 3. | Edit this page View Source CreateXYZ(Memory<double>, Memory<double>) Creates a new RawCoordinateSequence that uses the given array for reading and writing X, Y, and Z data ignoring the Ordinates flags that were passed into the constructor for this factory instance. Declaration public static RawCoordinateSequence CreateXYZ(Memory<double> xy, Memory<double> z) Parameters Type Name Description Memory<double> xy An array of X and Y values, laid out as [x0, y0, x1, y1, x2, y2, ..., xn, yn]. Memory<double> z An array of Z values, laid out as [z0, z1, z2, ..., zn]. Returns Type Description RawCoordinateSequence A RawCoordinateSequence instance that's backed by the given array. Remarks The resulting instance is essentially a DotSpatialAffineCoordinateSequence with slightly more overhead, so the main reason to prefer this over that one would be if you really need to avoid copying the data to fit it into that format. Exceptions Type Condition ArgumentException Thrown when the length of xy is not a multiple of 2, or when the input arrays do not contain data for the same number of coordinates. | Edit this page View Source CreateXYZ(Memory<double>, Memory<double>, Memory<double>) Creates a new RawCoordinateSequence that uses the given arrays for reading and writing X, Y, and Z data ignoring the Ordinates flags that were passed into the constructor for this factory instance. Declaration public static RawCoordinateSequence CreateXYZ(Memory<double> x, Memory<double> y, Memory<double> z) Parameters Type Name Description Memory<double> x An array of X values, laid out as [x0, x1, x2, ..., xn]. Memory<double> y An array of Y values, laid out as [y0, y1, y2, ..., yn]. Memory<double> z An array of Z values, laid out as [z0, z1, z2, ..., zn]. Returns Type Description RawCoordinateSequence A RawCoordinateSequence instance that's backed by the given arrays. Exceptions Type Condition ArgumentException Thrown when the input arrays do not contain data for the same number of coordinates. | Edit this page View Source CreateXYZM(Memory<double>) Creates a new RawCoordinateSequence that uses the given array for reading and writing X, Y, Z, and M data ignoring the Ordinates flags that were passed into the constructor for this factory instance. Declaration public static RawCoordinateSequence CreateXYZM(Memory<double> xyzm) Parameters Type Name Description Memory<double> xyzm An array of X, Y, Z, and M values, laid out as [x0, y0, z0, m0, x1, y1, z1, m1, x2, y2, z2, m2, ..., xn, yn, zn, mn]. Returns Type Description RawCoordinateSequence A RawCoordinateSequence instance that's backed by the given array. Remarks The resulting instance is essentially a PackedDoubleCoordinateSequence with slightly more overhead, so the main reason to prefer this over that one would be if you really need to avoid copying the data to fit it into that format. Exceptions Type Condition ArgumentException Thrown when the length of xyzm is not a multiple of 4. | Edit this page View Source CreateXYZM(Memory<double>, Memory<double>, Memory<double>) Creates a new RawCoordinateSequence that uses the given array for reading and writing X, Y, Z, and M data ignoring the Ordinates flags that were passed into the constructor for this factory instance. Declaration public static RawCoordinateSequence CreateXYZM(Memory<double> xy, Memory<double> z, Memory<double> m) Parameters Type Name Description Memory<double> xy An array of X and Y values, laid out as [x0, y0, x1, y1, x2, y2, ..., xn, yn]. Memory<double> z An array of Z values, laid out as [z0, z1, z2, ..., zn]. Memory<double> m An array of M values, laid out as [m0, m1, m2, ..., mn]. Returns Type Description RawCoordinateSequence A RawCoordinateSequence instance that's backed by the given array. Remarks The resulting instance is essentially a DotSpatialAffineCoordinateSequence with slightly more overhead, so the main reason to prefer this over that one would be if you really need to avoid copying the data to fit it into that format. Exceptions Type Condition ArgumentException Thrown when the length of xy is not a multiple of 2, or when the input arrays do not contain data for the same number of coordinates. | Edit this page View Source CreateXYZM(Memory<double>, Memory<double>, Memory<double>, Memory<double>) Creates a new RawCoordinateSequence that uses the given arrays for reading and writing X, Y, Z, and M data ignoring the Ordinates flags that were passed into the constructor for this factory instance. Declaration public static RawCoordinateSequence CreateXYZM(Memory<double> x, Memory<double> y, Memory<double> z, Memory<double> m) Parameters Type Name Description Memory<double> x An array of X values, laid out as [x0, x1, x2, ..., xn]. Memory<double> y An array of Y values, laid out as [y0, y1, y2, ..., yn]. Memory<double> z An array of Z values, laid out as [z0, z1, z2, ..., zn]. Memory<double> m An array of M values, laid out as [m0, m1, m2, ..., mn]. Returns Type Description RawCoordinateSequence A RawCoordinateSequence instance that's backed by the given arrays. Exceptions Type Condition ArgumentException Thrown when the input arrays do not contain data for the same number of coordinates."
  },
  "api/NetTopologySuite.Geometries.Implementation.html": {
    "href": "api/NetTopologySuite.Geometries.Implementation.html",
    "title": "Namespace NetTopologySuite.Geometries.Implementation | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Geometries.Implementation Classes CoordinateArraySequence A CoordinateSequence backed by an array of Coordinates. This is the implementation that Geometrys use by default. Coordinates returned by ToCoordinateArray(), GetCoordinate(int) and GetCoordinate(int, Coordinate) are live -- modifications to them are actually changing the CoordinateSequence's underlying data. A dimension may be specified for the coordinates in the sequence, which may be 2 or 3. The actual coordinates will always have 3 ordinates, but the dimension is useful as metadata in some situations. CoordinateArraySequenceFactory Creates CoordinateSequences represented as an array of Coordinates. DotSpatialAffineCoordinateSequence A coordinate sequence that follows the dotspatial shape range DotSpatialAffineCoordinateSequenceFactory A coordinate sequence factory class that creates DotSpatial's Shape/ShapeRange like coordinate sequences. PackedCoordinateSequence A CoordinateSequence implementation based on a packed arrays. PackedCoordinateSequenceFactory Builds packed array coordinate sequences. The array data type can be either double or float, and defaults to double. PackedDoubleCoordinateSequence Packed coordinate sequence implementation based on doubles. PackedFloatCoordinateSequence Packed coordinate sequence implementation based on floats. RawCoordinateSequence An implementation of CoordinateSequence that packs its contents in a way that can be customized by the creator. RawCoordinateSequenceFactory Factory for creating RawCoordinateSequence instances. Enums PackedCoordinateSequenceFactory.PackedType An enumeration of valid type codes"
  },
  "api/NetTopologySuite.Geometries.IntersectionMatrix.html": {
    "href": "api/NetTopologySuite.Geometries.IntersectionMatrix.html",
    "title": "Class IntersectionMatrix | NetTopologySuite",
    "summary": "Class IntersectionMatrix Models a Dimensionally Extended Nine-Intersection Model (DE-9IM) matrix. Inheritance object IntersectionMatrix Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public class IntersectionMatrix Remarks DE-9IM matrix values (such as \"212FF1FF2\") specify the topological relationship between two Geometrys. This class can also represent matrix patterns (such as \"TT*****\") which are used for matching instances of DE-9IM matrices. DE-9IM matrices are 3x3 matrices with integer entries. The matrix indices {0,1,2} represent the topological locations that occur in a geometry(Interior, Boundary, Exterior). These are provided by the constants Interior, Boundary, and Exterior. When used to specify the topological relationship between two geometries, the matrix entries represent the possible dimensions of each intersection: A = 2, L = 1, P = 0 and False = -1. When used to represent a matrix pattern entries can have the additional values True (\"T\") and Dontcare (\"*\"). For a description of the DE-9IM and the spatial predicates derived from it, see the following references: OGC 99-049 OpenGIS Simple Features Specification for SQL. OGC 06-103r4 OpenGIS Implementation Standard for Geographic information - Simple feature access - Part 1: Common architecture, Section 6.1.15 (which provides some further details on certain predicate specifications). Wikipedia article on DE-9IM Methods are provided to: set and query the elements of the matrix in a convenient fashion convert to and from the standard string representation(specified in SFS Section 2.1.13.2). test if a matrix matches a given pattern string. test if a matrix(possibly with geometry dimensions) matches a standard named spatial predicate Constructors | Edit this page View Source IntersectionMatrix() Creates an IntersectionMatrix with null location values. Declaration public IntersectionMatrix() | Edit this page View Source IntersectionMatrix(IntersectionMatrix) Creates an IntersectionMatrix with the same elements as other. Declaration public IntersectionMatrix(IntersectionMatrix other) Parameters Type Name Description IntersectionMatrix other An IntersectionMatrix to copy. | Edit this page View Source IntersectionMatrix(string) Creates an IntersectionMatrix with the given dimension symbols. Declaration public IntersectionMatrix(string elements) Parameters Type Name Description string elements A string of nine dimension symbols in row major order. Properties | Edit this page View Source this[Location, Location] See methods Get(int, int) and Set(int, int, int value) Declaration public Dimension this[Location row, Location column] { get; set; } Parameters Type Name Description Location row Location column Property Value Type Description Dimension Methods | Edit this page View Source Add(IntersectionMatrix) Adds one matrix to another. Addition is defined by taking the maximum dimension value of each position in the summand matrices. Declaration public void Add(IntersectionMatrix im) Parameters Type Name Description IntersectionMatrix im The matrix to add. | Edit this page View Source Get(Location, Location) Returns the value of one of this IntersectionMatrixs elements. Declaration public Dimension Get(Location row, Location column) Parameters Type Name Description Location row The row of this IntersectionMatrix, indicating the interior, boundary or exterior of the first Geometry. Location column The column of this IntersectionMatrix, indicating the interior, boundary or exterior of the second Geometry. Returns Type Description Dimension The dimension value at the given matrix position. | Edit this page View Source IsContains() Tests whether this matrix matches [T*****FF*] Declaration public bool IsContains() Returns Type Description bool true if the first Geometry contains the second. | Edit this page View Source IsCoveredBy() Tests if this matrix matches [TFF] or [TFF] or [FTF] or [FTF]. Declaration public bool IsCoveredBy() Returns Type Description bool true if the first Geometry is covered by the second | Edit this page View Source IsCovers() Tests if this matrix matches [T**FF*] or [TFF*] or [TFF] or [**TFF]. Declaration public bool IsCovers() Returns Type Description bool true if the first Geometry covers the second | Edit this page View Source IsCrosses(Dimension, Dimension) Tests whether this geometry crosses the specified geometry. Declaration public bool IsCrosses(Dimension dimensionOfGeometryA, Dimension dimensionOfGeometryB) Parameters Type Name Description Dimension dimensionOfGeometryA The dimension of the first Geometry. Dimension dimensionOfGeometryB The dimension of the second Geometry. Returns Type Description bool true if the two Geometry s related by this matrix cross. Remarks The crosses predicate has the following equivalent definitions: The geometries have some but not all interior points in common. The DE-9IM Intersection Matrix for the two geometries matches For any other combination of dimensions this predicate returns false. The SFS defined this predicate only for P/L, P/A, L/L, and L/A situations. JTS extends the definition to apply to L/P, A/P and A/L situations as well. This makes the relation symmetric. | Edit this page View Source IsDisjoint() Tests if this matrix matches [FFFF***]. Declaration public bool IsDisjoint() Returns Type Description bool true if the two Geometry's related by this matrix are disjoint. | Edit this page View Source IsEquals(Dimension, Dimension) Tests whether the argument dimensions are equal and this matrix matches the pattern [TF**FFF]. Note: This pattern differs from the one stated in Simple feature access - Part 1: Common architecture. That document states the pattern as [TFFFTFFFT]. This would specify that two identical POINT s are not equal, which is not desirable behaviour. The pattern used here has been corrected to compute equality in this situation. Declaration public bool IsEquals(Dimension dimensionOfGeometryA, Dimension dimensionOfGeometryB) Parameters Type Name Description Dimension dimensionOfGeometryA The dimension of the first Geometry. Dimension dimensionOfGeometryB The dimension of the second Geometry. Returns Type Description bool true if the two Geometrys related by this matrix are equal; the Geometrys must have the same dimension to be equal. | Edit this page View Source IsIntersects() Tests if isDisjoint returns false. Declaration public bool IsIntersects() Returns Type Description bool true if the two Geometry's related by this matrix intersect. | Edit this page View Source IsOverlaps(Dimension, Dimension) Tests if this matrix matches [T*T***T**] (for two points or two surfaces) [1*T***T**] (for two curves) Declaration public bool IsOverlaps(Dimension dimensionOfGeometryA, Dimension dimensionOfGeometryB) Parameters Type Name Description Dimension dimensionOfGeometryA The dimension of the first Geometry. Dimension dimensionOfGeometryB The dimension of the second Geometry. Returns Type Description bool true if the two Geometry s related by this matrix overlap. For this function to return true, the Geometrys must be two points, two curves or two surfaces. | Edit this page View Source IsTouches(Dimension, Dimension) Tests if this matrix matches [FT*******], [FT***] or [FT*]. Declaration public bool IsTouches(Dimension dimensionOfGeometryA, Dimension dimensionOfGeometryB) Parameters Type Name Description Dimension dimensionOfGeometryA The dimension of the first Geometry. Dimension dimensionOfGeometryB The dimension of the second Geometry. Returns Type Description bool true if the two Geometry s related by this matrix touch; Returns false if both Geometrys are points. | Edit this page View Source IsTrue(Dimension) Tests if the dimension value matches TRUE (i.e. has value 0, 1, 2 or TRUE). Declaration public static bool IsTrue(Dimension actualDimensionValue) Parameters Type Name Description Dimension actualDimensionValue A number that can be stored in the IntersectionMatrix. Possible values are {True, False, Dontcare, Point, Curve, Surface} Returns Type Description bool true if the dimension value matches True | Edit this page View Source IsWithin() Tests whether this matrix matches [TFF]. Declaration public bool IsWithin() Returns Type Description bool true if the first Geometry is within the second. | Edit this page View Source Matches(Dimension, char) Tests if the dimension value satisfies the dimension symbol. Declaration public static bool Matches(Dimension actualDimensionValue, char requiredDimensionSymbol) Parameters Type Name Description Dimension actualDimensionValue a number that can be stored in the IntersectionMatrix. Possible values are {True, False, Dontcare, 0, 1, 2}. char requiredDimensionSymbol A character used in the string representation of an IntersectionMatrix. Possible values are T, F, * , 0, 1, 2. Returns Type Description bool true if the dimension symbol encompasses the dimension value. | Edit this page View Source Matches(string) Tests whether this matrix matches the given matrix pattern Declaration public bool Matches(string pattern) Parameters Type Name Description string pattern A pattern containing nine dimension symbols with which to compare the entries of this matrix.Possible symbol values are { T, F, * , 0, 1, 2}. Returns Type Description bool true if this IntersectionMatrix matches the required dimension symbols. | Edit this page View Source Matches(string, string) Tests if each of the actual dimension symbols in a matrix string satisfies the corresponding required dimension symbol in a pattern string. Declaration public static bool Matches(string actualDimensionSymbols, string requiredDimensionSymbols) Parameters Type Name Description string actualDimensionSymbols Nine dimension symbols to validate. Possible values are T, F, * , 0, 1, 2. string requiredDimensionSymbols Nine dimension symbols to validate against. Possible values are T, F, * , 0, 1, 2. Returns Type Description bool true if each of the required dimension symbols encompass the corresponding actual dimension symbol. | Edit this page View Source Set(Location, Location, Dimension) Changes the value of one of this IntersectionMatrix elements. Declaration public void Set(Location row, Location column, Dimension dimensionValue) Parameters Type Name Description Location row The row of this IntersectionMatrix, indicating the interior, boundary or exterior of the first Geometry Location column The column of this IntersectionMatrix, indicating the interior, boundary or exterior of the second Geometry Dimension dimensionValue The new value of the element | Edit this page View Source Set(string) Changes the elements of this IntersectionMatrix to the dimension symbols in dimensionSymbols. Declaration public void Set(string dimensionSymbols) Parameters Type Name Description string dimensionSymbols Nine dimension symbols to which to set this IntersectionMatrix s elements. Possible values are {T, F, * , 0, 1, 2} | Edit this page View Source SetAll(Dimension) Changes the elements of this IntersectionMatrix to dimensionValue. Declaration public void SetAll(Dimension dimensionValue) Parameters Type Name Description Dimension dimensionValue The dimension value to which to set this IntersectionMatrix s elements. Possible values True, False, Dontcare, 0, 1, 2}. | Edit this page View Source SetAtLeast(Location, Location, Dimension) Changes the specified element to minimumDimensionValue if the element is less. Declaration public void SetAtLeast(Location row, Location column, Dimension minimumDimensionValue) Parameters Type Name Description Location row The row of this IntersectionMatrix, indicating the interior, boundary or exterior of the first Geometry. Location column The column of this IntersectionMatrix, indicating the interior, boundary or exterior of the second Geometry. Dimension minimumDimensionValue The dimension value with which to compare the element. The order of dimension values from least to greatest is True, False, Dontcare, 0, 1, 2. | Edit this page View Source SetAtLeast(string) For each element in this IntersectionMatrix, changes the element to the corresponding minimum dimension symbol if the element is less. Declaration public void SetAtLeast(string minimumDimensionSymbols) Parameters Type Name Description string minimumDimensionSymbols Nine dimension symbols with which to compare the elements of this IntersectionMatrix. The order of dimension values from least to greatest is Dontcare, True, False, 0, 1, 2. | Edit this page View Source SetAtLeastIfValid(Location, Location, Dimension) If row >= 0 and column >= 0, changes the specified element to minimumDimensionValue if the element is less. Does nothing if row is smaller to 0 or column is smaller to 0. Declaration public void SetAtLeastIfValid(Location row, Location column, Dimension minimumDimensionValue) Parameters Type Name Description Location row Location column Dimension minimumDimensionValue | Edit this page View Source ToString() Returns a nine-character String representation of this IntersectionMatrix. Declaration public override string ToString() Returns Type Description string The nine dimension symbols of this IntersectionMatrix in row-major order. Overrides object.ToString() | Edit this page View Source Transpose() Transposes this IntersectionMatrix. Declaration public IntersectionMatrix Transpose() Returns Type Description IntersectionMatrix This IntersectionMatrix as a convenience,"
  },
  "api/NetTopologySuite.Geometries.LineSegment.html": {
    "href": "api/NetTopologySuite.Geometries.LineSegment.html",
    "title": "Class LineSegment | NetTopologySuite",
    "summary": "Class LineSegment Represents a line segment defined by two Coordinates. Provides methods to compute various geometric properties and relationships of line segments. This class is designed to be easily mutable (to the extent of having its contained points public). This supports a common pattern of reusing a single LineSegment object as a way of computing segment properties on the segments defined by arrays or lists of Coordinates. Inheritance object LineSegment TaggedLineSegment Implements IComparable<LineSegment> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax [Serializable] public class LineSegment : IComparable<LineSegment> Constructors | Edit this page View Source LineSegment() Declaration public LineSegment() | Edit this page View Source LineSegment(Coordinate, Coordinate) Creates an instance of this class using two coordinates Declaration public LineSegment(Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p0 The start-point Coordinate p1 The end-point | Edit this page View Source LineSegment(LineSegment) Creates an instance of this class using another instance Declaration public LineSegment(LineSegment ls) Parameters Type Name Description LineSegment ls | Edit this page View Source LineSegment(double, double, double, double) Creates an instance of this class Declaration public LineSegment(double x0, double y0, double x1, double y1) Parameters Type Name Description double x0 double y0 double x1 double y1 Properties | Edit this page View Source Angle Declaration public double Angle { get; } Property Value Type Description double The angle this segment makes with the x-axis (in radians). | Edit this page View Source IsHorizontal Tests whether the segment is horizontal. Declaration public bool IsHorizontal { get; } Property Value Type Description bool true if the segment is horizontal. | Edit this page View Source IsVertical Tests whether the segment is vertical. Declaration public bool IsVertical { get; } Property Value Type Description bool true if the segment is vertical. | Edit this page View Source Length Computes the length of the line segment. Declaration public double Length { get; } Property Value Type Description double The length of the line segment. | Edit this page View Source MaxX Gets the maximum X ordinate Declaration public double MaxX { get; } Property Value Type Description double | Edit this page View Source MaxY Gets the maximum Y ordinate Declaration public double MaxY { get; } Property Value Type Description double | Edit this page View Source MidPoint The midpoint of the segment Declaration public Coordinate MidPoint { get; } Property Value Type Description Coordinate | Edit this page View Source MinX Gets the minimum X ordinate Declaration public double MinX { get; } Property Value Type Description double | Edit this page View Source MinY Gets the minimum Y ordinate Declaration public double MinY { get; } Property Value Type Description double | Edit this page View Source P0 The start-point Declaration public Coordinate P0 { get; set; } Property Value Type Description Coordinate | Edit this page View Source P1 The end-point Declaration public Coordinate P1 { get; set; } Property Value Type Description Coordinate Methods | Edit this page View Source ClosestPoint(Coordinate) Computes the closest point on this line segment to another point. Declaration public Coordinate ClosestPoint(Coordinate p) Parameters Type Name Description Coordinate p The point to find the closest point to. Returns Type Description Coordinate A Coordinate which is the closest point on the line segment to the point p. | Edit this page View Source ClosestPoints(LineSegment) Computes the closest points on a line segment. Declaration public Coordinate[] ClosestPoints(LineSegment line) Parameters Type Name Description LineSegment line Returns Type Description Coordinate[] A pair of Coordinates which are the closest points on the line segments. | Edit this page View Source ClosestPoints(LineSegment, ElevationModel) Computes the closest points on a line segment. Declaration public Coordinate[] ClosestPoints(LineSegment line, ElevationModel em) Parameters Type Name Description LineSegment line ElevationModel em Returns Type Description Coordinate[] A pair of Coordinates which are the closest points on the line segments. | Edit this page View Source CompareTo(LineSegment) Compares this object with the specified object for order. Uses the standard lexicographic ordering for the points in the LineSegment. Declaration public int CompareTo(LineSegment other) Parameters Type Name Description LineSegment other The LineSegment with which this LineSegment is being compared. Returns Type Description int A negative integer, zero, or a positive integer as this LineSegment is less than, equal to, or greater than the specified LineSegment. | Edit this page View Source ComputeMidPoint(Coordinate, Coordinate) Computes the midpoint of two coordinates Declaration public static Coordinate ComputeMidPoint(Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p0 A coordinate Coordinate p1 A coordinate Returns Type Description Coordinate The mid point Remarks This method is named midPoint in JTS. | Edit this page View Source Distance(Coordinate) Computes the distance between this line segment and a point. Declaration public double Distance(Coordinate p) Parameters Type Name Description Coordinate p Returns Type Description double | Edit this page View Source Distance(LineSegment) Computes the distance between this line segment and another one. Declaration public double Distance(LineSegment ls) Parameters Type Name Description LineSegment ls Returns Type Description double | Edit this page View Source DistancePerpendicular(Coordinate) Computes the perpendicular distance between the (infinite) line defined by this line segment and a point. If the segment has zero length this returns the distance between the segment and the point. Declaration public double DistancePerpendicular(Coordinate p) Parameters Type Name Description Coordinate p The point to compute the distance to Returns Type Description double The perpendicular distance between the line and point | Edit this page View Source DistancePerpendicularOriented(Coordinate) Computes the oriented perpendicular distance between the (infinite) line defined by this line segment and a point. The oriented distance is positive if the point on the left of the line, and negative if it is on the right. If the segment has zero length this returns the distance between the segment and the point. Declaration public double DistancePerpendicularOriented(Coordinate p) Parameters Type Name Description Coordinate p The point to compute the distance to Returns Type Description double The oriented perpendicular distance between the line and point | Edit this page View Source Equals(object) Returns true if o has the same values for its points. Declaration public override bool Equals(object o) Parameters Type Name Description object o A LineSegment with which to do the comparison. Returns Type Description bool true if o is a LineSegment with the same values for the x and y ordinates. Overrides object.Equals(object) | Edit this page View Source EqualsTopologically(LineSegment) Returns true if other is topologically equal to this LineSegment (e.g. irrespective of orientation). Declaration public bool EqualsTopologically(LineSegment other) Parameters Type Name Description LineSegment other A LineSegment with which to do the comparison. Returns Type Description bool true if other is a LineSegment with the same values for the x and y ordinates. | Edit this page View Source GetCoordinate(int) Declaration public Coordinate GetCoordinate(int i) Parameters Type Name Description int i Returns Type Description Coordinate | Edit this page View Source GetHashCode() Return HashCode. Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() | Edit this page View Source Intersection(LineSegment) Computes an intersection point between two segments, if there is one. There may be 0, 1 or many intersection points between two segments. If there are 0, null is returned. If there is 1 or more, a single one is returned (chosen at the discretion of the algorithm). If more information is required about the details of the intersection, the RobustLineIntersector class should be used. Declaration public Coordinate Intersection(LineSegment line) Parameters Type Name Description LineSegment line A line segment Returns Type Description Coordinate An intersection point, or null if there is none. | Edit this page View Source Intersection(LineSegment, ElevationModel) Computes an intersection point between two segments, if there is one. There may be 0, 1 or many intersection points between two segments. If there are 0, null is returned. If there is 1 or more, a single one is returned (chosen at the discretion of the algorithm). If more information is required about the details of the intersection, the RobustLineIntersector class should be used. Declaration public Coordinate Intersection(LineSegment line, ElevationModel em) Parameters Type Name Description LineSegment line A line segment ElevationModel em An elevation model. May be null Returns Type Description Coordinate An intersection point, or null if there is none. | Edit this page View Source LineIntersection(LineSegment) Computes the intersection point of the lines defined by two segments, if there is one. Declaration public Coordinate LineIntersection(LineSegment line) Parameters Type Name Description LineSegment line A line segment defining a straight line Returns Type Description Coordinate An intersection point, or null if there is none or an infinite number Remarks There may be 0, 1 or an infinite number of intersection points between two lines. If there is a unique intersection point, it is returned. Otherwise, null is returned. If more information is required about the details of the intersection, the RobustLineIntersector class should be used. See Also RobustLineIntersector | Edit this page View Source Normalize() Puts the line segment into a normalized form. This is useful for using line segments in maps and indexes when topological equality rather than exact equality is desired. Declaration public void Normalize() | Edit this page View Source Offset(double) Computes the LineSegment that is offset from the segment by a given distance. The computed segment is offset to the left of the line if the offset distance is positive, to the right if negative. Declaration public LineSegment Offset(double offsetDistance) Parameters Type Name Description double offsetDistance The distance the point is offset from the segment (positive is to the left, negative is to the right) Returns Type Description LineSegment A line segment offset by the specified distance Exceptions Type Condition ApplicationException Thrown if the segment has zero length | Edit this page View Source OrientationIndex(Coordinate) Determines the orientation index of a Coordinate relative to this segment. The orientation index is as defined in Index(Coordinate, Coordinate, Coordinate). Declaration public int OrientationIndex(Coordinate p) Parameters Type Name Description Coordinate p Returns Type Description int 1 if p is to the left of this segment -1 if p is to the right of this segment 0 if p is collinear with this segment \" | Edit this page View Source OrientationIndex(LineSegment) Determines the orientation of a LineSegment relative to this segment. The concept of orientation is specified as follows: Given two line segments A and L, A is to the left of a segment L if A lies wholly in the closed half-plane lying to the left of L A is to the right of a segment L if A lies wholly in the closed half-plane lying to the right of L otherwise, A has indeterminate orientation relative to L. This happens if A is collinear with L or if A crosses the line determined by L. Declaration public int OrientationIndex(LineSegment seg) Parameters Type Name Description LineSegment seg The LineSegment to compare. Returns Type Description int 1 if seg is to the left of this segment, -1 if seg is to the right of this segment, 0 if seg is collinear to or crosses this segment. | Edit this page View Source PointAlong(double) Computes the Coordinate that lies a given fraction along the line defined by this segment. Declaration public Coordinate PointAlong(double segmentLengthFraction) Parameters Type Name Description double segmentLengthFraction the fraction of the segment length along the line Returns Type Description Coordinate the point at that distance Remarks A fraction of 0.0 returns the start point of the segment; A fraction of 1.0 returns the end point of the segment. If the fraction is < 0.0 or > 1.0 the point returned will lie before the start or beyond the end of the segment. | Edit this page View Source PointAlongOffset(double, double) Computes the Coordinate that lies a given Declaration public Coordinate PointAlongOffset(double segmentLengthFraction, double offsetDistance) Parameters Type Name Description double segmentLengthFraction the fraction of the segment length along the line double offsetDistance the distance the point is offset from the segment Returns Type Description Coordinate the point at that distance and offset Remarks A fraction along the line defined by this segment and offset from the segment by a given distance. A fraction of 0.0 offsets from the start point of the segment; A fraction of 1.0 offsets from the end point of the segment. The computed point is offset to the left of the line if the offset distance is positive, to the right if negative. Exceptions Type Condition ApplicationException if the segment has zero length | Edit this page View Source Project(Coordinate) Compute the projection of a point onto the line determined by this line segment. Note that the projected point may lie outside the line segment. If this is the case, the projection factor will lie outside the range [0.0, 1.0]. Declaration public Coordinate Project(Coordinate p) Parameters Type Name Description Coordinate p Returns Type Description Coordinate | Edit this page View Source Project(LineSegment) Project a line segment onto this line segment and return the resulting line segment. The returned line segment will be a subset of the target line line segment. This subset may be null, if the segments are oriented in such a way that there is no projection. Note that the returned line may have zero length (i.e. the same endpoints). This can happen for instance if the lines are perpendicular to one another. Declaration public LineSegment Project(LineSegment seg) Parameters Type Name Description LineSegment seg The line segment to project. Returns Type Description LineSegment The projected line segment, or null if there is no overlap. | Edit this page View Source ProjectionFactor(Coordinate) Computes the Projection Factor for the projection of the point p onto this LineSegment. The Projection Factor is the constant r by which the vector for this segment must be multiplied to equal the vector for the projection of p on the line defined by this segment. The projection factor will lie in the range (-inf, +inf) , or be NaN if the line segment has zero length. Declaration public double ProjectionFactor(Coordinate p) Parameters Type Name Description Coordinate p The point to compute the factor for Returns Type Description double The projection factor for the point | Edit this page View Source Reflect(Coordinate) Computes the reflection of a point in the line defined by this line segment. Declaration public Coordinate Reflect(Coordinate p) Parameters Type Name Description Coordinate p The point to reflect Returns Type Description Coordinate The reflected point | Edit this page View Source Reverse() Reverses the direction of the line segment. Declaration public void Reverse() | Edit this page View Source SegmentFraction(Coordinate) Computes the fraction of distance (in [0.0, 1.0]) that the projection of a point occurs along this line segment. If the point is beyond either ends of the line segment, the closest fractional value (0.0 or 1.0) is returned. Declaration public double SegmentFraction(Coordinate inputPt) Parameters Type Name Description Coordinate inputPt the point Returns Type Description double the fraction along the line segment the projection of the point occurs Remarks Essentially, this is the ProjectionFactor(Coordinate) clamped to the range [0.0, 1.0]. | Edit this page View Source SetCoordinates(Coordinate, Coordinate) Declaration public void SetCoordinates(Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p0 Coordinate p1 | Edit this page View Source SetCoordinates(LineSegment) Declaration public void SetCoordinates(LineSegment ls) Parameters Type Name Description LineSegment ls | Edit this page View Source ToGeometry(GeometryFactory) Creates a LineString with the same coordinates as this segment Declaration public LineString ToGeometry(GeometryFactory geomFactory) Parameters Type Name Description GeometryFactory geomFactory the geometry factory to use Returns Type Description LineString A LineString with the same geometry as this segment | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Operators | Edit this page View Source operator ==(LineSegment, LineSegment) Declaration public static bool operator ==(LineSegment obj1, LineSegment obj2) Parameters Type Name Description LineSegment obj1 LineSegment obj2 Returns Type Description bool | Edit this page View Source operator !=(LineSegment, LineSegment) Declaration public static bool operator !=(LineSegment obj1, LineSegment obj2) Parameters Type Name Description LineSegment obj1 LineSegment obj2 Returns Type Description bool Implements IComparable<T>"
  },
  "api/NetTopologySuite.Geometries.LineString.html": {
    "href": "api/NetTopologySuite.Geometries.LineString.html",
    "title": "Class LineString | NetTopologySuite",
    "summary": "Class LineString Models an OGC-style LineString Inheritance object Geometry LineString LinearRing Implements IComparable IComparable<Geometry> ILineal Inherited Members Geometry.TypeNamePoint Geometry.TypeNameMultiPoint Geometry.TypeNameLineString Geometry.TypeNameLinearRing Geometry.TypeNameMultiLineString Geometry.TypeNamePolygon Geometry.TypeNameMultiPolygon Geometry.TypeNameGeometryCollection Geometry.Factory Geometry.UserData Geometry.SRID Geometry.HasNonEmptyElements(Geometry[]) Geometry.HasNullElements(object[]) Geometry.HasNullElements<T>(IEnumerable<T>) Geometry.PrecisionModel Geometry.NumGeometries Geometry.GetGeometryN(int) Geometry.IsSimple Geometry.IsValid Geometry.Distance(Geometry) Geometry.IsWithinDistance(Geometry, double) Geometry.Area Geometry.Centroid Geometry.InteriorPoint Geometry.PointOnSurface Geometry.HasDimension(Dimension) Geometry.Envelope Geometry.EnvelopeInternal Geometry.GeometryChanged() Geometry.GeometryChangedAction() Geometry.Disjoint(Geometry) Geometry.Touches(Geometry) Geometry.Intersects(Geometry) Geometry.Crosses(Geometry) Geometry.Within(Geometry) Geometry.Contains(Geometry) Geometry.Overlaps(Geometry) Geometry.Covers(Geometry) Geometry.CoveredBy(Geometry) Geometry.Relate(Geometry, string) Geometry.Relate(Geometry) Geometry.Equals(Geometry) Geometry.EqualsTopologically(Geometry) Geometry.Equals(object) Geometry.GetHashCode() Geometry.ToString() Geometry.ToText() Geometry.AsText() Geometry.ToBinary() Geometry.AsBinary() Geometry.ToGMLFeature() Geometry.Buffer(double) Geometry.Buffer(double, EndCapStyle) Geometry.Buffer(double, int) Geometry.Buffer(double, int, EndCapStyle) Geometry.Buffer(double, BufferParameters) Geometry.ConvexHull() Geometry.Intersection(Geometry) Geometry.Union(Geometry) Geometry.Difference(Geometry) Geometry.SymmetricDifference(Geometry) Geometry.Union() Geometry.EqualsExact(Geometry) Geometry.EqualsNormalized(Geometry) Geometry.Copy() Geometry.Normalized() Geometry.CompareTo(object) Geometry.CompareTo(Geometry) Geometry.CompareTo(object, IComparer<CoordinateSequence>) Geometry.CheckNotGeometryCollection(Geometry) Geometry.IsGeometryCollection Geometry.Compare(List<Geometry>, List<Geometry>) Geometry.Equal(Coordinate, Coordinate, double) Geometry.IsRectangle Geometry.DefaultFactory Geometry.CreateArray(int, double) Geometry.CreateArray(CoordinateSequence, Ordinate) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax [Serializable] public class LineString : Geometry, IComparable, IComparable<Geometry>, ILineal Remarks A LineString consists of a sequence of two or more vertices, along with all points along the linearly-interpolated curves (line segments) between each pair of consecutive vertices. Consecutive vertices may be equal. The line segments in the line may intersect each other (in other words, the LineString may \"curl back\" in itself and self-intersect. LineStrings with exactly two identical points are invalid. A LineString must have either 0 or MinimumValidSize or more points. If these conditions are not met, the constructors throw an ArgumentException. Constructors | Edit this page View Source LineString(CoordinateSequence, GeometryFactory) Initializes a new instance of the LineString class. Declaration public LineString(CoordinateSequence points, GeometryFactory factory) Parameters Type Name Description CoordinateSequence points The points of the LineString, or null to create the empty point. Consecutive points may not be equal. GeometryFactory factory Exceptions Type Condition ArgumentException If too few points are provided | Edit this page View Source LineString(Coordinate[]) Initializes a new instance of the LineString class. Declaration public LineString(Coordinate[] points) Parameters Type Name Description Coordinate[] points The coordinates used for create this LineString. Remarks For create this Geometry is used a standard GeometryFactory with PrecisionModel == Floating. Exceptions Type Condition ArgumentException If too few points are provided Fields | Edit this page View Source Empty Represents an empty LineString. Declaration public static readonly LineString Empty Field Value Type Description LineString | Edit this page View Source MinimumValidSize The minimum number of vertices allowed in a valid non-empty linestring. Empty linestrings with 0 vertices are also valid. Declaration public const int MinimumValidSize = 2 Field Value Type Description int Properties | Edit this page View Source Boundary Returns the boundary, or an empty geometry of appropriate dimension if this Geometry is empty. For a discussion of this function, see the OpenGIS Simple Features Specification. As stated in SFS Section 2.1.13.1, \"the boundary of a Geometry is a set of Geometries of the next lower dimension.\" Declaration public override Geometry Boundary { get; } Property Value Type Description Geometry The closure of the combinatorial boundary of this Geometry. Overrides Geometry.Boundary | Edit this page View Source BoundaryDimension Declaration public override Dimension BoundaryDimension { get; } Property Value Type Description Dimension Overrides Geometry.BoundaryDimension | Edit this page View Source Coordinate Declaration public override Coordinate Coordinate { get; } Property Value Type Description Coordinate Overrides Geometry.Coordinate | Edit this page View Source CoordinateSequence Declaration public CoordinateSequence CoordinateSequence { get; } Property Value Type Description CoordinateSequence | Edit this page View Source Coordinates Returns an array containing the values of all the vertices for this geometry. Declaration public override Coordinate[] Coordinates { get; } Property Value Type Description Coordinate[] The vertices of this Geometry. Overrides Geometry.Coordinates Remarks If the geometry is a composite, the array will contain all the vertices for the components, in the order in which the components occur in the geometry. In general, the array cannot be assumed to be the actual internal storage for the vertices. Thus modifying the array may not modify the geometry itself. Use the SetOrdinate(int, int, double) method (possibly on the components) to modify the underlying data. If the coordinates are modified, GeometryChanged() must be called afterwards. See Also GeometryChanged() SetOrdinate(int, int, double) SetOrdinate(int, Ordinate, double) | Edit this page View Source Count Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source Dimension Declaration public override Dimension Dimension { get; } Property Value Type Description Dimension Overrides Geometry.Dimension | Edit this page View Source EndPoint Gets a value indicating the end point of this LINESTRING Declaration public Point EndPoint { get; } Property Value Type Description Point | Edit this page View Source GeometryType Returns the name of this object's interface. Declaration public override string GeometryType { get; } Property Value Type Description string \"LineString\" Overrides Geometry.GeometryType | Edit this page View Source IsClosed Gets a value indicating if this LINESTRING is closed. Declaration public virtual bool IsClosed { get; } Property Value Type Description bool | Edit this page View Source IsEmpty Declaration public override bool IsEmpty { get; } Property Value Type Description bool Overrides Geometry.IsEmpty | Edit this page View Source IsRing Gets a value indicating if this LINESTRING forms a ring. Declaration public bool IsRing { get; } Property Value Type Description bool | Edit this page View Source this[int] Declaration public Coordinate this[int n] { get; set; } Parameters Type Name Description int n Property Value Type Description Coordinate | Edit this page View Source Length Returns the length of this LineString Declaration public override double Length { get; } Property Value Type Description double The length of the polygon. Overrides Geometry.Length | Edit this page View Source NumPoints Declaration public override int NumPoints { get; } Property Value Type Description int Overrides Geometry.NumPoints | Edit this page View Source OgcGeometryType Gets the OGC geometry type Declaration public override OgcGeometryType OgcGeometryType { get; } Property Value Type Description OgcGeometryType Overrides Geometry.OgcGeometryType | Edit this page View Source SortIndex Gets a value to sort the geometry Declaration protected override Geometry.SortIndexValue SortIndex { get; } Property Value Type Description Geometry.SortIndexValue Overrides Geometry.SortIndex Remarks NOTE: For JTS v1.17 this property's getter has been renamed to getTypeCode(). In order not to break binary compatibility we did not follow. | Edit this page View Source StartPoint Gets a value indicating the start point of this LINESTRING Declaration public Point StartPoint { get; } Property Value Type Description Point Methods | Edit this page View Source Apply(ICoordinateFilter) Declaration public override void Apply(ICoordinateFilter filter) Parameters Type Name Description ICoordinateFilter filter Overrides Geometry.Apply(ICoordinateFilter) | Edit this page View Source Apply(ICoordinateSequenceFilter) Performs an operation on the coordinates in this Geometry's CoordinateSequences. Declaration public override void Apply(ICoordinateSequenceFilter filter) Parameters Type Name Description ICoordinateSequenceFilter filter The filter to apply Overrides Geometry.Apply(ICoordinateSequenceFilter) Remarks If the filter reports that a coordinate value has been changed, GeometryChanged() will be called automatically. | Edit this page View Source Apply(IEntireCoordinateSequenceFilter) Performs an operation on this Geometry's CoordinateSequences. Declaration public override void Apply(IEntireCoordinateSequenceFilter filter) Parameters Type Name Description IEntireCoordinateSequenceFilter filter The filter to apply Overrides Geometry.Apply(IEntireCoordinateSequenceFilter) Remarks If the filter reports that a coordinate value has been changed, GeometryChanged() will be called automatically. | Edit this page View Source Apply(IGeometryComponentFilter) Performs an operation with or on this Geometry and its component Geometry's. Only GeometryCollections and Polygons have component Geometry's; for Polygons they are the LinearRings of the shell and holes. Declaration public override void Apply(IGeometryComponentFilter filter) Parameters Type Name Description IGeometryComponentFilter filter The filter to apply to this Geometry. Overrides Geometry.Apply(IGeometryComponentFilter) | Edit this page View Source Apply(IGeometryFilter) Performs an operation with or on this Geometry and its subelement Geometrys (if any). Only GeometryCollections and subclasses have subelement Geometry's. Declaration public override void Apply(IGeometryFilter filter) Parameters Type Name Description IGeometryFilter filter The filter to apply to this Geometry (and its children, if it is a GeometryCollection). Overrides Geometry.Apply(IGeometryFilter) | Edit this page View Source CompareToSameClass(object) Returns whether this Geometry is greater than, equal to, or less than another Geometry having the same class. Declaration protected override int CompareToSameClass(object o) Parameters Type Name Description object o A Geometry having the same class as this Geometry. Returns Type Description int A positive number, 0, or a negative number, depending on whether this object is greater than, equal to, or less than o, as defined in \"Normal Form For Geometry\" in the NTS Technical Specifications. Overrides Geometry.CompareToSameClass(object) | Edit this page View Source CompareToSameClass(object, IComparer<CoordinateSequence>) Returns whether this Geometry is greater than, equal to, or less than another Geometry of the same class. using the given IComparer<T>. Declaration protected override int CompareToSameClass(object o, IComparer<CoordinateSequence> comp) Parameters Type Name Description object o A Geometry having the same class as this Geometry IComparer<CoordinateSequence> comp The comparer Returns Type Description int A positive number, 0, or a negative number, depending on whether this object is greater than, equal to, or less than o, as defined in \"Normal Form For Geometry\" in the JTS Technical Specifications Overrides Geometry.CompareToSameClass(object, IComparer<CoordinateSequence>) | Edit this page View Source ComputeEnvelopeInternal() Declaration protected override Envelope ComputeEnvelopeInternal() Returns Type Description Envelope Overrides Geometry.ComputeEnvelopeInternal() | Edit this page View Source CopyInternal() An internal method to copy subclass-specific geometry data. Declaration protected override Geometry CopyInternal() Returns Type Description Geometry A copy of the target geometry object. Overrides Geometry.CopyInternal() | Edit this page View Source EqualsExact(Geometry, double) Declaration public override bool EqualsExact(Geometry other, double tolerance) Parameters Type Name Description Geometry other double tolerance Returns Type Description bool Overrides Geometry.EqualsExact(Geometry, double) | Edit this page View Source GetCoordinateN(int) Declaration public Coordinate GetCoordinateN(int n) Parameters Type Name Description int n Returns Type Description Coordinate | Edit this page View Source GetOrdinates(Ordinate) Gets an array of double ordinate values Declaration public override double[] GetOrdinates(Ordinate ordinate) Parameters Type Name Description Ordinate ordinate The ordinate index Returns Type Description double[] An array of ordinate values Overrides Geometry.GetOrdinates(Ordinate) | Edit this page View Source GetPointN(int) Gets Declaration public Point GetPointN(int n) Parameters Type Name Description int n Returns Type Description Point | Edit this page View Source IsCoordinate(Coordinate) Returns true if the given point is a vertex of this LineString. Declaration public virtual bool IsCoordinate(Coordinate pt) Parameters Type Name Description Coordinate pt The Coordinate to check. Returns Type Description bool true if pt is one of this LineString's vertices. | Edit this page View Source IsEquivalentClass(Geometry) Returns whether the two Geometrys are equal, from the point of view of the EqualsExact method. Called by EqualsExact . In general, two Geometry classes are considered to be \"equivalent\" only if they are the same class. An exception is LineString , which is considered to be equivalent to its subclasses. Declaration protected override bool IsEquivalentClass(Geometry other) Parameters Type Name Description Geometry other The Geometry with which to compare this Geometry for equality. Returns Type Description bool true if the classes of the two Geometry s are considered to be equal by the equalsExact method. Overrides Geometry.IsEquivalentClass(Geometry) | Edit this page View Source Normalize() Normalizes a LineString. A normalized LineString has the first point which is not equal to it's reflected point less than the reflected point. Declaration public override void Normalize() Overrides Geometry.Normalize() | Edit this page View Source Reverse() Creates a LineString whose coordinates are in the reverse order of this objects. Declaration [Obsolete(\"Call Geometry.Reverse()\")] public override Geometry Reverse() Returns Type Description Geometry A LineString with coordinates in the reverse order. Overrides Geometry.Reverse() | Edit this page View Source ReverseInternal() The actual implementation of the Reverse() function for LINESTRINGs. Declaration protected override Geometry ReverseInternal() Returns Type Description Geometry A reversed geometry Overrides Geometry.ReverseInternal() Implements IComparable IComparable<T> ILineal Extension Methods PolygonalExtracter.GetPolygonals<TCollection>(Geometry) PolygonalExtracter.GetPolygonals<TCollection>(Geometry, TCollection)"
  },
  "api/NetTopologySuite.Geometries.LinearRing.html": {
    "href": "api/NetTopologySuite.Geometries.LinearRing.html",
    "title": "Class LinearRing | NetTopologySuite",
    "summary": "Class LinearRing Models an OGC SFS LinearRing. Inheritance object Geometry LineString LinearRing Implements IComparable IComparable<Geometry> ILineal Inherited Members LineString.Empty LineString.Coordinates LineString.GetOrdinates(Ordinate) LineString.CoordinateSequence LineString.GetCoordinateN(int) LineString.Coordinate LineString.Dimension LineString.IsEmpty LineString.NumPoints LineString.GetPointN(int) LineString.StartPoint LineString.EndPoint LineString.IsRing LineString.OgcGeometryType LineString.Length LineString.Boundary LineString.IsCoordinate(Coordinate) LineString.ComputeEnvelopeInternal() LineString.EqualsExact(Geometry, double) LineString.Apply(ICoordinateFilter) LineString.Apply(ICoordinateSequenceFilter) LineString.Apply(IEntireCoordinateSequenceFilter) LineString.Apply(IGeometryFilter) LineString.Apply(IGeometryComponentFilter) LineString.Normalize() LineString.IsEquivalentClass(Geometry) LineString.CompareToSameClass(object) LineString.CompareToSameClass(object, IComparer<CoordinateSequence>) LineString.this[int] LineString.Count Geometry.TypeNamePoint Geometry.TypeNameMultiPoint Geometry.TypeNameLineString Geometry.TypeNameLinearRing Geometry.TypeNameMultiLineString Geometry.TypeNamePolygon Geometry.TypeNameMultiPolygon Geometry.TypeNameGeometryCollection Geometry.Factory Geometry.UserData Geometry.SRID Geometry.HasNonEmptyElements(Geometry[]) Geometry.HasNullElements(object[]) Geometry.HasNullElements<T>(IEnumerable<T>) Geometry.PrecisionModel Geometry.NumGeometries Geometry.GetGeometryN(int) Geometry.IsSimple Geometry.IsValid Geometry.Distance(Geometry) Geometry.IsWithinDistance(Geometry, double) Geometry.Area Geometry.Centroid Geometry.InteriorPoint Geometry.PointOnSurface Geometry.HasDimension(Dimension) Geometry.Envelope Geometry.EnvelopeInternal Geometry.GeometryChanged() Geometry.GeometryChangedAction() Geometry.Disjoint(Geometry) Geometry.Touches(Geometry) Geometry.Intersects(Geometry) Geometry.Crosses(Geometry) Geometry.Within(Geometry) Geometry.Contains(Geometry) Geometry.Overlaps(Geometry) Geometry.Covers(Geometry) Geometry.CoveredBy(Geometry) Geometry.Relate(Geometry, string) Geometry.Relate(Geometry) Geometry.Equals(Geometry) Geometry.EqualsTopologically(Geometry) Geometry.Equals(object) Geometry.GetHashCode() Geometry.ToString() Geometry.ToText() Geometry.AsText() Geometry.ToBinary() Geometry.AsBinary() Geometry.ToGMLFeature() Geometry.Buffer(double) Geometry.Buffer(double, EndCapStyle) Geometry.Buffer(double, int) Geometry.Buffer(double, int, EndCapStyle) Geometry.Buffer(double, BufferParameters) Geometry.ConvexHull() Geometry.Intersection(Geometry) Geometry.Union(Geometry) Geometry.Difference(Geometry) Geometry.SymmetricDifference(Geometry) Geometry.Union() Geometry.EqualsExact(Geometry) Geometry.EqualsNormalized(Geometry) Geometry.Copy() Geometry.Normalized() Geometry.CompareTo(object) Geometry.CompareTo(Geometry) Geometry.CompareTo(object, IComparer<CoordinateSequence>) Geometry.CheckNotGeometryCollection(Geometry) Geometry.IsGeometryCollection Geometry.Compare(List<Geometry>, List<Geometry>) Geometry.Equal(Coordinate, Coordinate, double) Geometry.IsRectangle Geometry.DefaultFactory Geometry.CreateArray(int, double) Geometry.CreateArray(CoordinateSequence, Ordinate) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax [Serializable] public class LinearRing : LineString, IComparable, IComparable<Geometry>, ILineal Remarks A LinearRing is a LineString which is both closed and simple. In other words, the first and last coordinate in the ring must be equal, and the ring must not self-intersect. Either orientation of the ring is allowed. A ring must have either 0 or 3 or more points. The first and last points must be equal (in 2D). If these conditions are not met, the constructors throw an ArgumentException A ring with 3 points is invalid, because it is collapsed and thus has a self-intersection. It is allowed to be constructed so that it can be represented, and repaired if needed. Constructors | Edit this page View Source LinearRing(CoordinateSequence, GeometryFactory) Constructs a LinearRing with the vertices specified by the given CoordinateSequence. Declaration public LinearRing(CoordinateSequence points, GeometryFactory factory) Parameters Type Name Description CoordinateSequence points A sequence points forming a closed and simple linestring, or null to create the empty geometry. GeometryFactory factory The factory that creates this LinearRing Exceptions Type Condition ArgumentException If the ring is not closed, or has too few points | Edit this page View Source LinearRing(Coordinate[]) Initializes a new instance of the LinearRing class. Declaration public LinearRing(Coordinate[] points) Parameters Type Name Description Coordinate[] points The points used for create this instance. Remarks For create this Geometry is used a standard GeometryFactory with PrecisionModel == Floating. Exceptions Type Condition ArgumentException If the ring is not closed, or has too few points Fields | Edit this page View Source MinimumValidSize The minimum number of vertices allowed in a valid non-empty ring. Empty rings with 0 vertices are also valid. Declaration public const int MinimumValidSize = 3 Field Value Type Description int Properties | Edit this page View Source BoundaryDimension Returns Dimensions.False, since by definition LinearRings do not have a boundary. Declaration public override Dimension BoundaryDimension { get; } Property Value Type Description Dimension Overrides LineString.BoundaryDimension | Edit this page View Source GeometryType Returns the name of this object's interface. Declaration public override string GeometryType { get; } Property Value Type Description string \"LinearRing\" Overrides LineString.GeometryType | Edit this page View Source IsCCW Gets a value indicating if this LINEARRING is oriented CounterClockwise Declaration public bool IsCCW { get; } Property Value Type Description bool | Edit this page View Source IsClosed Declaration public override bool IsClosed { get; } Property Value Type Description bool Overrides LineString.IsClosed | Edit this page View Source SortIndex Gets a value to sort the geometry Declaration protected override Geometry.SortIndexValue SortIndex { get; } Property Value Type Description Geometry.SortIndexValue Overrides LineString.SortIndex Remarks NOTE: For JTS v1.17 this property's getter has been renamed to getTypeCode(). In order not to break binary compatibility we did not follow. Methods | Edit this page View Source CopyInternal() An internal method to copy subclass-specific geometry data. Declaration protected override Geometry CopyInternal() Returns Type Description Geometry A copy of the target geometry object. Overrides LineString.CopyInternal() | Edit this page View Source Reverse() Computes a new geometry which has all component coordinate sequences in reverse order (opposite orientation) to this one. Declaration [Obsolete(\"Call Geometry.Reverse()\")] public override Geometry Reverse() Returns Type Description Geometry A reversed geometry Overrides LineString.Reverse() Remarks Don't override this function, implement ReverseInternal(). | Edit this page View Source ReverseInternal() The actual implementation of the Reverse() function for LINEARRINGs. Declaration protected override Geometry ReverseInternal() Returns Type Description Geometry A reversed geometry Overrides LineString.ReverseInternal() Implements IComparable IComparable<T> ILineal Extension Methods PolygonalExtracter.GetPolygonals<TCollection>(Geometry) PolygonalExtracter.GetPolygonals<TCollection>(Geometry, TCollection)"
  },
  "api/NetTopologySuite.Geometries.LinearRingOrientation.html": {
    "href": "api/NetTopologySuite.Geometries.LinearRingOrientation.html",
    "title": "Enum LinearRingOrientation | NetTopologySuite",
    "summary": "Enum LinearRingOrientation An enumeration of ring orientation values Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public enum LinearRingOrientation Fields Name Description CCW The orientation of the ring's coordinates is counter-clockwise. CW The orientation of the ring's coordinates is clockwise. Clockwise The orientation of the ring's coordinates is clockwise. CounterClockwise The orientation of the ring's coordinates is counter-clockwise. Default The default orientation of the rings coordinates. Set to CounterClockwise DontCare The orientation of the rings coordinates does not matter. LeftHandRule The orientation of the ring's coordinates follows the left-hand-rule, saying that if you follow the ring in the direction of its coordinates your left hand will be inside the ring. RightHandRule The orientation of the ring's coordinates follows the right-hand-rule, saying that if you follow the ring in the direction of its coordinates your right hand will be inside the ring."
  },
  "api/NetTopologySuite.Geometries.Location.html": {
    "href": "api/NetTopologySuite.Geometries.Location.html",
    "title": "Enum Location | NetTopologySuite",
    "summary": "Enum Location The location of a Coordinate relative to a Geometry Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public enum Location Fields Name Description Boundary DE-9IM row index of the boundary of the first point and column index of the boundary of the second point. Location value for the boundary of a point. Exterior DE-9IM row index of the exterior of the first point and column index of the exterior of the second point. Location value for the exterior of a point. Interior DE-9IM row index of the interior of the first point and column index of the interior of the second point. Location value for the interior of a point. Null Used for uninitialized location values."
  },
  "api/NetTopologySuite.Geometries.LocationUtility.html": {
    "href": "api/NetTopologySuite.Geometries.LocationUtility.html",
    "title": "Class LocationUtility | NetTopologySuite",
    "summary": "Class LocationUtility Utility class for Location enumeration Inheritance object LocationUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public class LocationUtility Methods | Edit this page View Source ToLocationSymbol(Location) Converts the location value to a location symbol, for example, EXTERIOR => 'e'. Declaration public static char ToLocationSymbol(Location locationValue) Parameters Type Name Description Location locationValue Returns Type Description char Either 'e', 'b', 'i' or '-'."
  },
  "api/NetTopologySuite.Geometries.MultiLineString.html": {
    "href": "api/NetTopologySuite.Geometries.MultiLineString.html",
    "title": "Class MultiLineString | NetTopologySuite",
    "summary": "Class MultiLineString Models a collection of LineStrings. Any collection of LineStrings is a valid MultiLineString. Inheritance object Geometry GeometryCollection MultiLineString Implements IComparable IComparable<Geometry> IReadOnlyList<Geometry> IReadOnlyCollection<Geometry> IEnumerable<Geometry> IEnumerable ILineal Inherited Members GeometryCollection.Coordinate GeometryCollection.Coordinates GeometryCollection.GetOrdinates(Ordinate) GeometryCollection.IsEmpty GeometryCollection.NumGeometries GeometryCollection.GetGeometryN(int) GeometryCollection.Geometries GeometryCollection.NumPoints GeometryCollection.Area GeometryCollection.Length GeometryCollection.Apply(ICoordinateFilter) GeometryCollection.Apply(ICoordinateSequenceFilter) GeometryCollection.Apply(IEntireCoordinateSequenceFilter) GeometryCollection.Apply(IGeometryFilter) GeometryCollection.Apply(IGeometryComponentFilter) GeometryCollection.Normalize() GeometryCollection.ComputeEnvelopeInternal() GeometryCollection.CompareToSameClass(object) GeometryCollection.CompareToSameClass(object, IComparer<CoordinateSequence>) GeometryCollection.IsHomogeneous GeometryCollection.GetEnumerator() GeometryCollection.this[int] GeometryCollection.Count Geometry.TypeNamePoint Geometry.TypeNameMultiPoint Geometry.TypeNameLineString Geometry.TypeNameLinearRing Geometry.TypeNameMultiLineString Geometry.TypeNamePolygon Geometry.TypeNameMultiPolygon Geometry.TypeNameGeometryCollection Geometry.Factory Geometry.UserData Geometry.SRID Geometry.HasNonEmptyElements(Geometry[]) Geometry.HasNullElements(object[]) Geometry.HasNullElements<T>(IEnumerable<T>) Geometry.PrecisionModel Geometry.IsSimple Geometry.IsValid Geometry.Distance(Geometry) Geometry.IsWithinDistance(Geometry, double) Geometry.Centroid Geometry.InteriorPoint Geometry.PointOnSurface Geometry.Envelope Geometry.EnvelopeInternal Geometry.GeometryChanged() Geometry.GeometryChangedAction() Geometry.Disjoint(Geometry) Geometry.Touches(Geometry) Geometry.Intersects(Geometry) Geometry.Crosses(Geometry) Geometry.Within(Geometry) Geometry.Contains(Geometry) Geometry.Overlaps(Geometry) Geometry.Covers(Geometry) Geometry.CoveredBy(Geometry) Geometry.Relate(Geometry, string) Geometry.Relate(Geometry) Geometry.Equals(Geometry) Geometry.EqualsTopologically(Geometry) Geometry.Equals(object) Geometry.GetHashCode() Geometry.ToString() Geometry.ToText() Geometry.AsText() Geometry.ToBinary() Geometry.AsBinary() Geometry.ToGMLFeature() Geometry.Buffer(double) Geometry.Buffer(double, EndCapStyle) Geometry.Buffer(double, int) Geometry.Buffer(double, int, EndCapStyle) Geometry.Buffer(double, BufferParameters) Geometry.ConvexHull() Geometry.Intersection(Geometry) Geometry.Union(Geometry) Geometry.Difference(Geometry) Geometry.SymmetricDifference(Geometry) Geometry.Union() Geometry.EqualsExact(Geometry) Geometry.EqualsNormalized(Geometry) Geometry.Copy() Geometry.Normalized() Geometry.CompareTo(object) Geometry.CompareTo(Geometry) Geometry.CompareTo(object, IComparer<CoordinateSequence>) Geometry.IsEquivalentClass(Geometry) Geometry.CheckNotGeometryCollection(Geometry) Geometry.IsGeometryCollection Geometry.Compare(List<Geometry>, List<Geometry>) Geometry.Equal(Coordinate, Coordinate, double) Geometry.IsRectangle Geometry.DefaultFactory Geometry.CreateArray(int, double) Geometry.CreateArray(CoordinateSequence, Ordinate) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax [Serializable] public class MultiLineString : GeometryCollection, IComparable, IComparable<Geometry>, IReadOnlyList<Geometry>, IReadOnlyCollection<Geometry>, IEnumerable<Geometry>, IEnumerable, ILineal Constructors | Edit this page View Source MultiLineString(LineString[]) Constructs a MultiLineString. Declaration public MultiLineString(LineString[] lineStrings) Parameters Type Name Description LineString[] lineStrings The LineStrings for this MultiLineString, or null or an empty array to create the empty point. Elements may be empty LineStrings, but not nulls. Remarks For create this Geometry is used a standard GeometryFactory with PrecisionModel == Floating. | Edit this page View Source MultiLineString(LineString[], GeometryFactory) Constructs a MultiLineString. Declaration public MultiLineString(LineString[] lineStrings, GeometryFactory factory) Parameters Type Name Description LineString[] lineStrings The LineStrings for this MultiLineString, or null or an empty array to create the empty point. Elements may be empty LineStrings, but not nulls. GeometryFactory factory Fields | Edit this page View Source Empty Represents an empty MultiLineString. Declaration public static readonly MultiLineString Empty Field Value Type Description MultiLineString Properties | Edit this page View Source Boundary Returns the boundary, or an empty geometry of appropriate dimension if this Geometry is empty. For a discussion of this function, see the OpenGIS Simple Features Specification. As stated in SFS Section 2.1.13.1, \"the boundary of a Geometry is a set of Geometries of the next lower dimension.\" Declaration public override Geometry Boundary { get; } Property Value Type Description Geometry The closure of the combinatorial boundary of this Geometry. Overrides GeometryCollection.Boundary | Edit this page View Source BoundaryDimension Declaration public override Dimension BoundaryDimension { get; } Property Value Type Description Dimension Overrides GeometryCollection.BoundaryDimension | Edit this page View Source Dimension Declaration public override Dimension Dimension { get; } Property Value Type Description Dimension Overrides GeometryCollection.Dimension | Edit this page View Source GeometryType Returns the name of this object's interface. Declaration public override string GeometryType { get; } Property Value Type Description string \"MultiLineString\" Overrides GeometryCollection.GeometryType | Edit this page View Source IsClosed Gets a value indicating whether this instance is closed. Declaration public bool IsClosed { get; } Property Value Type Description bool true if this instance is closed; otherwise, false. | Edit this page View Source OgcGeometryType Gets the OGC geometry type Declaration public override OgcGeometryType OgcGeometryType { get; } Property Value Type Description OgcGeometryType Overrides GeometryCollection.OgcGeometryType | Edit this page View Source SortIndex Gets a value to sort the geometry Declaration protected override Geometry.SortIndexValue SortIndex { get; } Property Value Type Description Geometry.SortIndexValue Overrides GeometryCollection.SortIndex Remarks NOTE: For JTS v1.17 this property's getter has been renamed to getTypeCode(). In order not to break binary compatibility we did not follow. Methods | Edit this page View Source CopyInternal() An internal method to copy subclass-specific geometry data. Declaration protected override Geometry CopyInternal() Returns Type Description Geometry A copy of the target geometry object. Overrides GeometryCollection.CopyInternal() | Edit this page View Source EqualsExact(Geometry, double) Declaration public override bool EqualsExact(Geometry other, double tolerance) Parameters Type Name Description Geometry other double tolerance Returns Type Description bool Overrides GeometryCollection.EqualsExact(Geometry, double) | Edit this page View Source HasDimension(Dimension) Tests whether an atomic geometry or any element of a collection has the specified dimension. In particular, this can be used with mixed-dimension GeometryCollections to test if they contain an element of the specified dimension. Declaration public override bool HasDimension(Dimension dim) Parameters Type Name Description Dimension dim The dimension to test Returns Type Description bool true if the geometry has or contains an element with the dimension Overrides GeometryCollection.HasDimension(Dimension) See Also Dimension | Edit this page View Source Reverse() Creates a MultiLineString in the reverse order to this object. Both the order of the component LineStrings and the order of their coordinate sequences are reversed. Declaration [Obsolete(\"Call Geometry.Reverse()\")] public override Geometry Reverse() Returns Type Description Geometry a MultiLineString in the reverse order. Overrides GeometryCollection.Reverse() | Edit this page View Source ReverseInternal() Declaration protected override Geometry ReverseInternal() Returns Type Description Geometry Overrides GeometryCollection.ReverseInternal() Implements IComparable IComparable<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable ILineal Extension Methods PolygonalExtracter.GetPolygonals<TCollection>(Geometry) PolygonalExtracter.GetPolygonals<TCollection>(Geometry, TCollection)"
  },
  "api/NetTopologySuite.Geometries.MultiPoint.html": {
    "href": "api/NetTopologySuite.Geometries.MultiPoint.html",
    "title": "Class MultiPoint | NetTopologySuite",
    "summary": "Class MultiPoint Models a collection of Points. Inheritance object Geometry GeometryCollection MultiPoint Implements IComparable IComparable<Geometry> IReadOnlyList<Geometry> IReadOnlyCollection<Geometry> IEnumerable<Geometry> IEnumerable IPuntal Inherited Members GeometryCollection.Coordinate GeometryCollection.Coordinates GeometryCollection.GetOrdinates(Ordinate) GeometryCollection.IsEmpty GeometryCollection.NumGeometries GeometryCollection.GetGeometryN(int) GeometryCollection.Geometries GeometryCollection.NumPoints GeometryCollection.Area GeometryCollection.Length GeometryCollection.Apply(ICoordinateFilter) GeometryCollection.Apply(ICoordinateSequenceFilter) GeometryCollection.Apply(IEntireCoordinateSequenceFilter) GeometryCollection.Apply(IGeometryFilter) GeometryCollection.Apply(IGeometryComponentFilter) GeometryCollection.Normalize() GeometryCollection.ComputeEnvelopeInternal() GeometryCollection.CompareToSameClass(object) GeometryCollection.CompareToSameClass(object, IComparer<CoordinateSequence>) GeometryCollection.IsHomogeneous GeometryCollection.GetEnumerator() GeometryCollection.this[int] GeometryCollection.Reverse() GeometryCollection.Count Geometry.TypeNamePoint Geometry.TypeNameMultiPoint Geometry.TypeNameLineString Geometry.TypeNameLinearRing Geometry.TypeNameMultiLineString Geometry.TypeNamePolygon Geometry.TypeNameMultiPolygon Geometry.TypeNameGeometryCollection Geometry.Factory Geometry.UserData Geometry.SRID Geometry.HasNonEmptyElements(Geometry[]) Geometry.HasNullElements(object[]) Geometry.HasNullElements<T>(IEnumerable<T>) Geometry.PrecisionModel Geometry.IsSimple Geometry.Distance(Geometry) Geometry.IsWithinDistance(Geometry, double) Geometry.Centroid Geometry.InteriorPoint Geometry.PointOnSurface Geometry.Envelope Geometry.EnvelopeInternal Geometry.GeometryChanged() Geometry.GeometryChangedAction() Geometry.Disjoint(Geometry) Geometry.Touches(Geometry) Geometry.Intersects(Geometry) Geometry.Crosses(Geometry) Geometry.Within(Geometry) Geometry.Contains(Geometry) Geometry.Overlaps(Geometry) Geometry.Covers(Geometry) Geometry.CoveredBy(Geometry) Geometry.Relate(Geometry, string) Geometry.Relate(Geometry) Geometry.Equals(Geometry) Geometry.EqualsTopologically(Geometry) Geometry.Equals(object) Geometry.GetHashCode() Geometry.ToString() Geometry.ToText() Geometry.AsText() Geometry.ToBinary() Geometry.AsBinary() Geometry.ToGMLFeature() Geometry.Buffer(double) Geometry.Buffer(double, EndCapStyle) Geometry.Buffer(double, int) Geometry.Buffer(double, int, EndCapStyle) Geometry.Buffer(double, BufferParameters) Geometry.ConvexHull() Geometry.Intersection(Geometry) Geometry.Union(Geometry) Geometry.Difference(Geometry) Geometry.SymmetricDifference(Geometry) Geometry.Union() Geometry.EqualsExact(Geometry) Geometry.EqualsNormalized(Geometry) Geometry.Copy() Geometry.Normalized() Geometry.CompareTo(object) Geometry.CompareTo(Geometry) Geometry.CompareTo(object, IComparer<CoordinateSequence>) Geometry.IsEquivalentClass(Geometry) Geometry.CheckNotGeometryCollection(Geometry) Geometry.IsGeometryCollection Geometry.Compare(List<Geometry>, List<Geometry>) Geometry.Equal(Coordinate, Coordinate, double) Geometry.IsRectangle Geometry.DefaultFactory Geometry.CreateArray(int, double) Geometry.CreateArray(CoordinateSequence, Ordinate) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax [Serializable] public class MultiPoint : GeometryCollection, IComparable, IComparable<Geometry>, IReadOnlyList<Geometry>, IReadOnlyCollection<Geometry>, IEnumerable<Geometry>, IEnumerable, IPuntal Constructors | Edit this page View Source MultiPoint(Point[]) Constructs a MultiPoint. Declaration public MultiPoint(Point[] points) Parameters Type Name Description Point[] points The Points for this MultiPoint , or null or an empty array to create the empty point. Elements may be empty Points, but not nulls. Remarks For create this Geometry is used a standard GeometryFactory with PrecisionModel == Floating. | Edit this page View Source MultiPoint(Point[], GeometryFactory) Constructs a MultiPoint. Declaration public MultiPoint(Point[] points, GeometryFactory factory) Parameters Type Name Description Point[] points The Points for this MultiPoint , or null or an empty array to create the empty point. Elements may be empty Points, but not nulls. GeometryFactory factory Fields | Edit this page View Source Empty Represents an empty MultiPoint. Declaration public static readonly MultiPoint Empty Field Value Type Description MultiPoint Properties | Edit this page View Source Boundary Gets the boundary of this geometry. Zero-dimensional geometries have no boundary by definition, so an empty GeometryCollection is returned. Declaration public override Geometry Boundary { get; } Property Value Type Description Geometry Overrides GeometryCollection.Boundary | Edit this page View Source BoundaryDimension Declaration public override Dimension BoundaryDimension { get; } Property Value Type Description Dimension Overrides GeometryCollection.BoundaryDimension | Edit this page View Source Dimension Declaration public override Dimension Dimension { get; } Property Value Type Description Dimension Overrides GeometryCollection.Dimension | Edit this page View Source GeometryType Returns the name of this object's interface. Declaration public override string GeometryType { get; } Property Value Type Description string \"MultiPoint\" Overrides GeometryCollection.GeometryType | Edit this page View Source IsValid Tests whether this Geometry is topologically valid, according to the OGC SFS specification. For validity rules see the documentation for the specific geometry subclass. Declaration public override bool IsValid { get; } Property Value Type Description bool true if this Geometry is valid. Overrides Geometry.IsValid | Edit this page View Source OgcGeometryType Gets the OGC geometry type Declaration public override OgcGeometryType OgcGeometryType { get; } Property Value Type Description OgcGeometryType Overrides GeometryCollection.OgcGeometryType | Edit this page View Source SortIndex Gets a value to sort the geometry Declaration protected override Geometry.SortIndexValue SortIndex { get; } Property Value Type Description Geometry.SortIndexValue Overrides GeometryCollection.SortIndex Remarks NOTE: For JTS v1.17 this property's getter has been renamed to getTypeCode(). In order not to break binary compatibility we did not follow. Methods | Edit this page View Source CopyInternal() An internal method to copy subclass-specific geometry data. Declaration protected override Geometry CopyInternal() Returns Type Description Geometry A copy of the target geometry object. Overrides GeometryCollection.CopyInternal() | Edit this page View Source EqualsExact(Geometry, double) Declaration public override bool EqualsExact(Geometry other, double tolerance) Parameters Type Name Description Geometry other double tolerance Returns Type Description bool Overrides GeometryCollection.EqualsExact(Geometry, double) | Edit this page View Source GetCoordinate(int) Returns the Coordinate at the given position. Declaration protected Coordinate GetCoordinate(int n) Parameters Type Name Description int n The index of the Coordinate to retrieve, beginning at 0. Returns Type Description Coordinate The nth Coordinate. | Edit this page View Source HasDimension(Dimension) Tests whether an atomic geometry or any element of a collection has the specified dimension. In particular, this can be used with mixed-dimension GeometryCollections to test if they contain an element of the specified dimension. Declaration public override bool HasDimension(Dimension dim) Parameters Type Name Description Dimension dim The dimension to test Returns Type Description bool true if the geometry has or contains an element with the dimension Overrides GeometryCollection.HasDimension(Dimension) See Also Dimension | Edit this page View Source ReverseInternal() Declaration protected override Geometry ReverseInternal() Returns Type Description Geometry Overrides GeometryCollection.ReverseInternal() Implements IComparable IComparable<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable IPuntal Extension Methods PolygonalExtracter.GetPolygonals<TCollection>(Geometry) PolygonalExtracter.GetPolygonals<TCollection>(Geometry, TCollection)"
  },
  "api/NetTopologySuite.Geometries.MultiPolygon.html": {
    "href": "api/NetTopologySuite.Geometries.MultiPolygon.html",
    "title": "Class MultiPolygon | NetTopologySuite",
    "summary": "Class MultiPolygon Basic implementation of MultiPolygon. Inheritance object Geometry GeometryCollection MultiPolygon Implements IComparable IComparable<Geometry> IReadOnlyList<Geometry> IReadOnlyCollection<Geometry> IEnumerable<Geometry> IEnumerable IPolygonal Inherited Members GeometryCollection.Coordinate GeometryCollection.Coordinates GeometryCollection.GetOrdinates(Ordinate) GeometryCollection.IsEmpty GeometryCollection.NumGeometries GeometryCollection.GetGeometryN(int) GeometryCollection.Geometries GeometryCollection.NumPoints GeometryCollection.Area GeometryCollection.Length GeometryCollection.Apply(ICoordinateFilter) GeometryCollection.Apply(ICoordinateSequenceFilter) GeometryCollection.Apply(IEntireCoordinateSequenceFilter) GeometryCollection.Apply(IGeometryFilter) GeometryCollection.Apply(IGeometryComponentFilter) GeometryCollection.Normalize() GeometryCollection.ComputeEnvelopeInternal() GeometryCollection.CompareToSameClass(object) GeometryCollection.CompareToSameClass(object, IComparer<CoordinateSequence>) GeometryCollection.IsHomogeneous GeometryCollection.GetEnumerator() GeometryCollection.this[int] GeometryCollection.Count Geometry.TypeNamePoint Geometry.TypeNameMultiPoint Geometry.TypeNameLineString Geometry.TypeNameLinearRing Geometry.TypeNameMultiLineString Geometry.TypeNamePolygon Geometry.TypeNameMultiPolygon Geometry.TypeNameGeometryCollection Geometry.Factory Geometry.UserData Geometry.SRID Geometry.HasNonEmptyElements(Geometry[]) Geometry.HasNullElements(object[]) Geometry.HasNullElements<T>(IEnumerable<T>) Geometry.PrecisionModel Geometry.IsSimple Geometry.IsValid Geometry.Distance(Geometry) Geometry.IsWithinDistance(Geometry, double) Geometry.Centroid Geometry.InteriorPoint Geometry.PointOnSurface Geometry.Envelope Geometry.EnvelopeInternal Geometry.GeometryChanged() Geometry.GeometryChangedAction() Geometry.Disjoint(Geometry) Geometry.Touches(Geometry) Geometry.Intersects(Geometry) Geometry.Crosses(Geometry) Geometry.Within(Geometry) Geometry.Contains(Geometry) Geometry.Overlaps(Geometry) Geometry.Covers(Geometry) Geometry.CoveredBy(Geometry) Geometry.Relate(Geometry, string) Geometry.Relate(Geometry) Geometry.Equals(Geometry) Geometry.EqualsTopologically(Geometry) Geometry.Equals(object) Geometry.GetHashCode() Geometry.ToString() Geometry.ToText() Geometry.AsText() Geometry.ToBinary() Geometry.AsBinary() Geometry.ToGMLFeature() Geometry.Buffer(double) Geometry.Buffer(double, EndCapStyle) Geometry.Buffer(double, int) Geometry.Buffer(double, int, EndCapStyle) Geometry.Buffer(double, BufferParameters) Geometry.ConvexHull() Geometry.Intersection(Geometry) Geometry.Union(Geometry) Geometry.Difference(Geometry) Geometry.SymmetricDifference(Geometry) Geometry.Union() Geometry.EqualsExact(Geometry) Geometry.EqualsNormalized(Geometry) Geometry.Copy() Geometry.Normalized() Geometry.CompareTo(object) Geometry.CompareTo(Geometry) Geometry.CompareTo(object, IComparer<CoordinateSequence>) Geometry.IsEquivalentClass(Geometry) Geometry.CheckNotGeometryCollection(Geometry) Geometry.IsGeometryCollection Geometry.Compare(List<Geometry>, List<Geometry>) Geometry.Equal(Coordinate, Coordinate, double) Geometry.IsRectangle Geometry.DefaultFactory Geometry.CreateArray(int, double) Geometry.CreateArray(CoordinateSequence, Ordinate) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax [Serializable] public class MultiPolygon : GeometryCollection, IComparable, IComparable<Geometry>, IReadOnlyList<Geometry>, IReadOnlyCollection<Geometry>, IEnumerable<Geometry>, IEnumerable, IPolygonal Constructors | Edit this page View Source MultiPolygon(Polygon[]) Constructs a MultiPolygon. Declaration public MultiPolygon(Polygon[] polygons) Parameters Type Name Description Polygon[] polygons The Polygons for this MultiPolygon , or null or an empty array to create the empty point. Elements may be empty Polygons, but not null s. The polygons must conform to the assertions specified in the http://www.opengis.org/techno/specs.htm OpenGIS Simple Features Specification for SQL. Remarks For create this Geometry is used a standard GeometryFactory with PrecisionModel == Floating. | Edit this page View Source MultiPolygon(Polygon[], GeometryFactory) Constructs a MultiPolygon. Declaration public MultiPolygon(Polygon[] polygons, GeometryFactory factory) Parameters Type Name Description Polygon[] polygons The Polygons for this MultiPolygon , or null or an empty array to create the empty point. Elements may be empty Polygons, but not null s. The polygons must conform to the assertions specified in the http://www.opengis.org/techno/specs.htm OpenGIS Simple Features Specification for SQL. GeometryFactory factory Fields | Edit this page View Source Empty Represents an empty MultiPolygon. Declaration public static readonly MultiPolygon Empty Field Value Type Description MultiPolygon Properties | Edit this page View Source Boundary Declaration public override Geometry Boundary { get; } Property Value Type Description Geometry Overrides GeometryCollection.Boundary | Edit this page View Source BoundaryDimension Declaration public override Dimension BoundaryDimension { get; } Property Value Type Description Dimension Overrides GeometryCollection.BoundaryDimension | Edit this page View Source Dimension Declaration public override Dimension Dimension { get; } Property Value Type Description Dimension Overrides GeometryCollection.Dimension | Edit this page View Source GeometryType Returns the name of this object's interface. Declaration public override string GeometryType { get; } Property Value Type Description string \"MultiPolygon\" Overrides GeometryCollection.GeometryType | Edit this page View Source OgcGeometryType Gets the OGC geometry type Declaration public override OgcGeometryType OgcGeometryType { get; } Property Value Type Description OgcGeometryType Overrides GeometryCollection.OgcGeometryType | Edit this page View Source SortIndex Gets a value to sort the geometry Declaration protected override Geometry.SortIndexValue SortIndex { get; } Property Value Type Description Geometry.SortIndexValue Overrides GeometryCollection.SortIndex Remarks NOTE: For JTS v1.17 this property's getter has been renamed to getTypeCode(). In order not to break binary compatibility we did not follow. Methods | Edit this page View Source CopyInternal() An internal method to copy subclass-specific geometry data. Declaration protected override Geometry CopyInternal() Returns Type Description Geometry A copy of the target geometry object. Overrides GeometryCollection.CopyInternal() | Edit this page View Source EqualsExact(Geometry, double) Declaration public override bool EqualsExact(Geometry other, double tolerance) Parameters Type Name Description Geometry other double tolerance Returns Type Description bool Overrides GeometryCollection.EqualsExact(Geometry, double) | Edit this page View Source HasDimension(Dimension) Tests whether an atomic geometry or any element of a collection has the specified dimension. In particular, this can be used with mixed-dimension GeometryCollections to test if they contain an element of the specified dimension. Declaration public override bool HasDimension(Dimension dim) Parameters Type Name Description Dimension dim The dimension to test Returns Type Description bool true if the geometry has or contains an element with the dimension Overrides GeometryCollection.HasDimension(Dimension) See Also Dimension | Edit this page View Source Reverse() Creates a MultiPolygon with every component reversed. Declaration [Obsolete(\"Call Geometry.Reverse()\")] public override Geometry Reverse() Returns Type Description Geometry An MultiPolygon in the reverse order Overrides GeometryCollection.Reverse() Remarks The order of the components in the collection are not reversed. | Edit this page View Source ReverseInternal() Declaration protected override Geometry ReverseInternal() Returns Type Description Geometry Overrides GeometryCollection.ReverseInternal() Implements IComparable IComparable<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable IPolygonal Extension Methods PolygonalExtracter.GetPolygonals<TCollection>(Geometry) PolygonalExtracter.GetPolygonals<TCollection>(Geometry, TCollection)"
  },
  "api/NetTopologySuite.Geometries.OctagonalEnvelope.html": {
    "href": "api/NetTopologySuite.Geometries.OctagonalEnvelope.html",
    "title": "Class OctagonalEnvelope | NetTopologySuite",
    "summary": "Class OctagonalEnvelope A bounding container for a Geometry which is in the shape of a general octagon. Inheritance object OctagonalEnvelope Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public class OctagonalEnvelope Remarks The OctagonalEnvelope of a geometric object is a geometry which is tight bound along the (up to) four extremal rectilinear parallels and along the (up to) four extremal diagonal parallels. Depending on the shape of the contained geometry, the octagon may be degenerate to any extreme (e.g. it may be a rectangle, a line, or a point). Constructors | Edit this page View Source OctagonalEnvelope() Creates a new null bounding octagon Declaration public OctagonalEnvelope() | Edit this page View Source OctagonalEnvelope(Coordinate) Creates a new null bounding octagon bounding a Coordinate Declaration public OctagonalEnvelope(Coordinate p) Parameters Type Name Description Coordinate p The coordinate to bound | Edit this page View Source OctagonalEnvelope(Coordinate, Coordinate) Creates a new null bounding octagon bounding a pair of Coordinates Declaration public OctagonalEnvelope(Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p0 A coordinate to bound Coordinate p1 A coordinate to bound | Edit this page View Source OctagonalEnvelope(Envelope) Creates a new null bounding octagon bounding an Envelope Declaration public OctagonalEnvelope(Envelope env) Parameters Type Name Description Envelope env | Edit this page View Source OctagonalEnvelope(Geometry) Creates a new null bounding octagon bounding a Geometry Declaration public OctagonalEnvelope(Geometry geom) Parameters Type Name Description Geometry geom | Edit this page View Source OctagonalEnvelope(OctagonalEnvelope) Creates a new null bounding octagon bounding an OctagonalEnvelope (the copy constructor). Declaration public OctagonalEnvelope(OctagonalEnvelope oct) Parameters Type Name Description OctagonalEnvelope oct Properties | Edit this page View Source IsNull Gets a value indicating that this object is null Declaration public bool IsNull { get; } Property Value Type Description bool | Edit this page View Source MaxA Gets a value indicating the maximal a value Declaration public double MaxA { get; } Property Value Type Description double | Edit this page View Source MaxB Gets a value indicating the maximal b value Declaration public double MaxB { get; } Property Value Type Description double | Edit this page View Source MaxX Gets a value indicating the maximal x-ordinate value Declaration public double MaxX { get; } Property Value Type Description double | Edit this page View Source MaxY Gets a value indicating the maximal y-ordinate value Declaration public double MaxY { get; } Property Value Type Description double | Edit this page View Source MinA Gets a value indicating the minimal a value Declaration public double MinA { get; } Property Value Type Description double | Edit this page View Source MinB Gets a value indicating the minimal b value Declaration public double MinB { get; } Property Value Type Description double | Edit this page View Source MinX Gets a value indicating the minimal x-ordinate value Declaration public double MinX { get; } Property Value Type Description double | Edit this page View Source MinY Gets a value indicating the minimal y-ordinate value Declaration public double MinY { get; } Property Value Type Description double Methods | Edit this page View Source Contains(OctagonalEnvelope) Function to test if this octagonal envelope contains other octagonal envelope. Declaration public bool Contains(OctagonalEnvelope other) Parameters Type Name Description OctagonalEnvelope other An octagonal envelope Returns Type Description bool true if this octagonal envelope contains other octagonal envelope. | Edit this page View Source ExpandBy(double) Declaration public void ExpandBy(double distance) Parameters Type Name Description double distance | Edit this page View Source ExpandToInclude(Coordinate) Function to expand this OctagonalEnvelope to include the provided p coordinate. Declaration public OctagonalEnvelope ExpandToInclude(Coordinate p) Parameters Type Name Description Coordinate p The coordinate Returns Type Description OctagonalEnvelope A reference to this octagonal envelope, expanded by p | Edit this page View Source ExpandToInclude(CoordinateSequence) Method to expand this OctagonalEnvelope to include the provided seq coordinate sequence. Declaration public OctagonalEnvelope ExpandToInclude(CoordinateSequence seq) Parameters Type Name Description CoordinateSequence seq The coordinate sequence Returns Type Description OctagonalEnvelope A reference to this octagonal envelope, expanded by seq | Edit this page View Source ExpandToInclude(Envelope) Function to expand this OctagonalEnvelope to include the provided env envelope. Declaration public OctagonalEnvelope ExpandToInclude(Envelope env) Parameters Type Name Description Envelope env The envelope Returns Type Description OctagonalEnvelope A reference to this octagonal envelope, expanded by env | Edit this page View Source ExpandToInclude(Geometry) Method to expand this OctagonalEnvelope to include the provided g geometry. Declaration public void ExpandToInclude(Geometry g) Parameters Type Name Description Geometry g The geometry | Edit this page View Source ExpandToInclude(OctagonalEnvelope) Method to expand this OctagonalEnvelope to include the provided oct OctogonalEnvelope. Declaration public OctagonalEnvelope ExpandToInclude(OctagonalEnvelope oct) Parameters Type Name Description OctagonalEnvelope oct The OctogonalEnvelope Returns Type Description OctagonalEnvelope A reference to this octagonal envelope, expanded by oct | Edit this page View Source ExpandToInclude(double, double) Function to expand this OctagonalEnvelope to include the provided x- and y ordinates. Declaration public OctagonalEnvelope ExpandToInclude(double x, double y) Parameters Type Name Description double x A x-ordinate value double y A y-ordinate value Returns Type Description OctagonalEnvelope A reference to this octagonal envelope, expanded by x and y | Edit this page View Source GetOctagonalEnvelope(Geometry) Gets the octagonal envelope of a geometry Declaration public static Geometry GetOctagonalEnvelope(Geometry geom) Parameters Type Name Description Geometry geom The geometry Returns Type Description Geometry The octagonal envelope of the geometry | Edit this page View Source Intersects(Coordinate) Function to test if this octagonal envelope contains p coordinate. Declaration public bool Intersects(Coordinate p) Parameters Type Name Description Coordinate p A coordinate Returns Type Description bool true if this octagonal envelope contains p coordinate. | Edit this page View Source Intersects(OctagonalEnvelope) Function to test if this octagonal envelope intersects other octagonal envelope . Declaration public bool Intersects(OctagonalEnvelope other) Parameters Type Name Description OctagonalEnvelope other An octagonal envelope Returns Type Description bool true if this octagonal envelope intersects other octagonal envelope . | Edit this page View Source ToGeometry(GeometryFactory) Function to convert this octagonal envelope into a geometry Declaration public Geometry ToGeometry(GeometryFactory geomFactory) Parameters Type Name Description GeometryFactory geomFactory The factory to create the geometry Returns Type Description Geometry A geometry"
  },
  "api/NetTopologySuite.Geometries.OgcCompliantGeometryFactory.html": {
    "href": "api/NetTopologySuite.Geometries.OgcCompliantGeometryFactory.html",
    "title": "Class OgcCompliantGeometryFactory | NetTopologySuite",
    "summary": "Class OgcCompliantGeometryFactory OGC compliant geometry factory Inheritance object GeometryFactory OgcCompliantGeometryFactory Inherited Members GeometryFactory.Default GeometryFactory.Floating GeometryFactory.FloatingSingle GeometryFactory.Fixed GeometryFactory.PrecisionModel GeometryFactory.CoordinateSequenceFactory GeometryFactory.SRID GeometryFactory.ElevationModel GeometryFactory.GeometryServices GeometryFactory.CreatePointFromInternalCoord(Coordinate, Geometry) GeometryFactory.ToPointArray(IEnumerable<Geometry>) GeometryFactory.ToGeometryArray(IEnumerable<Geometry>) GeometryFactory.ToLineStringArray(IEnumerable<Geometry>) GeometryFactory.ToLinearRingArray(IEnumerable<Geometry>) GeometryFactory.ToPolygonArray(IEnumerable<Geometry>) GeometryFactory.ToMultiPointArray(IEnumerable<Geometry>) GeometryFactory.ToMultiLineStringArray(IEnumerable<Geometry>) GeometryFactory.ToMultiPolygonArray(IEnumerable<Geometry>) GeometryFactory.CreatePoint() GeometryFactory.CreatePoint(Coordinate) GeometryFactory.CreatePoint(CoordinateSequence) GeometryFactory.CreateLineString() GeometryFactory.CreateLineString(Coordinate[]) GeometryFactory.CreateLineString(CoordinateSequence) GeometryFactory.CreateLinearRing() GeometryFactory.CreateLinearRing(Coordinate[]) GeometryFactory.CreateLinearRing(CoordinateSequence) GeometryFactory.CreatePolygon() GeometryFactory.CreateMultiPoint() GeometryFactory.CreateMultiPoint(Point[]) GeometryFactory.CreateMultiPointFromCoords(Coordinate[]) GeometryFactory.CreateMultiPoint(CoordinateSequence) GeometryFactory.CreateMultiLineString() GeometryFactory.CreateMultiLineString(LineString[]) GeometryFactory.CreateMultiPolygon() GeometryFactory.CreateMultiPolygon(Polygon[]) GeometryFactory.CreateGeometryCollection() GeometryFactory.CreateGeometryCollection(Geometry[]) GeometryFactory.BuildGeometry(IEnumerable<Geometry>) GeometryFactory.CreateEmpty(Dimension) GeometryFactory.CreateGeometry(Geometry) GeometryFactory.WithSRID(int) GeometryFactory.ToString() GeometryFactory.OnDeserialized(StreamingContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax [Obsolete(\"Use GeometryFactoryEx with OrientationOfExteriorRing = CCW\")] public class OgcCompliantGeometryFactory : GeometryFactory Constructors | Edit this page View Source OgcCompliantGeometryFactory() Creates an instance of this class using the default values for SRID, PrecisionModel and CoordinateSequenceFactory. Declaration public OgcCompliantGeometryFactory() | Edit this page View Source OgcCompliantGeometryFactory(CoordinateSequenceFactory) Creates an instance of this class using the default values for SRID, PrecisionModel, but the specified factory. Declaration public OgcCompliantGeometryFactory(CoordinateSequenceFactory factory) Parameters Type Name Description CoordinateSequenceFactory factory | Edit this page View Source OgcCompliantGeometryFactory(PrecisionModel) Declaration public OgcCompliantGeometryFactory(PrecisionModel pm) Parameters Type Name Description PrecisionModel pm | Edit this page View Source OgcCompliantGeometryFactory(PrecisionModel, int) Declaration public OgcCompliantGeometryFactory(PrecisionModel pm, int srid) Parameters Type Name Description PrecisionModel pm int srid | Edit this page View Source OgcCompliantGeometryFactory(PrecisionModel, int, CoordinateSequenceFactory) Declaration public OgcCompliantGeometryFactory(PrecisionModel pm, int srid, CoordinateSequenceFactory factory) Parameters Type Name Description PrecisionModel pm int srid CoordinateSequenceFactory factory Methods | Edit this page View Source CreatePolygon(CoordinateSequence) Constructs a Polygon with the given exterior boundary. Declaration public override Polygon CreatePolygon(CoordinateSequence coordinates) Parameters Type Name Description CoordinateSequence coordinates the outer boundary of the new Polygon, or null or an empty LinearRing if the empty geometry is to be created. Returns Type Description Polygon A Polygon object Overrides GeometryFactory.CreatePolygon(CoordinateSequence) Remarks The ExteriorRing is guaranteed to be orientated counter-clockwise. Exceptions Type Condition ArgumentException If the boundary ring is invalid | Edit this page View Source CreatePolygon(Coordinate[]) Constructs a Polygon with the given exterior boundary. Declaration public override Polygon CreatePolygon(Coordinate[] coordinates) Parameters Type Name Description Coordinate[] coordinates the outer boundary of the new Polygon, or null or an empty LinearRing if the empty geometry is to be created. Returns Type Description Polygon A Polygon object Overrides GeometryFactory.CreatePolygon(Coordinate[]) Remarks The ExteriorRing is guaranteed to be orientated counter-clockwise. Exceptions Type Condition ArgumentException If the boundary ring is invalid | Edit this page View Source CreatePolygon(LinearRing) Constructs a Polygon with the given exterior boundary. Declaration public override Polygon CreatePolygon(LinearRing shell) Parameters Type Name Description LinearRing shell the outer boundary of the new Polygon, or null or an empty LinearRing if the empty geometry is to be created. Returns Type Description Polygon the created Polygon Overrides GeometryFactory.CreatePolygon(LinearRing) Remarks The ExteriorRing is guaranteed to be orientated counter-clockwise. Exceptions Type Condition ArgumentException If the boundary ring is invalid | Edit this page View Source CreatePolygon(LinearRing, LinearRing[]) Constructs a Polygon with the given exterior boundary and interior boundaries. Declaration public override Polygon CreatePolygon(LinearRing shell, LinearRing[] holes) Parameters Type Name Description LinearRing shell The outer boundary of the new Polygon, or null or an empty LinearRing if the empty point is to be created. LinearRing[] holes The inner boundaries of the new Polygon, or null or empty LinearRing s if the empty point is to be created. Returns Type Description Polygon A Polygon object Overrides GeometryFactory.CreatePolygon(LinearRing, LinearRing[]) Remarks The ExteriorRing is guaranteed to be orientated counter-clockwise. The InteriorRings are guaranteed to be orientated clockwise. | Edit this page View Source ToGeometry(Envelope) Creates a Geometry with the same extent as the given envelope. Declaration public override Geometry ToGeometry(Envelope envelope) Parameters Type Name Description Envelope envelope The Envelope Returns Type Description Geometry An empty Point (for null Envelopes), a Point (when min x = max x and min y = max y) or a Polygon (in all other cases) Overrides GeometryFactory.ToGeometry(Envelope) Remarks The Geometry returned is guaranteed to be valid. To provide this behavior, the following cases occur: If the Envelope is: null returns an empty Point a point returns a non-empty Point a line returns a two-point LineString a rectangle returns a Polygon whose points are (minx, maxy), (minx, maxy), (maxx, maxy), (maxx, miny)."
  },
  "api/NetTopologySuite.Geometries.OgcGeometryType.html": {
    "href": "api/NetTopologySuite.Geometries.OgcGeometryType.html",
    "title": "Enum OgcGeometryType | NetTopologySuite",
    "summary": "Enum OgcGeometryType Enumeration of OGC Geometry Types Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public enum OgcGeometryType Fields Name Description CircularString CircularString CompoundCurve CompoundCurve Curve Curve CurvePolygon CurvePolygon GeometryCollection GeometryCollection. LineString LineString. MultiCurve MultiCurve MultiLineString MultiLineString. MultiPoint MultiPoint. MultiPolygon MultiPolygon. MultiSurface MultiSurface Point Point. Polygon Polygon. PolyhedralSurface PolyhedralSurface Surface Surface TIN TIN"
  },
  "api/NetTopologySuite.Geometries.Ordinate.html": {
    "href": "api/NetTopologySuite.Geometries.Ordinate.html",
    "title": "Enum Ordinate | NetTopologySuite",
    "summary": "Enum Ordinate Identifies the different well-supported components of coordinate values. All supported coordinates define values for at least the X and the Y components. The first 16 spatial and 16 measure dimensions may also be accessed this way. Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public enum Ordinate Fields Name Description M The \"M\" ordinate. Measure1 The 1st measure dimension. Measure10 The 10th measure dimension. Measure11 The 11th measure dimension. Measure12 The 12th measure dimension. Measure13 The 13th measure dimension. Measure14 The 14th measure dimension. Measure15 The 15th measure dimension. Measure16 The 16th measure dimension. Measure2 The 2nd measure dimension. Measure3 The 3rd measure dimension. Measure4 The 4th measure dimension. Measure5 The 5th measure dimension. Measure6 The 6th measure dimension. Measure7 The 7th measure dimension. Measure8 The 8th measure dimension. Measure9 The 9th measure dimension. Spatial1 The 1st spatial dimension. Spatial10 The 10th spatial dimension. Spatial11 The 11th spatial dimension. Spatial12 The 12th spatial dimension. Spatial13 The 13th spatial dimension. Spatial14 The 14th spatial dimension. Spatial15 The 15th spatial dimension. Spatial16 The 16th spatial dimension. Spatial2 The 2nd spatial dimension. Spatial3 The 3rd spatial dimension. Spatial4 The 4th spatial dimension. Spatial5 The 5th spatial dimension. Spatial6 The 6th spatial dimension. Spatial7 The 7th spatial dimension. Spatial8 The 8th spatial dimension. Spatial9 The 9th spatial dimension. X The \"X\" ordinate. Y The \"Y\" ordinate. Z The \"Z\" ordinate."
  },
  "api/NetTopologySuite.Geometries.Ordinates.html": {
    "href": "api/NetTopologySuite.Geometries.Ordinates.html",
    "title": "Enum Ordinates | NetTopologySuite",
    "summary": "Enum Ordinates Flags for Ordinate values Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax [Flags] public enum Ordinates Fields Name Description AllMeasureOrdinates Flags for all non-spatial ordinates. AllOrdinates Flags for all recognized ordinates. AllSpatialOrdinates Flags for all spatial ordinates. M Flag for the m-ordinate Measure1 Flag for the 1st measure dimension. Measure10 Flag for the 10th measure dimension. Measure11 Flag for the 11th measure dimension. Measure12 Flag for the 12th measure dimension. Measure13 Flag for the 13th measure dimension. Measure14 Flag for the 14th measure dimension. Measure15 Flag for the 15th measure dimension. Measure16 Flag for the 16th measure dimension. Measure2 Flag for the 2nd measure dimension. Measure3 Flag for the 3rd measure dimension. Measure4 Flag for the 4th measure dimension. Measure5 Flag for the 5th measure dimension. Measure6 Flag for the 6th measure dimension. Measure7 Flag for the 7th measure dimension. Measure8 Flag for the 8th measure dimension. Measure9 Flag for the 9th measure dimension. None No ordinates Spatial1 Flag for the 1st spatial dimension. Spatial10 Flag for the 10th spatial dimension. Spatial11 Flag for the 11th spatial dimension. Spatial12 Flag for the 12th spatial dimension. Spatial13 Flag for the 13th spatial dimension. Spatial14 Flag for the 14th spatial dimension. Spatial15 Flag for the 15th spatial dimension. Spatial16 Flag for the 16th spatial dimension. Spatial2 Flag for the 2nd spatial dimension. Spatial3 Flag for the 3rd spatial dimension. Spatial4 Flag for the 4th spatial dimension. Spatial5 Flag for the 5th spatial dimension. Spatial6 Flag for the 6th spatial dimension. Spatial7 Flag for the 7th spatial dimension. Spatial8 Flag for the 8th spatial dimension. Spatial9 Flag for the 9th spatial dimension. X Flag for the x-ordinate XY Flag for both x- and y-ordinate XYM Flag for x-, y- and m-ordinate XYZ Flag for x-, y- and z-ordinate XYZM Flag for x-, y-, z- and m-ordinate Y Flag for the y-ordinate Z Flag for the z-ordinate"
  },
  "api/NetTopologySuite.Geometries.OrdinatesUtility.html": {
    "href": "api/NetTopologySuite.Geometries.OrdinatesUtility.html",
    "title": "Class OrdinatesUtility | NetTopologySuite",
    "summary": "Class OrdinatesUtility Static utility functions for dealing with Ordinates and dimension Inheritance object OrdinatesUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public static class OrdinatesUtility Methods | Edit this page View Source OrdinatesToDimension(Ordinates) Translates the ordinates-flag to a number of dimensions. Declaration public static int OrdinatesToDimension(Ordinates ordinates) Parameters Type Name Description Ordinates ordinates The ordinates flag Returns Type Description int The number of dimensions | Edit this page View Source OrdinatesToMeasures(Ordinates) Translates the ordinates-flag to a number of measures. Declaration public static int OrdinatesToMeasures(Ordinates ordinates) Parameters Type Name Description Ordinates ordinates The ordinates flag Returns Type Description int The number of measures"
  },
  "api/NetTopologySuite.Geometries.PerOrdinateEqualityComparer.html": {
    "href": "api/NetTopologySuite.Geometries.PerOrdinateEqualityComparer.html",
    "title": "Class PerOrdinateEqualityComparer | NetTopologySuite",
    "summary": "Class PerOrdinateEqualityComparer A class that can be used to test coordinates for equality. This class test for each ordinate if the distance is less than a tolerance value. Inheritance object EqualityComparer<Coordinate> CoordinateEqualityComparer PerOrdinateEqualityComparer Implements IEqualityComparer<Coordinate> IEqualityComparer Inherited Members CoordinateEqualityComparer.Equals(Coordinate, Coordinate) CoordinateEqualityComparer.Equals(Coordinate, Coordinate, double) CoordinateEqualityComparer.GetHashCode(Coordinate) EqualityComparer<Coordinate>.Default object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public sealed class PerOrdinateEqualityComparer : CoordinateEqualityComparer, IEqualityComparer<Coordinate>, IEqualityComparer Methods | Edit this page View Source AreEqual(Coordinate, Coordinate, double) Method to test 2 Coordinates for equality, allowing a tolerance. Declaration protected override bool AreEqual(Coordinate a, Coordinate b, double tolerance) Parameters Type Name Description Coordinate a The 1st Coordinate Coordinate b The 2nd Coordinate double tolerance A tolerance value Returns Type Description bool true if a and b can be considered equal. Overrides CoordinateEqualityComparer.AreEqual(Coordinate, Coordinate, double) Implements IEqualityComparer<T> IEqualityComparer"
  },
  "api/NetTopologySuite.Geometries.Point.html": {
    "href": "api/NetTopologySuite.Geometries.Point.html",
    "title": "Class Point | NetTopologySuite",
    "summary": "Class Point Represents a single point. A Point is topologically valid if and only if: The coordinate which defines it if any) is a valid coordinate (i.e. does not have an NaN X- or Y-ordinate Inheritance object Geometry Point Implements IComparable IComparable<Geometry> IPuntal Inherited Members Geometry.TypeNamePoint Geometry.TypeNameMultiPoint Geometry.TypeNameLineString Geometry.TypeNameLinearRing Geometry.TypeNameMultiLineString Geometry.TypeNamePolygon Geometry.TypeNameMultiPolygon Geometry.TypeNameGeometryCollection Geometry.Factory Geometry.UserData Geometry.SRID Geometry.HasNonEmptyElements(Geometry[]) Geometry.HasNullElements(object[]) Geometry.HasNullElements<T>(IEnumerable<T>) Geometry.PrecisionModel Geometry.NumGeometries Geometry.GetGeometryN(int) Geometry.IsSimple Geometry.IsValid Geometry.Distance(Geometry) Geometry.IsWithinDistance(Geometry, double) Geometry.Area Geometry.Length Geometry.Centroid Geometry.InteriorPoint Geometry.PointOnSurface Geometry.HasDimension(Dimension) Geometry.Envelope Geometry.EnvelopeInternal Geometry.GeometryChanged() Geometry.GeometryChangedAction() Geometry.Disjoint(Geometry) Geometry.Touches(Geometry) Geometry.Intersects(Geometry) Geometry.Crosses(Geometry) Geometry.Within(Geometry) Geometry.Contains(Geometry) Geometry.Overlaps(Geometry) Geometry.Covers(Geometry) Geometry.CoveredBy(Geometry) Geometry.Relate(Geometry, string) Geometry.Relate(Geometry) Geometry.Equals(Geometry) Geometry.EqualsTopologically(Geometry) Geometry.Equals(object) Geometry.GetHashCode() Geometry.ToString() Geometry.ToText() Geometry.AsText() Geometry.ToBinary() Geometry.AsBinary() Geometry.ToGMLFeature() Geometry.Buffer(double) Geometry.Buffer(double, EndCapStyle) Geometry.Buffer(double, int) Geometry.Buffer(double, int, EndCapStyle) Geometry.Buffer(double, BufferParameters) Geometry.ConvexHull() Geometry.Intersection(Geometry) Geometry.Union(Geometry) Geometry.Difference(Geometry) Geometry.SymmetricDifference(Geometry) Geometry.Union() Geometry.EqualsExact(Geometry) Geometry.EqualsNormalized(Geometry) Geometry.Copy() Geometry.Normalized() Geometry.CompareTo(object) Geometry.CompareTo(Geometry) Geometry.CompareTo(object, IComparer<CoordinateSequence>) Geometry.IsEquivalentClass(Geometry) Geometry.CheckNotGeometryCollection(Geometry) Geometry.IsGeometryCollection Geometry.Compare(List<Geometry>, List<Geometry>) Geometry.Equal(Coordinate, Coordinate, double) Geometry.IsRectangle Geometry.DefaultFactory Geometry.CreateArray(int, double) Geometry.CreateArray(CoordinateSequence, Ordinate) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax [Serializable] public class Point : Geometry, IComparable, IComparable<Geometry>, IPuntal Constructors | Edit this page View Source Point(Coordinate) Initializes a new instance of the Point class. Declaration public Point(Coordinate coordinate) Parameters Type Name Description Coordinate coordinate The coordinate used for create this Point. Remarks For create this Geometry is used a standard GeometryFactory with PrecisionModel == Floating. | Edit this page View Source Point(CoordinateSequence, GeometryFactory) Constructs a Point with the given coordinate. Declaration public Point(CoordinateSequence coordinates, GeometryFactory factory) Parameters Type Name Description CoordinateSequence coordinates Contains the single coordinate on which to base this Point, or null to create the empty point. GeometryFactory factory | Edit this page View Source Point(double, double) Initializes a new instance of the Point class. Declaration public Point(double x, double y) Parameters Type Name Description double x The x coordinate. double y The y coordinate. Remarks For create this Geometry is used a standard GeometryFactory with PrecisionModel set to Floating. | Edit this page View Source Point(double, double, double) Initializes a new instance of the Point class. Declaration public Point(double x, double y, double z) Parameters Type Name Description double x The x coordinate. double y The y coordinate. double z The z coordinate. Remarks For create this Geometry is used a standard GeometryFactory with PrecisionModel set to Floating. Fields | Edit this page View Source Empty Represents an empty Point. Declaration public static readonly Point Empty Field Value Type Description Point Properties | Edit this page View Source Boundary Gets the boundary of this geometry. Zero-dimensional geometries have no boundary by definition, so an empty GeometryCollection is returned. Declaration public override Geometry Boundary { get; } Property Value Type Description Geometry Overrides Geometry.Boundary | Edit this page View Source BoundaryDimension Declaration public override Dimension BoundaryDimension { get; } Property Value Type Description Dimension Overrides Geometry.BoundaryDimension | Edit this page View Source Coordinate Returns a vertex of this geometry (usually, but not necessarily, the first one), or null if the geometry is empty. Declaration public override Coordinate Coordinate { get; } Property Value Type Description Coordinate A coordinate which is a vertex of this Geometry. Overrides Geometry.Coordinate Remarks The returned coordinate should not be assumed to be an actual Coordinate object used in the internal representation. | Edit this page View Source CoordinateSequence Declaration public CoordinateSequence CoordinateSequence { get; } Property Value Type Description CoordinateSequence | Edit this page View Source Coordinates Declaration public override Coordinate[] Coordinates { get; } Property Value Type Description Coordinate[] Overrides Geometry.Coordinates | Edit this page View Source Dimension Declaration public override Dimension Dimension { get; } Property Value Type Description Dimension Overrides Geometry.Dimension | Edit this page View Source GeometryType Returns the name of this object's interface. Declaration public override string GeometryType { get; } Property Value Type Description string \"Point\" Overrides Geometry.GeometryType | Edit this page View Source IsEmpty Declaration public override bool IsEmpty { get; } Property Value Type Description bool Overrides Geometry.IsEmpty | Edit this page View Source M Declaration public double M { get; set; } Property Value Type Description double | Edit this page View Source NumPoints Declaration public override int NumPoints { get; } Property Value Type Description int Overrides Geometry.NumPoints | Edit this page View Source OgcGeometryType Gets the OGC geometry type Declaration public override OgcGeometryType OgcGeometryType { get; } Property Value Type Description OgcGeometryType Overrides Geometry.OgcGeometryType | Edit this page View Source SortIndex Gets a value to sort the geometry Declaration protected override Geometry.SortIndexValue SortIndex { get; } Property Value Type Description Geometry.SortIndexValue Overrides Geometry.SortIndex Remarks NOTE: For JTS v1.17 this property's getter has been renamed to getTypeCode(). In order not to break binary compatibility we did not follow. | Edit this page View Source X Gets a value indicating the x-ordinate of this point Declaration public double X { get; set; } Property Value Type Description double Remarks Deviation from JTS: this implementation does not throw an exception when this property is accessed or set | Edit this page View Source Y Gets a value indicating the y-ordinate of this point Declaration public double Y { get; set; } Property Value Type Description double Remarks Deviation from JTS: this implementation does not throw an exception when this property is accessed or set | Edit this page View Source Z Declaration public double Z { get; set; } Property Value Type Description double Methods | Edit this page View Source Apply(ICoordinateFilter) Performs an operation with or on this Geometry's coordinates. Declaration public override void Apply(ICoordinateFilter filter) Parameters Type Name Description ICoordinateFilter filter The filter to apply to this Geometry's coordinates Overrides Geometry.Apply(ICoordinateFilter) Remarks If this method modifies any coordinate values, GeometryChanged() must be called to update the geometry state. Note that you cannot use this method to modify this Geometry if its underlying CoordinateSequence's #get method returns a copy of the Coordinate, rather than the actual Coordinate stored (if it even stores Coordinate objects at all). | Edit this page View Source Apply(ICoordinateSequenceFilter) Performs an operation on the coordinates in this Geometry's CoordinateSequences. Declaration public override void Apply(ICoordinateSequenceFilter filter) Parameters Type Name Description ICoordinateSequenceFilter filter The filter to apply Overrides Geometry.Apply(ICoordinateSequenceFilter) Remarks If the filter reports that a coordinate value has been changed, GeometryChanged() will be called automatically. | Edit this page View Source Apply(IEntireCoordinateSequenceFilter) Performs an operation on this Geometry's CoordinateSequences. Declaration public override void Apply(IEntireCoordinateSequenceFilter filter) Parameters Type Name Description IEntireCoordinateSequenceFilter filter The filter to apply Overrides Geometry.Apply(IEntireCoordinateSequenceFilter) Remarks If the filter reports that a coordinate value has been changed, GeometryChanged() will be called automatically. | Edit this page View Source Apply(IGeometryComponentFilter) Performs an operation with or on this Geometry and its component Geometry's. Only GeometryCollections and Polygons have component Geometry's; for Polygons they are the LinearRings of the shell and holes. Declaration public override void Apply(IGeometryComponentFilter filter) Parameters Type Name Description IGeometryComponentFilter filter The filter to apply to this Geometry. Overrides Geometry.Apply(IGeometryComponentFilter) | Edit this page View Source Apply(IGeometryFilter) Performs an operation with or on this Geometry and its subelement Geometrys (if any). Only GeometryCollections and subclasses have subelement Geometry's. Declaration public override void Apply(IGeometryFilter filter) Parameters Type Name Description IGeometryFilter filter The filter to apply to this Geometry (and its children, if it is a GeometryCollection). Overrides Geometry.Apply(IGeometryFilter) | Edit this page View Source CompareToSameClass(object) Declaration protected override int CompareToSameClass(object other) Parameters Type Name Description object other Returns Type Description int Overrides Geometry.CompareToSameClass(object) | Edit this page View Source CompareToSameClass(object, IComparer<CoordinateSequence>) Declaration protected override int CompareToSameClass(object other, IComparer<CoordinateSequence> comparer) Parameters Type Name Description object other IComparer<CoordinateSequence> comparer Returns Type Description int Overrides Geometry.CompareToSameClass(object, IComparer<CoordinateSequence>) | Edit this page View Source ComputeEnvelopeInternal() Declaration protected override Envelope ComputeEnvelopeInternal() Returns Type Description Envelope Overrides Geometry.ComputeEnvelopeInternal() | Edit this page View Source CopyInternal() An internal method to copy subclass-specific geometry data. Declaration protected override Geometry CopyInternal() Returns Type Description Geometry A copy of the target geometry object. Overrides Geometry.CopyInternal() | Edit this page View Source EqualsExact(Geometry, double) Declaration public override bool EqualsExact(Geometry other, double tolerance) Parameters Type Name Description Geometry other double tolerance Returns Type Description bool Overrides Geometry.EqualsExact(Geometry, double) | Edit this page View Source GetOrdinates(Ordinate) Gets an array of double ordinate values Declaration public override double[] GetOrdinates(Ordinate ordinate) Parameters Type Name Description Ordinate ordinate The ordinate index Returns Type Description double[] An array of ordinate values Overrides Geometry.GetOrdinates(Ordinate) | Edit this page View Source Normalize() Declaration public override void Normalize() Overrides Geometry.Normalize() | Edit this page View Source Reverse() Computes a new geometry which has all component coordinate sequences in reverse order (opposite orientation) to this one. Declaration [Obsolete(\"Call Geometry.Reverse()\")] public override Geometry Reverse() Returns Type Description Geometry A reversed geometry Overrides Geometry.Reverse() Remarks Don't override this function, implement ReverseInternal(). | Edit this page View Source ReverseInternal() The actual implementation of the Reverse() function for POINTs. Declaration protected override Geometry ReverseInternal() Returns Type Description Geometry A reversed geometry Overrides Geometry.ReverseInternal() Implements IComparable IComparable<T> IPuntal Extension Methods PolygonalExtracter.GetPolygonals<TCollection>(Geometry) PolygonalExtracter.GetPolygonals<TCollection>(Geometry, TCollection)"
  },
  "api/NetTopologySuite.Geometries.Polygon.html": {
    "href": "api/NetTopologySuite.Geometries.Polygon.html",
    "title": "Class Polygon | NetTopologySuite",
    "summary": "Class Polygon Represents a polygon with linear edges, which may include holes. The outer boundary (shell) and inner boundaries (holes) of the polygon are represented by {@link LinearRing}s. The boundary rings of the polygon may have any orientation. Polygons are closed, simple geometries by definition. The polygon model conforms to the assertions specified in the OpenGIS Simple Features Specification for SQL. A Polygon is topologically valid if and only if: the coordinates which define it are valid coordinates the linear rings for the shell and holes are valid (i.e. are closed and do not self-intersect) holes touch the shell or another hole at at most one point (which implies that the rings of the shell and holes must not cross) the interior of the polygon is connected, or equivalently no sequence of touching holes makes the interior of the polygon disconnected (i.e. effectively split the polygon into two pieces). Inheritance object Geometry Polygon Implements IComparable IComparable<Geometry> IPolygonal Inherited Members Geometry.TypeNamePoint Geometry.TypeNameMultiPoint Geometry.TypeNameLineString Geometry.TypeNameLinearRing Geometry.TypeNameMultiLineString Geometry.TypeNamePolygon Geometry.TypeNameMultiPolygon Geometry.TypeNameGeometryCollection Geometry.Factory Geometry.UserData Geometry.SRID Geometry.HasNonEmptyElements(Geometry[]) Geometry.HasNullElements(object[]) Geometry.HasNullElements<T>(IEnumerable<T>) Geometry.PrecisionModel Geometry.NumGeometries Geometry.GetGeometryN(int) Geometry.IsSimple Geometry.IsValid Geometry.Distance(Geometry) Geometry.IsWithinDistance(Geometry, double) Geometry.Centroid Geometry.InteriorPoint Geometry.PointOnSurface Geometry.HasDimension(Dimension) Geometry.Envelope Geometry.EnvelopeInternal Geometry.GeometryChanged() Geometry.GeometryChangedAction() Geometry.Disjoint(Geometry) Geometry.Touches(Geometry) Geometry.Intersects(Geometry) Geometry.Crosses(Geometry) Geometry.Within(Geometry) Geometry.Contains(Geometry) Geometry.Overlaps(Geometry) Geometry.Covers(Geometry) Geometry.CoveredBy(Geometry) Geometry.Relate(Geometry, string) Geometry.Relate(Geometry) Geometry.Equals(Geometry) Geometry.EqualsTopologically(Geometry) Geometry.Equals(object) Geometry.GetHashCode() Geometry.ToString() Geometry.ToText() Geometry.AsText() Geometry.ToBinary() Geometry.AsBinary() Geometry.ToGMLFeature() Geometry.Buffer(double) Geometry.Buffer(double, EndCapStyle) Geometry.Buffer(double, int) Geometry.Buffer(double, int, EndCapStyle) Geometry.Buffer(double, BufferParameters) Geometry.Intersection(Geometry) Geometry.Union(Geometry) Geometry.Difference(Geometry) Geometry.SymmetricDifference(Geometry) Geometry.Union() Geometry.EqualsExact(Geometry) Geometry.EqualsNormalized(Geometry) Geometry.Copy() Geometry.Normalized() Geometry.CompareTo(object) Geometry.CompareTo(Geometry) Geometry.CompareTo(object, IComparer<CoordinateSequence>) Geometry.IsEquivalentClass(Geometry) Geometry.CheckNotGeometryCollection(Geometry) Geometry.IsGeometryCollection Geometry.Compare(List<Geometry>, List<Geometry>) Geometry.Equal(Coordinate, Coordinate, double) Geometry.DefaultFactory Geometry.CreateArray(int, double) Geometry.CreateArray(CoordinateSequence, Ordinate) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax [Serializable] public class Polygon : Geometry, IComparable, IComparable<Geometry>, IPolygonal Constructors | Edit this page View Source Polygon(LinearRing) Constructs a Polygon with the given exterior boundary. Declaration public Polygon(LinearRing shell) Parameters Type Name Description LinearRing shell The outer boundary of the new Polygon, or null or an empty LinearRing if the empty polygon is to be created. | Edit this page View Source Polygon(LinearRing, GeometryFactory) Constructs a Polygon with the given exterior boundary. Declaration public Polygon(LinearRing shell, GeometryFactory factory) Parameters Type Name Description LinearRing shell The outer boundary of the new Polygon, or null or an empty LinearRing if the empty polygon is to be created. GeometryFactory factory | Edit this page View Source Polygon(LinearRing, LinearRing[]) Initializes a new instance of the Polygon class. Declaration public Polygon(LinearRing shell, LinearRing[] holes) Parameters Type Name Description LinearRing shell The outer boundary of the new Polygon, or null or an empty LinearRing if the empty point is to be created. LinearRing[] holes The inner boundaries of the new Polygon , or null or empty LinearRings if the empty point is to be created. Remarks For create this Geometry is used a standard GeometryFactory with PrecisionModel == Floating. | Edit this page View Source Polygon(LinearRing, LinearRing[], GeometryFactory) Constructs a Polygon with the given exterior boundary and interior boundaries. Declaration public Polygon(LinearRing shell, LinearRing[] holes, GeometryFactory factory) Parameters Type Name Description LinearRing shell The outer boundary of the new Polygon, or null or an empty LinearRing if the empty point is to be created. LinearRing[] holes The inner boundaries of the new Polygon , or null or empty LinearRings if the empty point is to be created. GeometryFactory factory Fields | Edit this page View Source Empty Represents an empty Polygon. Declaration public static readonly Polygon Empty Field Value Type Description Polygon Properties | Edit this page View Source Area Returns the area of this Polygon Declaration public override double Area { get; } Property Value Type Description double Overrides Geometry.Area | Edit this page View Source Boundary Declaration public override Geometry Boundary { get; } Property Value Type Description Geometry Overrides Geometry.Boundary | Edit this page View Source BoundaryDimension Returns the dimension of this Geometrys inherent boundary. Declaration public override Dimension BoundaryDimension { get; } Property Value Type Description Dimension The dimension of the boundary of the class implementing this interface, whether or not this object is the empty point. Returns Dimension.False if the boundary is the empty point. Overrides Geometry.BoundaryDimension | Edit this page View Source Coordinate Returns a vertex of this Geometry (usually, but not necessarily, the first one). Declaration public override Coordinate Coordinate { get; } Property Value Type Description Coordinate a Coordinate which is a vertex of this Geometry. Overrides Geometry.Coordinate Remarks The returned coordinate should not be assumed to be an actual Coordinate object used in the internal representation. | Edit this page View Source Coordinates Returns an array containing the values of all the vertices for this geometry. Declaration public override Coordinate[] Coordinates { get; } Property Value Type Description Coordinate[] The vertices of this Geometry. Overrides Geometry.Coordinates Remarks If the geometry is a composite, the array will contain all the vertices for the components, in the order in which the components occur in the geometry. In general, the array cannot be assumed to be the actual internal storage for the vertices. Thus modifying the array may not modify the geometry itself. Use the SetOrdinate(int, int, double) method (possibly on the components) to modify the underlying data. If the coordinates are modified, GeometryChanged() must be called afterwards. See Also GeometryChanged() SetOrdinate(int, int, double) SetOrdinate(int, Ordinate, double) | Edit this page View Source Dimension Returns the dimension of this geometry. Declaration public override Dimension Dimension { get; } Property Value Type Description Dimension The topological dimensions of this geometry Overrides Geometry.Dimension Remarks The dimension of a geometry is is the topological dimension of its embedding in the 2-D Euclidean plane. In the NTS spatial model, dimension values are in the set {0,1,2}. Note that this is a different concept to the dimension of the vertex Coordinates. The geometry dimension can never be greater than the coordinate dimension. For example, a 0-dimensional geometry (e.g. a Point) may have a coordinate dimension of 3 (X,Y,Z). | Edit this page View Source ExteriorRing Declaration public LineString ExteriorRing { get; } Property Value Type Description LineString | Edit this page View Source GeometryType Returns the name of this object's interface. Declaration public override string GeometryType { get; } Property Value Type Description string \"Polygon\" Overrides Geometry.GeometryType | Edit this page View Source Holes Declaration public LinearRing[] Holes { get; } Property Value Type Description LinearRing[] | Edit this page View Source InteriorRings Declaration public LineString[] InteriorRings { get; } Property Value Type Description LineString[] | Edit this page View Source IsEmpty Declaration public override bool IsEmpty { get; } Property Value Type Description bool Overrides Geometry.IsEmpty | Edit this page View Source IsRectangle Tests whether this is a rectangular Polygon. Declaration public override bool IsRectangle { get; } Property Value Type Description bool true if the geometry is a rectangle. Overrides Geometry.IsRectangle | Edit this page View Source Length Returns the perimeter of this Polygon. Declaration public override double Length { get; } Property Value Type Description double Overrides Geometry.Length | Edit this page View Source NumInteriorRings Declaration public int NumInteriorRings { get; } Property Value Type Description int | Edit this page View Source NumPoints Returns the count of this Geometrys vertices. The Geometry s contained by composite Geometrys must be Geometry's; that is, they must implement NumPoints. Declaration public override int NumPoints { get; } Property Value Type Description int The number of vertices in this Geometry. Overrides Geometry.NumPoints | Edit this page View Source OgcGeometryType Gets the OGC geometry type Declaration public override OgcGeometryType OgcGeometryType { get; } Property Value Type Description OgcGeometryType Overrides Geometry.OgcGeometryType | Edit this page View Source Shell Declaration public LinearRing Shell { get; } Property Value Type Description LinearRing | Edit this page View Source SortIndex Gets a value to sort the geometry Declaration protected override Geometry.SortIndexValue SortIndex { get; } Property Value Type Description Geometry.SortIndexValue Overrides Geometry.SortIndex Remarks NOTE: For JTS v1.17 this property's getter has been renamed to getTypeCode(). In order not to break binary compatibility we did not follow. Methods | Edit this page View Source Apply(ICoordinateFilter) Performs an operation with or on this Geometry's coordinates. Declaration public override void Apply(ICoordinateFilter filter) Parameters Type Name Description ICoordinateFilter filter The filter to apply to this Geometry's coordinates Overrides Geometry.Apply(ICoordinateFilter) Remarks If this method modifies any coordinate values, GeometryChanged() must be called to update the geometry state. Note that you cannot use this method to modify this Geometry if its underlying CoordinateSequence's #get method returns a copy of the Coordinate, rather than the actual Coordinate stored (if it even stores Coordinate objects at all). | Edit this page View Source Apply(ICoordinateSequenceFilter) Performs an operation on the coordinates in this Geometry's CoordinateSequences. Declaration public override void Apply(ICoordinateSequenceFilter filter) Parameters Type Name Description ICoordinateSequenceFilter filter The filter to apply Overrides Geometry.Apply(ICoordinateSequenceFilter) Remarks If the filter reports that a coordinate value has been changed, GeometryChanged() will be called automatically. | Edit this page View Source Apply(IEntireCoordinateSequenceFilter) Performs an operation on this Geometry's CoordinateSequences. Declaration public override void Apply(IEntireCoordinateSequenceFilter filter) Parameters Type Name Description IEntireCoordinateSequenceFilter filter The filter to apply Overrides Geometry.Apply(IEntireCoordinateSequenceFilter) Remarks If the filter reports that a coordinate value has been changed, GeometryChanged() will be called automatically. | Edit this page View Source Apply(IGeometryComponentFilter) Performs an operation with or on this Geometry and its component Geometry's. Only GeometryCollections and Polygons have component Geometry's; for Polygons they are the LinearRings of the shell and holes. Declaration public override void Apply(IGeometryComponentFilter filter) Parameters Type Name Description IGeometryComponentFilter filter The filter to apply to this Geometry. Overrides Geometry.Apply(IGeometryComponentFilter) | Edit this page View Source Apply(IGeometryFilter) Performs an operation with or on this Geometry and its subelement Geometrys (if any). Only GeometryCollections and subclasses have subelement Geometry's. Declaration public override void Apply(IGeometryFilter filter) Parameters Type Name Description IGeometryFilter filter The filter to apply to this Geometry (and its children, if it is a GeometryCollection). Overrides Geometry.Apply(IGeometryFilter) | Edit this page View Source CompareToSameClass(object) Declaration protected override int CompareToSameClass(object o) Parameters Type Name Description object o Returns Type Description int Overrides Geometry.CompareToSameClass(object) | Edit this page View Source CompareToSameClass(object, IComparer<CoordinateSequence>) Declaration protected override int CompareToSameClass(object other, IComparer<CoordinateSequence> comparer) Parameters Type Name Description object other IComparer<CoordinateSequence> comparer Returns Type Description int Overrides Geometry.CompareToSameClass(object, IComparer<CoordinateSequence>) | Edit this page View Source ComputeEnvelopeInternal() Declaration protected override Envelope ComputeEnvelopeInternal() Returns Type Description Envelope Overrides Geometry.ComputeEnvelopeInternal() | Edit this page View Source ConvexHull() Declaration public override Geometry ConvexHull() Returns Type Description Geometry Overrides Geometry.ConvexHull() | Edit this page View Source CopyInternal() An internal method to copy subclass-specific geometry data. Declaration protected override Geometry CopyInternal() Returns Type Description Geometry A copy of the target geometry object. Overrides Geometry.CopyInternal() | Edit this page View Source EqualsExact(Geometry, double) Declaration public override bool EqualsExact(Geometry other, double tolerance) Parameters Type Name Description Geometry other double tolerance Returns Type Description bool Overrides Geometry.EqualsExact(Geometry, double) | Edit this page View Source GetInteriorRingN(int) Declaration public LineString GetInteriorRingN(int n) Parameters Type Name Description int n Returns Type Description LineString | Edit this page View Source GetOrdinates(Ordinate) Gets an array of double ordinate values Declaration public override double[] GetOrdinates(Ordinate ordinate) Parameters Type Name Description Ordinate ordinate The ordinate index Returns Type Description double[] An array of ordinate values Overrides Geometry.GetOrdinates(Ordinate) | Edit this page View Source Normalize() Declaration public override void Normalize() Overrides Geometry.Normalize() | Edit this page View Source Reverse() Computes a new geometry which has all component coordinate sequences in reverse order (opposite orientation) to this one. Declaration [Obsolete(\"Call Geometry.Reverse()\")] public override Geometry Reverse() Returns Type Description Geometry A reversed geometry Overrides Geometry.Reverse() Remarks Don't override this function, implement ReverseInternal(). | Edit this page View Source ReverseInternal() The actual implementation of the Reverse() function for POLYGONs Declaration protected override Geometry ReverseInternal() Returns Type Description Geometry A reversed geometry Overrides Geometry.ReverseInternal() Implements IComparable IComparable<T> IPolygonal Extension Methods PolygonalExtracter.GetPolygonals<TCollection>(Geometry) PolygonalExtracter.GetPolygonals<TCollection>(Geometry, TCollection)"
  },
  "api/NetTopologySuite.Geometries.Position.html": {
    "href": "api/NetTopologySuite.Geometries.Position.html",
    "title": "Struct Position | NetTopologySuite",
    "summary": "Struct Position Indicates the position of a location relative to a node or edge component of a planar topological structure. Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public readonly struct Position Fields | Edit this page View Source Left Specifies that a location is to the left of a component Declaration public static Position Left Field Value Type Description Position 1 | Edit this page View Source On Specifies that a location is on a component Declaration public static Position On Field Value Type Description Position 0 | Edit this page View Source Parallel Specifies that a location is is parallel to x-axis of a component Declaration public static Position Parallel Field Value Type Description Position -1 | Edit this page View Source Right Specifies that a location is to the right of a component Declaration public static Position Right Field Value Type Description Position 2 Properties | Edit this page View Source Opposite Returns Left if the position is Right, Right if the position is Left, or the position otherwise. Declaration public Position Opposite { get; } Property Value Type Description Position Methods | Edit this page View Source Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() Operators | Edit this page View Source operator ==(Position, Position) Equality comparer for Position indices Declaration public static bool operator ==(Position lhs, Position rhs) Parameters Type Name Description Position lhs The position index on the left-hand-side Position rhs The position index on the right-hand-side Returns Type Description bool true if both indices are equal. | Edit this page View Source implicit operator int(Position) Implicit conversion operator for Position to int conversion. Declaration public static implicit operator int(Position pos) Parameters Type Name Description Position pos The position index Returns Type Description int | Edit this page View Source operator !=(Position, Position) Inequality comparer for Position indices Declaration public static bool operator !=(Position lhs, Position rhs) Parameters Type Name Description Position lhs The position index on the left-hand-side Position rhs The position index on the right-hand-side Returns Type Description bool true if both indices are not equal."
  },
  "api/NetTopologySuite.Geometries.PrecisionModel.html": {
    "href": "api/NetTopologySuite.Geometries.PrecisionModel.html",
    "title": "Class PrecisionModel | NetTopologySuite",
    "summary": "Class PrecisionModel Specifies the precision model of the Coordinates in a Geometry. In other words, specifies the grid of allowable points for a Geometry. A precision model may befloating (Floating or FloatingSingle), in which case normal floating-point value semantics apply. Inheritance object PrecisionModel Implements IComparable IComparable<PrecisionModel> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax [Serializable] public class PrecisionModel : IComparable, IComparable<PrecisionModel> Remarks For a Fixed precision model the MakePrecise(Coordinate) method allows rounding a coordinate to a \"precise\" value; that is, one whose precision is known exactly. Coordinates are assumed to be precise in geometries. That is, the coordinates are assumed to be rounded to the precision model given for the geometry. All internal operations assume that coordinates are rounded to the precision model. Constructive methods (such as bool operations) always round computed coordinates to the appropriate precision model. Three types of precision model are supported: Floating Represents full double precision floating point. This is the default precision model used in NTS FloatingSingle Represents single precision floating point Fixed Represents a model with a fixed number of decimal places. A Fixed Precision Model is specified by a scale factor. The scale factor specifies the size of the grid which numbers are rounded to. Input coordinates are mapped to fixed coordinates according to the following equations: jtsPt.X = Math.Round( inputPt.X * scale, MidPointRounding.AwayFromZero ) / scale ) jtsPt.Y = Math.Round( inputPt.Y * scale, MidPointRounding.AwayFromZero ) / scale ) For example, to specify 3 decimal places of precision, use a scale factor of 1000. To specify -3 decimal places of precision (i.e. rounding to the nearest 1000), use a scale factor of 0.001. It is also supported to specify a precise grid size by providing it as a negative scale factor. This allows setting a precise grid size rather than using a fractional scale, which provides more accurate and robust rounding. For example, to specify rounding to the nearest 1000 use a scale factor of -1000. Coordinates are represented internally as Java double-precision values. .NET uses the IEEE-394 floating point standard, which provides 53 bits of precision. (Thus the maximum precisely representable integer is 9,007,199,254,740,992 - or almost 16 decimal digits of precision). Constructors | Edit this page View Source PrecisionModel() Creates a PrecisionModel with a default precision of Floating. Declaration public PrecisionModel() | Edit this page View Source PrecisionModel(PrecisionModel) Copy constructor to create a new PrecisionModel from an existing one. Declaration public PrecisionModel(PrecisionModel pm) Parameters Type Name Description PrecisionModel pm | Edit this page View Source PrecisionModel(PrecisionModels) Creates a PrecisionModel that specifies an explicit precision model type. If the model type is Fixed the scale factor will default to 1. Declaration public PrecisionModel(PrecisionModels modelType) Parameters Type Name Description PrecisionModels modelType The type of the precision model. | Edit this page View Source PrecisionModel(double) Creates a PrecisionModel that specifies Fixed precision. Fixed-precision coordinates are represented as precise internal coordinates, which are rounded to the grid defined by the scale factor. The provided scale may be negative, to specify an exact grid size. The scale is then computed as the reciprocal. Declaration public PrecisionModel(double scale) Parameters Type Name Description double scale Amount by which to multiply a coordinate, to obtain a precise coordinate. Must be non-zero Fields | Edit this page View Source MaximumPreciseValue The maximum precise value representable in a double. Since IEE754 double-precision numbers allow 53 bits of mantissa, the value is equal to 2^53 - 1. This provides almost 16 decimal digits of precision. Declaration public const double MaximumPreciseValue = 9007199254740992 Field Value Type Description double Properties | Edit this page View Source Fixed Gets a value indicating a precision model with a scale of 1. Declaration public static Lazy<PrecisionModel> Fixed { get; } Property Value Type Description Lazy<PrecisionModel> A fixed precision model | Edit this page View Source Floating Gets a value indicating a precision model with double precision. Declaration public static Lazy<PrecisionModel> Floating { get; } Property Value Type Description Lazy<PrecisionModel> A double precision model | Edit this page View Source FloatingSingle Gets a value indicating a precision model with single precision. Declaration public static Lazy<PrecisionModel> FloatingSingle { get; } Property Value Type Description Lazy<PrecisionModel> A single precision model | Edit this page View Source GridSize Computes the grid size for a fixed precision model. This is equal to the reciprocal of the scale factor. If the grid size has been set explicity (via a negative scale factor) it will be returned. Declaration public double GridSize { get; } Property Value Type Description double The grid size at a fixed precision scale. | Edit this page View Source IsFloating Tests whether the precision model supports floating point. Declaration public bool IsFloating { get; } Property Value Type Description bool true if the precision model supports floating point. | Edit this page View Source MaximumSignificantDigits Returns the maximum number of significant digits provided by this precision model. Intended for use by routines which need to print out precise values. Declaration public int MaximumSignificantDigits { get; } Property Value Type Description int The maximum number of decimal places provided by this precision model. | Edit this page View Source PrecisionModelType Gets the type of this PrecisionModel. Declaration public PrecisionModels PrecisionModelType { get; } Property Value Type Description PrecisionModels | Edit this page View Source Scale Returns the scale factor used to specify a fixed precision model. Declaration public double Scale { get; set; } Property Value Type Description double The scale factor for the fixed precision model Remarks The number of decimal places of precision is equal to the base-10 logarithm of the scale factor. Non-integral and negative scale factors are supported. Negative scale factors indicate that the places of precision is to the left of the decimal point. Methods | Edit this page View Source CompareTo(PrecisionModel) Declaration public int CompareTo(PrecisionModel other) Parameters Type Name Description PrecisionModel other Returns Type Description int | Edit this page View Source CompareTo(object) Compares this PrecisionModel object with the specified object for order. A PrecisionModel is greater than another if it provides greater precision. The comparison is based on the value returned by the {getMaximumSignificantDigits) method. This comparison is not strictly accurate when comparing floating precision models to fixed models; however, it is correct when both models are either floating or fixed. Declaration public int CompareTo(object o) Parameters Type Name Description object o The PrecisionModel with which this PrecisionModel is being compared. Returns Type Description int A negative integer, zero, or a positive integer as this PrecisionModel is less than, equal to, or greater than the specified PrecisionModel. | Edit this page View Source Equals(PrecisionModel) Declaration public bool Equals(PrecisionModel otherPrecisionModel) Parameters Type Name Description PrecisionModel otherPrecisionModel Returns Type Description bool | Edit this page View Source Equals(object) Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides object.Equals(object) | Edit this page View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() | Edit this page View Source MakePrecise(Coordinate) Rounds a Coordinate to the PrecisionModel grid. Declaration public void MakePrecise(Coordinate coord) Parameters Type Name Description Coordinate coord | Edit this page View Source MakePrecise(double) Rounds a numeric value to the PrecisionModel grid. Symmetric Arithmetic Rounding is used, to provide uniform rounding behaviour no matter where the number is on the number line. Declaration public double MakePrecise(double val) Parameters Type Name Description double val Returns Type Description double Remarks This method has no effect on NaN values | Edit this page View Source MostPrecise(PrecisionModel, PrecisionModel) Determines which of two PrecisionModels is the most precise Declaration public static PrecisionModel MostPrecise(PrecisionModel pm1, PrecisionModel pm2) Parameters Type Name Description PrecisionModel pm1 A precision model PrecisionModel pm2 A precision model Returns Type Description PrecisionModel The PrecisionModel which is most precise | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Operators | Edit this page View Source operator ==(PrecisionModel, PrecisionModel) Declaration public static bool operator ==(PrecisionModel obj1, PrecisionModel obj2) Parameters Type Name Description PrecisionModel obj1 PrecisionModel obj2 Returns Type Description bool | Edit this page View Source operator !=(PrecisionModel, PrecisionModel) Declaration public static bool operator !=(PrecisionModel obj1, PrecisionModel obj2) Parameters Type Name Description PrecisionModel obj1 PrecisionModel obj2 Returns Type Description bool Implements IComparable IComparable<T>"
  },
  "api/NetTopologySuite.Geometries.PrecisionModels.html": {
    "href": "api/NetTopologySuite.Geometries.PrecisionModels.html",
    "title": "Enum PrecisionModels | NetTopologySuite",
    "summary": "Enum PrecisionModels Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public enum PrecisionModels Fields Name Description Fixed Fixed Precision indicates that coordinates have a fixed number of decimal places. The number of decimal places is determined by the log10 of the scale factor. Floating Floating precision corresponds to the standard double-precision floating-point representation, which is based on the IEEE-754 standard FloatingSingle Floating single precision corresponds to the standard single-precision floating-point representation, which is based on the IEEE-754 standard"
  },
  "api/NetTopologySuite.Geometries.Prepared.BasicPreparedGeometry.html": {
    "href": "api/NetTopologySuite.Geometries.Prepared.BasicPreparedGeometry.html",
    "title": "Class BasicPreparedGeometry | NetTopologySuite",
    "summary": "Class BasicPreparedGeometry A base class for IPreparedGeometry subclasses. Inheritance object BasicPreparedGeometry PreparedLineString PreparedPoint PreparedPolygon Implements IPreparedGeometry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries.Prepared Assembly: NetTopologySuite.dll Syntax public class BasicPreparedGeometry : IPreparedGeometry Remarks Contains default implementations for methods, which simply delegate to the equivalent Geometry methods. This class may be used as a \"no-op\" class for Geometry types which do not have a corresponding IPreparedGeometry implementation. Constructors | Edit this page View Source BasicPreparedGeometry(Geometry) Declaration public BasicPreparedGeometry(Geometry geom) Parameters Type Name Description Geometry geom Properties | Edit this page View Source Geometry Gets the original Geometry which has been prepared. Declaration public Geometry Geometry { get; } Property Value Type Description Geometry | Edit this page View Source RepresentativePoints Gets the list of representative points for this geometry. One vertex is included for every component of the geometry (i.e. including one for every ring of polygonal geometries). Do not modify the returned list! Declaration public IList<Coordinate> RepresentativePoints { get; } Property Value Type Description IList<Coordinate> Methods | Edit this page View Source Contains(Geometry) Tests whether the base Geometry contains a given geometry. Declaration public virtual bool Contains(Geometry g) Parameters Type Name Description Geometry g The Geometry to test Returns Type Description bool true if this Geometry contains the given Geometry Remarks Default implementation. | Edit this page View Source ContainsProperly(Geometry) Tests whether the base Geometry properly contains a given geometry. The ContainsProperly predicate has the following equivalent definitions: In other words, if the test geometry has any interaction with the boundary of the target geometry the result of ContainsProperly is false. This is different semantics to the Contains(Geometry) predicate, in which test geometries can intersect the target's boundary and still be contained. The advantage of using this predicate is that it can be computed efficiently, since it avoids the need to compute the full topological relationship of the input boundaries in cases where they intersect. An example use case is computing the intersections of a set of geometries with a large polygonal geometry. Since intersection is a fairly slow operation, it can be more efficient to use ContainsProperly(Geometry) to filter out test geometries which lie wholly inside the area. In these cases the intersection is known a priori to be simply the original test geometry. Declaration public virtual bool ContainsProperly(Geometry g) Parameters Type Name Description Geometry g The geometry to test Returns Type Description bool true if this geometry properly contains the given geometry Remarks Default implementation. See Also Contains(Geometry) | Edit this page View Source CoveredBy(Geometry) Tests whether the base Geometry is covered by a given geometry. Declaration public virtual bool CoveredBy(Geometry g) Parameters Type Name Description Geometry g The geometry to test Returns Type Description bool true if this geometry is covered by the given geometry Remarks Default implementation. | Edit this page View Source Covers(Geometry) Tests whether the base Geometry covers a given geometry. Declaration public virtual bool Covers(Geometry g) Parameters Type Name Description Geometry g The geometry to test Returns Type Description bool true if this geometry covers the given geometry Remarks Default implementation. | Edit this page View Source Crosses(Geometry) Tests whether the base Geometry crosses a given geometry. Declaration public virtual bool Crosses(Geometry g) Parameters Type Name Description Geometry g The geometry to test Returns Type Description bool true if this geometry crosses the given geometry Remarks Default implementation. | Edit this page View Source Disjoint(Geometry) Tests whether the base Geometry is disjoint from given geometry. Declaration public bool Disjoint(Geometry g) Parameters Type Name Description Geometry g The geometry to test Returns Type Description bool true if this geometry is disjoint from the given geometry Remarks Standard implementation for all geometries. | Edit this page View Source EnvelopeCovers(Geometry) Determines whether the envelope of this geometry covers the Geometry g. Declaration protected bool EnvelopeCovers(Geometry g) Parameters Type Name Description Geometry g A geometry Returns Type Description bool true if g is contained in this envelope | Edit this page View Source EnvelopesIntersect(Geometry) Determines whether a Geometry g interacts with this geometry by testing the geometry envelopes. Declaration protected bool EnvelopesIntersect(Geometry g) Parameters Type Name Description Geometry g A geometry Returns Type Description bool true if the envelopes intersect | Edit this page View Source Intersects(Geometry) Tests whether the base Geometry intersects a given geometry. Declaration public virtual bool Intersects(Geometry g) Parameters Type Name Description Geometry g The geometry to test Returns Type Description bool true if this geometry intersects the given geometry Remarks Default implementation. | Edit this page View Source IsAnyTargetComponentInTest(Geometry) Tests whether any representative of the target geometry intersects the test geometry. This is useful in A/A, A/L, A/P, L/P, and P/P cases. Declaration public bool IsAnyTargetComponentInTest(Geometry testGeom) Parameters Type Name Description Geometry testGeom The test geometry Returns Type Description bool true if any component intersects the areal test geometry | Edit this page View Source Overlaps(Geometry) Tests whether the base Geometry overlaps a given geometry. Declaration public virtual bool Overlaps(Geometry g) Parameters Type Name Description Geometry g The geometry to test Returns Type Description bool true if this geometry overlaps the given geometry Remarks Default implementation. | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() | Edit this page View Source Touches(Geometry) Tests whether the base Geometry touches a given geometry. Declaration public virtual bool Touches(Geometry g) Parameters Type Name Description Geometry g The geometry to test Returns Type Description bool true if this geometry touches the given geometry Remarks Default implementation. | Edit this page View Source Within(Geometry) Tests whether the base Geometry is within a given geometry. Declaration public virtual bool Within(Geometry g) Parameters Type Name Description Geometry g The geometry to test Returns Type Description bool true if this geometry is within the given geometry Remarks Default implementation. Implements IPreparedGeometry"
  },
  "api/NetTopologySuite.Geometries.Prepared.IPreparedGeometry.html": {
    "href": "api/NetTopologySuite.Geometries.Prepared.IPreparedGeometry.html",
    "title": "Interface IPreparedGeometry | NetTopologySuite",
    "summary": "Interface IPreparedGeometry An interface for classes which prepare Geometrys in order to optimize the performance of repeated calls to specific geometric operations. Namespace: NetTopologySuite.Geometries.Prepared Assembly: NetTopologySuite.dll Syntax public interface IPreparedGeometry Remarks A given implementation may provide optimized implementations for only some of the specified methods, and delegate the remaining methods to the original Geometry operations. An implementation may also only optimize certain situations, and delegate others. See the implementing classes for documentation about which methods and situations they optimize. Subclasses are intended to be thread-safe, to allow IPreparedGeometry to be used in a multi-threaded context (which allows extracting maximum benefit from the prepared state). Properties | Edit this page View Source Geometry Gets the original Geometry which has been prepared. Declaration Geometry Geometry { get; } Property Value Type Description Geometry Methods | Edit this page View Source Contains(Geometry) Tests whether the base Geometry contains a given geometry. Declaration bool Contains(Geometry geom) Parameters Type Name Description Geometry geom The Geometry to test Returns Type Description bool true if this Geometry contains the given Geometry | Edit this page View Source ContainsProperly(Geometry) Tests whether the base Geometry contains a given geometry. Declaration bool ContainsProperly(Geometry geom) Parameters Type Name Description Geometry geom The geometry to test Returns Type Description bool true if this geometry properly contains the given geometry Remarks The ContainsProperly predicate has the following equivalent definitions: Every point of the other geometry is a point of this geometry's interior. The DE-9IM Intersection Matrix for the two geometries matches >[T**FF*FF*] The advantage to using this predicate is that it can be computed efficiently, with no need to compute topology at individual points. An example use case for this predicate is computing the intersections of a set of geometries with a large polygonal geometry. Since intersection is a fairly slow operation, it can be more efficient to use containsProperly to filter out test geometries which lie wholly inside the area. In these cases the intersection known a priori to be simply the original test geometry. | Edit this page View Source CoveredBy(Geometry) Tests whether the base Geometry is covered by a given geometry. Declaration bool CoveredBy(Geometry geom) Parameters Type Name Description Geometry geom The geometry to test Returns Type Description bool true if this geometry is covered by the given geometry | Edit this page View Source Covers(Geometry) Tests whether the base Geometry covers a given geometry. Declaration bool Covers(Geometry geom) Parameters Type Name Description Geometry geom The geometry to test Returns Type Description bool true if this geometry covers the given geometry | Edit this page View Source Crosses(Geometry) Tests whether the base Geometry crosses a given geometry. Declaration bool Crosses(Geometry geom) Parameters Type Name Description Geometry geom The geometry to test Returns Type Description bool true if this geometry crosses the given geometry | Edit this page View Source Disjoint(Geometry) Tests whether the base Geometry is disjoint from given geometry. Declaration bool Disjoint(Geometry geom) Parameters Type Name Description Geometry geom The geometry to test Returns Type Description bool true if this geometry is disjoint from the given geometry Remarks This method supports GeometryCollections as input | Edit this page View Source Intersects(Geometry) Tests whether the base Geometry intersects a given geometry. Declaration bool Intersects(Geometry geom) Parameters Type Name Description Geometry geom The geometry to test Returns Type Description bool true if this geometry intersects the given geometry Remarks This method supports GeometryCollections as input | Edit this page View Source Overlaps(Geometry) Tests whether the base Geometry overlaps a given geometry. Declaration bool Overlaps(Geometry geom) Parameters Type Name Description Geometry geom The geometry to test Returns Type Description bool true if this geometry overlaps the given geometry | Edit this page View Source Touches(Geometry) Tests whether the base Geometry touches a given geometry. Declaration bool Touches(Geometry geom) Parameters Type Name Description Geometry geom The geometry to test Returns Type Description bool true if this geometry touches the given geometry | Edit this page View Source Within(Geometry) Tests whether the base Geometry is within a given geometry. Declaration bool Within(Geometry geom) Parameters Type Name Description Geometry geom The geometry to test Returns Type Description bool true if this geometry is within the given geometry"
  },
  "api/NetTopologySuite.Geometries.Prepared.PreparedGeometryFactory.html": {
    "href": "api/NetTopologySuite.Geometries.Prepared.PreparedGeometryFactory.html",
    "title": "Class PreparedGeometryFactory | NetTopologySuite",
    "summary": "Class PreparedGeometryFactory A factory for creating IPreparedGeometrys. It chooses an appropriate implementation of PreparedGeometry based on the geometric type of the input geometry. In the future, the factory may accept hints that indicate special optimizations which can be performed. Instances of this class are thread-safe. Inheritance object PreparedGeometryFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Prepared Assembly: NetTopologySuite.dll Syntax public class PreparedGeometryFactory Methods | Edit this page View Source Create(Geometry) Creates a new IPreparedGeometry appropriate for the argument Geometry. Declaration public IPreparedGeometry Create(Geometry geom) Parameters Type Name Description Geometry geom The geometry to prepare Returns Type Description IPreparedGeometry the prepared geometry | Edit this page View Source Prepare(Geometry) Creates a new IPreparedGeometry appropriate for the argument Geometry. Declaration public static IPreparedGeometry Prepare(Geometry geom) Parameters Type Name Description Geometry geom The geometry to prepare Returns Type Description IPreparedGeometry the prepared geometry"
  },
  "api/NetTopologySuite.Geometries.Prepared.PreparedLineString.html": {
    "href": "api/NetTopologySuite.Geometries.Prepared.PreparedLineString.html",
    "title": "Class PreparedLineString | NetTopologySuite",
    "summary": "Class PreparedLineString A prepared version for ILineal geometries. Instances of this class are thread-safe . Inheritance object BasicPreparedGeometry PreparedLineString Implements IPreparedGeometry Inherited Members BasicPreparedGeometry.Geometry BasicPreparedGeometry.RepresentativePoints BasicPreparedGeometry.IsAnyTargetComponentInTest(Geometry) BasicPreparedGeometry.EnvelopesIntersect(Geometry) BasicPreparedGeometry.EnvelopeCovers(Geometry) BasicPreparedGeometry.Contains(Geometry) BasicPreparedGeometry.ContainsProperly(Geometry) BasicPreparedGeometry.CoveredBy(Geometry) BasicPreparedGeometry.Covers(Geometry) BasicPreparedGeometry.Crosses(Geometry) BasicPreparedGeometry.Disjoint(Geometry) BasicPreparedGeometry.Overlaps(Geometry) BasicPreparedGeometry.Touches(Geometry) BasicPreparedGeometry.Within(Geometry) BasicPreparedGeometry.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries.Prepared Assembly: NetTopologySuite.dll Syntax public class PreparedLineString : BasicPreparedGeometry, IPreparedGeometry Constructors | Edit this page View Source PreparedLineString(ILineal) Declaration public PreparedLineString(ILineal line) Parameters Type Name Description ILineal line Properties | Edit this page View Source IntersectionFinder Declaration public FastSegmentSetIntersectionFinder IntersectionFinder { get; } Property Value Type Description FastSegmentSetIntersectionFinder Methods | Edit this page View Source Intersects(Geometry) Tests whether the base Geometry intersects a given geometry. Declaration public override bool Intersects(Geometry g) Parameters Type Name Description Geometry g The geometry to test Returns Type Description bool true if this geometry intersects the given geometry Overrides BasicPreparedGeometry.Intersects(Geometry) Remarks Default implementation. Implements IPreparedGeometry"
  },
  "api/NetTopologySuite.Geometries.Prepared.PreparedPoint.html": {
    "href": "api/NetTopologySuite.Geometries.Prepared.PreparedPoint.html",
    "title": "Class PreparedPoint | NetTopologySuite",
    "summary": "Class PreparedPoint A prepared version for IPuntal geometries. Instances of this class are thread-safe. Inheritance object BasicPreparedGeometry PreparedPoint Implements IPreparedGeometry Inherited Members BasicPreparedGeometry.Geometry BasicPreparedGeometry.RepresentativePoints BasicPreparedGeometry.IsAnyTargetComponentInTest(Geometry) BasicPreparedGeometry.EnvelopesIntersect(Geometry) BasicPreparedGeometry.EnvelopeCovers(Geometry) BasicPreparedGeometry.Contains(Geometry) BasicPreparedGeometry.ContainsProperly(Geometry) BasicPreparedGeometry.CoveredBy(Geometry) BasicPreparedGeometry.Covers(Geometry) BasicPreparedGeometry.Crosses(Geometry) BasicPreparedGeometry.Disjoint(Geometry) BasicPreparedGeometry.Overlaps(Geometry) BasicPreparedGeometry.Touches(Geometry) BasicPreparedGeometry.Within(Geometry) BasicPreparedGeometry.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries.Prepared Assembly: NetTopologySuite.dll Syntax public class PreparedPoint : BasicPreparedGeometry, IPreparedGeometry Constructors | Edit this page View Source PreparedPoint(IPuntal) Declaration public PreparedPoint(IPuntal point) Parameters Type Name Description IPuntal point Methods | Edit this page View Source Intersects(Geometry) Tests whether this point intersects a Geometry. Declaration public override bool Intersects(Geometry g) Parameters Type Name Description Geometry g Returns Type Description bool Overrides BasicPreparedGeometry.Intersects(Geometry) Remarks The optimization here is that computing topology for the test geometry is avoided. This can be significant for large geometries. Implements IPreparedGeometry"
  },
  "api/NetTopologySuite.Geometries.Prepared.PreparedPolygon.html": {
    "href": "api/NetTopologySuite.Geometries.Prepared.PreparedPolygon.html",
    "title": "Class PreparedPolygon | NetTopologySuite",
    "summary": "Class PreparedPolygon A prepared version for IPolygonal geometries. This class supports both Polygons and MultiPolygons. This class does not support MultiPolygons which are non-valid (e.g. with overlapping elements). Instances of this class are thread-safe and immutable. Inheritance object BasicPreparedGeometry PreparedPolygon Implements IPreparedGeometry Inherited Members BasicPreparedGeometry.Geometry BasicPreparedGeometry.RepresentativePoints BasicPreparedGeometry.IsAnyTargetComponentInTest(Geometry) BasicPreparedGeometry.EnvelopesIntersect(Geometry) BasicPreparedGeometry.EnvelopeCovers(Geometry) BasicPreparedGeometry.CoveredBy(Geometry) BasicPreparedGeometry.Crosses(Geometry) BasicPreparedGeometry.Disjoint(Geometry) BasicPreparedGeometry.Overlaps(Geometry) BasicPreparedGeometry.Touches(Geometry) BasicPreparedGeometry.Within(Geometry) BasicPreparedGeometry.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries.Prepared Assembly: NetTopologySuite.dll Syntax public class PreparedPolygon : BasicPreparedGeometry, IPreparedGeometry Constructors | Edit this page View Source PreparedPolygon(IPolygonal) Declaration public PreparedPolygon(IPolygonal poly) Parameters Type Name Description IPolygonal poly Properties | Edit this page View Source IntersectionFinder Declaration public FastSegmentSetIntersectionFinder IntersectionFinder { get; } Property Value Type Description FastSegmentSetIntersectionFinder | Edit this page View Source PointLocator Declaration public IPointOnGeometryLocator PointLocator { get; } Property Value Type Description IPointOnGeometryLocator Methods | Edit this page View Source Contains(Geometry) Tests whether the base Geometry contains a given geometry. Declaration public override bool Contains(Geometry g) Parameters Type Name Description Geometry g The Geometry to test Returns Type Description bool true if this Geometry contains the given Geometry Overrides BasicPreparedGeometry.Contains(Geometry) Remarks Default implementation. | Edit this page View Source ContainsProperly(Geometry) Tests whether the base Geometry properly contains a given geometry. The ContainsProperly predicate has the following equivalent definitions: In other words, if the test geometry has any interaction with the boundary of the target geometry the result of ContainsProperly is false. This is different semantics to the Contains(Geometry) predicate, in which test geometries can intersect the target's boundary and still be contained. The advantage of using this predicate is that it can be computed efficiently, since it avoids the need to compute the full topological relationship of the input boundaries in cases where they intersect. An example use case is computing the intersections of a set of geometries with a large polygonal geometry. Since intersection is a fairly slow operation, it can be more efficient to use ContainsProperly(Geometry) to filter out test geometries which lie wholly inside the area. In these cases the intersection is known a priori to be simply the original test geometry. Declaration public override bool ContainsProperly(Geometry g) Parameters Type Name Description Geometry g The geometry to test Returns Type Description bool true if this geometry properly contains the given geometry Overrides BasicPreparedGeometry.ContainsProperly(Geometry) Remarks Default implementation. See Also Contains(Geometry) | Edit this page View Source Covers(Geometry) Tests whether the base Geometry covers a given geometry. Declaration public override bool Covers(Geometry g) Parameters Type Name Description Geometry g The geometry to test Returns Type Description bool true if this geometry covers the given geometry Overrides BasicPreparedGeometry.Covers(Geometry) Remarks Default implementation. | Edit this page View Source Intersects(Geometry) Tests whether the base Geometry intersects a given geometry. Declaration public override bool Intersects(Geometry g) Parameters Type Name Description Geometry g The geometry to test Returns Type Description bool true if this geometry intersects the given geometry Overrides BasicPreparedGeometry.Intersects(Geometry) Remarks Default implementation. Implements IPreparedGeometry"
  },
  "api/NetTopologySuite.Geometries.Prepared.html": {
    "href": "api/NetTopologySuite.Geometries.Prepared.html",
    "title": "Namespace NetTopologySuite.Geometries.Prepared | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Geometries.Prepared Classes BasicPreparedGeometry A base class for IPreparedGeometry subclasses. PreparedGeometryFactory A factory for creating IPreparedGeometrys. It chooses an appropriate implementation of PreparedGeometry based on the geometric type of the input geometry. In the future, the factory may accept hints that indicate special optimizations which can be performed. Instances of this class are thread-safe. PreparedLineString A prepared version for ILineal geometries. Instances of this class are thread-safe . PreparedPoint A prepared version for IPuntal geometries. Instances of this class are thread-safe. PreparedPolygon A prepared version for IPolygonal geometries. This class supports both Polygons and MultiPolygons. This class does not support MultiPolygons which are non-valid (e.g. with overlapping elements). Instances of this class are thread-safe and immutable. Interfaces IPreparedGeometry An interface for classes which prepare Geometrys in order to optimize the performance of repeated calls to specific geometric operations."
  },
  "api/NetTopologySuite.Geometries.Quadrant.html": {
    "href": "api/NetTopologySuite.Geometries.Quadrant.html",
    "title": "Struct Quadrant | NetTopologySuite",
    "summary": "Struct Quadrant Quadrant values Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public readonly struct Quadrant Remarks The quadants are numbered as follows: 1 - NW | 0 - NE -------+------- 2 - SW | 3 - SE Constructors | Edit this page View Source Quadrant(Coordinate, Coordinate) Returns the quadrant of a directed line segment from p0 to p1. Declaration public Quadrant(Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p0 Coordinate p1 Exceptions Type Condition ArgumentException if the points are equal | Edit this page View Source Quadrant(double, double) Creates a quadrant of a directed line segment (specified as x and y displacements, which cannot both be 0). Declaration public Quadrant(double dx, double dy) Parameters Type Name Description double dx double dy Exceptions Type Condition ArgumentException If the displacements are both 0 | Edit this page View Source Quadrant(int) Creates a quadrant with t Declaration public Quadrant(int value) Parameters Type Name Description int value Properties | Edit this page View Source IsNorthern Returns true if the given quadrant is 0 or 1. Declaration public bool IsNorthern { get; } Property Value Type Description bool | Edit this page View Source NE North-East Declaration public static Quadrant NE { get; } Property Value Type Description Quadrant | Edit this page View Source NW North-West Declaration public static Quadrant NW { get; } Property Value Type Description Quadrant | Edit this page View Source SE South-East Declaration public static Quadrant SE { get; } Property Value Type Description Quadrant | Edit this page View Source SW South-West Declaration public static Quadrant SW { get; } Property Value Type Description Quadrant | Edit this page View Source Undefined Undefined Declaration public static Quadrant Undefined { get; } Property Value Type Description Quadrant Methods | Edit this page View Source CommonHalfPlane(Quadrant, Quadrant) Returns the right-hand quadrant of the halfplane defined by the two quadrants, or -1 if the quadrants are opposite, or the quadrant if they are identical. Declaration public static Quadrant CommonHalfPlane(Quadrant quad1, Quadrant quad2) Parameters Type Name Description Quadrant quad1 Quadrant quad2 Returns Type Description Quadrant | Edit this page View Source Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() | Edit this page View Source IsInHalfPlane(Quadrant) Returns whether this quadrant lies within the given halfplane (specified by its right-hand quadrant). Declaration public bool IsInHalfPlane(Quadrant halfPlane) Parameters Type Name Description Quadrant halfPlane Returns Type Description bool | Edit this page View Source IsOpposite(Quadrant) Returns true if the quadrants are 1 and 3, or 2 and 4. Declaration public bool IsOpposite(Quadrant quad) Parameters Type Name Description Quadrant quad A quadrant Returns Type Description bool | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() Operators | Edit this page View Source operator ==(Quadrant, Quadrant) Equality operator for quadrants Declaration public static bool operator ==(Quadrant lhs, Quadrant rhs) Parameters Type Name Description Quadrant lhs Quadrant value on the left-hand-side Quadrant rhs Quadrant value on the right-hand-side Returns Type Description bool true if quadrant value of lhs and rhs are equal. | Edit this page View Source operator >(Quadrant, Quadrant) Greater than (>) operator for quadrants Declaration public static bool operator >(Quadrant lhs, Quadrant rhs) Parameters Type Name Description Quadrant lhs Quadrant value on the left-hand-side Quadrant rhs Quadrant value on the right-hand-side Returns Type Description bool true if quadrant value of lhs and rhs are not equal. | Edit this page View Source operator !=(Quadrant, Quadrant) Inequality operator for quadrants Declaration public static bool operator !=(Quadrant lhs, Quadrant rhs) Parameters Type Name Description Quadrant lhs Quadrant value on the left-hand-side Quadrant rhs Quadrant value on the right-hand-side Returns Type Description bool true if quadrant value of lhs and rhs are not equal. | Edit this page View Source operator <(Quadrant, Quadrant) Less than (<) operator for quadrants Declaration public static bool operator <(Quadrant lhs, Quadrant rhs) Parameters Type Name Description Quadrant lhs Quadrant value on the left-hand-side Quadrant rhs Quadrant value on the right-hand-side Returns Type Description bool true if quadrant value of lhs and rhs are not equal."
  },
  "api/NetTopologySuite.Geometries.TopologyException.html": {
    "href": "api/NetTopologySuite.Geometries.TopologyException.html",
    "title": "Class TopologyException | NetTopologySuite",
    "summary": "Class TopologyException Indicates an invalid or inconsistent topological situation encountered during processing Inheritance object Exception ApplicationException TopologyException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public class TopologyException : ApplicationException, ISerializable Constructors | Edit this page View Source TopologyException(string) Declaration public TopologyException(string msg) Parameters Type Name Description string msg | Edit this page View Source TopologyException(string, Coordinate) Declaration public TopologyException(string msg, Coordinate pt) Parameters Type Name Description string msg Coordinate pt Properties | Edit this page View Source Coordinate Declaration public Coordinate Coordinate { get; } Property Value Type Description Coordinate Implements ISerializable"
  },
  "api/NetTopologySuite.Geometries.Triangle.html": {
    "href": "api/NetTopologySuite.Geometries.Triangle.html",
    "title": "Class Triangle | NetTopologySuite",
    "summary": "Class Triangle Represents a planar triangle, and provides methods for calculating various properties of triangles. Inheritance object Triangle Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries Assembly: NetTopologySuite.dll Syntax public class Triangle Constructors | Edit this page View Source Triangle(Coordinate, Coordinate, Coordinate) Creates a new triangle with the given vertices. Declaration public Triangle(Coordinate p0, Coordinate p1, Coordinate p2) Parameters Type Name Description Coordinate p0 A vertex Coordinate p1 A vertex Coordinate p2 A vertex Properties | Edit this page View Source P0 A corner point of the triangle Declaration public Coordinate P0 { get; set; } Property Value Type Description Coordinate | Edit this page View Source P1 A corner point of the triangle Declaration public Coordinate P1 { get; set; } Property Value Type Description Coordinate | Edit this page View Source P2 A corner point of the triangle Declaration public Coordinate P2 { get; set; } Property Value Type Description Coordinate Methods | Edit this page View Source AngleBisector(Coordinate, Coordinate, Coordinate) Computes the point at which the bisector of the angle ABC cuts the segment AC. Declaration public static Coordinate AngleBisector(Coordinate a, Coordinate b, Coordinate c) Parameters Type Name Description Coordinate a A vertex of the triangle Coordinate b A vertex of the triangle Coordinate c A vertex of the triangle Returns Type Description Coordinate The angle bisector cut point | Edit this page View Source Area() Computes the 2D area of this triangle. The area value is always non-negative. Declaration public double Area() Returns Type Description double The area of this triangle See Also SignedArea() | Edit this page View Source Area(Coordinate, Coordinate, Coordinate) Computes the 2D area of a triangle. The area value is always non-negative. Declaration public static double Area(Coordinate a, Coordinate b, Coordinate c) Parameters Type Name Description Coordinate a A vertex of the triangle Coordinate b A vertex of the triangle Coordinate c A vertex of the triangle Returns Type Description double The area of the triangle See Also SignedArea(Coordinate, Coordinate, Coordinate) | Edit this page View Source Area3D() Computes the 3D area of this triangle. The value computed is always non-negative. Declaration public double Area3D() Returns Type Description double The 3D area of this triangle | Edit this page View Source Area3D(Coordinate, Coordinate, Coordinate) Computes the 3D area of a triangle. The value computed is always non-negative. Declaration public static double Area3D(Coordinate a, Coordinate b, Coordinate c) Parameters Type Name Description Coordinate a A vertex of the triangle Coordinate b A vertex of the triangle Coordinate c A vertex of the triangle Returns Type Description double The 3D area of the triangle | Edit this page View Source Centroid() Computes the centroid (centre of mass) of this triangle. This is also the point at which the triangle's three medians intersect (a triangle median is the segment from a vertex of the triangle to the midpoint of the opposite side). The centroid divides each median in a ratio of 2:1. The centroid always lies within the triangle. Declaration public Coordinate Centroid() Returns Type Description Coordinate The centroid of this triangle | Edit this page View Source Centroid(Coordinate, Coordinate, Coordinate) Computes the centroid (centre of mass) of a triangle. Declaration public static Coordinate Centroid(Coordinate a, Coordinate b, Coordinate c) Parameters Type Name Description Coordinate a A vertex of the triangle Coordinate b A vertex of the triangle Coordinate c A vertex of the triangle Returns Type Description Coordinate The centroid of the triangle Remarks This is also the point at which the triangle's three medians intersect (a triangle median is the segment from a vertex of the triangle to the midpoint of the opposite side). The centroid divides each median in a ratio of 2:1. The centroid always lies within the triangle. | Edit this page View Source Circumcentre() Computes the circumcentre of this triangle. The circumcentre is the centre of the circumcircle, the smallest circle which passes through all the triangle vertices. It is also the common intersection point of the perpendicular bisectors of the sides of the triangle, and is the only point which has equal distance to all three vertices of the triangle. The circumcentre does not necessarily lie within the triangle. This method uses an algorithm due to J.R.Shewchuk which uses normalization to the origin to improve the accuracy of computation. (See Lecture Notes on Geometric Robustness, Jonathan Richard Shewchuk, 1999). Declaration public Coordinate Circumcentre() Returns Type Description Coordinate The circumcentre of this triangle | Edit this page View Source Circumcentre(Coordinate, Coordinate, Coordinate) Computes the circumcentre of a triangle. Declaration public static Coordinate Circumcentre(Coordinate a, Coordinate b, Coordinate c) Parameters Type Name Description Coordinate a A vertex of the triangle Coordinate b A vertex of the triangle Coordinate c A vertex of the triangle Returns Type Description Coordinate The circumcentre of the triangle Remarks The circumcentre is the centre of the circumcircle, the smallest circle which encloses the triangle. It is also the common intersection point of the perpendicular bisectors of the sides of the triangle, and is the only point which has equal distance to all three vertices of the triangle. The circumcentre does not necessarily lie within the triangle. For example, the circumcentre of an obtuse isosceles triangle lies outside the triangle. This method uses an algorithm due to J.R.Shewchuk which uses normalization to the origin to improve the accuracy of computation. (See Lecture Notes on Geometric Robustness, Jonathan Richard Shewchuk, 1999). | Edit this page View Source CircumcentreDD(Coordinate, Coordinate, Coordinate) Computes the circumcentre of a triangle. The circumcentre is the centre of the circumcircle, the smallest circle which encloses the triangle.It is also the common intersection point of the perpendicular bisectors of the sides of the triangle, and is the only point which has equal distance to all three vertices of the triangle. The circumcentre does not necessarily lie within the triangle. For example, the circumcentre of an obtuse isosceles triangle lies outside the triangle. This method uses DD extended-precision arithmetic to provide more accurate results than Circumcentre(Coordinate, Coordinate, Coordinate) Declaration public static Coordinate CircumcentreDD(Coordinate a, Coordinate b, Coordinate c) Parameters Type Name Description Coordinate a A vertex of the triangle Coordinate b A vertex of the triangle Coordinate c A vertex of the triangle Returns Type Description Coordinate The circumcentre of the triangle | Edit this page View Source Circumradius() Computes the radius of the circumcircle of a triangle. Declaration public double Circumradius() Returns Type Description double The triangle circumradius | Edit this page View Source Circumradius(Coordinate, Coordinate, Coordinate) Computes the radius of the circumcircle of a triangle. Formula is as per Declaration public static double Circumradius(Coordinate a, Coordinate b, Coordinate c) Parameters Type Name Description Coordinate a A vertex of the triangle Coordinate b A vertex of the triangle Coordinate c A vertex of the triangle Returns Type Description double The circumradius of the triangle | Edit this page View Source InCentre() Computes the InCentre of this triangle Declaration public Coordinate InCentre() Returns Type Description Coordinate The point which is the InCentre of the triangle. Remarks The InCentre of a triangle is the point which is equidistant from the sides of the triangle. This is also the point at which the bisectors of the angles meet. It is the centre of the triangle's InCircle, which is the unique circle that is tangent to each of the triangle's three sides. | Edit this page View Source InCentre(Coordinate, Coordinate, Coordinate) Computes the incentre of a triangle. Declaration public static Coordinate InCentre(Coordinate a, Coordinate b, Coordinate c) Parameters Type Name Description Coordinate a A vertex of the triangle Coordinate b A vertex of the triangle Coordinate c A vertex of the triangle Returns Type Description Coordinate The point which is the incentre of the triangle Remarks The InCentre of a triangle is the point which is equidistant from the sides of the triangle. It is also the point at which the bisectors of the triangle's angles meet. It is the centre of the triangle's InCircle, which is the unique circle that is tangent to each of the triangle's three sides. | Edit this page View Source InterpolateZ(Coordinate) Computes the Z-value (elevation) of an XY point on a three-dimensional plane defined by this triangle (whose vertices must have Z-values). This triangle must not be degenerate (in other words, the triangle must enclose a non-zero area), and must not be parallel to the Z-axis. This method can be used to interpolate the Z-value of a point inside this triangle (for example, of a TIN facet with elevations on the vertices). Declaration public double InterpolateZ(Coordinate p) Parameters Type Name Description Coordinate p The point to compute the Z-value of Returns Type Description double The computed Z-value (elevation) of the point | Edit this page View Source InterpolateZ(Coordinate, Coordinate, Coordinate, Coordinate) Computes the Z-value (elevation) of an XY point on a three-dimensional plane defined by a triangle whose vertices have Z-values. The defining triangle must not be degenerate (in other words, the triangle must enclose a non-zero area), and must not be parallel to the Z-axis. This method can be used to interpolate the Z-value of a point inside a triangle (for example, of a TIN facet with elevations on the vertices). Declaration public static double InterpolateZ(Coordinate p, Coordinate v0, Coordinate v1, Coordinate v2) Parameters Type Name Description Coordinate p The point to compute the Z-value of Coordinate v0 A vertex of a triangle, with a Z ordinate Coordinate v1 A vertex of a triangle, with a Z ordinate Coordinate v2 A vertex of a triangle, with a Z ordinate Returns Type Description double The computed Z-value (elevation) of the point | Edit this page View Source Intersects(Coordinate, Coordinate, Coordinate, Coordinate) Tests whether a triangle intersects a point. Declaration public static bool Intersects(Coordinate a, Coordinate b, Coordinate c, Coordinate p) Parameters Type Name Description Coordinate a A vertex of the triangle Coordinate b A vertex of the triangle Coordinate c A vertex of the triangle Coordinate p The point to test Returns Type Description bool true if the triangle intersects the point | Edit this page View Source IsAcute() Tests whether this triangle is acute. A triangle is acute if all interior angles are acute. This is a strict test - right triangles will return false A triangle which is not acute is either right or obtuse. Note: this implementation is not robust for angles very close to 90 degrees. Declaration public bool IsAcute() Returns Type Description bool true if this triangle is acute | Edit this page View Source IsAcute(Coordinate, Coordinate, Coordinate) Tests whether a triangle is acute. A triangle is acute if all interior angles are acute. This is a strict test - right triangles will return false A triangle which is not acute is either right or obtuse. Note: this implementation is not robust for angles very close to 90 degrees. Declaration public static bool IsAcute(Coordinate a, Coordinate b, Coordinate c) Parameters Type Name Description Coordinate a A vertex of the triangle Coordinate b A vertex of the triangle Coordinate c A vertex of the triangle Returns Type Description bool True if the triangle is acute. | Edit this page View Source IsCCW() Tests whether this triangle is oriented counter-clockwise. Declaration public bool IsCCW() Returns Type Description bool true if the triangle orientation is counter-clockwise | Edit this page View Source IsCCW(Coordinate, Coordinate, Coordinate) Tests whether a triangle is oriented counter-clockwise. Declaration public static bool IsCCW(Coordinate a, Coordinate b, Coordinate c) Parameters Type Name Description Coordinate a A vertex of the triangle Coordinate b A vertex of the triangle Coordinate c A vertex of the triangle Returns Type Description bool true if the triangle orientation is counter-clockwise | Edit this page View Source Length() Computes the length of the perimeter of this triangle. Declaration public double Length() Returns Type Description double The length of the perimeter | Edit this page View Source Length(Coordinate, Coordinate, Coordinate) Compute the length of the perimeter of a triangle Declaration public static double Length(Coordinate a, Coordinate b, Coordinate c) Parameters Type Name Description Coordinate a A vertex of the triangle Coordinate b A vertex of the triangle Coordinate c A vertex of the triangle Returns Type Description double The length of the perimeter of the triangle | Edit this page View Source LongestSideLength() Computes the length of the longest side of this triangle Declaration public double LongestSideLength() Returns Type Description double The length of the longest side of this triangle | Edit this page View Source LongestSideLength(Coordinate, Coordinate, Coordinate) Computes the length of the longest side of a triangle Declaration public static double LongestSideLength(Coordinate a, Coordinate b, Coordinate c) Parameters Type Name Description Coordinate a A vertex of the triangle Coordinate b A vertex of the triangle Coordinate c A vertex of the triangle Returns Type Description double The length of the longest side of the triangle | Edit this page View Source PerpendicularBisector(Coordinate, Coordinate) Computes the line which is the perpendicular bisector of the Declaration public static HCoordinate PerpendicularBisector(Coordinate a, Coordinate b) Parameters Type Name Description Coordinate a A point Coordinate b Another point Returns Type Description HCoordinate The perpendicular bisector, as an HCoordinate line segment a-b. | Edit this page View Source SignedArea() Computes the signed 2D area of this triangle. The area value is positive if the triangle is oriented CW, and negative if it is oriented CCW. The signed area value can be used to determine point orientation, but the implementation in this method is susceptible to round-off errors. Use Index(Coordinate, Coordinate, Coordinate) for robust orientation calculation. Declaration public double SignedArea() Returns Type Description double The signed 2D area of this triangle See Also Index(Coordinate, Coordinate, Coordinate) | Edit this page View Source SignedArea(Coordinate, Coordinate, Coordinate) Computes the signed 2D area of a triangle. Declaration public static double SignedArea(Coordinate a, Coordinate b, Coordinate c) Parameters Type Name Description Coordinate a A vertex of the triangle Coordinate b A vertex of the triangle Coordinate c A vertex of the triangle Returns Type Description double The area of the triangle Remarks The area value is positive if the triangle is oriented CW, and negative if it is oriented CCW. The signed area value can be used to determine point orientation, but the implementation in this method is susceptible to round-off errors. Use Index(Coordinate, Coordinate, Coordinate) for robust orientation calculation. See Also Area(Coordinate, Coordinate, Coordinate) Index(Coordinate, Coordinate, Coordinate)"
  },
  "api/NetTopologySuite.Geometries.Utilities.AffineTransformation.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.AffineTransformation.html",
    "title": "Class AffineTransformation | NetTopologySuite",
    "summary": "Class AffineTransformation Represents an affine transformation on the 2D Cartesian plane. Inheritance object AffineTransformation Implements ICloneable ICoordinateSequenceFilter IEquatable<AffineTransformation> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public class AffineTransformation : ICloneable, ICoordinateSequenceFilter, IEquatable<AffineTransformation> Remarks It can be used to transform a Coordinate or Geometry. An affine transformation is a mapping of the 2D plane into itself via a series of transformations of the following basic types: reflection (through a line) rotation (around the origin) scaling (relative to the origin) shearing (in both the X and Y directions) translation In general, affine transformations preserve straightness and parallel lines, but do not preserve distance or shape. An affine transformation can be represented by a 3x3 matrix in the following form: T = | m00 m01 m02 | | m10 m11 m12 | | 0 0 1 | A coordinate P = (x, y) can be transformed to a new coordinate P' = (x', y') by representing it as a 3x1 matrix and using matrix multiplication to compute: | x' | = T x | x | | y' | | y | | 1 | | 1 | Transformation Composition Affine transformations can be composed using the Compose(AffineTransformation) method. Composition is computed via multiplication of the transformation matrices, and is defined as: A.compose(B) = TB x TA This produces a transformation whose effect is that of A followed by B. The methods Reflect(double, double, double, double), Rotate(double), Scale(double, double), Shear(double, double), and Translate(double, double) have the effect of composing a transformation of that type with the transformation they are invoked on. The composition of transformations is in general not commutative. Transformation Inversion Affine transformations may be invertible or non-invertible. If a transformation is invertible, then there exists an inverse transformation which when composed produces the identity transformation. The GetInverse() method computes the inverse of a transformation, if one exists. @author Martin Davis Constructors | Edit this page View Source AffineTransformation() Constructs a new identity transformation Declaration public AffineTransformation() | Edit this page View Source AffineTransformation(Coordinate, Coordinate, Coordinate, Coordinate, Coordinate, Coordinate) Constructs a transformation which maps the given source points into the given destination points. Declaration public AffineTransformation(Coordinate src0, Coordinate src1, Coordinate src2, Coordinate dest0, Coordinate dest1, Coordinate dest2) Parameters Type Name Description Coordinate src0 source point 0 Coordinate src1 source point 1 Coordinate src2 source point 2 Coordinate dest0 the mapped point for source point 0 Coordinate dest1 the mapped point for source point 1 Coordinate dest2 the mapped point for source point 2 | Edit this page View Source AffineTransformation(AffineTransformation) Constructs a transformation which is a copy of the given one. Declaration public AffineTransformation(AffineTransformation trans) Parameters Type Name Description AffineTransformation trans the transformation to copy | Edit this page View Source AffineTransformation(double, double, double, double, double, double) Constructs a new transformation whose matrix has the specified values. Declaration public AffineTransformation(double m00, double m01, double m02, double m10, double m11, double m12) Parameters Type Name Description double m00 the entry for the [0, 0] element in the transformation matrix double m01 the entry for the [0, 1] element in the transformation matrix double m02 the entry for the [0, 2] element in the transformation matrix double m10 the entry for the [1, 0] element in the transformation matrix double m11 the entry for the [1, 1] element in the transformation matrix double m12 the entry for the [1, 2] element in the transformation matrix | Edit this page View Source AffineTransformation(double[]) Constructs a new transformation whose matrix has the specified values. Declaration public AffineTransformation(double[] matrix) Parameters Type Name Description double[] matrix an array containing the 6 values { m00, m01, m02, m10, m11, m12 } Exceptions Type Condition NullReferenceException if matrix is null IndexOutOfRangeException if matrix is too small Properties | Edit this page View Source Determinant Computes the determinant of the transformation matrix. Declaration public double Determinant { get; } Property Value Type Description double the determinant of the transformation Remarks The determinant is computed as: | m00 m01 m02 | | m10 m11 m12 | = m00 * m11 - m01 * m10 | 0 0 1 | If the determinant is zero, the transform is singular (not invertible), and operations which attempt to compute an inverse will throw a NoninvertibleTransformationException. | Edit this page View Source Done Reports that this filter should continue to be executed until all coordinates have been transformed. Declaration public bool Done { get; } Property Value Type Description bool false | Edit this page View Source GeometryChanged Reports whether the execution of this filter has modified the coordinates of the geometry. If so, GeometryChanged() will be executed after this filter has finished being executed. Declaration public bool GeometryChanged { get; } Property Value Type Description bool Remarks Most filters can simply return a constant value reflecting whether they are able to change the coordinates. | Edit this page View Source IsIdentity Tests if this transformation is the identity transformation. Declaration public bool IsIdentity { get; } Property Value Type Description bool | Edit this page View Source MatrixEntries Gets an array containing the entries of the transformation matrix. Declaration public double[] MatrixEntries { get; } Property Value Type Description double[] an array of length 6 Remarks Only the 6 non-trivial entries are returned, in the sequence: m00, m01, m02, m10, m11, m12 Methods | Edit this page View Source Clone() Clones this transformation Declaration public object Clone() Returns Type Description object A copy of this transformation | Edit this page View Source Compose(AffineTransformation) Updates this transformation to be the composition of this transformation with the given AffineTransformation. Declaration public AffineTransformation Compose(AffineTransformation trans) Parameters Type Name Description AffineTransformation trans an affine transformation Returns Type Description AffineTransformation this transformation, with an updated matrix Remarks This produces a transformation whose effect is equal to applying this transformation followed by the argument transformation. Mathematically, A.compose(B) = TB x TA | Edit this page View Source ComposeBefore(AffineTransformation) Updates this transformation to be the composition of a given AffineTransformation with this transformation. Declaration public AffineTransformation ComposeBefore(AffineTransformation trans) Parameters Type Name Description AffineTransformation trans an affine transformation Returns Type Description AffineTransformation this transformation, with an updated matrix Remarks This produces a transformation whose effect is equal to applying the argument transformation followed by this transformation. Mathematically, A.composeBefore(B) = TA x TB | Edit this page View Source Equals(AffineTransformation) Declaration public bool Equals(AffineTransformation trans) Parameters Type Name Description AffineTransformation trans Returns Type Description bool | Edit this page View Source Equals(object) Tests if an object is an AffineTransformation and has the same matrix as this transformation. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj An object to test Returns Type Description bool true if the given object is equal to this object Overrides object.Equals(object) | Edit this page View Source Filter(CoordinateSequence, int) Transforms the i'th coordinate in the input sequence Declaration public void Filter(CoordinateSequence seq, int i) Parameters Type Name Description CoordinateSequence seq A CoordinateSequence int i The index of the coordinate to transform | Edit this page View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() | Edit this page View Source GetInverse() Computes the inverse of this transformation, if one exists. Declaration public AffineTransformation GetInverse() Returns Type Description AffineTransformation A new inverse transformation Remarks The inverse is the transformation which when composed with this one produces the identity transformation. A transformation has an inverse if and only if it is not singular (i.e. its determinant is non-zero). Geometrically, an transformation is non-invertible if it maps the plane to a line or a point. If no inverse exists this method will throw a NoninvertibleTransformationException. The matrix of the inverse is equal to the inverse of the matrix for the transformation. It is computed as follows: 1 inverse(A) = --- x adjoint(A) det = 1 | m11 -m01 m01*m12-m02*m11 | --- x | -m10 m00 -m00*m12+m10*m02 | det | 0 0 m00*m11-m10*m01 | = | m11/det -m01/det m01*m12-m02*m11/det | | -m10/det m00/det -m00*m12+m10*m02/det | | 0 0 1 |</code></pre></blockquote> Exceptions Type Condition NoninvertibleTransformationException | Edit this page View Source Reflect(double, double) Updates the value of this transformation to that of a reflection transformation composed with the current value. Declaration public AffineTransformation Reflect(double x, double y) Parameters Type Name Description double x the x-ordinate of the line to reflect around double y the y-ordinate of the line to reflect around Returns Type Description AffineTransformation this transformation, with an updated matrix | Edit this page View Source Reflect(double, double, double, double) Updates the value of this transformation to that of a reflection transformation composed with the current value. Declaration public AffineTransformation Reflect(double x0, double y0, double x1, double y1) Parameters Type Name Description double x0 the x-ordinate of a point on the line to reflect around double y0 the y-ordinate of a point on the line to reflect around double x1 the x-ordinate of a point on the line to reflect around double y1 the y-ordinate of a point on the line to reflect around Returns Type Description AffineTransformation this transformation, with an updated matrix | Edit this page View Source ReflectionInstance(double, double) Creates a transformation for a reflection about the line (0,0) - (x,y). Declaration public static AffineTransformation ReflectionInstance(double x, double y) Parameters Type Name Description double x the x-ordinate of a point on the reflection line double y the y-ordinate of a point on the reflection line Returns Type Description AffineTransformation a transformation for the reflection | Edit this page View Source ReflectionInstance(double, double, double, double) Creates a transformation for a reflection about the line (x0,y0) - (x1,y1). Declaration public static AffineTransformation ReflectionInstance(double x0, double y0, double x1, double y1) Parameters Type Name Description double x0 the x-ordinate of a point on the reflection line double y0 the y-ordinate of a point on the reflection line double x1 the x-ordinate of a another point on the reflection line double y1 the y-ordinate of a another point on the reflection line Returns Type Description AffineTransformation a transformation for the reflection | Edit this page View Source Rotate(double) Updates the value of this transformation to that of a rotation transformation composed with the current value. Declaration public AffineTransformation Rotate(double theta) Parameters Type Name Description double theta the angle to rotate by in radians Returns Type Description AffineTransformation this transformation, with an updated matrix Remarks Positive angles correspond to a rotation in the counter-clockwise direction. | Edit this page View Source Rotate(double, double) Updates the value of this transformation to that of a rotation around the origin composed with the current value, with the sin and cos of the rotation angle specified directly. Declaration public AffineTransformation Rotate(double sinTheta, double cosTheta) Parameters Type Name Description double sinTheta the sine of the angle to rotate by double cosTheta the cosine of the angle to rotate by Returns Type Description AffineTransformation this transformation, with an updated matrix | Edit this page View Source Rotate(double, double, double) Updates the value of this transformation to that of a rotation around a given point composed with the current value. Declaration public AffineTransformation Rotate(double theta, double x, double y) Parameters Type Name Description double theta the angle to rotate by, in radians double x the x-ordinate of the rotation point double y the y-ordinate of the rotation point Returns Type Description AffineTransformation this transformation, with an updated matrix Remarks Positive angles correspond to a rotation in the counter-clockwise direction. | Edit this page View Source Rotate(double, double, double, double) Updates the value of this transformation to that of a rotation around a given point composed with the current value, with the sin and cos of the rotation angle specified directly. Declaration public AffineTransformation Rotate(double sinTheta, double cosTheta, double x, double y) Parameters Type Name Description double sinTheta the sine of the angle to rotate by double cosTheta the cosine of the angle to rotate by double x the x-ordinate of the rotation point double y the y-ordinate of the rotation point Returns Type Description AffineTransformation this transformation, with an updated matrix | Edit this page View Source RotationInstance(double) Creates a transformation for a rotation about the origin by an angle theta. Declaration public static AffineTransformation RotationInstance(double theta) Parameters Type Name Description double theta the rotation angle, in radians Returns Type Description AffineTransformation a transformation for the rotation Remarks Positive angles correspond to a rotation in the counter-clockwise direction. | Edit this page View Source RotationInstance(double, double) Creates a transformation for a rotation by an angle theta, specified by the sine and cosine of the angle. Declaration public static AffineTransformation RotationInstance(double sinTheta, double cosTheta) Parameters Type Name Description double sinTheta the sine of the rotation angle double cosTheta the cosine of the rotation angle Returns Type Description AffineTransformation a transformation for the rotation Remarks This allows providing exact values for sin(theta) and cos(theta) for the common case of rotations of multiples of quarter-circles. | Edit this page View Source RotationInstance(double, double, double) Creates a transformation for a rotation about the point (x,y) by an angle theta. Declaration public static AffineTransformation RotationInstance(double theta, double x, double y) Parameters Type Name Description double theta the rotation angle, in radians double x the x-ordinate of the rotation point double y the y-ordinate of the rotation point Returns Type Description AffineTransformation a transformation for the rotation Remarks Positive angles correspond to a rotation in the counter-clockwise direction. | Edit this page View Source RotationInstance(double, double, double, double) Creates a transformation for a rotation about the point (x,y) by an angle theta, specified by the sine and cosine of the angle. Declaration public static AffineTransformation RotationInstance(double sinTheta, double cosTheta, double x, double y) Parameters Type Name Description double sinTheta the sine of the rotation angle double cosTheta the cosine of the rotation angle double x the x-ordinate of the rotation point double y the y-ordinate of the rotation point Returns Type Description AffineTransformation a transformation for the rotation Remarks This allows providing exact values for sin(theta) and cos(theta) for the common case of rotations of multiples of quarter-circles. | Edit this page View Source Scale(double, double) Updates the value of this transformation to that of a scale transformation composed with the current value. Declaration public AffineTransformation Scale(double xScale, double yScale) Parameters Type Name Description double xScale the value to scale by in the x direction double yScale the value to scale by in the y direction Returns Type Description AffineTransformation this transformation, with an updated matrix | Edit this page View Source ScaleInstance(double, double) Creates a transformation for a scaling relative to the origin. Declaration public static AffineTransformation ScaleInstance(double xScale, double yScale) Parameters Type Name Description double xScale the value to scale by in the x direction double yScale the value to scale by in the y direction Returns Type Description AffineTransformation a transformation for the scaling | Edit this page View Source ScaleInstance(double, double, double, double) Creates a transformation for a scaling relative to the point (x,y). Declaration public static AffineTransformation ScaleInstance(double xScale, double yScale, double x, double y) Parameters Type Name Description double xScale The value to scale by in the x direction double yScale The value to scale by in the y direction double x The x-ordinate of the point to scale around double y The y-ordinate of the point to scale around Returns Type Description AffineTransformation A transformation for the scaling | Edit this page View Source SetToIdentity() Sets this transformation to be the identity transformation. Declaration public AffineTransformation SetToIdentity() Returns Type Description AffineTransformation this transformation, with an updated matrix Remarks The identity transformation has the matrix: | 1 0 0 | | 0 1 0 | | 0 0 1 | | Edit this page View Source SetToReflection(double, double) Sets this transformation to be a reflection about the line defined by vector (x,y). Declaration public AffineTransformation SetToReflection(double x, double y) Parameters Type Name Description double x the x-component of the reflection line vector double y the y-component of the reflection line vector Returns Type Description AffineTransformation this transformation, with an updated matrix Remarks The transformation for a reflection is computed by: d = sqrt(x2 + y2) sin = x / d; cos = x / d; Tref = Trot(sin, cos) x Tscale(1, -1) x Trot(-sin, cos) | Edit this page View Source SetToReflection(double, double, double, double) Sets this transformation to be a reflection about the line defined by a line (x0,y0) - (x1,y1) . Declaration public AffineTransformation SetToReflection(double x0, double y0, double x1, double y1) Parameters Type Name Description double x0 The x-ordinate of one point on the reflection line double y0 The y-ordinate of one point on the reflection line double x1 The x-ordinate of another point on the reflection line double y1 The y-ordinate of another point on the reflection line Returns Type Description AffineTransformation This transformation with an updated matrix | Edit this page View Source SetToReflectionBasic(double, double, double, double) Explicitly computes the math for a reflection. May not work. Declaration public AffineTransformation SetToReflectionBasic(double x0, double y0, double x1, double y1) Parameters Type Name Description double x0 The x-ordinate of one point on the reflection line double y0 The y-ordinate of one point on the reflection line double x1 The x-ordinate of another point on the reflection line double y1 The y-ordinate of another point on the reflection line Returns Type Description AffineTransformation This transformation with an updated matrix | Edit this page View Source SetToRotation(double) Sets this transformation to be a rotation around the orign. Declaration public AffineTransformation SetToRotation(double theta) Parameters Type Name Description double theta the rotation angle, in radians Returns Type Description AffineTransformation this transformation, with an updated matrix Remarks A positive rotation angle corresponds to a counter-clockwise rotation. The transformation matrix for a rotation by an angle theta has the value: | cos(theta) -sin(theta) 0 | | sin(theta) cos(theta) 0 | | 0 0 1 | | Edit this page View Source SetToRotation(double, double) Sets this transformation to be a rotation around the origin by specifying the sin and cos of the rotation angle directly. Declaration public AffineTransformation SetToRotation(double sinTheta, double cosTheta) Parameters Type Name Description double sinTheta the sine of the rotation angle double cosTheta the cosine of the rotation angle Returns Type Description AffineTransformation this transformation, with an updated matrix Remarks The transformation matrix for the rotation has the value: | cosTheta -sinTheta 0 | | sinTheta cosTheta 0 | | 0 0 1 | | Edit this page View Source SetToRotation(double, double, double) Sets this transformation to be a rotation around a given point (x,y). Declaration public AffineTransformation SetToRotation(double theta, double x, double y) Parameters Type Name Description double theta the rotation angle, in radians double x the x-ordinate of the rotation point double y the y-ordinate of the rotation point Returns Type Description AffineTransformation this transformation, with an updated matrix Remarks A positive rotation angle corresponds to a counter-clockwise rotation. The transformation matrix for a rotation by an angle theta has the value: | cosTheta -sinTheta x-x*cos+y*sin | | sinTheta cosTheta y-x*sin-y*cos | | 0 0 1 | | Edit this page View Source SetToRotation(double, double, double, double) Sets this transformation to be a rotation around a given point (x,y) by specifying the sin and cos of the rotation angle directly. Declaration public AffineTransformation SetToRotation(double sinTheta, double cosTheta, double x, double y) Parameters Type Name Description double sinTheta the sine of the rotation angle double cosTheta the cosine of the rotation angle double x the x-ordinate of the rotation point double y the y-ordinate of the rotation point Returns Type Description AffineTransformation this transformation, with an updated matrix Remarks The transformation matrix for the rotation has the value: | cosTheta -sinTheta x-x*cos+y*sin | | sinTheta cosTheta y-x*sin-y*cos | | 0 0 1 | | Edit this page View Source SetToScale(double, double) Sets this transformation to be a scaling. Declaration public AffineTransformation SetToScale(double xScale, double yScale) Parameters Type Name Description double xScale the amount to scale x-ordinates by double yScale the amount to scale y-ordinates by Returns Type Description AffineTransformation this transformation, with an updated matrix Remarks The transformation matrix for a scale has the value: | xScale 0 dx | | 0 yScale dy | | 0 0 1 | | Edit this page View Source SetToShear(double, double) Sets this transformation to be a shear. Declaration public AffineTransformation SetToShear(double xShear, double yShear) Parameters Type Name Description double xShear the x component to shear by double yShear the y component to shear by Returns Type Description AffineTransformation this transformation, with an updated matrix Remarks The transformation matrix for a shear has the value: | 1 xShear 0 | | yShear 1 0 | | 0 0 1 | Note that a shear of (1, 1) is not equal to shear(1, 0) composed with shear(0, 1). Instead, shear(1, 1) corresponds to a mapping onto the line x = y. | Edit this page View Source SetToTranslation(double, double) Sets this transformation to be a translation. Declaration public AffineTransformation SetToTranslation(double dx, double dy) Parameters Type Name Description double dx the x component to translate by double dy the y component to translate by Returns Type Description AffineTransformation this transformation, with an updated matrix Remarks For a translation by the vector (x, y) the transformation matrix has the value: | 1 0 dx | | 1 0 dy | | 0 0 1 | | Edit this page View Source SetTransformation(AffineTransformation) Sets this transformation to be a copy of the given one Declaration public AffineTransformation SetTransformation(AffineTransformation trans) Parameters Type Name Description AffineTransformation trans a transformation to copy Returns Type Description AffineTransformation this transformation, with an updated matrix | Edit this page View Source SetTransformation(double, double, double, double, double, double) Sets this transformation's matrix to have the given values. Declaration public AffineTransformation SetTransformation(double m00, double m01, double m02, double m10, double m11, double m12) Parameters Type Name Description double m00 the entry for the [0, 0] element in the transformation matrix double m01 the entry for the [0, 1] element in the transformation matrix double m02 the entry for the [0, 2] element in the transformation matrix double m10 the entry for the [1, 0] element in the transformation matrix double m11 the entry for the [1, 1] element in the transformation matrix double m12 the entry for the [1, 2] element in the transformation matrix Returns Type Description AffineTransformation this transformation, with an updated matrix | Edit this page View Source Shear(double, double) Updates the value of this transformation to that of a shear transformation composed with the current value. Declaration public AffineTransformation Shear(double xShear, double yShear) Parameters Type Name Description double xShear the value to shear by in the x direction double yShear the value to shear by in the y direction Returns Type Description AffineTransformation this transformation, with an updated matrix | Edit this page View Source ShearInstance(double, double) Creates a transformation for a shear. Declaration public static AffineTransformation ShearInstance(double xShear, double yShear) Parameters Type Name Description double xShear the value to shear by in the x direction double yShear the value to shear by in the y direction Returns Type Description AffineTransformation a transformation for the shear | Edit this page View Source ToString() Gets a text representation of this transformation. The string is of the form: AffineTransformation[[m00, m01, m02], [m10, m11, m12]] Declaration public override string ToString() Returns Type Description string A string representing this transformation Overrides object.ToString() | Edit this page View Source Transform(Coordinate, Coordinate) Applies this transformation to the src coordinate and places the results in the dest coordinate (which may be the same as the source). Declaration public Coordinate Transform(Coordinate src, Coordinate dest) Parameters Type Name Description Coordinate src the coordinate to transform Coordinate dest the coordinate to accept the results Returns Type Description Coordinate the dest coordinate | Edit this page View Source Transform(CoordinateSequence, int) Applies this transformation to the i'th coordinate in the given CoordinateSequence. Declaration public void Transform(CoordinateSequence seq, int i) Parameters Type Name Description CoordinateSequence seq a CoordinateSequence int i the index of the coordinate to transform | Edit this page View Source Transform(Geometry) Creates a new Geometry which is the result of this transformation applied to the input Geometry. Declaration public Geometry Transform(Geometry g) Parameters Type Name Description Geometry g A Geometry Returns Type Description Geometry The transformed Geometry | Edit this page View Source Translate(double, double) Updates the value of this transformation to that of a translation transformation composed with the current value. Declaration public AffineTransformation Translate(double x, double y) Parameters Type Name Description double x the value to translate by in the x direction double y the value to translate by in the y direction Returns Type Description AffineTransformation this transformation, with an updated matrix | Edit this page View Source TranslationInstance(double, double) Creates a transformation for a translation. Declaration public static AffineTransformation TranslationInstance(double x, double y) Parameters Type Name Description double x the value to translate by in the x direction double y the value to translate by in the y direction Returns Type Description AffineTransformation a transformation for the translation Implements ICloneable ICoordinateSequenceFilter IEquatable<T>"
  },
  "api/NetTopologySuite.Geometries.Utilities.AffineTransformationBuilder.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.AffineTransformationBuilder.html",
    "title": "Class AffineTransformationBuilder | NetTopologySuite",
    "summary": "Class AffineTransformationBuilder Builds an AffineTransformation defined by a set of control vectors. Inheritance object AffineTransformationBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public class AffineTransformationBuilder Remarks A control vector consists of a source point and a destination point, which is the image of the source point under the desired transformation. A transformation is well-defined by a set of three control vectors if and only if the source points are not collinear. (In particular, the degenerate situation where two or more source points are identical will not produce a well-defined transformation). A well-defined transformation exists and is unique. If the control vectors are not well-defined, the system of equations defining the transformation matrix entries is not solvable, and no transformation can be determined. No such restriction applies to the destination points. However, if the destination points are collinear or non-unique, a non-invertible transformations will be generated. This technique of recovering a transformation from its effect on known points is used in the Bilinear Interpolated Triangulation algorithm for warping planar surfaces. Constructors | Edit this page View Source AffineTransformationBuilder(Coordinate, Coordinate, Coordinate, Coordinate, Coordinate, Coordinate) Constructs a new builder for the transformation defined by the given set of control point mappings. Declaration public AffineTransformationBuilder(Coordinate src0, Coordinate src1, Coordinate src2, Coordinate dest0, Coordinate dest1, Coordinate dest2) Parameters Type Name Description Coordinate src0 A control point Coordinate src1 A control point Coordinate src2 A control point Coordinate dest0 The image of src0 under the required transformation Coordinate dest1 The image of src1 under the required transformation Coordinate dest2 The image of src2 under the required transformation Methods | Edit this page View Source GetTransformation() Computes the AffineTransformation determined by the control point mappings, or null if the control vectors do not determine a well-defined transformation. Declaration public AffineTransformation GetTransformation() Returns Type Description AffineTransformation An affine transformation, or null if the control vectors do not determine a well-defined transformation."
  },
  "api/NetTopologySuite.Geometries.Utilities.AffineTransformationFactory.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.AffineTransformationFactory.html",
    "title": "Class AffineTransformationFactory | NetTopologySuite",
    "summary": "Class AffineTransformationFactory Supports creating AffineTransformations defined by various kinds of inputs and transformation mapping rules. Inheritance object AffineTransformationFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public static class AffineTransformationFactory Methods | Edit this page View Source CreateFromBaseLines(Coordinate, Coordinate, Coordinate, Coordinate) Creates an AffineTransformation defined by a mapping between two baselines. The computed transformation consists of: a translation from the start point of the source baseline to the start point of the destination baseline, a rotation through the angle between the baselines about the destination start point, and a scaling equal to the ratio of the baseline lengths. If the source baseline has zero length, an identity transformation is returned. Declaration public static AffineTransformation CreateFromBaseLines(Coordinate src0, Coordinate src1, Coordinate dest0, Coordinate dest1) Parameters Type Name Description Coordinate src0 The start point of the source baseline Coordinate src1 The end point of the source baseline Coordinate dest0 The start point of the destination baseline Coordinate dest1 The end point of the destination baseline Returns Type Description AffineTransformation | Edit this page View Source CreateFromControlVectors(Coordinate, Coordinate) Creates an AffineTransformation defined by a single control vector. A control vector consists of a source point and a destination point, which is the image of the source point under the desired transformation. This produces a translation. Declaration public static AffineTransformation CreateFromControlVectors(Coordinate src0, Coordinate dest0) Parameters Type Name Description Coordinate src0 The start point of the control vector Coordinate dest0 The end point of the control vector Returns Type Description AffineTransformation The computed transformation | Edit this page View Source CreateFromControlVectors(Coordinate, Coordinate, Coordinate, Coordinate) Creates an AffineTransformation defined by a pair of control vectors. A control vector consists of a source point and a destination point, which is the image of the source point under the desired transformation. The computed transformation is a combination of one or more of a uniform scale, a rotation, and a translation (i.e. there is no shear component and no reflection) Declaration public static AffineTransformation CreateFromControlVectors(Coordinate src0, Coordinate src1, Coordinate dest0, Coordinate dest1) Parameters Type Name Description Coordinate src0 Coordinate src1 Coordinate dest0 Coordinate dest1 Returns Type Description AffineTransformation The computed transformation | Edit this page View Source CreateFromControlVectors(Coordinate, Coordinate, Coordinate, Coordinate, Coordinate, Coordinate) Creates a transformation from a set of three control vectors. A control vector consists of a source point and a destination point, which is the image of the source point under the desired transformation. Three control vectors allows defining a fully general affine transformation. Declaration public static AffineTransformation CreateFromControlVectors(Coordinate src0, Coordinate src1, Coordinate src2, Coordinate dest0, Coordinate dest1, Coordinate dest2) Parameters Type Name Description Coordinate src0 Coordinate src1 Coordinate src2 Coordinate dest0 Coordinate dest1 Coordinate dest2 Returns Type Description AffineTransformation The computed transformation | Edit this page View Source CreateFromControlVectors(Coordinate[], Coordinate[]) Creates an AffineTransformation defined by a set of control vectors. Between one and three vectors must be supplied. Declaration public static AffineTransformation CreateFromControlVectors(Coordinate[] src, Coordinate[] dest) Parameters Type Name Description Coordinate[] src The source points of the vectors Coordinate[] dest The destination points of the vectors Returns Type Description AffineTransformation The computed transformation Exceptions Type Condition ArgumentException if the control vector arrays are too short, long or of different lengths"
  },
  "api/NetTopologySuite.Geometries.Utilities.ComponentCoordinateExtracter.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.ComponentCoordinateExtracter.html",
    "title": "Class ComponentCoordinateExtracter | NetTopologySuite",
    "summary": "Class ComponentCoordinateExtracter Extracts a representative Coordinate from each connected component of a Geometry. Inheritance object ComponentCoordinateExtracter Implements IGeometryComponentFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public class ComponentCoordinateExtracter : IGeometryComponentFilter Constructors | Edit this page View Source ComponentCoordinateExtracter(List<Coordinate>) Constructs a LineExtracterFilter with a list in which to store LineStrings found. Declaration public ComponentCoordinateExtracter(List<Coordinate> coords) Parameters Type Name Description List<Coordinate> coords Methods | Edit this page View Source Filter(Geometry) Performs an operation with or on a geometry component. Declaration public void Filter(Geometry geom) Parameters Type Name Description Geometry geom A component of the geometry to which the filter is applied. | Edit this page View Source GetCoordinates(Geometry) Extracts a representative Coordinate from each connected component in a geometry. If more than one geometry is to be processed, it is more efficient to create a single ComponentCoordinateExtracter instance and pass it to each geometry. Declaration public static List<Coordinate> GetCoordinates(Geometry geom) Parameters Type Name Description Geometry geom The Geometry from which to extract Returns Type Description List<Coordinate> A list of representative Coordinates Implements IGeometryComponentFilter"
  },
  "api/NetTopologySuite.Geometries.Utilities.EnvelopeCombiner.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.EnvelopeCombiner.html",
    "title": "Class EnvelopeCombiner | NetTopologySuite",
    "summary": "Class EnvelopeCombiner Utility to combine just the Envelopes of a list of geometries. Inheritance object EnvelopeCombiner Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public sealed class EnvelopeCombiner Constructors | Edit this page View Source EnvelopeCombiner(params Geometry[]) Initializes a new instance of the EnvelopeCombiner class. Declaration public EnvelopeCombiner(params Geometry[] geoms) Parameters Type Name Description Geometry[] geoms The Geometry instances to combine. | Edit this page View Source EnvelopeCombiner(IEnumerable<Geometry>) Initializes a new instance of the EnvelopeCombiner class. Declaration public EnvelopeCombiner(IEnumerable<Geometry> geoms) Parameters Type Name Description IEnumerable<Geometry> geoms The Geometry instances to combine. Methods | Edit this page View Source Combine() Gets the smallest Envelope within which all input geometries fit, or a null envelope if no non-empty geometries were found in the input list. Declaration public Envelope Combine() Returns Type Description Envelope The smallest Envelope within which all input geometries fit, or a null envelope if no non-empty geometries were found in the input list. | Edit this page View Source Combine(params Geometry[]) Gets the smallest Envelope within which all input geometries fit, or a null envelope if no non-empty geometries were found in the input list. Declaration public static Envelope Combine(params Geometry[] geoms) Parameters Type Name Description Geometry[] geoms The list of input geometries. Returns Type Description Envelope The smallest Envelope within which all input geometries fit, or a null envelope if no non-empty geometries were found in the input list. | Edit this page View Source Combine(IEnumerable<Geometry>) Gets the smallest Envelope within which all input geometries fit, or a null envelope if no non-empty geometries were found in the input list. Declaration public static Envelope Combine(IEnumerable<Geometry> geoms) Parameters Type Name Description IEnumerable<Geometry> geoms The list of input geometries. Returns Type Description Envelope The smallest Envelope within which all input geometries fit, or a null envelope if no non-empty geometries were found in the input list. | Edit this page View Source CombineAsGeometry() Gets the Geometry representation of the result of Combine(). Declaration public Geometry CombineAsGeometry() Returns Type Description Geometry The Geometry representation of the result of Combine(). | Edit this page View Source CombineAsGeometry(params Geometry[]) Gets the Geometry representation of the result of Combine(params Geometry[]). Declaration public static Geometry CombineAsGeometry(params Geometry[] geoms) Parameters Type Name Description Geometry[] geoms The list of input geometries. Returns Type Description Geometry The Geometry representation of the result of Combine(params Geometry[]). | Edit this page View Source CombineAsGeometry(IEnumerable<Geometry>) Gets the Geometry representation of the result of Combine(IEnumerable<Geometry>). Declaration public static Geometry CombineAsGeometry(IEnumerable<Geometry> geoms) Parameters Type Name Description IEnumerable<Geometry> geoms The list of input geometries. Returns Type Description Geometry The Geometry representation of the result of Combine(IEnumerable<Geometry>)."
  },
  "api/NetTopologySuite.Geometries.Utilities.Extracter-1.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.Extracter-1.html",
    "title": "Class Extracter<T> | NetTopologySuite",
    "summary": "Class Extracter<T> Class to extract single instance geometries of T Inheritance object Extracter<T> Implements IGeometryFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public sealed class Extracter<T> : IGeometryFilter where T : Geometry Type Parameters Name Description T The type of the geometries to extract Methods | Edit this page View Source Filter(Geometry) Adds geom to the list when it is a T-geometry. Declaration public void Filter(Geometry geom) Parameters Type Name Description Geometry geom | Edit this page View Source GetItems(Geometry) Extracts the T-geometry elements from a single Geometry and adds them to the provided IList<T>. Declaration public static IList<T> GetItems(Geometry geom) Parameters Type Name Description Geometry geom The geometry from which to extract Returns Type Description IList<T> A list of T-geometry elements in geom | Edit this page View Source GetItems(Geometry, IList<T>) Extracts the T-geometry elements from a single Geometry and adds them to the provided IList<T>. Declaration public static IList<T> GetItems(Geometry geom, IList<T> comps) Parameters Type Name Description Geometry geom The geometry from which to extract IList<T> comps The list to add the extracted elements to Returns Type Description IList<T> comps, extended by T-geometries of geom Implements IGeometryFilter"
  },
  "api/NetTopologySuite.Geometries.Utilities.Extracter.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.Extracter.html",
    "title": "Class Extracter | NetTopologySuite",
    "summary": "Class Extracter This class offers utility methods to extract single component geometries of requested type from ordinary geometries. Inheritance object Extracter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public static class Extracter Methods | Edit this page View Source GetLines(Geometry) Extracts the LineString elements from a single Geometry and returns them in a IList<T>. Declaration public static IList<LineString> GetLines(Geometry geom) Parameters Type Name Description Geometry geom The geometry from which to extract Returns Type Description IList<LineString> | Edit this page View Source GetLines(Geometry, IList<LineString>) Extracts the Polygon elements from a single Geometry and adds them to the provided IList<T>. Declaration public static IList<LineString> GetLines(Geometry geom, IList<LineString> list) Parameters Type Name Description Geometry geom The geometry from which to extract IList<LineString> list The list to add the extracted elements to Returns Type Description IList<LineString> | Edit this page View Source GetPoints(Geometry) Extracts the Point elements from a single Geometry and returns them in a IList<T>. Declaration public static IList<Point> GetPoints(Geometry geom) Parameters Type Name Description Geometry geom The geometry from which to extract Returns Type Description IList<Point> | Edit this page View Source GetPoints(Geometry, IList<Point>) Extracts the Point elements from a single Geometry and adds them to the provided IList<T>. Declaration public static IList<Point> GetPoints(Geometry geom, IList<Point> list) Parameters Type Name Description Geometry geom The geometry from which to extract IList<Point> list The list to add the extracted elements to Returns Type Description IList<Point> | Edit this page View Source GetPolygons(Geometry) Extracts the Polygon elements from a single Geometry and returns them in a IList<T>. Declaration public static IList<Polygon> GetPolygons(Geometry geom) Parameters Type Name Description Geometry geom The geometry from which to extract Returns Type Description IList<Polygon> | Edit this page View Source GetPolygons(Geometry, IList<Polygon>) Extracts the Polygon elements from a single Geometry and adds them to the provided IList<T>. Declaration public static IList<Polygon> GetPolygons(Geometry geom, IList<Polygon> list) Parameters Type Name Description Geometry geom The geometry from which to extract IList<Polygon> list The list to add the extracted elements to Returns Type Description IList<Polygon> See Also PolygonExtracter LineStringExtracter PointExtracter GeometryExtracter"
  },
  "api/NetTopologySuite.Geometries.Utilities.GeometryCollectionMapper.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.GeometryCollectionMapper.html",
    "title": "Class GeometryCollectionMapper | NetTopologySuite",
    "summary": "Class GeometryCollectionMapper Maps the members of a GeometryCollection into another GeometryCollection via a defined mapping function. Inheritance object GeometryCollectionMapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public class GeometryCollectionMapper Constructors | Edit this page View Source GeometryCollectionMapper(Func<Geometry, Geometry>) Creates an instance of this class Declaration public GeometryCollectionMapper(Func<Geometry, Geometry> mapOp) Parameters Type Name Description Func<Geometry, Geometry> mapOp Methods | Edit this page View Source Map(GeometryCollection) Declaration public GeometryCollection Map(GeometryCollection gc) Parameters Type Name Description GeometryCollection gc Returns Type Description GeometryCollection | Edit this page View Source Map(GeometryCollection, Func<Geometry, Geometry>) Declaration public static GeometryCollection Map(GeometryCollection gc, Func<Geometry, Geometry> op) Parameters Type Name Description GeometryCollection gc Func<Geometry, Geometry> op Returns Type Description GeometryCollection"
  },
  "api/NetTopologySuite.Geometries.Utilities.GeometryCombiner.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.GeometryCombiner.html",
    "title": "Class GeometryCombiner | NetTopologySuite",
    "summary": "Class GeometryCombiner Combines Geometrys to produce a GeometryCollection of the most appropriate type. Inheritance object GeometryCombiner Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public class GeometryCombiner Remarks Input geometries which are already collections will have their elements extracted first. No validation of the result geometry is performed. (The only case where invalidity is possible is where IPolygonal geometries are combined and result in a self-intersection). Constructors | Edit this page View Source GeometryCombiner(IEnumerable<Geometry>) Creates a new combiner for a collection of geometries Declaration public GeometryCombiner(IEnumerable<Geometry> geoms) Parameters Type Name Description IEnumerable<Geometry> geoms The geometries to combine Properties | Edit this page View Source SkipEmpty Value indicating whether empty geometries should be skipped Declaration public static bool SkipEmpty { get; set; } Property Value Type Description bool Methods | Edit this page View Source Combine() Computes the combination of the input geometries to produce the most appropriate Geometry or GeometryCollection Declaration public Geometry Combine() Returns Type Description Geometry A Geometry which is the combination of the inputs | Edit this page View Source Combine(Geometry, Geometry) Combines two geometries. Declaration public static Geometry Combine(Geometry g0, Geometry g1) Parameters Type Name Description Geometry g0 A geometry to combine Geometry g1 A geometry to combine Returns Type Description Geometry The combined geometry | Edit this page View Source Combine(Geometry, Geometry, Geometry) Combines three geometries. Declaration public static Geometry Combine(Geometry g0, Geometry g1, Geometry g2) Parameters Type Name Description Geometry g0 A geometry to combine Geometry g1 A geometry to combine Geometry g2 A geometry to combine Returns Type Description Geometry The combined geometry | Edit this page View Source Combine(IEnumerable<Geometry>) Combines a collection of geometries. Declaration public static Geometry Combine(IEnumerable<Geometry> geoms) Parameters Type Name Description IEnumerable<Geometry> geoms The geometries to combine Returns Type Description Geometry The combined geometry | Edit this page View Source ExtractFactory(IEnumerable<Geometry>) Extracts the GeometryFactory used by the geometries in a collection Declaration public static GeometryFactory ExtractFactory(IEnumerable<Geometry> geoms) Parameters Type Name Description IEnumerable<Geometry> geoms Returns Type Description GeometryFactory a GeometryFactory See Also BuildGeometry(IEnumerable<Geometry>)"
  },
  "api/NetTopologySuite.Geometries.Utilities.GeometryEditor.CoordinateOperation.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.GeometryEditor.CoordinateOperation.html",
    "title": "Class GeometryEditor.CoordinateOperation | NetTopologySuite",
    "summary": "Class GeometryEditor.CoordinateOperation A GeometryEditorOperation which edits the coordinate list of a Geometry. Operates on Geometry subclasses which contains a single coordinate list. Inheritance object GeometryEditor.CoordinateOperation PrecisionReducerCoordinateOperation Implements GeometryEditor.IGeometryEditorOperation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public abstract class GeometryEditor.CoordinateOperation : GeometryEditor.IGeometryEditorOperation Methods | Edit this page View Source Edit(Coordinate[], Geometry) Edits the array of Coordinates from a Geometry. Declaration public abstract Coordinate[] Edit(Coordinate[] coordinates, Geometry geometry) Parameters Type Name Description Coordinate[] coordinates The coordinate array to operate on. Geometry geometry The point containing the coordinate list. Returns Type Description Coordinate[] An edited coordinate array (which may be the same as the input). | Edit this page View Source Edit(Geometry, GeometryFactory) Declaration public Geometry Edit(Geometry geometry, GeometryFactory factory) Parameters Type Name Description Geometry geometry GeometryFactory factory Returns Type Description Geometry Implements GeometryEditor.IGeometryEditorOperation"
  },
  "api/NetTopologySuite.Geometries.Utilities.GeometryEditor.CoordinateSequenceOperation.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.GeometryEditor.CoordinateSequenceOperation.html",
    "title": "Class GeometryEditor.CoordinateSequenceOperation | NetTopologySuite",
    "summary": "Class GeometryEditor.CoordinateSequenceOperation A GeometryEditor.IGeometryEditorOperation which edits the CoordinateSequence of a Geometry. Operates on Geometry subclasses which contains a single coordinate list. Inheritance object GeometryEditor.CoordinateSequenceOperation Implements GeometryEditor.IGeometryEditorOperation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public class GeometryEditor.CoordinateSequenceOperation : GeometryEditor.IGeometryEditorOperation Constructors | Edit this page View Source CoordinateSequenceOperation() Declaration public CoordinateSequenceOperation() | Edit this page View Source CoordinateSequenceOperation(Func<CoordinateSequence, Geometry, CoordinateSequence>) Declaration public CoordinateSequenceOperation(Func<CoordinateSequence, Geometry, CoordinateSequence> editSequence) Parameters Type Name Description Func<CoordinateSequence, Geometry, CoordinateSequence> editSequence Properties | Edit this page View Source EditSequence Declaration protected Func<CoordinateSequence, Geometry, CoordinateSequence> EditSequence { get; set; } Property Value Type Description Func<CoordinateSequence, Geometry, CoordinateSequence> An edited coordinate sequence (which may be the same as the input) Methods | Edit this page View Source Edit(Geometry, GeometryFactory) Edits a Geometry by returning a new Geometry with a modification. The returned Geometry may be the input geometry itself. It may be null if the geometry is to be deleted. Declaration public Geometry Edit(Geometry geometry, GeometryFactory factory) Parameters Type Name Description Geometry geometry The Geometry to modify. GeometryFactory factory The factory with which to construct the modified Geometry (may be different to the factory of the input point). Returns Type Description Geometry A new Geometry which is a modification of the input Geometry. Implements GeometryEditor.IGeometryEditorOperation"
  },
  "api/NetTopologySuite.Geometries.Utilities.GeometryEditor.IGeometryEditorOperation.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.GeometryEditor.IGeometryEditorOperation.html",
    "title": "Interface GeometryEditor.IGeometryEditorOperation | NetTopologySuite",
    "summary": "Interface GeometryEditor.IGeometryEditorOperation A interface which specifies an edit operation for Geometries. Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public interface GeometryEditor.IGeometryEditorOperation Methods | Edit this page View Source Edit(Geometry, GeometryFactory) Edits a Geometry by returning a new Geometry with a modification. The returned Geometry may be the input geometry itself. It may be null if the geometry is to be deleted. Declaration Geometry Edit(Geometry geometry, GeometryFactory factory) Parameters Type Name Description Geometry geometry The Geometry to modify. GeometryFactory factory The factory with which to construct the modified Geometry (may be different to the factory of the input point). Returns Type Description Geometry A new Geometry which is a modification of the input Geometry."
  },
  "api/NetTopologySuite.Geometries.Utilities.GeometryEditor.NoOpGeometryOperation.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.GeometryEditor.NoOpGeometryOperation.html",
    "title": "Class GeometryEditor.NoOpGeometryOperation | NetTopologySuite",
    "summary": "Class GeometryEditor.NoOpGeometryOperation A GeometryEditorOperation which does not modify the input geometry. This can be used for simple changes of GeometryFactory (including PrecisionModel and SRID). Inheritance object GeometryEditor.NoOpGeometryOperation Implements GeometryEditor.IGeometryEditorOperation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public class GeometryEditor.NoOpGeometryOperation : GeometryEditor.IGeometryEditorOperation Methods | Edit this page View Source Edit(Geometry, GeometryFactory) Edits a Geometry by returning a new Geometry with a modification. The returned Geometry may be the input geometry itself. It may be null if the geometry is to be deleted. Declaration public Geometry Edit(Geometry geometry, GeometryFactory factory) Parameters Type Name Description Geometry geometry The Geometry to modify. GeometryFactory factory The factory with which to construct the modified Geometry (may be different to the factory of the input point). Returns Type Description Geometry A new Geometry which is a modification of the input Geometry. Implements GeometryEditor.IGeometryEditorOperation"
  },
  "api/NetTopologySuite.Geometries.Utilities.GeometryEditor.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.GeometryEditor.html",
    "title": "Class GeometryEditor | NetTopologySuite",
    "summary": "Class GeometryEditor A class which supports creating new Geometrys which are modifications of existing ones, maintaining the same type structure. Inheritance object GeometryEditor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public class GeometryEditor Remarks Geometry objects are intended to be treated as immutable. This class allows you to \"modifies\" a Geometrys by traversing them, applying a user-defined GeometryEditor.IGeometryEditorOperation, GeometryEditor.CoordinateSequenceOperation or GeometryEditor.CoordinateOperation and creating a new Geometrys with the same structure but (possibly) modified components. Examples of the kinds of modifications which can be made are: The values of the coordinates may be changed. The editor does not check whether changing coordinate values makes the result Geometry invalid The coordinate lists may be changed (e.g. by adding, deleting or modifying coordinates). The modified coordinate lists must be consistent with their original parent component (e.g. a LinearRing must always have at least 4 coordinates, and the first and last coordinate must be equal). Components of the original point may be deleted (e.g. holes may be removed from a Polygon, or LineStrings removed from a MultiLineString). Deletions will be propagated up the component tree appropriately. All changes must be consistent with the original Geometry's structure (e.g. a Polygon cannot be collapsed into a LineString). If changing the structure is required, use a GeometryTransformer. This class supports creating an edited Geometry using a different GeometryFactory via the GeometryEditor(GeometryFactory) constructor. Examples of situations where this is required is if the geometry is transformed to a new SRID and/or a new PrecisionModel. Usage notes The resulting Geometry is not checked for validity. If validity needs to be enforced, the new Geometry's IsValid method should be called. By default the UserData of the input geometry is not copied to the result. Constructors | Edit this page View Source GeometryEditor() Creates a new GeometryEditor object which will create edited Geometry with the same GeometryFactory as the input Geometry. Declaration public GeometryEditor() | Edit this page View Source GeometryEditor(GeometryFactory) Creates a new GeometryEditor object which will create edited Geometrys with the given GeometryFactory. Declaration public GeometryEditor(GeometryFactory factory) Parameters Type Name Description GeometryFactory factory The GeometryFactory to create the edited Geometry with. Properties | Edit this page View Source CopyUserData Gets or sets a value indicating if the User Data is copied to the edit result. If so, only the object reference is copied. Declaration public bool CopyUserData { get; set; } Property Value Type Description bool Methods | Edit this page View Source Edit(Geometry, IGeometryEditorOperation) Edit the input Geometry with the given edit operation. Clients can create subclasses of GeometryEditorOperation or CoordinateOperation to perform required modifications. Declaration public Geometry Edit(Geometry geometry, GeometryEditor.IGeometryEditorOperation operation) Parameters Type Name Description Geometry geometry The Geometry to edit. GeometryEditor.IGeometryEditorOperation operation The edit operation to carry out. Returns Type Description Geometry A new Geometry which is the result of the editing (which may be empty). See Also GeometryTransformer IsValid"
  },
  "api/NetTopologySuite.Geometries.Utilities.GeometryExtracter-1.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.GeometryExtracter-1.html",
    "title": "Class GeometryExtracter<T> | NetTopologySuite",
    "summary": "Class GeometryExtracter<T> Extracts the components of type T from a Geometry. Inheritance object GeometryExtracter<T> Implements IGeometryFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public class GeometryExtracter<T> : IGeometryFilter where T : Geometry Type Parameters Name Description T Constructors | Edit this page View Source GeometryExtracter(IList<Geometry>) Constructs a filter with a list in which to store the elements found. Declaration public GeometryExtracter(IList<Geometry> comps) Parameters Type Name Description IList<Geometry> comps The list to extract into Methods | Edit this page View Source Filter(Geometry) Performs an operation with or on geom. Declaration public void Filter(Geometry geom) Parameters Type Name Description Geometry geom A Geometry to which the filter is applied. Implements IGeometryFilter"
  },
  "api/NetTopologySuite.Geometries.Utilities.GeometryExtracter.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.GeometryExtracter.html",
    "title": "Class GeometryExtracter | NetTopologySuite",
    "summary": "Class GeometryExtracter Extracts the components of a given type from a Geometry. Inheritance object GeometryExtracter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public static class GeometryExtracter Methods | Edit this page View Source Extract(Geometry, string) Extracts the components of geometryType from a Geometry Declaration public static IList<Geometry> Extract(Geometry geom, string geometryType) Parameters Type Name Description Geometry geom The geometry from which to extract string geometryType Geometry type to extract (null or all white-space means all types) Returns Type Description IList<Geometry> | Edit this page View Source Extract(Geometry, string, IList<Geometry>) Extracts the components of geometryType from a Geometry and adds them to the provided IList<T> Declaration public static IList<Geometry> Extract(Geometry geom, string geometryType, IList<Geometry> list) Parameters Type Name Description Geometry geom The geometry from which to extract string geometryType Geometry type to extract (null or all white-space means all types) IList<Geometry> list The list to add the extracted elements to Returns Type Description IList<Geometry> | Edit this page View Source Extract<T>(Geometry) Extracts the T elements from a single Geometry and returns them in a IList<T>. Declaration public static IList<Geometry> Extract<T>(Geometry geom) where T : Geometry Parameters Type Name Description Geometry geom the geometry from which to extract Returns Type Description IList<Geometry> Type Parameters Name Description T | Edit this page View Source Extract<T>(Geometry, IList<Geometry>) Extracts the T components from an Geometry and adds them to the provided IList<T>. Declaration public static IList<Geometry> Extract<T>(Geometry geom, IList<Geometry> list) where T : Geometry Parameters Type Name Description Geometry geom the geometry from which to extract IList<Geometry> list the list to add the extracted elements to Returns Type Description IList<Geometry> Type Parameters Name Description T The geometry type to extract See Also PointExtracter LineStringExtracter PolygonExtracter Extracter Extracter<T>"
  },
  "api/NetTopologySuite.Geometries.Utilities.GeometryExtracterByTypeName.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.GeometryExtracterByTypeName.html",
    "title": "Class GeometryExtracterByTypeName | NetTopologySuite",
    "summary": "Class GeometryExtracterByTypeName Extracts the components of type T from a Geometry. Inheritance object GeometryExtracterByTypeName Implements IGeometryFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public class GeometryExtracterByTypeName : IGeometryFilter Constructors | Edit this page View Source GeometryExtracterByTypeName(string, IList<Geometry>) Constructs a filter with a list in which to store the elements found. Declaration public GeometryExtracterByTypeName(string geometryType, IList<Geometry> comps) Parameters Type Name Description string geometryType Geometry type to extract (null means all types) IList<Geometry> comps The list to extract into Methods | Edit this page View Source Filter(Geometry) Performs an operation with or on geom. Declaration public void Filter(Geometry geom) Parameters Type Name Description Geometry geom A Geometry to which the filter is applied. | Edit this page View Source IsOfType(Geometry, string) Y Declaration protected static bool IsOfType(Geometry geom, string geometryType) Parameters Type Name Description Geometry geom string geometryType Returns Type Description bool Implements IGeometryFilter"
  },
  "api/NetTopologySuite.Geometries.Utilities.GeometryFixer.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.GeometryFixer.html",
    "title": "Class GeometryFixer | NetTopologySuite",
    "summary": "Class GeometryFixer Fixes a geometry to be a valid geometry, while preserving as much as possible of the shape and location of the input. Validity is determined according to IsValid. Input geometries are always processed, so even valid inputs may have some minor alterations.The output is always a new geometry object. Semantic Rules Vertices with non-finite X or Y ordinates are removed (as per IsValid) Repeated points are reduced to a single point Empty atomic geometries are valid and are returned unchanged Empty elements are removed from collections Point: keep valid coordinate, or EMPTY LineString: coordinates are fixed LinearRing: coordinates are feixed, keep valid ring or else convert into LineString Polygon: transform into a valid polygon or multipolygon, preserving as much of the extent and vertices as possible. Rings are fixed to ensure they are valid Holes intersection the shell are subtracted from the shell Holes outside the shell are converted into polygons MultiPolygon: each polygon is fixed, then result made non - overlapping (via union) GeometryCollection: each element is fixed Collapsed lines and polygons are handled as follows, depending on the keepCollapsed setting: false: (default) collapses are converted to empty geometries (and removed if they are elements of collections) true: collapses are converted to a valid geometry of lower dimension Inheritance object GeometryFixer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public class GeometryFixer Constructors | Edit this page View Source GeometryFixer(Geometry) Creates a new instance to fix a given geometry Declaration public GeometryFixer(Geometry geom) Parameters Type Name Description Geometry geom The geometry to be fixed Properties | Edit this page View Source KeepCollapsed Gets or sets a value indicating whether collapsed geometries are converted to empty, (which will be removed from collections), or to a valid geometry of lower dimension. The default is to convert collapses to empty geometries (false). Declaration public bool KeepCollapsed { get; set; } Property Value Type Description bool | Edit this page View Source KeepMulti Gets or sets a value indicating whether collapsed geometries are converted to empty, (which will be removed from collections), or to a valid geometry of lower dimension. The default is to convert collapses to empty geometries (false). Declaration public bool KeepMulti { get; set; } Property Value Type Description bool Methods | Edit this page View Source Fix(Geometry) Fixes a geometry to be valid. Declaration public static Geometry Fix(Geometry geom) Parameters Type Name Description Geometry geom The geometry to be fixed Returns Type Description Geometry The valid fixed geometry | Edit this page View Source Fix(Geometry, bool) Fixes a geometry to be valid, allowing to set a flag controlling how single item results from fixed MULTI geometries should be returned. Declaration public static Geometry Fix(Geometry geom, bool isKeepMulti) Parameters Type Name Description Geometry geom The geometry to be fixed bool isKeepMulti A flag indicating if MULTI geometries should not be converted to single instance types if they consist of only one item. Returns Type Description Geometry The valid fixed geometry | Edit this page View Source GetResult() Gets the fixed geometry. Declaration public Geometry GetResult() Returns Type Description Geometry The fixed geometry See Also IsValid"
  },
  "api/NetTopologySuite.Geometries.Utilities.GeometryMapper.IMapOp.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.GeometryMapper.IMapOp.html",
    "title": "Interface GeometryMapper.IMapOp | NetTopologySuite",
    "summary": "Interface GeometryMapper.IMapOp An interface for geometry functions used for mapping. Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public interface GeometryMapper.IMapOp Methods | Edit this page View Source Map(Geometry) Computes a new geometry value. Declaration Geometry Map(Geometry g) Parameters Type Name Description Geometry g The input geometry Returns Type Description Geometry A result geometry"
  },
  "api/NetTopologySuite.Geometries.Utilities.GeometryMapper.MapOp.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.GeometryMapper.MapOp.html",
    "title": "Class GeometryMapper.MapOp | NetTopologySuite",
    "summary": "Class GeometryMapper.MapOp Standard implementation of a geometry mapping Inheritance object GeometryMapper.MapOp Implements GeometryMapper.IMapOp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public sealed class GeometryMapper.MapOp : GeometryMapper.IMapOp Constructors | Edit this page View Source MapOp(Func<Geometry, Geometry>) Creates an instance of this class using the provided mapping operation function Declaration public MapOp(Func<Geometry, Geometry> mapOp) Parameters Type Name Description Func<Geometry, Geometry> mapOp A mapping operation function Methods | Edit this page View Source Map(Geometry) Computes a new geometry value. Declaration public Geometry Map(Geometry geom) Parameters Type Name Description Geometry geom Returns Type Description Geometry A result geometry Implements GeometryMapper.IMapOp"
  },
  "api/NetTopologySuite.Geometries.Utilities.GeometryMapper.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.GeometryMapper.html",
    "title": "Class GeometryMapper | NetTopologySuite",
    "summary": "Class GeometryMapper Methods to map various collections of Geometrys via defined mapping functions. Inheritance object GeometryMapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public class GeometryMapper Methods | Edit this page View Source FlatMap(Geometry, Dimension, IMapOp) Maps the atomic elements of a Geometry (which may be atomic or composite) using a GeometryMapper.IMapOp mapping operation into an atomic Geometry or a flat collection of the most specific type. null and empty values returned from the mapping operation are discarded. Declaration public static Geometry FlatMap(Geometry geom, Dimension emptyDim, GeometryMapper.IMapOp op) Parameters Type Name Description Geometry geom The geometry to map Dimension emptyDim The dimension of empy geometry to create GeometryMapper.IMapOp op The mapping operation Returns Type Description Geometry The mapped result | Edit this page View Source Map(Geometry, IMapOp) Maps the members of a Geometry (which may be atomic or composite) into another Geometry of most specific type. null results are skipped. In the case of hierarchical GeometryCollections, only the first level of members are mapped. Declaration public static Geometry Map(Geometry geom, GeometryMapper.IMapOp op) Parameters Type Name Description Geometry geom The input atomic or composite geometry GeometryMapper.IMapOp op The mapping operation Returns Type Description Geometry A result collection or geometry of most specific type | Edit this page View Source Map(Geometry, Func<Geometry, Geometry>) Maps the members of a Geometry (which may be atomic or composite) into another Geometry of most specific type. null results are skipped. In the case of hierarchical GeometryCollections, only the first level of members are mapped. Declaration public static Geometry Map(Geometry geom, Func<Geometry, Geometry> op) Parameters Type Name Description Geometry geom The input atomic or composite geometry Func<Geometry, Geometry> op The mapping operation delegate Returns Type Description Geometry A result collection or geometry of most specific type | Edit this page View Source Map(IEnumerable<Geometry>, IMapOp) Declaration public static ReadOnlyCollection<Geometry> Map(IEnumerable<Geometry> geoms, GeometryMapper.IMapOp op) Parameters Type Name Description IEnumerable<Geometry> geoms GeometryMapper.IMapOp op Returns Type Description ReadOnlyCollection<Geometry>"
  },
  "api/NetTopologySuite.Geometries.Utilities.GeometryTransformer.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.GeometryTransformer.html",
    "title": "Class GeometryTransformer | NetTopologySuite",
    "summary": "Class GeometryTransformer A framework for processes which transform an input Geometry into an output Geometry, possibly changing its structure and type(s). Inheritance object GeometryTransformer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public class GeometryTransformer Remarks This class is a framework for implementing subclasses which perform transformations on various different Geometry subclasses. It provides an easy way of applying specific transformations to given point types, while allowing unhandled types to be simply copied. Also, the framework handles ensuring that if subcomponents change type the parent geometries types change appropriately to maintain valid structure. Subclasses will override whichever TransformX methods they need to to handle particular Geometry types. A typically usage would be a transformation that may transform Polygons into Polygons, LineStrings or Points, depending on the geometry of the input (For instance, a simplification operation). This class would likely need to override the TransformMultiPolygon(MultiPolygon, Geometry) method to ensure that if input Polygons change type the result is a GeometryCollection, not a MultiPolygon. The default behaviour of this class is simply to recursively transform each Geometry component into an identical object by deep copying down to the level of, but not including, coordinates. Note that all TransformXXX methods may return null, to avoid creating empty point objects. This will be handled correctly by the transformer. TransformXXX methods should always return valid geometry - if they cannot do this they should return null (for instance, it may not be possible for a transformLineString implementation to return at least two points - in this case, it should return null). The Transform(Geometry) method itself will always return a non-null Geometry object (but this may be empty). Fields | Edit this page View Source Factory The geometry factory Declaration protected GeometryFactory Factory Field Value Type Description GeometryFactory Properties | Edit this page View Source InputGeometry Makes the input geometry available Declaration public Geometry InputGeometry { get; } Property Value Type Description Geometry Methods | Edit this page View Source Copy(CoordinateSequence) Convenience method which provides a standard way of copying CoordinateSequences. Declaration protected virtual CoordinateSequence Copy(CoordinateSequence seq) Parameters Type Name Description CoordinateSequence seq The sequence to copy. Returns Type Description CoordinateSequence A deep copy of the sequence. | Edit this page View Source CreateCoordinateSequence(Coordinate[]) Convenience method which provides standard way of creating a CoordinateSequence. Declaration protected virtual CoordinateSequence CreateCoordinateSequence(Coordinate[] coords) Parameters Type Name Description Coordinate[] coords The coordinate array to copy. Returns Type Description CoordinateSequence A coordinate sequence for the array. | Edit this page View Source Transform(Geometry) Declaration public Geometry Transform(Geometry inputGeom) Parameters Type Name Description Geometry inputGeom Returns Type Description Geometry | Edit this page View Source TransformCoordinates(CoordinateSequence, Geometry) Transforms a CoordinateSequence. This method should always return a valid coordinate list for the desired result type. (E.g. a coordinate list for a LineString must have 0 or at least 2 points). If this is not possible, return an empty sequence - this will be pruned out. Declaration protected virtual CoordinateSequence TransformCoordinates(CoordinateSequence coords, Geometry parent) Parameters Type Name Description CoordinateSequence coords The coordinates to transform Geometry parent The parent geometry Returns Type Description CoordinateSequence The transformed coordinates | Edit this page View Source TransformGeometryCollection(GeometryCollection, Geometry) Transforms a GeometryCollection geometry. Declaration protected virtual Geometry TransformGeometryCollection(GeometryCollection geom, Geometry parent) Parameters Type Name Description GeometryCollection geom The GeometryCollection to transform Geometry parent The parent geometry Returns Type Description Geometry A GeometryCollection | Edit this page View Source TransformLineString(LineString, Geometry) Transforms a LineString geometry. Declaration protected virtual Geometry TransformLineString(LineString geom, Geometry parent) Parameters Type Name Description LineString geom The LineString to transform Geometry parent The parent geometry Returns Type Description Geometry A LineString | Edit this page View Source TransformLinearRing(LinearRing, Geometry) Transforms a LinearRing. The transformation of a LinearRing may result in a coordinate sequence which does not form a structurally valid ring (i.e. a degenerate ring of 3 or fewer points). In this case a LineString is returned. Subclasses may wish to override this method and check for this situation (e.g.a subclass may choose to eliminate degenerate linear rings) Declaration protected virtual Geometry TransformLinearRing(LinearRing geom, Geometry parent) Parameters Type Name Description LinearRing geom The LinearRing to transform Geometry parent The parent geometry Returns Type Description Geometry A LinearRing if the transformation resulted in a structurally valid ring, otherwise, if the transformation caused the LinearRing to collapse to 3 or fewer points, a LineString | Edit this page View Source TransformMultiLineString(MultiLineString, Geometry) Transforms a MultiLineString geometry. Declaration protected virtual Geometry TransformMultiLineString(MultiLineString geom, Geometry parent) Parameters Type Name Description MultiLineString geom The MultiLineString to transform Geometry parent The parent geometry Returns Type Description Geometry A MultiLineString | Edit this page View Source TransformMultiPoint(MultiPoint, Geometry) Transforms a MultiPoint geometry. Declaration protected virtual Geometry TransformMultiPoint(MultiPoint geom, Geometry parent) Parameters Type Name Description MultiPoint geom The MultiPoint to transform Geometry parent The parent geometry Returns Type Description Geometry A MultiPoint | Edit this page View Source TransformMultiPolygon(MultiPolygon, Geometry) Transforms a MultiPolygon geometry. Declaration protected virtual Geometry TransformMultiPolygon(MultiPolygon geom, Geometry parent) Parameters Type Name Description MultiPolygon geom The MultiPolygon to transform Geometry parent The parent geometry Returns Type Description Geometry A MultiPolygon | Edit this page View Source TransformPoint(Point, Geometry) Transforms a Point geometry. Declaration protected virtual Geometry TransformPoint(Point geom, Geometry parent) Parameters Type Name Description Point geom The Point to transform Geometry parent The parent geometry Returns Type Description Geometry A Point | Edit this page View Source TransformPolygon(Polygon, Geometry) Transforms a Polygon geometry. Declaration protected virtual Geometry TransformPolygon(Polygon geom, Geometry parent) Parameters Type Name Description Polygon geom The Polygon to transform Geometry parent The parent geometry Returns Type Description Geometry A Polygon"
  },
  "api/NetTopologySuite.Geometries.Utilities.LineStringExtracter.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.LineStringExtracter.html",
    "title": "Class LineStringExtracter | NetTopologySuite",
    "summary": "Class LineStringExtracter Extracts all the LineString elements from a Geometry. Inheritance object LineStringExtracter Implements IGeometryFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public class LineStringExtracter : IGeometryFilter Constructors | Edit this page View Source LineStringExtracter(ICollection<Geometry>) Constructs a filter with a list in which to store the elements found. Declaration public LineStringExtracter(ICollection<Geometry> comps) Parameters Type Name Description ICollection<Geometry> comps Methods | Edit this page View Source Filter(Geometry) Performs an operation with or on geom. Declaration public void Filter(Geometry geom) Parameters Type Name Description Geometry geom A Geometry to which the filter is applied. | Edit this page View Source GetGeometry(Geometry) Extracts the LineString elements from a single Geometry and returns them as either a LineString or MultiLineString. Declaration public static Geometry GetGeometry(Geometry geom) Parameters Type Name Description Geometry geom The geometry from which to extract Returns Type Description Geometry A linear geometry | Edit this page View Source GetLines(Geometry) Extracts the LineString elements from a single Geometry and returns them in a List<T>. Declaration public static ReadOnlyCollection<Geometry> GetLines(Geometry geom) Parameters Type Name Description Geometry geom The geometry from which to extract Returns Type Description ReadOnlyCollection<Geometry> A list containing the linear elements | Edit this page View Source GetLines<TCollection>(Geometry, TCollection) Extracts the LineString elements from a single Geometry and adds them to theICollection<T>. Declaration public static TCollection GetLines<TCollection>(Geometry geom, TCollection lines) where TCollection : ICollection<Geometry> Parameters Type Name Description Geometry geom The geometry from which to extract TCollection lines The list to add the extracted elements to Returns Type Description TCollection The lines list argument Type Parameters Name Description TCollection Implements IGeometryFilter See Also GeometryExtracter Extracter Extracter<T>"
  },
  "api/NetTopologySuite.Geometries.Utilities.LinearComponentExtracter.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.LinearComponentExtracter.html",
    "title": "Class LinearComponentExtracter | NetTopologySuite",
    "summary": "Class LinearComponentExtracter Extracts all the 1-dimensional (LineString) components from a Geometry. For polygonal geometries, this will extract all the component LinearRings. If desired, LinearRings can be forced to be returned as LineStrings. Inheritance object LinearComponentExtracter Implements IGeometryComponentFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public class LinearComponentExtracter : IGeometryComponentFilter Constructors | Edit this page View Source LinearComponentExtracter(ICollection<Geometry>) Constructs a LineExtracterFilter with a list in which to store LineStrings found. Declaration public LinearComponentExtracter(ICollection<Geometry> lines) Parameters Type Name Description ICollection<Geometry> lines | Edit this page View Source LinearComponentExtracter(ICollection<Geometry>, bool) Constructs a LineExtracterFilter with a list in which to store LineStrings found. Declaration public LinearComponentExtracter(ICollection<Geometry> lines, bool isForcedToLineString) Parameters Type Name Description ICollection<Geometry> lines bool isForcedToLineString Properties | Edit this page View Source IsForcedToLineString Declaration public bool IsForcedToLineString { get; set; } Property Value Type Description bool Methods | Edit this page View Source Filter(Geometry) Declaration public void Filter(Geometry geom) Parameters Type Name Description Geometry geom | Edit this page View Source GetGeometry(Geometry) Extracts the linear components from a single Geometry and returns them as either a LineString or MultiLineString. Declaration public static Geometry GetGeometry(Geometry geom) Parameters Type Name Description Geometry geom The geometry from which to extract Returns Type Description Geometry A linear geometry | Edit this page View Source GetGeometry(Geometry, bool) Extracts the linear components from a single Geometry and returns them as either a LineString or MultiLineString. Declaration public static Geometry GetGeometry(Geometry geom, bool forceToLineString) Parameters Type Name Description Geometry geom The geometry from which to extract bool forceToLineString true if LinearRings should be converted to LineStrings Returns Type Description Geometry A linear geometry | Edit this page View Source GetLines(Geometry) Extracts the linear components from a single point. If more than one point is to be processed, it is more efficient to create a single LineExtracterFilter instance and pass it to multiple geometries. Declaration public static ReadOnlyCollection<Geometry> GetLines(Geometry geom) Parameters Type Name Description Geometry geom The point from which to extract linear components. Returns Type Description ReadOnlyCollection<Geometry> The list of linear components. | Edit this page View Source GetLines(Geometry, bool) Extracts the linear components from a single geometry. If more than one geometry is to be processed, it is more efficient to create a single LinearComponentExtracter instance and pass it to multiple geometries. Declaration public static ReadOnlyCollection<Geometry> GetLines(Geometry geom, bool forceToLineString) Parameters Type Name Description Geometry geom The geometry from which to extract linear components bool forceToLineString true if LinearRings should be converted to LineStrings Returns Type Description ReadOnlyCollection<Geometry> The list of linear components | Edit this page View Source GetLines<TCollection>(Geometry, TCollection) Extracts the linear components from a single Geometry and adds them to the provided ICollection<T>. Declaration public static TCollection GetLines<TCollection>(Geometry geom, TCollection lines) where TCollection : ICollection<Geometry> Parameters Type Name Description Geometry geom The geometry from which to extract linear components TCollection lines The Collection to add the extracted linear components to Returns Type Description TCollection The Collection of linear components (LineStrings or LinearRings) Type Parameters Name Description TCollection | Edit this page View Source GetLines<TCollection>(Geometry, TCollection, bool) Extracts the linear components from a single Geometry and adds them to the provided ICollection<T>. Declaration public static TCollection GetLines<TCollection>(Geometry geom, TCollection lines, bool forceToLineString) where TCollection : ICollection<Geometry> Parameters Type Name Description Geometry geom The geometry from which to extract linear components TCollection lines The Collection to add the extracted linear components to bool forceToLineString Returns Type Description TCollection The Collection of linear components (LineStrings or LinearRings) Type Parameters Name Description TCollection | Edit this page View Source GetLines<TCollection>(IEnumerable<Geometry>, TCollection) Extracts the linear components from a IEnumerable<T> and adds them to the provided ICollection<T>. Declaration public static TCollection GetLines<TCollection>(IEnumerable<Geometry> geoms, TCollection lines) where TCollection : ICollection<Geometry> Parameters Type Name Description IEnumerable<Geometry> geoms The geometry from which to extract linear components TCollection lines The Collection to add the extracted linear components to Returns Type Description TCollection The Collection of linear components (LineStrings or LinearRings) Type Parameters Name Description TCollection | Edit this page View Source GetLines<TCollection>(IEnumerable<Geometry>, TCollection, bool) Extracts the linear components from a IEnumerable<T> and adds them to the provided ICollection<T>. Declaration public static TCollection GetLines<TCollection>(IEnumerable<Geometry> geoms, TCollection lines, bool forceToLineString) where TCollection : ICollection<Geometry> Parameters Type Name Description IEnumerable<Geometry> geoms The geometry from which to extract linear components TCollection lines The Collection to add the extracted linear components to bool forceToLineString Returns Type Description TCollection The Collection of linear components (LineStrings or LinearRings) Type Parameters Name Description TCollection Implements IGeometryComponentFilter"
  },
  "api/NetTopologySuite.Geometries.Utilities.Matrix.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.Matrix.html",
    "title": "Class Matrix | NetTopologySuite",
    "summary": "Class Matrix Implements some 2D matrix operations (in particular, solving systems of linear equations). Inheritance object Matrix Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public class Matrix Methods | Edit this page View Source Solve(double[][], double[]) Solves a system of equations using Gaussian Elimination. In order to avoid overhead the algorithm runs in-place on A - if A should not be modified the client must supply a copy. Declaration public static double[] Solve(double[][] a, double[] b) Parameters Type Name Description double[][] a A an nxn matrix in row/column order )modified by this method) double[] b A vector of length n Returns Type Description double[] A vector containing the solution (if any) null if the system has no or no unique solution Exceptions Type Condition ArgumentException if the matrix is the wrong size"
  },
  "api/NetTopologySuite.Geometries.Utilities.NoninvertibleTransformationException.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.NoninvertibleTransformationException.html",
    "title": "Class NoninvertibleTransformationException | NetTopologySuite",
    "summary": "Class NoninvertibleTransformationException Indicates that an AffineTransformation is non-invertible. Inheritance object Exception NoninvertibleTransformationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public class NoninvertibleTransformationException : Exception, ISerializable Constructors | Edit this page View Source NoninvertibleTransformationException() Declaration public NoninvertibleTransformationException() | Edit this page View Source NoninvertibleTransformationException(string) Declaration public NoninvertibleTransformationException(string transformationIsNonInvertible) Parameters Type Name Description string transformationIsNonInvertible Implements ISerializable"
  },
  "api/NetTopologySuite.Geometries.Utilities.PointExtracter.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.PointExtracter.html",
    "title": "Class PointExtracter | NetTopologySuite",
    "summary": "Class PointExtracter Extracts all the 0-dimensional (Point) components from a Geometry. Inheritance object PointExtracter Implements IGeometryFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public class PointExtracter : IGeometryFilter Constructors | Edit this page View Source PointExtracter(ICollection<Geometry>) Constructs a PointExtracterFilter with a list in which to store Points found. Declaration public PointExtracter(ICollection<Geometry> pts) Parameters Type Name Description ICollection<Geometry> pts Methods | Edit this page View Source Filter(Geometry) Declaration public void Filter(Geometry geom) Parameters Type Name Description Geometry geom | Edit this page View Source GetPoints(Geometry) Extracts the Point elements from a single Geometry and returns them in a IList<T>. Declaration public static ReadOnlyCollection<Geometry> GetPoints(Geometry geom) Parameters Type Name Description Geometry geom the geometry from which to extract Returns Type Description ReadOnlyCollection<Geometry> | Edit this page View Source GetPoints<TCollection>(Geometry, TCollection) Extracts the Point elements from a single Geometry and adds them to the provided ICollection<T>. Declaration public static TCollection GetPoints<TCollection>(Geometry geom, TCollection list) where TCollection : ICollection<Geometry> Parameters Type Name Description Geometry geom The geometry from which to extract TCollection list The list to add the extracted elements to Returns Type Description TCollection Type Parameters Name Description TCollection Implements IGeometryFilter See Also GeometryExtracter Extracter Extracter<T>"
  },
  "api/NetTopologySuite.Geometries.Utilities.PolygonExtracter.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.PolygonExtracter.html",
    "title": "Class PolygonExtracter | NetTopologySuite",
    "summary": "Class PolygonExtracter Extracts all the Polygon elements from a Geometry. Inheritance object PolygonExtracter Implements IGeometryFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public class PolygonExtracter : IGeometryFilter Constructors | Edit this page View Source PolygonExtracter(IList<Geometry>) Constructs a PolygonExtracterFilter with a list in which to store Polygons found. Declaration public PolygonExtracter(IList<Geometry> comps) Parameters Type Name Description IList<Geometry> comps Methods | Edit this page View Source Filter(Geometry) Declaration public void Filter(Geometry geom) Parameters Type Name Description Geometry geom | Edit this page View Source GetPolygons(Geometry) Extracts the Polygon elements from a single Geometry and returns them in a IList<T>. Declaration public static IList<Geometry> GetPolygons(Geometry geom) Parameters Type Name Description Geometry geom The geometry from which to extract Returns Type Description IList<Geometry> | Edit this page View Source GetPolygons(Geometry, IList<Geometry>) Extracts the Polygon elements from a single Geometry and adds them to the provided IList<T>. Declaration public static IList<Geometry> GetPolygons(Geometry geom, IList<Geometry> list) Parameters Type Name Description Geometry geom The geometry from which to extract IList<Geometry> list The list to add the extracted elements to Returns Type Description IList<Geometry> Implements IGeometryFilter See Also GeometryExtracter Extracter Extracter<T>"
  },
  "api/NetTopologySuite.Geometries.Utilities.PolygonalExtracter.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.PolygonalExtracter.html",
    "title": "Class PolygonalExtracter | NetTopologySuite",
    "summary": "Class PolygonalExtracter . Inheritance object PolygonalExtracter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public static class PolygonalExtracter Methods | Edit this page View Source GetPolygonals<TCollection>(Geometry) Extracts the Polygon and MultiPolygon elements from a Geometry and returns them in a list. Declaration public static TCollection GetPolygonals<TCollection>(this Geometry geom) where TCollection : ICollection<Geometry>, new() Parameters Type Name Description Geometry geom The geometry from which to extract Returns Type Description TCollection Type Parameters Name Description TCollection | Edit this page View Source GetPolygonals<TCollection>(Geometry, TCollection) Extracts the Polygon and MultiPolygon elements from a Geometry and adds them to the provided list. Declaration public static TCollection GetPolygonals<TCollection>(this Geometry geom, TCollection list) where TCollection : ICollection<Geometry> Parameters Type Name Description Geometry geom The geometry from which to extract TCollection list The list to add the extracted elements to Returns Type Description TCollection Type Parameters Name Description TCollection"
  },
  "api/NetTopologySuite.Geometries.Utilities.ShortCircuitedGeometryVisitor.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.ShortCircuitedGeometryVisitor.html",
    "title": "Class ShortCircuitedGeometryVisitor | NetTopologySuite",
    "summary": "Class ShortCircuitedGeometryVisitor A visitor to Geometry elements which components, which allows short-circuiting when a defined condition holds. Inheritance object ShortCircuitedGeometryVisitor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public abstract class ShortCircuitedGeometryVisitor Methods | Edit this page View Source ApplyTo(Geometry) Declaration public void ApplyTo(Geometry geom) Parameters Type Name Description Geometry geom | Edit this page View Source IsDone() Reports whether visiting components can be terminated. Once this method returns true, it must continue to return true on every subsequent call. Declaration protected abstract bool IsDone() Returns Type Description bool true if visiting can be terminated. | Edit this page View Source Visit(Geometry) Declaration protected abstract void Visit(Geometry element) Parameters Type Name Description Geometry element"
  },
  "api/NetTopologySuite.Geometries.Utilities.SineStarFactory.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.SineStarFactory.html",
    "title": "Class SineStarFactory | NetTopologySuite",
    "summary": "Class SineStarFactory Creates geometries which are shaped like multi-armed stars with each arm shaped like a sine wave. These kinds of geometries are useful as a more complex geometry for testing algorithms. Inheritance object GeometricShapeFactory SineStarFactory Inherited Members GeometricShapeFactory.GeomFact GeometricShapeFactory.PrecModel GeometricShapeFactory.Base GeometricShapeFactory.Centre GeometricShapeFactory.Envelope GeometricShapeFactory.NumPoints GeometricShapeFactory.Size GeometricShapeFactory.Width GeometricShapeFactory.Height GeometricShapeFactory.Rotation GeometricShapeFactory.Rotate(Geometry) GeometricShapeFactory.CreateCoord(double, double) GeometricShapeFactory.CreateCoordTrans(double, double, Coordinate) GeometricShapeFactory.CreateRectangle() GeometricShapeFactory.CreateCircle() GeometricShapeFactory.CreateEllipse() GeometricShapeFactory.CreateSquircle() GeometricShapeFactory.CreateSupercircle(double) GeometricShapeFactory.CreateArc(double, double) GeometricShapeFactory.CreateArcPolygon(double, double) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Geometries.Utilities Assembly: NetTopologySuite.dll Syntax public class SineStarFactory : GeometricShapeFactory Constructors | Edit this page View Source SineStarFactory() Creates a factory which will create sine stars using the default GeometryFactory Declaration public SineStarFactory() | Edit this page View Source SineStarFactory(GeometryFactory) Creates a factory which will create sine stars using the given GeometryFactory Declaration public SineStarFactory(GeometryFactory geomFact) Parameters Type Name Description GeometryFactory geomFact The factory to use Properties | Edit this page View Source ArmLengthRatio Gets or sets the ratio of the length of each arm to the radius of the star. A smaller number makes the arms shorter. Declaration public double ArmLengthRatio { get; set; } Property Value Type Description double Remarks Value should be between 0.0 and 1.0 | Edit this page View Source NumArms Gets/Sets the number of arms in the star Declaration public int NumArms { get; set; } Property Value Type Description int Methods | Edit this page View Source Create(Coordinate, double, int, int, double) Creates a sine star with the given parameters. Declaration public static Geometry Create(Coordinate origin, double size, int nPts, int nArms, double armLengthRatio) Parameters Type Name Description Coordinate origin The origin point. double size The size of the star. int nPts The number of points in the star. int nArms The number of arms to generate. double armLengthRatio The arm length ratio. Returns Type Description Geometry A sine star shape. | Edit this page View Source CreateSineStar() Generates the geometry for the sine star Declaration public Geometry CreateSineStar() Returns Type Description Geometry The geometry representing the sine star"
  },
  "api/NetTopologySuite.Geometries.Utilities.html": {
    "href": "api/NetTopologySuite.Geometries.Utilities.html",
    "title": "Namespace NetTopologySuite.Geometries.Utilities | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Geometries.Utilities Provides classes that parse and modify Geometry objects. Classes AffineTransformation Represents an affine transformation on the 2D Cartesian plane. AffineTransformationBuilder Builds an AffineTransformation defined by a set of control vectors. AffineTransformationFactory Supports creating AffineTransformations defined by various kinds of inputs and transformation mapping rules. ComponentCoordinateExtracter Extracts a representative Coordinate from each connected component of a Geometry. EnvelopeCombiner Utility to combine just the Envelopes of a list of geometries. Extracter This class offers utility methods to extract single component geometries of requested type from ordinary geometries. Extracter<T> Class to extract single instance geometries of T GeometryCollectionMapper Maps the members of a GeometryCollection into another GeometryCollection via a defined mapping function. GeometryCombiner Combines Geometrys to produce a GeometryCollection of the most appropriate type. GeometryEditor A class which supports creating new Geometrys which are modifications of existing ones, maintaining the same type structure. GeometryEditor.CoordinateOperation A GeometryEditorOperation which edits the coordinate list of a Geometry. Operates on Geometry subclasses which contains a single coordinate list. GeometryEditor.CoordinateSequenceOperation A GeometryEditor.IGeometryEditorOperation which edits the CoordinateSequence of a Geometry. Operates on Geometry subclasses which contains a single coordinate list. GeometryEditor.NoOpGeometryOperation A GeometryEditorOperation which does not modify the input geometry. This can be used for simple changes of GeometryFactory (including PrecisionModel and SRID). GeometryExtracter Extracts the components of a given type from a Geometry. GeometryExtracterByTypeName Extracts the components of type T from a Geometry. GeometryExtracter<T> Extracts the components of type T from a Geometry. GeometryFixer Fixes a geometry to be a valid geometry, while preserving as much as possible of the shape and location of the input. Validity is determined according to IsValid. Input geometries are always processed, so even valid inputs may have some minor alterations.The output is always a new geometry object. Semantic Rules Vertices with non-finite X or Y ordinates are removed (as per IsValid) Repeated points are reduced to a single point Empty atomic geometries are valid and are returned unchanged Empty elements are removed from collections Point: keep valid coordinate, or EMPTY LineString: coordinates are fixed LinearRing: coordinates are feixed, keep valid ring or else convert into LineString Polygon: transform into a valid polygon or multipolygon, preserving as much of the extent and vertices as possible. Rings are fixed to ensure they are valid Holes intersection the shell are subtracted from the shell Holes outside the shell are converted into polygons MultiPolygon: each polygon is fixed, then result made non - overlapping (via union) GeometryCollection: each element is fixed Collapsed lines and polygons are handled as follows, depending on the keepCollapsed setting: false: (default) collapses are converted to empty geometries (and removed if they are elements of collections) true: collapses are converted to a valid geometry of lower dimension GeometryMapper Methods to map various collections of Geometrys via defined mapping functions. GeometryMapper.MapOp Standard implementation of a geometry mapping GeometryTransformer A framework for processes which transform an input Geometry into an output Geometry, possibly changing its structure and type(s). LineStringExtracter Extracts all the LineString elements from a Geometry. LinearComponentExtracter Extracts all the 1-dimensional (LineString) components from a Geometry. For polygonal geometries, this will extract all the component LinearRings. If desired, LinearRings can be forced to be returned as LineStrings. Matrix Implements some 2D matrix operations (in particular, solving systems of linear equations). NoninvertibleTransformationException Indicates that an AffineTransformation is non-invertible. PointExtracter Extracts all the 0-dimensional (Point) components from a Geometry. PolygonExtracter Extracts all the Polygon elements from a Geometry. PolygonalExtracter . ShortCircuitedGeometryVisitor A visitor to Geometry elements which components, which allows short-circuiting when a defined condition holds. SineStarFactory Creates geometries which are shaped like multi-armed stars with each arm shaped like a sine wave. These kinds of geometries are useful as a more complex geometry for testing algorithms. Interfaces GeometryEditor.IGeometryEditorOperation A interface which specifies an edit operation for Geometries. GeometryMapper.IMapOp An interface for geometry functions used for mapping."
  },
  "api/NetTopologySuite.Geometries.html": {
    "href": "api/NetTopologySuite.Geometries.html",
    "title": "Namespace NetTopologySuite.Geometries | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Geometries Contains the Geometry class hierarchy. The .Net Topology Suite (NTS) is a .Net API that implements a core set of spatial data operations using an explicit precision model and robust geometric algorithms. NTS is intended to be used in the development of applications that support the validation, cleaning, integration and querying of spatial datasets. It is a direct port of the popular Java Topology Suite (JTS). NTS attempts to implement the OpenGIS Simple Features Specification (SFS) as accurately as possible. In some cases the SFS is unclear or omits a specification; in this case NTS attempts to choose a reasonable and consistent alternative. Differences from and elaborations of the SFS are documented in this specification. Package Specification Java Topology Suite Technical Specifications OpenGIS Simple Features Specification for SQL Classes Coordinate A lightweight class used to store coordinates on the 2-dimensional Cartesian plane. The base data object is suitable for use with coordinate sequences with dimension = 2 and measures = 0. CoordinateArrays Useful utility functions for handling Coordinate arrays. CoordinateArrays.BidirectionalComparator A comparator for Coordinate arrays modulo their directionality. E.g. if two coordinate arrays are identical but reversed they will compare as equal under this ordering. If the arrays are not equal, the ordering returned is the ordering in the forward direction. CoordinateArrays.ForwardComparator Compares two Coordinate arrays in the forward direction of their coordinates, using lexicographic ordering. CoordinateEqualityComparer A class that can be used to test coordinates for equality. It uses the algorithm that was default for NTS prior to v2.2, i.e. checks if the 2d distance between coordinates x and y is less than or equal to a tolerance value. CoordinateFilter An implementation of ICoordinateFilter that delegates the filter action to a provided method. CoordinateList A list of Coordinates, which may be set to prevent repeated coordinates from occurring in the list. CoordinateM A lightweight class used to store coordinates on the 2-dimensional Cartesian plane and an additional measure (M) value. This data object is suitable for use with coordinate sequences with dimension = 3 and measures = 1. CoordinateSequence CoordinateSequenceComparator Compares two CoordinateSequences. CoordinateSequenceEx CoordinateSequenceFactory An object that knows how to build a particular implementation of CoordinateSequence from an array of Coordinates. CoordinateSequences Utility functions for manipulating CoordinateSequences. CoordinateZ A lightweight class used to store coordinates on the 2-dimensional Cartesian plane and an additional z-ordinate (Z) value. This base data object is suitable for use with coordinate sequences with dimension = 3 and measures = 0. CoordinateZM A lightweight class used to store coordinates on the 2-dimensional Cartesian plane and additional z- and m-ordinate values (Z, M). This data object is suitable for use with coordinate sequences with dimension = 4 and measures = 1. Coordinates Useful utility functions for handling Coordinate objects. DimensionUtility Class containing static methods for conversions between dimension values and characters. Envelope Defines a rectangular region of the 2D coordinate plane. Geometry A representation of a planar, linear vector geometry. GeometryCollection Basic implementation of GeometryCollection. GeometryCollectionEnumerator Iterates over all Geometry's in a GeometryCollection. Implements a pre-order depth-first traversal of the GeometryCollection (which may be nested). The original GeometryCollection is returned as well (as the first object), as are all sub-collections. It is simple to ignore the GeometryCollection objects if they are not needed. GeometryComponentFilter An IGeometryComponentFilter implementation that applies filtering with the provided FilterMethod GeometryFactory Supplies a set of utility methods for building Geometry objects from lists of Coordinates. GeometryFactoryEx An extended GeometryFactory that is capable of enforcing a ring orientation for polygons. GeometryOverlay A class that encapsulates geometry overlay functionality GeometryRelate Class which provides the available Relate operations for NtsGeometryServices. IntersectionMatrix Models a Dimensionally Extended Nine-Intersection Model (DE-9IM) matrix. LineSegment Represents a line segment defined by two Coordinates. Provides methods to compute various geometric properties and relationships of line segments. This class is designed to be easily mutable (to the extent of having its contained points public). This supports a common pattern of reusing a single LineSegment object as a way of computing segment properties on the segments defined by arrays or lists of Coordinates. LineString Models an OGC-style LineString LinearRing Models an OGC SFS LinearRing. LocationUtility Utility class for Location enumeration MultiLineString Models a collection of LineStrings. Any collection of LineStrings is a valid MultiLineString. MultiPoint Models a collection of Points. MultiPolygon Basic implementation of MultiPolygon. OctagonalEnvelope A bounding container for a Geometry which is in the shape of a general octagon. OgcCompliantGeometryFactory OGC compliant geometry factory OrdinatesUtility Static utility functions for dealing with Ordinates and dimension PerOrdinateEqualityComparer A class that can be used to test coordinates for equality. This class test for each ordinate if the distance is less than a tolerance value. Point Represents a single point. A Point is topologically valid if and only if: The coordinate which defines it if any) is a valid coordinate (i.e. does not have an NaN X- or Y-ordinate Polygon Represents a polygon with linear edges, which may include holes. The outer boundary (shell) and inner boundaries (holes) of the polygon are represented by {@link LinearRing}s. The boundary rings of the polygon may have any orientation. Polygons are closed, simple geometries by definition. The polygon model conforms to the assertions specified in the OpenGIS Simple Features Specification for SQL. A Polygon is topologically valid if and only if: the coordinates which define it are valid coordinates the linear rings for the shell and holes are valid (i.e. are closed and do not self-intersect) holes touch the shell or another hole at at most one point (which implies that the rings of the shell and holes must not cross) the interior of the polygon is connected, or equivalently no sequence of touching holes makes the interior of the polygon disconnected (i.e. effectively split the polygon into two pieces). PrecisionModel Specifies the precision model of the Coordinates in a Geometry. In other words, specifies the grid of allowable points for a Geometry. A precision model may befloating (Floating or FloatingSingle), in which case normal floating-point value semantics apply. TopologyException Indicates an invalid or inconsistent topological situation encountered during processing Triangle Represents a planar triangle, and provides methods for calculating various properties of triangles. Structs Position Indicates the position of a location relative to a node or edge component of a planar topological structure. Quadrant Quadrant values Interfaces IBoundable<T, TItem> A spatial object in an AbstractSTRtree. ICoordinateFilter An interface for classes which use the values of the coordinates in a Geometry. Coordinate filters can be used to implement centroid and envelope computation, and many other functions. ICoordinateFilter is an example of the Gang-of-Four Visitor pattern. Note: it is not recommended to use these filters to mutate the coordinates. There is no guarantee that the coordinate is the actual object stored in the source geometry. In particular, modified values may not be preserved if the source Geometry uses a non-default CoordinateSequence. If in-place mutation is required, use ICoordinateSequenceFilter. ICoordinateSequenceFilter An interface for classes which process the coordinates in a CoordinateSequence. A filter can either record information about each coordinate, or change the value of the coordinate. Filters can be used to implement operations such as coordinate transformations, centroid and envelope computation, and many other functions. Geometry classes support the concept of applying a CoordinateSequenceFilter to each CoordinateSequences they contain. For maximum efficiency, the execution of filters can be short-circuited by using the Done property. IEntireCoordinateSequenceFilter A variant of ICoordinateSequenceFilter, except it receives each CoordinateSequence just once, instead of once for each of its coordinates. IExpandable<T> Interface describing objects that can expand themselves by objects of type T. IGeometryComponentFilter Geometry classes support the concept of applying an IGeometryComponentFilter filter to a geometry. IGeometryFilter GeometryCollection classes support the concept of applying a IGeometryFilter to the Geometry. The filter is applied to every element Geometry. A IGeometryFilter can either record information about the Geometry or change the Geometry in some way. IGeometryFilter is an example of the Gang-of-Four Visitor pattern. IIntersectable<T> Interface describing objects that can perform an intersects predicate with T objects. ILineal Interface to identify all Geometry subclasses that have a Dimension of Curve and have components which are LineStrings. IPolygonal Interface to identify all Geometry subclasses that have a Dimension of Surface and have components that are Polygons. IPuntal Interface to identify all Geometry subclasses that have a Dimension of Point and have components that ar Points. Enums Dimension Provides constants representing the dimensions of a point, a curve and a surface. Geometry.SortIndexValue An enumeration of sort values for geometries LinearRingOrientation An enumeration of ring orientation values Location The location of a Coordinate relative to a Geometry OgcGeometryType Enumeration of OGC Geometry Types Ordinate Identifies the different well-supported components of coordinate values. All supported coordinates define values for at least the X and the Y components. The first 16 spatial and 16 measure dimensions may also be accessed this way. Ordinates Flags for Ordinate values PrecisionModels Delegates FilterMethod Delegate function declaration to handle filter operation"
  },
  "api/NetTopologySuite.GeometriesGraph.Depth.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.Depth.html",
    "title": "Class Depth | NetTopologySuite",
    "summary": "Class Depth A Depth object records the topological depth of the sides of an Edge for up to two Geometries. Inheritance object Depth Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.GeometriesGraph Assembly: NetTopologySuite.dll Syntax public class Depth Constructors | Edit this page View Source Depth() Declaration public Depth() Properties | Edit this page View Source this[int, Positions] Calls GetDepth and SetDepth. Declaration [Obsolete(\"Use GetDepth, SetDepth\")] public int this[int geomIndex, Positions posIndex] { get; set; } Parameters Type Name Description int geomIndex Positions posIndex Property Value Type Description int Methods | Edit this page View Source Add(Label) Declaration public void Add(Label lbl) Parameters Type Name Description Label lbl | Edit this page View Source Add(int, Positions, Location) Declaration [Obsolete(\"This method is not used and will be removed in a later release.\")] public void Add(int geomIndex, Positions posIndex, Location _location) Parameters Type Name Description int geomIndex Positions posIndex Location _location | Edit this page View Source DepthAtLocation(Location) Declaration public static int DepthAtLocation(Location _location) Parameters Type Name Description Location _location Returns Type Description int | Edit this page View Source GetDelta(int) Declaration public int GetDelta(int geomIndex) Parameters Type Name Description int geomIndex Returns Type Description int | Edit this page View Source GetDepth(int, Position) Declaration public int GetDepth(int geomIndex, Position posIndex) Parameters Type Name Description int geomIndex Position posIndex Returns Type Description int | Edit this page View Source GetDepth(int, Positions) Declaration [Obsolete(\"Use GetDepth(int, Geometries.Position)\")] public int GetDepth(int geomIndex, Positions posIndex) Parameters Type Name Description int geomIndex Positions posIndex Returns Type Description int | Edit this page View Source GetLocation(int, Position) Declaration public Location GetLocation(int geomIndex, Position posIndex) Parameters Type Name Description int geomIndex Position posIndex Returns Type Description Location | Edit this page View Source GetLocation(int, Positions) Declaration [Obsolete(\"Use GetLocation(int, Geometries.Position)\")] public Location GetLocation(int geomIndex, Positions posIndex) Parameters Type Name Description int geomIndex Positions posIndex Returns Type Description Location | Edit this page View Source IsNull() A Depth object is null (has never been initialized) if all depths are null. Declaration public bool IsNull() Returns Type Description bool true if depth is null (has never been initialized) | Edit this page View Source IsNull(int) Declaration public bool IsNull(int geomIndex) Parameters Type Name Description int geomIndex Returns Type Description bool | Edit this page View Source IsNull(int, Position) Declaration public bool IsNull(int geomIndex, Position posIndex) Parameters Type Name Description int geomIndex Position posIndex Returns Type Description bool | Edit this page View Source IsNull(int, Positions) Declaration [Obsolete(\"Use IsNull(int, Geometries.Position)\")] public bool IsNull(int geomIndex, Positions posIndex) Parameters Type Name Description int geomIndex Positions posIndex Returns Type Description bool | Edit this page View Source Normalize() Normalize the depths for each point, if they are non-null. A normalized depth has depth values in the set { 0, 1 }. Normalizing the depths involves reducing the depths by the same amount so that at least one of them is 0. If the remaining value is > 0, it is set to 1. Declaration public void Normalize() | Edit this page View Source SetDepth(int, Position, int) Declaration public void SetDepth(int geomIndex, Position posIndex, int depthValue) Parameters Type Name Description int geomIndex Position posIndex int depthValue | Edit this page View Source SetDepth(int, Positions, int) Declaration [Obsolete(\"Use SetDepth(int, Geometries.Position, int)\")] public void SetDepth(int geomIndex, Positions posIndex, int depthValue) Parameters Type Name Description int geomIndex Positions posIndex int depthValue | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/NetTopologySuite.GeometriesGraph.DirectedEdge.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.DirectedEdge.html",
    "title": "Class DirectedEdge | NetTopologySuite",
    "summary": "Class DirectedEdge Inheritance object EdgeEnd DirectedEdge Implements IComparable<EdgeEnd> Inherited Members EdgeEnd.Init(Coordinate, Coordinate) EdgeEnd.Edge EdgeEnd.Label EdgeEnd.Coordinate EdgeEnd.DirectedCoordinate EdgeEnd.Quadrant EdgeEnd.QuadrantEx EdgeEnd.Dx EdgeEnd.Dy EdgeEnd.Node EdgeEnd.CompareTo(EdgeEnd) EdgeEnd.CompareDirection(EdgeEnd) EdgeEnd.ComputeLabel(IBoundaryNodeRule) EdgeEnd.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.GeometriesGraph Assembly: NetTopologySuite.dll Syntax public class DirectedEdge : EdgeEnd, IComparable<EdgeEnd> Constructors | Edit this page View Source DirectedEdge(Edge, bool) Declaration public DirectedEdge(Edge edge, bool isForward) Parameters Type Name Description Edge edge bool isForward Properties | Edit this page View Source DepthDelta Declaration public int DepthDelta { get; } Property Value Type Description int | Edit this page View Source EdgeRing Declaration public EdgeRing EdgeRing { get; set; } Property Value Type Description EdgeRing | Edit this page View Source InResult Declaration public bool InResult { get; set; } Property Value Type Description bool | Edit this page View Source IsForward Declaration public bool IsForward { get; protected set; } Property Value Type Description bool | Edit this page View Source IsInResult Declaration public bool IsInResult { get; } Property Value Type Description bool | Edit this page View Source IsInteriorAreaEdge This is an interior Area edge if its label is an Area label for both Geometries and for each Geometry both sides are in the interior. Declaration public bool IsInteriorAreaEdge { get; } Property Value Type Description bool true if this is an interior Area edge. | Edit this page View Source IsLineEdge Gets a value indicating if this edge is a line edge. It is if at least one of the labels is a line label any labels which are not line labels have all Location = Exterior. Declaration public bool IsLineEdge { get; } Property Value Type Description bool true if edge is a line edge | Edit this page View Source IsVisited Declaration public bool IsVisited { get; } Property Value Type Description bool | Edit this page View Source MinEdgeRing Declaration public EdgeRing MinEdgeRing { get; set; } Property Value Type Description EdgeRing | Edit this page View Source Next Declaration public DirectedEdge Next { get; set; } Property Value Type Description DirectedEdge | Edit this page View Source NextMin Declaration public DirectedEdge NextMin { get; set; } Property Value Type Description DirectedEdge | Edit this page View Source Sym Declaration public DirectedEdge Sym { get; set; } Property Value Type Description DirectedEdge | Edit this page View Source Visited Declaration public bool Visited { get; set; } Property Value Type Description bool | Edit this page View Source VisitedEdge Gets or sets a value indicating if both Visited and Sym.Visited are true. Setting the property marks both DirectedEdges attached to a given Edge. This is used for edges corresponding to lines, which will only appear oriented in a single direction in the result. Declaration public bool VisitedEdge { get; set; } Property Value Type Description bool Methods | Edit this page View Source DepthFactor(Location, Location) Computes the factor for the change in depth when moving from one location to another. E.g. if crossing from the Interior to the Exterior the depth decreases, so the factor is -1. Declaration public static int DepthFactor(Location currLocation, Location nextLocation) Parameters Type Name Description Location currLocation The current location Location nextLocation The next location Returns Type Description int Change of depth moving from currLocation to nextLocation | Edit this page View Source GetDepth(Position) Declaration public int GetDepth(Position position) Parameters Type Name Description Position position Returns Type Description int | Edit this page View Source GetDepth(Positions) Declaration [Obsolete(\"Use GetDepth(Geometries.Position)\")] public int GetDepth(Positions position) Parameters Type Name Description Positions position Returns Type Description int | Edit this page View Source SetDepth(Position, int) Set depth for a position Declaration public void SetDepth(Position position, int depthVal) Parameters Type Name Description Position position The position to update int depthVal The depth at the provided position | Edit this page View Source SetDepth(Positions, int) Declaration [Obsolete(\"Use SetDepth(Geometries.Position, int)\")] public void SetDepth(Positions position, int depthVal) Parameters Type Name Description Positions position int depthVal | Edit this page View Source SetEdgeDepths(Position, int) Set both edge depths. One depth for a given side is provided. The other is computed depending on the Location transition and the depthDelta of the edge. Declaration public void SetEdgeDepths(Position position, int depth) Parameters Type Name Description Position position The position to update int depth The depth at the provided position | Edit this page View Source SetEdgeDepths(Positions, int) Set both edge depths. One depth for a given side is provided. The other is computed depending on the Location transition and the depthDelta of the edge. Declaration [Obsolete(\"Use SetEdgeDepths(Topology.Postion, int)\")] public void SetEdgeDepths(Positions position, int depth) Parameters Type Name Description Positions position The position to update int depth The depth at the provided position | Edit this page View Source Write(StreamWriter) Declaration public override void Write(StreamWriter outstream) Parameters Type Name Description StreamWriter outstream Overrides EdgeEnd.Write(StreamWriter) | Edit this page View Source WriteEdge(StreamWriter) Declaration public void WriteEdge(StreamWriter outstream) Parameters Type Name Description StreamWriter outstream Implements IComparable<T>"
  },
  "api/NetTopologySuite.GeometriesGraph.DirectedEdgeStar.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.DirectedEdgeStar.html",
    "title": "Class DirectedEdgeStar | NetTopologySuite",
    "summary": "Class DirectedEdgeStar A DirectedEdgeStar is an ordered list of outgoing DirectedEdges around a node. It supports labelling the edges as well as linking the edges to form both MaximalEdgeRings and MinimalEdgeRings. Inheritance object EdgeEndStar DirectedEdgeStar Inherited Members EdgeEndStar.edgeMap EdgeEndStar.edgeList EdgeEndStar.InsertEdgeEnd(EdgeEnd, EdgeEnd) EdgeEndStar.Coordinate EdgeEndStar.Degree EdgeEndStar.GetEnumerator() EdgeEndStar.Edges EdgeEndStar.GetNextCW(EdgeEnd) EdgeEndStar.IsAreaLabelsConsistent(GeometryGraph) EdgeEndStar.PropagateSideLabels(int) EdgeEndStar.FindIndex(EdgeEnd) EdgeEndStar.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.GeometriesGraph Assembly: NetTopologySuite.dll Syntax public class DirectedEdgeStar : EdgeEndStar Properties | Edit this page View Source Label Declaration public Label Label { get; } Property Value Type Description Label Methods | Edit this page View Source ComputeDepths(DirectedEdge) Declaration public void ComputeDepths(DirectedEdge de) Parameters Type Name Description DirectedEdge de | Edit this page View Source ComputeLabelling(GeometryGraph[]) Compute the labelling for all dirEdges in this star, as well as the overall labelling. Declaration public override void ComputeLabelling(GeometryGraph[] geom) Parameters Type Name Description GeometryGraph[] geom Overrides EdgeEndStar.ComputeLabelling(GeometryGraph[]) | Edit this page View Source FindCoveredLineEdges() Traverse the star of edges, maintaining the current location in the result area at this node (if any). If any L edges are found in the interior of the result, mark them as covered. Declaration public void FindCoveredLineEdges() | Edit this page View Source GetOutgoingDegree() Declaration public int GetOutgoingDegree() Returns Type Description int | Edit this page View Source GetOutgoingDegree(EdgeRing) Declaration public int GetOutgoingDegree(EdgeRing er) Parameters Type Name Description EdgeRing er Returns Type Description int | Edit this page View Source GetRightmostEdge() Declaration public DirectedEdge GetRightmostEdge() Returns Type Description DirectedEdge | Edit this page View Source Insert(EdgeEnd) Insert a directed edge in the list. Declaration public override void Insert(EdgeEnd ee) Parameters Type Name Description EdgeEnd ee Overrides EdgeEndStar.Insert(EdgeEnd) | Edit this page View Source LinkAllDirectedEdges() Declaration public void LinkAllDirectedEdges() | Edit this page View Source LinkMinimalDirectedEdges(EdgeRing) Declaration public void LinkMinimalDirectedEdges(EdgeRing er) Parameters Type Name Description EdgeRing er | Edit this page View Source LinkResultDirectedEdges() Traverse the star of DirectedEdges, linking the included edges together. To link two dirEdges, the next pointer for an incoming dirEdge is set to the next outgoing edge. DirEdges are only linked if: they belong to an area (i.e. they have sides) they are marked as being in the result Edges are linked in CCW order (the order they are stored). This means that rings have their face on the Right (in other words, the topological location of the face is given by the RHS label of the DirectedEdge). PRECONDITION: No pair of dirEdges are both marked as being in the result. Declaration public void LinkResultDirectedEdges() | Edit this page View Source MergeSymLabels() For each dirEdge in the star, merge the label . Declaration public void MergeSymLabels() | Edit this page View Source UpdateLabelling(Label) Update incomplete dirEdge labels from the labeling for the node. Declaration public void UpdateLabelling(Label nodeLabel) Parameters Type Name Description Label nodeLabel The label to apply | Edit this page View Source Write(StreamWriter) Declaration public override void Write(StreamWriter outstream) Parameters Type Name Description StreamWriter outstream Overrides EdgeEndStar.Write(StreamWriter)"
  },
  "api/NetTopologySuite.GeometriesGraph.Edge.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.Edge.html",
    "title": "Class Edge | NetTopologySuite",
    "summary": "Class Edge Inheritance object GraphComponent Edge Inherited Members GraphComponent.Label GraphComponent.InResult GraphComponent.IsInResult GraphComponent.Covered GraphComponent.IsCovered GraphComponent.IsCoveredSet GraphComponent.Visited GraphComponent.IsVisited GraphComponent.UpdateIM(IntersectionMatrix) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.GeometriesGraph Assembly: NetTopologySuite.dll Syntax public class Edge : GraphComponent Constructors | Edit this page View Source Edge(Coordinate[]) Declaration public Edge(Coordinate[] pts) Parameters Type Name Description Coordinate[] pts | Edit this page View Source Edge(Coordinate[], Label) Declaration public Edge(Coordinate[] pts, Label label) Parameters Type Name Description Coordinate[] pts Label label Properties | Edit this page View Source CollapsedEdge Declaration public Edge CollapsedEdge { get; } Property Value Type Description Edge | Edit this page View Source Coordinate Declaration public override Coordinate Coordinate { get; protected set; } Property Value Type Description Coordinate Overrides GraphComponent.Coordinate | Edit this page View Source Coordinates Declaration public Coordinate[] Coordinates { get; } Property Value Type Description Coordinate[] | Edit this page View Source Depth Declaration public Depth Depth { get; } Property Value Type Description Depth | Edit this page View Source DepthDelta The depthDelta is the change in depth as an edge is crossed from R to L. Declaration public int DepthDelta { get; set; } Property Value Type Description int The change in depth as the edge is crossed from R to L. | Edit this page View Source EdgeIntersectionList Declaration public EdgeIntersectionList EdgeIntersectionList { get; } Property Value Type Description EdgeIntersectionList | Edit this page View Source Envelope Declaration public Envelope Envelope { get; } Property Value Type Description Envelope | Edit this page View Source IsClosed Declaration public bool IsClosed { get; } Property Value Type Description bool | Edit this page View Source IsCollapsed An Edge is collapsed if it is an Area edge and it consists of two segments which are equal and opposite (eg a zero-width V). Declaration public bool IsCollapsed { get; } Property Value Type Description bool true if edge is consisting of two segments which are equal and of oppose orientation (Zero-width V area edge) | Edit this page View Source IsIsolated Declaration public override bool IsIsolated { get; } Property Value Type Description bool Overrides GraphComponent.IsIsolated | Edit this page View Source Isolated Declaration public bool Isolated { get; set; } Property Value Type Description bool | Edit this page View Source MaximumSegmentIndex Declaration public int MaximumSegmentIndex { get; } Property Value Type Description int | Edit this page View Source MonotoneChainEdge Declaration public MonotoneChainEdge MonotoneChainEdge { get; } Property Value Type Description MonotoneChainEdge | Edit this page View Source Name Declaration public string Name { get; set; } Property Value Type Description string | Edit this page View Source NumPoints Declaration public int NumPoints { get; } Property Value Type Description int | Edit this page View Source Points Declaration public Coordinate[] Points { get; set; } Property Value Type Description Coordinate[] Methods | Edit this page View Source AddIntersection(LineIntersector, int, int, int) Add an EdgeIntersection for intersection intIndex. An intersection that falls exactly on a vertex of the edge is normalized to use the higher of the two possible segmentIndexes. Declaration public void AddIntersection(LineIntersector li, int segmentIndex, int geomIndex, int intIndex) Parameters Type Name Description LineIntersector li A line intersector int segmentIndex A segment index int geomIndex A geometry index int intIndex The intersection index (0 or 1) | Edit this page View Source AddIntersections(LineIntersector, int, int) Adds EdgeIntersections for one or both intersections found for a segment of an edge to the edge intersection list. Declaration public void AddIntersections(LineIntersector li, int segmentIndex, int geomIndex) Parameters Type Name Description LineIntersector li A line intersector int segmentIndex A segment index int geomIndex A geometry index | Edit this page View Source ComputeIM(IntersectionMatrix) Update the IM with the contribution for this component. A component only contributes if it has a labelling for both parent geometries. Declaration public override void ComputeIM(IntersectionMatrix im) Parameters Type Name Description IntersectionMatrix im Overrides GraphComponent.ComputeIM(IntersectionMatrix) | Edit this page View Source Equals(Edge) Equals is defined to be: e1 equals e2 if the coordinates of e1 are the same or the reverse of the coordinates in e2. Declaration protected bool Equals(Edge e) Parameters Type Name Description Edge e Returns Type Description bool | Edit this page View Source Equals(object) Equals is defined to be: e1 equals e2 if the coordinates of e1 are the same or the reverse of the coordinates in e2. Declaration public override bool Equals(object o) Parameters Type Name Description object o Returns Type Description bool Overrides object.Equals(object) | Edit this page View Source GetCoordinate(int) Declaration public Coordinate GetCoordinate(int i) Parameters Type Name Description int i Returns Type Description Coordinate | Edit this page View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() | Edit this page View Source IsPointwiseEqual(Edge) Check if coordinate sequences of the Edges are identical. Declaration public bool IsPointwiseEqual(Edge e) Parameters Type Name Description Edge e The edge to test Returns Type Description bool true if the coordinate sequences of the Edges are identical. | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() | Edit this page View Source UpdateIM(Label, IntersectionMatrix) Updates an IM from the label for an edge. Handles edges from both L and A geometries. Declaration public static void UpdateIM(Label label, IntersectionMatrix im) Parameters Type Name Description Label label A label IntersectionMatrix im An intersection matrix | Edit this page View Source Write(TextWriter) Declaration public void Write(TextWriter outstream) Parameters Type Name Description TextWriter outstream | Edit this page View Source WriteReverse(TextWriter) Declaration public void WriteReverse(TextWriter outstream) Parameters Type Name Description TextWriter outstream Operators | Edit this page View Source operator ==(Edge, Edge) Declaration public static bool operator ==(Edge obj1, Edge obj2) Parameters Type Name Description Edge obj1 Edge obj2 Returns Type Description bool | Edit this page View Source operator !=(Edge, Edge) Declaration public static bool operator !=(Edge obj1, Edge obj2) Parameters Type Name Description Edge obj1 Edge obj2 Returns Type Description bool"
  },
  "api/NetTopologySuite.GeometriesGraph.EdgeEnd.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.EdgeEnd.html",
    "title": "Class EdgeEnd | NetTopologySuite",
    "summary": "Class EdgeEnd Models the end of an edge incident on a node. Inheritance object EdgeEnd DirectedEdge EdgeEndBundle Implements IComparable<EdgeEnd> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.GeometriesGraph Assembly: NetTopologySuite.dll Syntax public class EdgeEnd : IComparable<EdgeEnd> Remarks EdgeEnds have a direction determined by the direction of the ray from the initial point to the next point. EdgeEnds are IComparable under the ordering \"a has a greater angle with the x-axis than b\". This ordering is used to sort EdgeEnds around a node. Constructors | Edit this page View Source EdgeEnd(Edge) Declaration protected EdgeEnd(Edge edge) Parameters Type Name Description Edge edge | Edit this page View Source EdgeEnd(Edge, Coordinate, Coordinate) Declaration public EdgeEnd(Edge edge, Coordinate p0, Coordinate p1) Parameters Type Name Description Edge edge Coordinate p0 Coordinate p1 | Edit this page View Source EdgeEnd(Edge, Coordinate, Coordinate, Label) Declaration public EdgeEnd(Edge edge, Coordinate p0, Coordinate p1, Label label) Parameters Type Name Description Edge edge Coordinate p0 Coordinate p1 Label label Properties | Edit this page View Source Coordinate Declaration public Coordinate Coordinate { get; } Property Value Type Description Coordinate | Edit this page View Source DirectedCoordinate Declaration public Coordinate DirectedCoordinate { get; } Property Value Type Description Coordinate | Edit this page View Source Dx Declaration public double Dx { get; } Property Value Type Description double | Edit this page View Source Dy Declaration public double Dy { get; } Property Value Type Description double | Edit this page View Source Edge Declaration public Edge Edge { get; protected set; } Property Value Type Description Edge | Edit this page View Source Label Declaration public Label Label { get; protected set; } Property Value Type Description Label | Edit this page View Source Node Declaration public Node Node { get; set; } Property Value Type Description Node | Edit this page View Source Quadrant Declaration [Obsolete(\"Use QuadrantEx\")] public int Quadrant { get; } Property Value Type Description int | Edit this page View Source QuadrantEx Gets a value indicating the Quadrant this EdgeEnd lies in. Declaration public Quadrant QuadrantEx { get; } Property Value Type Description Quadrant Methods | Edit this page View Source CompareDirection(EdgeEnd) Implements the total order relation: a has a greater angle with the positive x-axis than b. Using the obvious algorithm of simply computing the angle is not robust, since the angle calculation is obviously susceptible to round off. A robust algorithm is: first compare the quadrant. If the quadrants are different, it it trivial to determine which vector is \"greater\". if the vectors lie in the same quadrant, the computeOrientation function can be used to decide the relative orientation of the vectors. Declaration public int CompareDirection(EdgeEnd e) Parameters Type Name Description EdgeEnd e An EdgeEnd Returns Type Description int The OrientationIndex of e compared to this EdgeEnd. | Edit this page View Source CompareTo(EdgeEnd) Declaration public int CompareTo(EdgeEnd e) Parameters Type Name Description EdgeEnd e Returns Type Description int | Edit this page View Source ComputeLabel(IBoundaryNodeRule) Subclasses should override this if they are using labels Declaration public virtual void ComputeLabel(IBoundaryNodeRule boundaryNodeRule) Parameters Type Name Description IBoundaryNodeRule boundaryNodeRule | Edit this page View Source Init(Coordinate, Coordinate) Declaration protected void Init(Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p0 Coordinate p1 | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() | Edit this page View Source Write(StreamWriter) Declaration public virtual void Write(StreamWriter outstream) Parameters Type Name Description StreamWriter outstream Implements IComparable<T>"
  },
  "api/NetTopologySuite.GeometriesGraph.EdgeEndStar.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.EdgeEndStar.html",
    "title": "Class EdgeEndStar | NetTopologySuite",
    "summary": "Class EdgeEndStar A EdgeEndStar is an ordered list of EdgeEnds around a node. They are maintained in CCW order (starting with the positive x-axis) around the node for efficient lookup and topology building. Inheritance object EdgeEndStar DirectedEdgeStar EdgeEndBundleStar Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.GeometriesGraph Assembly: NetTopologySuite.dll Syntax public abstract class EdgeEndStar Fields | Edit this page View Source edgeList A list of all outgoing edges in the result, in CCW order. Declaration protected IList<EdgeEnd> edgeList Field Value Type Description IList<EdgeEnd> | Edit this page View Source edgeMap A map which maintains the edges in sorted order around the node. Declaration protected IDictionary<EdgeEnd, EdgeEnd> edgeMap Field Value Type Description IDictionary<EdgeEnd, EdgeEnd> Properties | Edit this page View Source Coordinate Declaration public Coordinate Coordinate { get; } Property Value Type Description Coordinate The coordinate for the node this star is based at. | Edit this page View Source Degree Declaration public int Degree { get; } Property Value Type Description int | Edit this page View Source Edges Declaration public IList<EdgeEnd> Edges { get; } Property Value Type Description IList<EdgeEnd> Methods | Edit this page View Source ComputeLabelling(GeometryGraph[]) Declaration public virtual void ComputeLabelling(GeometryGraph[] geomGraph) Parameters Type Name Description GeometryGraph[] geomGraph | Edit this page View Source FindIndex(EdgeEnd) Declaration public int FindIndex(EdgeEnd eSearch) Parameters Type Name Description EdgeEnd eSearch Returns Type Description int | Edit this page View Source GetEnumerator() Iterator access to the ordered list of edges is optimized by copying the map collection to a list. (This assumes that once an iterator is requested, it is likely that insertion into the map is complete). Declaration public IEnumerator<EdgeEnd> GetEnumerator() Returns Type Description IEnumerator<EdgeEnd> Access to ordered list of edges. | Edit this page View Source GetNextCW(EdgeEnd) Declaration public EdgeEnd GetNextCW(EdgeEnd ee) Parameters Type Name Description EdgeEnd ee Returns Type Description EdgeEnd | Edit this page View Source Insert(EdgeEnd) Insert a EdgeEnd into this EdgeEndStar. Declaration public abstract void Insert(EdgeEnd e) Parameters Type Name Description EdgeEnd e An EdgeEnd | Edit this page View Source InsertEdgeEnd(EdgeEnd, EdgeEnd) Insert an EdgeEnd into the map, and clear the edgeList cache, since the list of edges has now changed. Declaration protected void InsertEdgeEnd(EdgeEnd e, EdgeEnd obj) Parameters Type Name Description EdgeEnd e An EdgeEnd EdgeEnd obj An EdgeEnd | Edit this page View Source IsAreaLabelsConsistent(GeometryGraph) Declaration public bool IsAreaLabelsConsistent(GeometryGraph geometryGraph) Parameters Type Name Description GeometryGraph geometryGraph Returns Type Description bool | Edit this page View Source PropagateSideLabels(int) Declaration public void PropagateSideLabels(int geomIndex) Parameters Type Name Description int geomIndex | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() | Edit this page View Source Write(StreamWriter) Declaration public virtual void Write(StreamWriter outstream) Parameters Type Name Description StreamWriter outstream"
  },
  "api/NetTopologySuite.GeometriesGraph.EdgeIntersection.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.EdgeIntersection.html",
    "title": "Class EdgeIntersection | NetTopologySuite",
    "summary": "Class EdgeIntersection An EdgeIntersection represents a point on an edge which intersects with another edge. The intersection may either be a single point, or a line segment (in which case this point is the start of the line segment) The label attached to this intersection point applies to the edge from this point forwards, until the next intersection or the end of the edge. The intersection point must be precise. Inheritance object EdgeIntersection Implements IComparable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.GeometriesGraph Assembly: NetTopologySuite.dll Syntax public class EdgeIntersection : IComparable Constructors | Edit this page View Source EdgeIntersection(Coordinate, int, double) Creates an instance of this class Declaration public EdgeIntersection(Coordinate coord, int segmentIndex, double dist) Parameters Type Name Description Coordinate coord The point of intersection int segmentIndex The index of the containing line segment in the parent edge double dist The edge distance or this point along the containing line segment Properties | Edit this page View Source Coordinate The point of intersection. Declaration public Coordinate Coordinate { get; } Property Value Type Description Coordinate | Edit this page View Source Distance The edge distance of this point along the containing line segment. Declaration public double Distance { get; } Property Value Type Description double | Edit this page View Source SegmentIndex The index of the containing line segment in the parent edge. Declaration public int SegmentIndex { get; } Property Value Type Description int Methods | Edit this page View Source Compare(int, double) Comparison with segment and distance. Declaration public int Compare(int segmentIndex, double dist) Parameters Type Name Description int segmentIndex The index of the containing line segment double dist The distance of this point along the containing line segment Returns Type Description int -1 this EdgeIntersection is located before the argument location, 0 this EdgeIntersection is at the argument location, 1 this EdgeIntersection is located after the argument location. | Edit this page View Source CompareTo(object) Declaration public int CompareTo(object obj) Parameters Type Name Description object obj Returns Type Description int | Edit this page View Source IsEndPoint(int) Declaration public bool IsEndPoint(int maxSegmentIndex) Parameters Type Name Description int maxSegmentIndex Returns Type Description bool | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() | Edit this page View Source Write(StreamWriter) Declaration public void Write(StreamWriter outstream) Parameters Type Name Description StreamWriter outstream Implements IComparable"
  },
  "api/NetTopologySuite.GeometriesGraph.EdgeIntersectionList.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.EdgeIntersectionList.html",
    "title": "Class EdgeIntersectionList | NetTopologySuite",
    "summary": "Class EdgeIntersectionList A list of edge intersections along an Edge. Inheritance object EdgeIntersectionList Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.GeometriesGraph Assembly: NetTopologySuite.dll Syntax public class EdgeIntersectionList Constructors | Edit this page View Source EdgeIntersectionList(Edge) Declaration public EdgeIntersectionList(Edge edge) Parameters Type Name Description Edge edge Properties | Edit this page View Source Count Declaration public int Count { get; } Property Value Type Description int Methods | Edit this page View Source Add(Coordinate, int, double) Adds an intersection into the list, if it isn't already there. The input segmentIndex and dist are expected to be normalized. Declaration public EdgeIntersection Add(Coordinate intPt, int segmentIndex, double dist) Parameters Type Name Description Coordinate intPt The point of intersection int segmentIndex The index of the containing line segment in the parent edge double dist The edge distance of this point along the containing line segment Returns Type Description EdgeIntersection The EdgeIntersection found or added. | Edit this page View Source AddEndpoints() Adds entries for the first and last points of the edge to the list. Declaration public void AddEndpoints() | Edit this page View Source AddSplitEdges(IList<Edge>) Creates new edges for all the edges that the intersections in this list split the parent edge into. Adds the edges to the input list (this is so a single list can be used to accumulate all split edges for a Geometry). Declaration public void AddSplitEdges(IList<Edge> edgeList) Parameters Type Name Description IList<Edge> edgeList | Edit this page View Source CreateSplitEdge(EdgeIntersection, EdgeIntersection) Create a new \"split edge\" with the section of points between (and including) the two intersections. The label for the new edge is the same as the label for the parent edge. Declaration public Edge CreateSplitEdge(EdgeIntersection ei0, EdgeIntersection ei1) Parameters Type Name Description EdgeIntersection ei0 EdgeIntersection ei1 Returns Type Description Edge | Edit this page View Source GetEnumerator() Returns an iterator of EdgeIntersections. Declaration public IEnumerator<EdgeIntersection> GetEnumerator() Returns Type Description IEnumerator<EdgeIntersection> | Edit this page View Source IsIntersection(Coordinate) Declaration public bool IsIntersection(Coordinate pt) Parameters Type Name Description Coordinate pt Returns Type Description bool | Edit this page View Source Write(StreamWriter) Declaration public void Write(StreamWriter outstream) Parameters Type Name Description StreamWriter outstream"
  },
  "api/NetTopologySuite.GeometriesGraph.EdgeList.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.EdgeList.html",
    "title": "Class EdgeList | NetTopologySuite",
    "summary": "Class EdgeList A EdgeList is a list of Edges. It supports locating edges that are point-wise equals to a target edge. Inheritance object EdgeList Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.GeometriesGraph Assembly: NetTopologySuite.dll Syntax public class EdgeList Properties | Edit this page View Source Edges Declaration public IList<Edge> Edges { get; } Property Value Type Description IList<Edge> | Edit this page View Source this[int] Declaration public Edge this[int index] { get; } Parameters Type Name Description int index Property Value Type Description Edge Methods | Edit this page View Source Add(Edge) Insert an edge unless it is already in the list. Declaration public void Add(Edge e) Parameters Type Name Description Edge e An Edge | Edit this page View Source AddAll(IEnumerable<Edge>) Declaration public void AddAll(IEnumerable<Edge> edgeColl) Parameters Type Name Description IEnumerable<Edge> edgeColl | Edit this page View Source FindEdgeIndex(Edge) If the edge e is already in the list, return its index. Declaration public int FindEdgeIndex(Edge e) Parameters Type Name Description Edge e An Edge Returns Type Description int The index, if e is already in the list, -1 otherwise. | Edit this page View Source FindEqualEdge(Edge) If there is an edge equal to e already in the list, return it. Otherwise return null. Declaration public Edge FindEqualEdge(Edge e) Parameters Type Name Description Edge e An Edge Returns Type Description Edge The equal edge, if there is one already in the list, null otherwise. | Edit this page View Source Get(int) Declaration public Edge Get(int i) Parameters Type Name Description int i Returns Type Description Edge | Edit this page View Source GetEnumerator() Declaration public IEnumerator<Edge> GetEnumerator() Returns Type Description IEnumerator<Edge> | Edit this page View Source Remove(Edge) Remove the selected Edge element from the list if present. Declaration public void Remove(Edge e) Parameters Type Name Description Edge e Edge element to remove from list | Edit this page View Source Write(StreamWriter) Declaration public void Write(StreamWriter outstream) Parameters Type Name Description StreamWriter outstream"
  },
  "api/NetTopologySuite.GeometriesGraph.EdgeNodingValidator.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.EdgeNodingValidator.html",
    "title": "Class EdgeNodingValidator | NetTopologySuite",
    "summary": "Class EdgeNodingValidator Validates that a collection of Edge is correctly noded. Throws an appropriate exception if an noding error is found. Uses FastNodingValidator to perform the validation. Inheritance object EdgeNodingValidator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.GeometriesGraph Assembly: NetTopologySuite.dll Syntax public class EdgeNodingValidator Constructors | Edit this page View Source EdgeNodingValidator(IEnumerable<Edge>) Creates a new validator for the given collection of Edges. Declaration public EdgeNodingValidator(IEnumerable<Edge> edges) Parameters Type Name Description IEnumerable<Edge> edges Methods | Edit this page View Source CheckValid() Checks whether the supplied edges are correctly noded. Declaration public void CheckValid() Exceptions Type Condition TopologyException If the SegmentStrings are not correctly noded | Edit this page View Source CheckValid(IEnumerable<Edge>) Checks whether the supplied Edges are correctly noded. Declaration public static void CheckValid(IEnumerable<Edge> edges) Parameters Type Name Description IEnumerable<Edge> edges an enumeration of Edges. Exceptions Type Condition TopologyException If the SegmentStrings are not correctly noded | Edit this page View Source ToSegmentStrings(IEnumerable<Edge>) Builds an enumeration of segment strings from the provided edges. Declaration public static IEnumerable<ISegmentString> ToSegmentStrings(IEnumerable<Edge> edges) Parameters Type Name Description IEnumerable<Edge> edges An enumeration of Edges Returns Type Description IEnumerable<ISegmentString> An enumeration of ISegmentStrings"
  },
  "api/NetTopologySuite.GeometriesGraph.EdgeRing.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.EdgeRing.html",
    "title": "Class EdgeRing | NetTopologySuite",
    "summary": "Class EdgeRing Inheritance object EdgeRing MaximalEdgeRing MinimalEdgeRing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.GeometriesGraph Assembly: NetTopologySuite.dll Syntax public abstract class EdgeRing Constructors | Edit this page View Source EdgeRing(DirectedEdge, GeometryFactory) Creates an instance of this class using the provided start and geometryFactory. Declaration protected EdgeRing(DirectedEdge start, GeometryFactory geometryFactory) Parameters Type Name Description DirectedEdge start The start DirectedEdge for the EdgeRing GeometryFactory geometryFactory A GeometryFactory Fields | Edit this page View Source startDe The directed edge which starts the list of edges for this EdgeRing. Declaration protected DirectedEdge startDe Field Value Type Description DirectedEdge Properties | Edit this page View Source Edges Returns the list of DirectedEdges that make up this EdgeRing. Declaration public IList<DirectedEdge> Edges { get; } Property Value Type Description IList<DirectedEdge> A list of DirectedEdges | Edit this page View Source GeometryFactory A GeometryFactory to use. Declaration protected GeometryFactory GeometryFactory { get; } Property Value Type Description GeometryFactory | Edit this page View Source IsHole Gets a value indicating if this EdgeRing is a hole of a Polygon Declaration public bool IsHole { get; } Property Value Type Description bool | Edit this page View Source IsIsolated Gets a value indicating if this EdgeRing is isolated Declaration public bool IsIsolated { get; } Property Value Type Description bool | Edit this page View Source IsShell Declaration public bool IsShell { get; } Property Value Type Description bool | Edit this page View Source Label Gets a value indicating the topological relationship of this EdgeRing Declaration public Label Label { get; } Property Value Type Description Label | Edit this page View Source LinearRing Gets the geometry representation of this EdgeRing Declaration public LinearRing LinearRing { get; } Property Value Type Description LinearRing | Edit this page View Source MaxNodeDegree Declaration public int MaxNodeDegree { get; } Property Value Type Description int | Edit this page View Source Shell Declaration public EdgeRing Shell { get; set; } Property Value Type Description EdgeRing Methods | Edit this page View Source AddHole(EdgeRing) Add an EdgeRing representing a hole Declaration public void AddHole(EdgeRing ring) Parameters Type Name Description EdgeRing ring The ring to add | Edit this page View Source AddPoints(Edge, bool, bool) Declaration protected void AddPoints(Edge edge, bool isForward, bool isFirstEdge) Parameters Type Name Description Edge edge bool isForward bool isFirstEdge | Edit this page View Source ComputePoints(DirectedEdge) Collect all the points from the DirectedEdges of this ring into a contiguous list. Declaration protected void ComputePoints(DirectedEdge start) Parameters Type Name Description DirectedEdge start | Edit this page View Source ComputeRing() Compute a LinearRing from the point list previously collected. Test if the ring is a hole (i.e. if it is CCW) and set the hole flag accordingly. Declaration public void ComputeRing() | Edit this page View Source ContainsPoint(Coordinate) This method will cause the ring to be computed. It will also check any holes, if they have been assigned. Declaration public bool ContainsPoint(Coordinate p) Parameters Type Name Description Coordinate p The point to test Returns Type Description bool true if the ring contains point p | Edit this page View Source GetCoordinate(int) Access a Coordinate of this EdgeRing by its index. Declaration public Coordinate GetCoordinate(int i) Parameters Type Name Description int i The index of the Coordinate Returns Type Description Coordinate The Coordinate at index i | Edit this page View Source GetNext(DirectedEdge) Declaration public abstract DirectedEdge GetNext(DirectedEdge de) Parameters Type Name Description DirectedEdge de Returns Type Description DirectedEdge | Edit this page View Source MergeLabel(Label) Declaration protected void MergeLabel(Label deLabel) Parameters Type Name Description Label deLabel | Edit this page View Source MergeLabel(Label, int) Merge the RHS label from a DirectedEdge into the label for this EdgeRing. The DirectedEdge label may be null. This is acceptable - it results from a node which is NOT an intersection node between the Geometries (e.g. the end node of a LinearRing). In this case the DirectedEdge label does not contribute any information to the overall labelling, and is simply skipped. Declaration protected void MergeLabel(Label deLabel, int geomIndex) Parameters Type Name Description Label deLabel int geomIndex | Edit this page View Source SetEdgeRing(DirectedEdge, EdgeRing) Declaration public abstract void SetEdgeRing(DirectedEdge de, EdgeRing er) Parameters Type Name Description DirectedEdge de EdgeRing er | Edit this page View Source SetInResult() Declaration public void SetInResult() | Edit this page View Source ToPolygon(GeometryFactory) Create the Polygon described by this EdgeRing Declaration public Polygon ToPolygon(GeometryFactory geometryFactory) Parameters Type Name Description GeometryFactory geometryFactory The GeometryFactory to use. Returns Type Description Polygon A Polygon"
  },
  "api/NetTopologySuite.GeometriesGraph.GeometryGraph.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.GeometryGraph.html",
    "title": "Class GeometryGraph | NetTopologySuite",
    "summary": "Class GeometryGraph A GeometryGraph is a graph that models a given Geometry. Inheritance object PlanarGraph GeometryGraph Inherited Members PlanarGraph.LinkResultDirectedEdges(IList<Node>) PlanarGraph.edgeEndList PlanarGraph.GetEdgeEnumerator() PlanarGraph.EdgeEnds PlanarGraph.Edges PlanarGraph.IsBoundaryNode(int, Coordinate) PlanarGraph.InsertEdge(Edge) PlanarGraph.Add(EdgeEnd) PlanarGraph.GetNodeEnumerator() PlanarGraph.Nodes PlanarGraph.NodeMap PlanarGraph.AddNode(Node) PlanarGraph.AddNode(Coordinate) PlanarGraph.Find(Coordinate) PlanarGraph.AddEdges(IList<Edge>) PlanarGraph.LinkResultDirectedEdges() PlanarGraph.LinkAllDirectedEdges() PlanarGraph.FindEdgeEnd(Edge) PlanarGraph.FindEdge(Coordinate, Coordinate) PlanarGraph.FindEdgeInSameDirection(Coordinate, Coordinate) PlanarGraph.WriteEdges(StreamWriter) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.GeometriesGraph Assembly: NetTopologySuite.dll Syntax public class GeometryGraph : PlanarGraph Constructors | Edit this page View Source GeometryGraph(int, Geometry) Declaration public GeometryGraph(int argIndex, Geometry parentGeom) Parameters Type Name Description int argIndex Geometry parentGeom | Edit this page View Source GeometryGraph(int, Geometry, IBoundaryNodeRule) Declaration public GeometryGraph(int argIndex, Geometry parentGeom, IBoundaryNodeRule boundaryNodeRule) Parameters Type Name Description int argIndex Geometry parentGeom IBoundaryNodeRule boundaryNodeRule Properties | Edit this page View Source BoundaryNodeRule Gets the IBoundaryNodeRule used with this geometry graph. Declaration public IBoundaryNodeRule BoundaryNodeRule { get; } Property Value Type Description IBoundaryNodeRule | Edit this page View Source BoundaryNodes Declaration public IList<Node> BoundaryNodes { get; } Property Value Type Description IList<Node> | Edit this page View Source Geometry Declaration public Geometry Geometry { get; } Property Value Type Description Geometry | Edit this page View Source HasTooFewPoints Declaration public bool HasTooFewPoints { get; } Property Value Type Description bool | Edit this page View Source InvalidPoint Declaration public Coordinate InvalidPoint { get; } Property Value Type Description Coordinate Methods | Edit this page View Source AddEdge(Edge) Add an Edge computed externally. The label on the Edge is assumed to be correct. Declaration public void AddEdge(Edge e) Parameters Type Name Description Edge e An Edge | Edit this page View Source AddPoint(Coordinate) Add a point computed externally. The point is assumed to be a Point Geometry part, which has a location of INTERIOR. Declaration public void AddPoint(Coordinate pt) Parameters Type Name Description Coordinate pt A Coordinate | Edit this page View Source ComputeEdgeIntersections(GeometryGraph, LineIntersector, bool) Declaration public SegmentIntersector ComputeEdgeIntersections(GeometryGraph g, LineIntersector li, bool includeProper) Parameters Type Name Description GeometryGraph g LineIntersector li bool includeProper Returns Type Description SegmentIntersector | Edit this page View Source ComputeSelfNodes(LineIntersector, bool) Compute self-nodes, taking advantage of the Geometry type to minimize the number of intersection tests. (E.g. rings are not tested for self-intersection, since they are assumed to be valid). Declaration public SegmentIntersector ComputeSelfNodes(LineIntersector li, bool computeRingSelfNodes) Parameters Type Name Description LineIntersector li The LineIntersector to use. bool computeRingSelfNodes If false, intersection checks are optimized to not test rings for self-intersection. Returns Type Description SegmentIntersector The computed SegmentIntersector, containing information about the intersections found. | Edit this page View Source ComputeSelfNodes(LineIntersector, bool, bool) Compute self-nodes, taking advantage of the Geometry type to minimize the number of intersection tests. (E.g.rings are not tested for self-intersection, since they are assumed to be valid). Declaration [Obsolete(\"Shrot circuiting no longer allowed\")] public SegmentIntersector ComputeSelfNodes(LineIntersector li, bool computeRingSelfNodes, bool isDoneIfProperInt) Parameters Type Name Description LineIntersector li The LineIntersector to use bool computeRingSelfNodes If false, intersection checks are optimized to not test rings for self-intersection bool isDoneIfProperInt Short-circuit the intersection computation if a proper intersection is found Returns Type Description SegmentIntersector | Edit this page View Source ComputeSplitEdges(IList<Edge>) Declaration public void ComputeSplitEdges(IList<Edge> edgelist) Parameters Type Name Description IList<Edge> edgelist | Edit this page View Source DetermineBoundary(IBoundaryNodeRule, int) Determine boundary Declaration public static Location DetermineBoundary(IBoundaryNodeRule boundaryNodeRule, int boundaryCount) Parameters Type Name Description IBoundaryNodeRule boundaryNodeRule The boundary node rule to apply for determination of the boundary int boundaryCount The number of component boundaries that a point occurs in. Returns Type Description Location Boundary or Interior | Edit this page View Source FindEdge(LineString) Declaration public Edge FindEdge(LineString line) Parameters Type Name Description LineString line Returns Type Description Edge | Edit this page View Source GetBoundaryPoints() Declaration public Coordinate[] GetBoundaryPoints() Returns Type Description Coordinate[] | Edit this page View Source Locate(Coordinate) Determines the Location of the given Coordinate in this geometry. Declaration public Location Locate(Coordinate pt) Parameters Type Name Description Coordinate pt The point to test Returns Type Description Location The location of the point in the geometry"
  },
  "api/NetTopologySuite.GeometriesGraph.GraphComponent.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.GraphComponent.html",
    "title": "Class GraphComponent | NetTopologySuite",
    "summary": "Class GraphComponent A GraphComponent is the parent class for the objects' that form a graph. Each GraphComponent can carry a Label. Inheritance object GraphComponent Edge Node Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.GeometriesGraph Assembly: NetTopologySuite.dll Syntax public abstract class GraphComponent Constructors | Edit this page View Source GraphComponent() Declaration protected GraphComponent() | Edit this page View Source GraphComponent(Label) Declaration protected GraphComponent(Label label) Parameters Type Name Description Label label Properties | Edit this page View Source Coordinate Declaration public abstract Coordinate Coordinate { get; protected set; } Property Value Type Description Coordinate A coordinate in this component (or null, if there are none). | Edit this page View Source Covered Declaration public bool Covered { get; set; } Property Value Type Description bool | Edit this page View Source InResult Declaration public bool InResult { get; set; } Property Value Type Description bool | Edit this page View Source IsCovered Declaration public bool IsCovered { get; } Property Value Type Description bool | Edit this page View Source IsCoveredSet Declaration public bool IsCoveredSet { get; } Property Value Type Description bool | Edit this page View Source IsInResult IsInResult indicates if this component has already been included in the result. Declaration public bool IsInResult { get; } Property Value Type Description bool | Edit this page View Source IsIsolated An isolated component is one that does not intersect or touch any other component. This is the case if the label has valid locations for only a single Geometry. Declaration public abstract bool IsIsolated { get; } Property Value Type Description bool true if this component is isolated. | Edit this page View Source IsVisited Declaration public bool IsVisited { get; } Property Value Type Description bool | Edit this page View Source Label Declaration public Label Label { get; protected set; } Property Value Type Description Label | Edit this page View Source Visited Declaration public bool Visited { get; set; } Property Value Type Description bool Methods | Edit this page View Source ComputeIM(IntersectionMatrix) Compute the contribution to an IM for this component. Declaration public abstract void ComputeIM(IntersectionMatrix im) Parameters Type Name Description IntersectionMatrix im An IntersectionMatrix | Edit this page View Source UpdateIM(IntersectionMatrix) Update the IM with the contribution for this component. A component only contributes if it has a labelling for both parent geometries. Declaration public void UpdateIM(IntersectionMatrix im) Parameters Type Name Description IntersectionMatrix im An IntersectionMatrix"
  },
  "api/NetTopologySuite.GeometriesGraph.Index.EdgeSetIntersector.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.Index.EdgeSetIntersector.html",
    "title": "Class EdgeSetIntersector | NetTopologySuite",
    "summary": "Class EdgeSetIntersector An EdgeSetIntersector computes all the intersections between the edges in the set. It adds the computed intersections to each edge they are found on. It may be used in two scenarios: determining the internal intersections between a single set of edges determining the mutual intersections between two different sets of edges It uses a SegmentIntersector to compute the intersections between segments and to record statistics about what kinds of intersections were found. Inheritance object EdgeSetIntersector SimpleEdgeSetIntersector SimpleMCSweepLineIntersector SimpleSweepLineIntersector Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.GeometriesGraph.Index Assembly: NetTopologySuite.dll Syntax public abstract class EdgeSetIntersector Methods | Edit this page View Source ComputeIntersections(IList<Edge>, SegmentIntersector, bool) Computes all self-intersections between edges in a set of edges, allowing client to choose whether self-intersections are computed. Declaration public abstract void ComputeIntersections(IList<Edge> edges, SegmentIntersector si, bool testAllSegments) Parameters Type Name Description IList<Edge> edges A list of edges to test for intersections. SegmentIntersector si The SegmentIntersector to use bool testAllSegments true if self-intersections are to be tested as well. | Edit this page View Source ComputeIntersections(IList<Edge>, IList<Edge>, SegmentIntersector) Computes all mutual intersections between two sets of edges. Declaration public abstract void ComputeIntersections(IList<Edge> edges0, IList<Edge> edges1, SegmentIntersector si) Parameters Type Name Description IList<Edge> edges0 A set of edges IList<Edge> edges1 A set of edges SegmentIntersector si The SegmentIntersector to use"
  },
  "api/NetTopologySuite.GeometriesGraph.Index.MonotoneChain.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.Index.MonotoneChain.html",
    "title": "Class MonotoneChain | NetTopologySuite",
    "summary": "Class MonotoneChain Inheritance object MonotoneChain Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.GeometriesGraph.Index Assembly: NetTopologySuite.dll Syntax public class MonotoneChain Constructors | Edit this page View Source MonotoneChain(MonotoneChainEdge, int) Declaration public MonotoneChain(MonotoneChainEdge mce, int chainIndex) Parameters Type Name Description MonotoneChainEdge mce int chainIndex Methods | Edit this page View Source ComputeIntersections(MonotoneChain, SegmentIntersector) Declaration public void ComputeIntersections(MonotoneChain mc, SegmentIntersector si) Parameters Type Name Description MonotoneChain mc SegmentIntersector si"
  },
  "api/NetTopologySuite.GeometriesGraph.Index.MonotoneChainEdge.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.Index.MonotoneChainEdge.html",
    "title": "Class MonotoneChainEdge | NetTopologySuite",
    "summary": "Class MonotoneChainEdge MonotoneChains are a way of partitioning the segments of an edge to allow for fast searching of intersections. They have the following properties: the segments within a monotone chain will never intersect each other, and the envelope of any contiguous subset of the segments in a monotone chain is simply the envelope of the endpoints of the subset. Property 1 means that there is no need to test pairs of segments from within the same monotone chain for intersection. Property 2 allows binary search to be used to find the intersection points of two monotone chains. For many types of real-world data, these properties eliminate a large number of segment comparisons, producing substantial speed gains. Inheritance object MonotoneChainEdge Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.GeometriesGraph.Index Assembly: NetTopologySuite.dll Syntax public class MonotoneChainEdge Constructors | Edit this page View Source MonotoneChainEdge(Edge) Declaration public MonotoneChainEdge(Edge e) Parameters Type Name Description Edge e Properties | Edit this page View Source Coordinates Declaration public Coordinate[] Coordinates { get; } Property Value Type Description Coordinate[] | Edit this page View Source StartIndexes Declaration public int[] StartIndexes { get; } Property Value Type Description int[] Methods | Edit this page View Source ComputeIntersects(MonotoneChainEdge, SegmentIntersector) Declaration public void ComputeIntersects(MonotoneChainEdge mce, SegmentIntersector si) Parameters Type Name Description MonotoneChainEdge mce SegmentIntersector si | Edit this page View Source ComputeIntersectsForChain(int, MonotoneChainEdge, int, SegmentIntersector) Declaration public void ComputeIntersectsForChain(int chainIndex0, MonotoneChainEdge mce, int chainIndex1, SegmentIntersector si) Parameters Type Name Description int chainIndex0 MonotoneChainEdge mce int chainIndex1 SegmentIntersector si | Edit this page View Source GetMaxX(int) Declaration public double GetMaxX(int chainIndex) Parameters Type Name Description int chainIndex Returns Type Description double | Edit this page View Source GetMinX(int) Declaration public double GetMinX(int chainIndex) Parameters Type Name Description int chainIndex Returns Type Description double"
  },
  "api/NetTopologySuite.GeometriesGraph.Index.MonotoneChainIndexer.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.Index.MonotoneChainIndexer.html",
    "title": "Class MonotoneChainIndexer | NetTopologySuite",
    "summary": "Class MonotoneChainIndexer MonotoneChains are a way of partitioning the segments of an edge to allow for fast searching of intersections. Specifically, a sequence of contiguous line segments is a monotone chain if all the vectors defined by the oriented segments lies in the same quadrant. Monotone Chains have the following useful properties: the segments within a monotone chain will never intersect each other, and the envelope of any contiguous subset of the segments in a monotone chain is simply the envelope of the endpoints of the subset. Property 1 means that there is no need to test pairs of segments from within the same monotone chain for intersection. Property 2 allows binary search to be used to find the intersection points of two monotone chains. For many types of real-world data, these properties eliminate a large number of segment comparisons, producing substantial speed gains. Note that due to the efficient intersection test, there is no need to limit the size of chains to obtain fast performance. Inheritance object MonotoneChainIndexer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.GeometriesGraph.Index Assembly: NetTopologySuite.dll Syntax public class MonotoneChainIndexer Methods | Edit this page View Source GetChainStartIndices(Coordinate[]) Computes the startpoints (and endpoints) of all in monotone chains in this edge Declaration public int[] GetChainStartIndices(Coordinate[] pts) Parameters Type Name Description Coordinate[] pts An array of points Returns Type Description int[] An array of startpoints (and endpoints) of monotone chains | Edit this page View Source OLDGetChainStartIndices(Coordinate[]) Declaration public int[] OLDGetChainStartIndices(Coordinate[] pts) Parameters Type Name Description Coordinate[] pts Returns Type Description int[]"
  },
  "api/NetTopologySuite.GeometriesGraph.Index.SegmentIntersector.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.Index.SegmentIntersector.html",
    "title": "Class SegmentIntersector | NetTopologySuite",
    "summary": "Class SegmentIntersector Computes the intersection of line segments, and adds the intersection to the edges containing the segments. Inheritance object SegmentIntersector Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.GeometriesGraph.Index Assembly: NetTopologySuite.dll Syntax public class SegmentIntersector Constructors | Edit this page View Source SegmentIntersector(LineIntersector, bool, bool) Declaration public SegmentIntersector(LineIntersector li, bool includeProper, bool recordIsolated) Parameters Type Name Description LineIntersector li bool includeProper bool recordIsolated Fields | Edit this page View Source NumTests Testing only. Declaration public int NumTests Field Value Type Description int Properties | Edit this page View Source HasIntersection Declaration public bool HasIntersection { get; } Property Value Type Description bool | Edit this page View Source HasProperInteriorIntersection A proper interior intersection is a proper intersection which is not contained in the set of boundary nodes set for this SegmentIntersector. Declaration public bool HasProperInteriorIntersection { get; } Property Value Type Description bool Indicates a proper interior intersection | Edit this page View Source HasProperIntersection A proper intersection is an intersection which is interior to at least two line segments. Note that a proper intersection is not necessarily in the interior of the entire Geometry, since another edge may have an endpoint equal to the intersection, which according to SFS semantics can result in the point being on the Boundary of the Geometry. Declaration public bool HasProperIntersection { get; } Property Value Type Description bool Indicates a proper intersection with an interior to at least two line segments | Edit this page View Source IsDone Gets a value indicating that the segment intersector is finished. Declaration public bool IsDone { get; } Property Value Type Description bool Remarks Always returns false | Edit this page View Source IsDoneIfProperInt Sets a flag if the segment intersector is done when a proper intersection has been found. Declaration [Obsolete(\"Not used anymore, will be removed in a later version\")] public bool IsDoneIfProperInt { set; } Property Value Type Description bool Remarks Has no effect anymore. | Edit this page View Source ProperIntersectionPoint Declaration public Coordinate ProperIntersectionPoint { get; } Property Value Type Description Coordinate The proper intersection point, or null if none was found. Methods | Edit this page View Source AddIntersections(Edge, int, Edge, int) This method is called by clients of the EdgeIntersector class to test for and add intersections for two segments of the edges being intersected. Note that clients (such as MonotoneChainEdges) may choose not to intersect certain pairs of segments for efficiency reasons. Declaration public void AddIntersections(Edge e0, int segIndex0, Edge e1, int segIndex1) Parameters Type Name Description Edge e0 int segIndex0 Edge e1 int segIndex1 | Edit this page View Source IsAdjacentSegments(int, int) Declaration public static bool IsAdjacentSegments(int i1, int i2) Parameters Type Name Description int i1 int i2 Returns Type Description bool | Edit this page View Source SetBoundaryNodes(IList<Node>, IList<Node>) Declaration public void SetBoundaryNodes(IList<Node> bdyNodes0, IList<Node> bdyNodes1) Parameters Type Name Description IList<Node> bdyNodes0 IList<Node> bdyNodes1"
  },
  "api/NetTopologySuite.GeometriesGraph.Index.SimpleEdgeSetIntersector.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.Index.SimpleEdgeSetIntersector.html",
    "title": "Class SimpleEdgeSetIntersector | NetTopologySuite",
    "summary": "Class SimpleEdgeSetIntersector Finds all intersections in one or two sets of edges, using the straightforward method of comparing all segments. This algorithm is too slow for production use, but is useful for testing purposes. Inheritance object EdgeSetIntersector SimpleEdgeSetIntersector Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.GeometriesGraph.Index Assembly: NetTopologySuite.dll Syntax public class SimpleEdgeSetIntersector : EdgeSetIntersector Methods | Edit this page View Source ComputeIntersections(IList<Edge>, SegmentIntersector, bool) Declaration public override void ComputeIntersections(IList<Edge> edges, SegmentIntersector si, bool testAllSegments) Parameters Type Name Description IList<Edge> edges SegmentIntersector si bool testAllSegments Overrides EdgeSetIntersector.ComputeIntersections(IList<Edge>, SegmentIntersector, bool) | Edit this page View Source ComputeIntersections(IList<Edge>, IList<Edge>, SegmentIntersector) Declaration public override void ComputeIntersections(IList<Edge> edges0, IList<Edge> edges1, SegmentIntersector si) Parameters Type Name Description IList<Edge> edges0 IList<Edge> edges1 SegmentIntersector si Overrides EdgeSetIntersector.ComputeIntersections(IList<Edge>, IList<Edge>, SegmentIntersector)"
  },
  "api/NetTopologySuite.GeometriesGraph.Index.SimpleMCSweepLineIntersector.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.Index.SimpleMCSweepLineIntersector.html",
    "title": "Class SimpleMCSweepLineIntersector | NetTopologySuite",
    "summary": "Class SimpleMCSweepLineIntersector Finds all intersections in one or two sets of edges, using an x-axis sweepline algorithm in conjunction with Monotone Chains. While still O(n^2) in the worst case, this algorithm drastically improves the average-case time. The use of MonotoneChains as the items in the index seems to offer an improvement in performance over a sweep-line alone. Inheritance object EdgeSetIntersector SimpleMCSweepLineIntersector Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.GeometriesGraph.Index Assembly: NetTopologySuite.dll Syntax public class SimpleMCSweepLineIntersector : EdgeSetIntersector Methods | Edit this page View Source ComputeIntersections(IList<Edge>, SegmentIntersector, bool) Declaration public override void ComputeIntersections(IList<Edge> edges, SegmentIntersector si, bool testAllSegments) Parameters Type Name Description IList<Edge> edges SegmentIntersector si bool testAllSegments Overrides EdgeSetIntersector.ComputeIntersections(IList<Edge>, SegmentIntersector, bool) | Edit this page View Source ComputeIntersections(IList<Edge>, IList<Edge>, SegmentIntersector) Declaration public override void ComputeIntersections(IList<Edge> edges0, IList<Edge> edges1, SegmentIntersector si) Parameters Type Name Description IList<Edge> edges0 IList<Edge> edges1 SegmentIntersector si Overrides EdgeSetIntersector.ComputeIntersections(IList<Edge>, IList<Edge>, SegmentIntersector)"
  },
  "api/NetTopologySuite.GeometriesGraph.Index.SimpleSweepLineIntersector.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.Index.SimpleSweepLineIntersector.html",
    "title": "Class SimpleSweepLineIntersector | NetTopologySuite",
    "summary": "Class SimpleSweepLineIntersector Finds all intersections in one or two sets of edges, using a simple x-axis sweepline algorithm. While still O(n^2) in the worst case, this algorithm drastically improves the average-case time. Inheritance object EdgeSetIntersector SimpleSweepLineIntersector Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.GeometriesGraph.Index Assembly: NetTopologySuite.dll Syntax public class SimpleSweepLineIntersector : EdgeSetIntersector Methods | Edit this page View Source ComputeIntersections(IList<Edge>, SegmentIntersector, bool) Declaration public override void ComputeIntersections(IList<Edge> edges, SegmentIntersector si, bool testAllSegments) Parameters Type Name Description IList<Edge> edges SegmentIntersector si bool testAllSegments Overrides EdgeSetIntersector.ComputeIntersections(IList<Edge>, SegmentIntersector, bool) | Edit this page View Source ComputeIntersections(IList<Edge>, IList<Edge>, SegmentIntersector) Declaration public override void ComputeIntersections(IList<Edge> edges0, IList<Edge> edges1, SegmentIntersector si) Parameters Type Name Description IList<Edge> edges0 IList<Edge> edges1 SegmentIntersector si Overrides EdgeSetIntersector.ComputeIntersections(IList<Edge>, IList<Edge>, SegmentIntersector)"
  },
  "api/NetTopologySuite.GeometriesGraph.Index.SweepLineEvent.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.Index.SweepLineEvent.html",
    "title": "Class SweepLineEvent | NetTopologySuite",
    "summary": "Class SweepLineEvent Inheritance object SweepLineEvent Implements IComparable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.GeometriesGraph.Index Assembly: NetTopologySuite.dll Syntax public class SweepLineEvent : IComparable Constructors | Edit this page View Source SweepLineEvent(double, SweepLineEvent) Creates a DELETE event. Declaration public SweepLineEvent(double x, SweepLineEvent insertEvent) Parameters Type Name Description double x The event location SweepLineEvent insertEvent The corresponding INSERT event | Edit this page View Source SweepLineEvent(object, double, object) Creates an INSERT event. Declaration public SweepLineEvent(object label, double x, object obj) Parameters Type Name Description object label The edge set label for this object. double x The event location object obj the object being inserted Properties | Edit this page View Source DeleteEventIndex Declaration public int DeleteEventIndex { get; set; } Property Value Type Description int | Edit this page View Source InsertEvent Declaration public SweepLineEvent InsertEvent { get; } Property Value Type Description SweepLineEvent | Edit this page View Source IsDelete Declaration public bool IsDelete { get; } Property Value Type Description bool | Edit this page View Source IsInsert Declaration public bool IsInsert { get; } Property Value Type Description bool | Edit this page View Source Object Declaration public object Object { get; } Property Value Type Description object Methods | Edit this page View Source CompareTo(object) Events are ordered first by their x-value, and then by their eventType. Insert events are sorted before Delete events, so that items whose Insert and Delete events occur at the same x-value will be correctly handled. Declaration public int CompareTo(object o) Parameters Type Name Description object o Returns Type Description int | Edit this page View Source IsSameLabel(SweepLineEvent) Declaration public bool IsSameLabel(SweepLineEvent ev) Parameters Type Name Description SweepLineEvent ev Returns Type Description bool Implements IComparable"
  },
  "api/NetTopologySuite.GeometriesGraph.Index.SweepLineSegment.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.Index.SweepLineSegment.html",
    "title": "Class SweepLineSegment | NetTopologySuite",
    "summary": "Class SweepLineSegment Inheritance object SweepLineSegment Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.GeometriesGraph.Index Assembly: NetTopologySuite.dll Syntax public class SweepLineSegment Constructors | Edit this page View Source SweepLineSegment(Edge, int) Declaration public SweepLineSegment(Edge edge, int ptIndex) Parameters Type Name Description Edge edge int ptIndex Properties | Edit this page View Source MaxX Declaration public double MaxX { get; } Property Value Type Description double | Edit this page View Source MinX Declaration public double MinX { get; } Property Value Type Description double Methods | Edit this page View Source ComputeIntersections(SweepLineSegment, SegmentIntersector) Declaration public void ComputeIntersections(SweepLineSegment ss, SegmentIntersector si) Parameters Type Name Description SweepLineSegment ss SegmentIntersector si"
  },
  "api/NetTopologySuite.GeometriesGraph.Index.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.Index.html",
    "title": "Namespace NetTopologySuite.GeometriesGraph.Index | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.GeometriesGraph.Index Contains classes that implement indexes for performing noding on geometry graph edges. Classes EdgeSetIntersector An EdgeSetIntersector computes all the intersections between the edges in the set. It adds the computed intersections to each edge they are found on. It may be used in two scenarios: determining the internal intersections between a single set of edges determining the mutual intersections between two different sets of edges It uses a SegmentIntersector to compute the intersections between segments and to record statistics about what kinds of intersections were found. MonotoneChain MonotoneChainEdge MonotoneChains are a way of partitioning the segments of an edge to allow for fast searching of intersections. They have the following properties: the segments within a monotone chain will never intersect each other, and the envelope of any contiguous subset of the segments in a monotone chain is simply the envelope of the endpoints of the subset. Property 1 means that there is no need to test pairs of segments from within the same monotone chain for intersection. Property 2 allows binary search to be used to find the intersection points of two monotone chains. For many types of real-world data, these properties eliminate a large number of segment comparisons, producing substantial speed gains. MonotoneChainIndexer MonotoneChains are a way of partitioning the segments of an edge to allow for fast searching of intersections. Specifically, a sequence of contiguous line segments is a monotone chain if all the vectors defined by the oriented segments lies in the same quadrant. Monotone Chains have the following useful properties: the segments within a monotone chain will never intersect each other, and the envelope of any contiguous subset of the segments in a monotone chain is simply the envelope of the endpoints of the subset. Property 1 means that there is no need to test pairs of segments from within the same monotone chain for intersection. Property 2 allows binary search to be used to find the intersection points of two monotone chains. For many types of real-world data, these properties eliminate a large number of segment comparisons, producing substantial speed gains. Note that due to the efficient intersection test, there is no need to limit the size of chains to obtain fast performance. SegmentIntersector Computes the intersection of line segments, and adds the intersection to the edges containing the segments. SimpleEdgeSetIntersector Finds all intersections in one or two sets of edges, using the straightforward method of comparing all segments. This algorithm is too slow for production use, but is useful for testing purposes. SimpleMCSweepLineIntersector Finds all intersections in one or two sets of edges, using an x-axis sweepline algorithm in conjunction with Monotone Chains. While still O(n^2) in the worst case, this algorithm drastically improves the average-case time. The use of MonotoneChains as the items in the index seems to offer an improvement in performance over a sweep-line alone. SimpleSweepLineIntersector Finds all intersections in one or two sets of edges, using a simple x-axis sweepline algorithm. While still O(n^2) in the worst case, this algorithm drastically improves the average-case time. SweepLineEvent SweepLineSegment"
  },
  "api/NetTopologySuite.GeometriesGraph.Label.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.Label.html",
    "title": "Class Label | NetTopologySuite",
    "summary": "Class Label A Label indicates the topological relationship of a component of a topology graph to a given Geometry. This class supports labels for relationships to two Geometrys, which is sufficient for algorithms for binary operations. Topology graphs support the concept of labeling nodes and edges in the graph. The label of a node or edge specifies its topological relationship to one or more geometries. (In fact, since NTS operations have only two arguments labels are required for only two geometries). A label for a node or edge has one or two elements, depending on whether the node or edge occurs in one or both of the input Geometrys. Elements contain attributes which categorize the topological location of the node or edge relative to the parent Geometry; that is, whether the node or edge is in the interior, boundary or exterior of the Geometry. Attributes have a value from the set {Interior, Boundary, Exterior}. In a node each element has a single attribute On. For an edge each element has a triplet of attributes Left, On, Right. It is up to the client code to associate the 0 and 1 TopologyLocations with specific geometries. Inheritance object Label Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.GeometriesGraph Assembly: NetTopologySuite.dll Syntax public class Label Constructors | Edit this page View Source Label(Location) Construct a Label with a single location for both Geometries. Initialize the locations to Null. Declaration public Label(Location onLoc) Parameters Type Name Description Location onLoc A location value | Edit this page View Source Label(Location, Location, Location) Construct a Label with On, Left and Right locations for both Geometries. Initialize the locations for both Geometries to the given values. Declaration public Label(Location onLoc, Location leftLoc, Location rightLoc) Parameters Type Name Description Location onLoc A location value for On Location leftLoc A location value for Left Location rightLoc A location value for Right | Edit this page View Source Label(Label) Construct a Label with the same values as the argument Label. Declaration public Label(Label lbl) Parameters Type Name Description Label lbl A Label | Edit this page View Source Label(int, Location) Construct a Label with a single location for both Geometries. Initialize the location for the Geometry index. Declaration public Label(int geomIndex, Location onLoc) Parameters Type Name Description int geomIndex A geometry index, 0, or 1. Location onLoc A location value for On | Edit this page View Source Label(int, Location, Location, Location) Construct a Label with On, Left and Right locations for both Geometries. Initialize the locations for the given Geometry index. Declaration public Label(int geomIndex, Location onLoc, Location leftLoc, Location rightLoc) Parameters Type Name Description int geomIndex A geometry index, 0, or 1. Location onLoc A location value for On Location leftLoc A location value for Left Location rightLoc A location value for Right Properties | Edit this page View Source GeometryCount Declaration public int GeometryCount { get; } Property Value Type Description int Methods | Edit this page View Source AllPositionsEqual(int, Location) Declaration public bool AllPositionsEqual(int geomIndex, Location loc) Parameters Type Name Description int geomIndex Location loc Returns Type Description bool | Edit this page View Source Flip() Performs Flip() on both TopologyLocations of this Label Declaration public void Flip() | Edit this page View Source GetLocation(int) Declaration public Location GetLocation(int geomIndex) Parameters Type Name Description int geomIndex Returns Type Description Location | Edit this page View Source GetLocation(int, Position) Declaration public Location GetLocation(int geomIndex, Position posIndex) Parameters Type Name Description int geomIndex Position posIndex Returns Type Description Location | Edit this page View Source GetLocation(int, Positions) Declaration [Obsolete(\"Use GetLocation(int, Topology.Location)\")] public Location GetLocation(int geomIndex, Positions posIndex) Parameters Type Name Description int geomIndex Positions posIndex Returns Type Description Location | Edit this page View Source IsAnyNull(int) Declaration public bool IsAnyNull(int geomIndex) Parameters Type Name Description int geomIndex Returns Type Description bool | Edit this page View Source IsArea() Declaration public bool IsArea() Returns Type Description bool | Edit this page View Source IsArea(int) Declaration public bool IsArea(int geomIndex) Parameters Type Name Description int geomIndex Returns Type Description bool | Edit this page View Source IsEqualOnSide(Label, int) Declaration public bool IsEqualOnSide(Label lbl, int side) Parameters Type Name Description Label lbl int side Returns Type Description bool | Edit this page View Source IsLine(int) Declaration public bool IsLine(int geomIndex) Parameters Type Name Description int geomIndex Returns Type Description bool | Edit this page View Source IsNull(int) Declaration public bool IsNull(int geomIndex) Parameters Type Name Description int geomIndex Returns Type Description bool | Edit this page View Source Merge(Label) Merge this label with another one. Merging updates any null attributes of this label with the attributes from lbl. Declaration public void Merge(Label lbl) Parameters Type Name Description Label lbl The Label to merge | Edit this page View Source SetAllLocations(int, Location) Declaration public void SetAllLocations(int geomIndex, Location _location) Parameters Type Name Description int geomIndex Location _location | Edit this page View Source SetAllLocationsIfNull(Location) Declaration public void SetAllLocationsIfNull(Location _location) Parameters Type Name Description Location _location | Edit this page View Source SetAllLocationsIfNull(int, Location) Declaration public void SetAllLocationsIfNull(int geomIndex, Location _location) Parameters Type Name Description int geomIndex Location _location | Edit this page View Source SetLocation(int, Location) Declaration public void SetLocation(int geomIndex, Location _location) Parameters Type Name Description int geomIndex Location _location | Edit this page View Source SetLocation(int, Position, Location) Declaration public void SetLocation(int geomIndex, Position posIndex, Location _location) Parameters Type Name Description int geomIndex Position posIndex Location _location | Edit this page View Source SetLocation(int, Positions, Location) Declaration [Obsolete(\"Use SetLocation(int, Geometries.Position, Location)\")] public void SetLocation(int geomIndex, Positions posIndex, Location _location) Parameters Type Name Description int geomIndex Positions posIndex Location _location | Edit this page View Source ToLine(int) Converts one GeometryLocation to a Line location. Declaration public void ToLine(int geomIndex) Parameters Type Name Description int geomIndex The index of the TopologyLocation to convert (0 or 1) | Edit this page View Source ToLineLabel(Label) Converts a Label to a Line label (that is, one with no side Location). Declaration public static Label ToLineLabel(Label label) Parameters Type Name Description Label label Label to convert. Returns Type Description Label Label as Line label. | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/NetTopologySuite.GeometriesGraph.Node.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.Node.html",
    "title": "Class Node | NetTopologySuite",
    "summary": "Class Node Inheritance object GraphComponent Node RelateNode Inherited Members GraphComponent.Label GraphComponent.InResult GraphComponent.IsInResult GraphComponent.Covered GraphComponent.IsCovered GraphComponent.IsCoveredSet GraphComponent.Visited GraphComponent.IsVisited GraphComponent.UpdateIM(IntersectionMatrix) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.GeometriesGraph Assembly: NetTopologySuite.dll Syntax public class Node : GraphComponent Constructors | Edit this page View Source Node(Coordinate, EdgeEndStar) Declaration public Node(Coordinate coord, EdgeEndStar edges) Parameters Type Name Description Coordinate coord EdgeEndStar edges Properties | Edit this page View Source Coordinate Gets a value indicating the position of this Declaration public override Coordinate Coordinate { get; protected set; } Property Value Type Description Coordinate The position of this Node Overrides GraphComponent.Coordinate | Edit this page View Source Edges Gets a value indicating the EdgeEndStar of this Node Declaration public EdgeEndStar Edges { get; protected set; } Property Value Type Description EdgeEndStar The EdgeEndStar of this Node | Edit this page View Source IsIsolated An isolated component is one that does not intersect or touch any other component. This is the case if the label has valid locations for only a single Geometry. Declaration public override bool IsIsolated { get; } Property Value Type Description bool true if this component is isolated. Overrides GraphComponent.IsIsolated Methods | Edit this page View Source Add(EdgeEnd) Add the edge to the list of edges at this node. Declaration public void Add(EdgeEnd e) Parameters Type Name Description EdgeEnd e An EdgeEnd | Edit this page View Source ComputeIM(IntersectionMatrix) Compute the contribution to an IM for this component. Declaration public override void ComputeIM(IntersectionMatrix im) Parameters Type Name Description IntersectionMatrix im An IntersectionMatrix Overrides GraphComponent.ComputeIM(IntersectionMatrix) Remarks Basic nodes do not compute IMs. | Edit this page View Source ComputeMergedLocation(Label, int) The location for a given eltIndex for a node will be one of { Null, Interior, Boundary }. A node may be on both the boundary and the interior of a point; in this case, the rule is that the node is considered to be in the boundary. The merged location is the maximum of the two input values. Declaration public Location ComputeMergedLocation(Label label2, int eltIndex) Parameters Type Name Description Label label2 int eltIndex Returns Type Description Location | Edit this page View Source IsIncidentEdgeInResult() Tests whether any incident edge is flagged as being in the result. This test can be used to determine if the node is in the result, since if any incident edge is in the result, the node must be in the result as well. Declaration public bool IsIncidentEdgeInResult() Returns Type Description bool true if any incident edge in the in the result | Edit this page View Source MergeLabel(Label) To merge labels for two nodes, the merged location for each LabelElement is computed. The location for the corresponding node LabelElement is set to the result, as long as the location is non-null. Declaration public void MergeLabel(Label label) Parameters Type Name Description Label label The Label to merge | Edit this page View Source MergeLabel(Node) Merges n's Label with this Node's Label. Declaration public void MergeLabel(Node n) Parameters Type Name Description Node n A Node | Edit this page View Source SetLabel(int, Location) Declaration public void SetLabel(int argIndex, Location onLocation) Parameters Type Name Description int argIndex Location onLocation | Edit this page View Source SetLabelBoundary(int) Updates the label of a node to BOUNDARY, obeying the mod-2 boundaryDetermination rule. Declaration public void SetLabelBoundary(int argIndex) Parameters Type Name Description int argIndex An index for a TopologyLocation (0 or 1) | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() | Edit this page View Source Write(TextWriter) Declaration public void Write(TextWriter outstream) Parameters Type Name Description TextWriter outstream"
  },
  "api/NetTopologySuite.GeometriesGraph.NodeFactory.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.NodeFactory.html",
    "title": "Class NodeFactory | NetTopologySuite",
    "summary": "Class NodeFactory A Factory to create Nodes. Inheritance object NodeFactory OverlayNodeFactory RelateNodeFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.GeometriesGraph Assembly: NetTopologySuite.dll Syntax public class NodeFactory Methods | Edit this page View Source CreateNode(Coordinate) The basic node constructor does not allow for incident edges. Declaration public virtual Node CreateNode(Coordinate coord) Parameters Type Name Description Coordinate coord A Coordinate Returns Type Description Node The created Node"
  },
  "api/NetTopologySuite.GeometriesGraph.NodeMap.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.NodeMap.html",
    "title": "Class NodeMap | NetTopologySuite",
    "summary": "Class NodeMap A map of nodes, indexed by the coordinate of the node. Inheritance object NodeMap Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.GeometriesGraph Assembly: NetTopologySuite.dll Syntax public class NodeMap Constructors | Edit this page View Source NodeMap(NodeFactory) Creates an instance of this class using the provided NodeFactory. Declaration public NodeMap(NodeFactory nodeFact) Parameters Type Name Description NodeFactory nodeFact A factory to create Nodes Properties | Edit this page View Source Values Declaration public IList<Node> Values { get; } Property Value Type Description IList<Node> Methods | Edit this page View Source Add(EdgeEnd) Adds a node for the start point of this EdgeEnd (if one does not already exist in this map). Adds the EdgeEnd to the (possibly new) node. Declaration public void Add(EdgeEnd e) Parameters Type Name Description EdgeEnd e An EdgeEnd | Edit this page View Source AddNode(Coordinate) This method expects that a node has a coordinate value. Declaration public Node AddNode(Coordinate coord) Parameters Type Name Description Coordinate coord A Coordinate Returns Type Description Node The Node for the provided Coordinate coord | Edit this page View Source AddNode(Node) Adds a Node to this NodeMap. If a Node with the same Coordinate is already present in this NodeMap, their Labels are merged. Declaration public Node AddNode(Node n) Parameters Type Name Description Node n The Node to add Returns Type Description Node Either n or a Node with merged Labels | Edit this page View Source Find(Coordinate) Searches for a Node at coord position. Declaration public Node Find(Coordinate coord) Parameters Type Name Description Coordinate coord A Coordinate Returns Type Description Node The node if found; null otherwise. | Edit this page View Source GetBoundaryNodes(int) Declaration public IList<Node> GetBoundaryNodes(int geomIndex) Parameters Type Name Description int geomIndex Returns Type Description IList<Node> | Edit this page View Source GetEnumerator() Declaration public IEnumerator<Node> GetEnumerator() Returns Type Description IEnumerator<Node> | Edit this page View Source Write(StreamWriter) Declaration public void Write(StreamWriter outstream) Parameters Type Name Description StreamWriter outstream"
  },
  "api/NetTopologySuite.GeometriesGraph.PlanarGraph.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.PlanarGraph.html",
    "title": "Class PlanarGraph | NetTopologySuite",
    "summary": "Class PlanarGraph The computation of the IntersectionMatrix relies on the use of a structure called a \"topology graph\". The topology graph contains nodes and edges corresponding to the nodes and line segments of a Geometry. Each node and edge in the graph is labeled with its topological location relative to the source point. Note that there is no requirement that points of self-intersection be a vertex. Thus to obtain a correct topology graph, Geometrys must be self-noded before constructing their graphs. Two fundamental operations are supported by topology graphs: Computing the intersections between all the edges and nodes of a single graph Computing the intersections between the edges and nodes of two different graphs Inheritance object PlanarGraph GeometryGraph Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.GeometriesGraph Assembly: NetTopologySuite.dll Syntax public class PlanarGraph Constructors | Edit this page View Source PlanarGraph() Creates an instance of this class using the default NodeFactory. Declaration public PlanarGraph() | Edit this page View Source PlanarGraph(NodeFactory) Creates an instance of this class using the provided NodeFactory Declaration public PlanarGraph(NodeFactory nodeFact) Parameters Type Name Description NodeFactory nodeFact A factory to create Nodes Fields | Edit this page View Source edgeEndList Declaration protected IList<EdgeEnd> edgeEndList Field Value Type Description IList<EdgeEnd> Properties | Edit this page View Source EdgeEnds Declaration public IList<EdgeEnd> EdgeEnds { get; } Property Value Type Description IList<EdgeEnd> | Edit this page View Source Edges Declaration protected IList<Edge> Edges { get; } Property Value Type Description IList<Edge> | Edit this page View Source NodeMap Declaration protected NodeMap NodeMap { get; } Property Value Type Description NodeMap | Edit this page View Source Nodes Declaration public IList<Node> Nodes { get; } Property Value Type Description IList<Node> Methods | Edit this page View Source Add(EdgeEnd) Declaration public void Add(EdgeEnd e) Parameters Type Name Description EdgeEnd e | Edit this page View Source AddEdges(IList<Edge>) Add a set of edges to the graph. For each edge two DirectedEdges will be created. DirectedEdges are NOT linked by this method. Declaration public void AddEdges(IList<Edge> edgesToAdd) Parameters Type Name Description IList<Edge> edgesToAdd A set of Edges to add. | Edit this page View Source AddNode(Coordinate) Declaration public Node AddNode(Coordinate coord) Parameters Type Name Description Coordinate coord Returns Type Description Node | Edit this page View Source AddNode(Node) Declaration public Node AddNode(Node node) Parameters Type Name Description Node node Returns Type Description Node | Edit this page View Source Find(Coordinate) Searches for a Node at Coordinate position coord Declaration public Node Find(Coordinate coord) Parameters Type Name Description Coordinate coord A Coordinate position Returns Type Description Node The node if found; null otherwise | Edit this page View Source FindEdge(Coordinate, Coordinate) Returns the edge whose first two coordinates are p0 and p1. Declaration public Edge FindEdge(Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p0 The 1st Coordinate Coordinate p1 The 2nd Coordinate Returns Type Description Edge The edge, if found null if the edge was not found. | Edit this page View Source FindEdgeEnd(Edge) Returns the EdgeEnd which has edge e as its base edge (MD 18 Feb 2002 - this should return a pair of edges). Declaration public EdgeEnd FindEdgeEnd(Edge e) Parameters Type Name Description Edge e An Edge Returns Type Description EdgeEnd The edge, if found null if the edge was not found. | Edit this page View Source FindEdgeInSameDirection(Coordinate, Coordinate) Returns the edge which starts at p0 and whose first segment is parallel to p1. Declaration public Edge FindEdgeInSameDirection(Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p0 Starting Coordinate Coordinate p1 Coordinate used to establish direction Returns Type Description Edge The matching edge, if found null if the edge was not found. | Edit this page View Source GetEdgeEnumerator() Declaration public IEnumerator<Edge> GetEdgeEnumerator() Returns Type Description IEnumerator<Edge> | Edit this page View Source GetNodeEnumerator() Declaration public IEnumerator<Node> GetNodeEnumerator() Returns Type Description IEnumerator<Node> | Edit this page View Source InsertEdge(Edge) Declaration protected void InsertEdge(Edge e) Parameters Type Name Description Edge e | Edit this page View Source IsBoundaryNode(int, Coordinate) Declaration public bool IsBoundaryNode(int geomIndex, Coordinate coord) Parameters Type Name Description int geomIndex Coordinate coord Returns Type Description bool | Edit this page View Source LinkAllDirectedEdges() Link the DirectedEdges at the nodes of the graph. This allows clients to link only a subset of nodes in the graph, for efficiency (because they know that only a subset is of interest). Declaration public void LinkAllDirectedEdges() | Edit this page View Source LinkResultDirectedEdges() Link the DirectedEdges at the nodes of the graph. This allows clients to link only a subset of nodes in the graph, for efficiency (because they know that only a subset is of interest). Declaration public void LinkResultDirectedEdges() | Edit this page View Source LinkResultDirectedEdges(IList<Node>) For nodes in the Collection, link the DirectedEdges at the node that are in the result. This allows clients to link only a subset of nodes in the graph, for efficiency (because they know that only a subset is of interest). Declaration public static void LinkResultDirectedEdges(IList<Node> nodes) Parameters Type Name Description IList<Node> nodes A collection of Nodes | Edit this page View Source WriteEdges(StreamWriter) Declaration public void WriteEdges(StreamWriter outstream) Parameters Type Name Description StreamWriter outstream"
  },
  "api/NetTopologySuite.GeometriesGraph.Position.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.Position.html",
    "title": "Class Position | NetTopologySuite",
    "summary": "Class Position A Position indicates the position of a Location relative to a graph component (Node, Edge, or Area). Inheritance object Position Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.GeometriesGraph Assembly: NetTopologySuite.dll Syntax [Obsolete(\"Use NetTopologySuite.Geometries.PositionExtensions\")] public class Position Methods | Edit this page View Source Opposite(Positions) Returns Positions.Left if the position is Positions.Right, Positions.Right if the position is Left, or the position otherwise. Declaration public static Positions Opposite(Positions position) Parameters Type Name Description Positions position Returns Type Description Positions"
  },
  "api/NetTopologySuite.GeometriesGraph.Positions.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.Positions.html",
    "title": "Enum Positions | NetTopologySuite",
    "summary": "Enum Positions Namespace: NetTopologySuite.GeometriesGraph Assembly: NetTopologySuite.dll Syntax [Obsolete(\"Use NetTopologySuite.Geometries.Position\")] public enum Positions Fields Name Description Left An indicator that a Location is to the left of a GraphComponent (1) On An indicator that a Location is on a GraphComponent (0) Parallel An indicator that a Location is is parallel to x-axis of a GraphComponent (-1) /// Right An indicator that a Location is to the right of a GraphComponent (2)"
  },
  "api/NetTopologySuite.GeometriesGraph.QuadrantOp.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.QuadrantOp.html",
    "title": "Class QuadrantOp | NetTopologySuite",
    "summary": "Class QuadrantOp Utility functions for working with quadrants, which are numbered as follows: 1 | 0 --+-- 2 | 3 Inheritance object QuadrantOp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.GeometriesGraph Assembly: NetTopologySuite.dll Syntax [Obsolete(\"Use NetTopologySuite.Geometries.Quadrant\")] public class QuadrantOp Fields | Edit this page View Source NE North-East Declaration public static readonly int NE Field Value Type Description int | Edit this page View Source NW North-West Declaration public static readonly int NW Field Value Type Description int | Edit this page View Source SE South-East Declaration public static readonly int SE Field Value Type Description int | Edit this page View Source SW South-West Declaration public static readonly int SW Field Value Type Description int Methods | Edit this page View Source CommonHalfPlane(int, int) Returns the right-hand quadrant of the halfplane defined by the two quadrants, or -1 if the quadrants are opposite, or the quadrant if they are identical. Declaration public static int CommonHalfPlane(int quad1, int quad2) Parameters Type Name Description int quad1 int quad2 Returns Type Description int | Edit this page View Source IsInHalfPlane(int, int) Returns whether the given quadrant lies within the given halfplane (specified by its right-hand quadrant). Declaration public static bool IsInHalfPlane(int quad, int halfPlane) Parameters Type Name Description int quad int halfPlane Returns Type Description bool | Edit this page View Source IsNorthern(int) Returns true if the given quadrant is 0 or 1. Declaration public static bool IsNorthern(int quad) Parameters Type Name Description int quad Returns Type Description bool | Edit this page View Source IsOpposite(int, int) Returns true if the quadrants are 1 and 3, or 2 and 4. Declaration public static bool IsOpposite(int quad1, int quad2) Parameters Type Name Description int quad1 int quad2 Returns Type Description bool | Edit this page View Source Quadrant(Coordinate, Coordinate) Returns the quadrant of a directed line segment from p0 to p1. Declaration public static int Quadrant(Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p0 Coordinate p1 Returns Type Description int Exceptions Type Condition ArgumentException if the points are equal | Edit this page View Source Quadrant(double, double) Returns the quadrant of a directed line segment (specified as x and y displacements, which cannot both be 0). Declaration public static int Quadrant(double dx, double dy) Parameters Type Name Description double dx double dy Returns Type Description int Exceptions Type Condition ArgumentException If the displacements are both 0"
  },
  "api/NetTopologySuite.GeometriesGraph.TopologyLocation.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.TopologyLocation.html",
    "title": "Class TopologyLocation | NetTopologySuite",
    "summary": "Class TopologyLocation A TopologyLocation is the labelling of a GraphComponent's topological relationship to a single Geometry. Inheritance object TopologyLocation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.GeometriesGraph Assembly: NetTopologySuite.dll Syntax public class TopologyLocation Remarks If the parent component is an area edge, each side and the edge itself have a topological location. These locations are named: On on the edge Left left-hand side of the edge Right right-hand side If the parent component is a line edge or node, there is a single topological relationship attribute, On. The possible values of a topological location are { Null, Exterior, Boundary, Interior } The labelling is stored in an array _location[j] where where j has the values On, Left, Right. Constructors | Edit this page View Source TopologyLocation(Location) Declaration public TopologyLocation(Location on) Parameters Type Name Description Location on | Edit this page View Source TopologyLocation(Location, Location, Location) Constructs a TopologyLocation specifying how points on, to the left of, and to the right of some GraphComponent relate to some Geometry. Possible values for the parameters are Location.Null, Location.Exterior, Location.Boundary, and Location.Interior. Declaration public TopologyLocation(Location on, Location left, Location right) Parameters Type Name Description Location on Location for On position Location left Location for Left position Location right Location for Right position | Edit this page View Source TopologyLocation(Location[]) Declaration public TopologyLocation(Location[] location) Parameters Type Name Description Location[] location | Edit this page View Source TopologyLocation(TopologyLocation) Declaration public TopologyLocation(TopologyLocation gl) Parameters Type Name Description TopologyLocation gl Properties | Edit this page View Source IsAnyNull Declaration public bool IsAnyNull { get; } Property Value Type Description bool true if any locations are Null. | Edit this page View Source IsArea Declaration public bool IsArea { get; } Property Value Type Description bool | Edit this page View Source IsLine Declaration public bool IsLine { get; } Property Value Type Description bool | Edit this page View Source IsNull Declaration public bool IsNull { get; } Property Value Type Description bool true if all locations are Null. | Edit this page View Source this[Position] Get calls Get(Positions posIndex), Set calls SetLocation(Positions locIndex, Location locValue) Declaration public Location this[Position posIndex] { get; set; } Parameters Type Name Description Position posIndex Property Value Type Description Location | Edit this page View Source this[Positions] Get calls Get(Positions posIndex), Set calls SetLocation(Positions locIndex, Location locValue) Declaration [Obsolete(\"Use the Geometries.Position indexer instead\")] public Location this[Positions posIndex] { get; set; } Parameters Type Name Description Positions posIndex Property Value Type Description Location Methods | Edit this page View Source AllPositionsEqual(Location) Declaration public bool AllPositionsEqual(Location loc) Parameters Type Name Description Location loc Returns Type Description bool | Edit this page View Source Flip() Declaration public void Flip() | Edit this page View Source Get(Position) Declaration public Location Get(Position posIndex) Parameters Type Name Description Position posIndex Returns Type Description Location | Edit this page View Source Get(Positions) Declaration [Obsolete(\"Use Get(Geometries.Position)\")] public Location Get(Positions posIndex) Parameters Type Name Description Positions posIndex Returns Type Description Location | Edit this page View Source GetLocations() Declaration public Location[] GetLocations() Returns Type Description Location[] | Edit this page View Source IsEqualOnSide(TopologyLocation, int) Declaration public bool IsEqualOnSide(TopologyLocation le, int locIndex) Parameters Type Name Description TopologyLocation le int locIndex Returns Type Description bool | Edit this page View Source Merge(TopologyLocation) Merge updates only the Null attributes of this object with the attributes of another. Declaration public void Merge(TopologyLocation gl) Parameters Type Name Description TopologyLocation gl | Edit this page View Source SetAllLocations(Location) Declaration public void SetAllLocations(Location locValue) Parameters Type Name Description Location locValue | Edit this page View Source SetAllLocationsIfNull(Location) Declaration public void SetAllLocationsIfNull(Location locValue) Parameters Type Name Description Location locValue | Edit this page View Source SetLocation(Location) Declaration public void SetLocation(Location locValue) Parameters Type Name Description Location locValue | Edit this page View Source SetLocation(Position, Location) Declaration public void SetLocation(Position locIndex, Location locValue) Parameters Type Name Description Position locIndex Location locValue | Edit this page View Source SetLocation(Positions, Location) Declaration [Obsolete(\"Use SetLocation(Geometries.Position, Location)\")] public void SetLocation(Positions locIndex, Location locValue) Parameters Type Name Description Positions locIndex Location locValue | Edit this page View Source SetLocations(Location, Location, Location) Declaration public void SetLocations(Location on, Location left, Location right) Parameters Type Name Description Location on Location left Location right | Edit this page View Source SetLocations(TopologyLocation) Declaration public void SetLocations(TopologyLocation gl) Parameters Type Name Description TopologyLocation gl | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/NetTopologySuite.GeometriesGraph.html": {
    "href": "api/NetTopologySuite.GeometriesGraph.html",
    "title": "Namespace NetTopologySuite.GeometriesGraph | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.GeometriesGraph Contains classes that implement topology graphs. The Net Topology Suite (NTS) is a .Net API that implements a core set of spatial data operations using an explicit precision model and robust geometric algorithms. NTS is intended to be used in the development of applications that support the validation, cleaning, integration and querying of spatial datasets. NTS attempts to implement the OpenGIS Simple Features Specification (SFS) as accurately as possible. In some cases the SFS is unclear or omits a specification; in this case NTS attempts to choose a reasonable and consistent alternative. Differences from and elaborations of the SFS are documented in this specification. Classes Depth A Depth object records the topological depth of the sides of an Edge for up to two Geometries. DirectedEdge DirectedEdgeStar A DirectedEdgeStar is an ordered list of outgoing DirectedEdges around a node. It supports labelling the edges as well as linking the edges to form both MaximalEdgeRings and MinimalEdgeRings. Edge EdgeEnd Models the end of an edge incident on a node. EdgeEndStar A EdgeEndStar is an ordered list of EdgeEnds around a node. They are maintained in CCW order (starting with the positive x-axis) around the node for efficient lookup and topology building. EdgeIntersection An EdgeIntersection represents a point on an edge which intersects with another edge. The intersection may either be a single point, or a line segment (in which case this point is the start of the line segment) The label attached to this intersection point applies to the edge from this point forwards, until the next intersection or the end of the edge. The intersection point must be precise. EdgeIntersectionList A list of edge intersections along an Edge. EdgeList A EdgeList is a list of Edges. It supports locating edges that are point-wise equals to a target edge. EdgeNodingValidator Validates that a collection of Edge is correctly noded. Throws an appropriate exception if an noding error is found. Uses FastNodingValidator to perform the validation. EdgeRing GeometryGraph A GeometryGraph is a graph that models a given Geometry. GraphComponent A GraphComponent is the parent class for the objects' that form a graph. Each GraphComponent can carry a Label. Label A Label indicates the topological relationship of a component of a topology graph to a given Geometry. This class supports labels for relationships to two Geometrys, which is sufficient for algorithms for binary operations. Topology graphs support the concept of labeling nodes and edges in the graph. The label of a node or edge specifies its topological relationship to one or more geometries. (In fact, since NTS operations have only two arguments labels are required for only two geometries). A label for a node or edge has one or two elements, depending on whether the node or edge occurs in one or both of the input Geometrys. Elements contain attributes which categorize the topological location of the node or edge relative to the parent Geometry; that is, whether the node or edge is in the interior, boundary or exterior of the Geometry. Attributes have a value from the set {Interior, Boundary, Exterior}. In a node each element has a single attribute On. For an edge each element has a triplet of attributes Left, On, Right. It is up to the client code to associate the 0 and 1 TopologyLocations with specific geometries. Node NodeFactory A Factory to create Nodes. NodeMap A map of nodes, indexed by the coordinate of the node. PlanarGraph The computation of the IntersectionMatrix relies on the use of a structure called a \"topology graph\". The topology graph contains nodes and edges corresponding to the nodes and line segments of a Geometry. Each node and edge in the graph is labeled with its topological location relative to the source point. Note that there is no requirement that points of self-intersection be a vertex. Thus to obtain a correct topology graph, Geometrys must be self-noded before constructing their graphs. Two fundamental operations are supported by topology graphs: Computing the intersections between all the edges and nodes of a single graph Computing the intersections between the edges and nodes of two different graphs Position A Position indicates the position of a Location relative to a graph component (Node, Edge, or Area). QuadrantOp Utility functions for working with quadrants, which are numbered as follows: 1 | 0 --+-- 2 | 3 TopologyLocation A TopologyLocation is the labelling of a GraphComponent's topological relationship to a single Geometry. Enums Positions"
  },
  "api/NetTopologySuite.IO.BEBinaryWriter.html": {
    "href": "api/NetTopologySuite.IO.BEBinaryWriter.html",
    "title": "Class BEBinaryWriter | NetTopologySuite",
    "summary": "Class BEBinaryWriter Extends the BinaryWriter class to allow writing values in the BigEndian format. Inheritance object BinaryWriter BEBinaryWriter Implements IDisposable Inherited Members BinaryWriter.Null BinaryWriter.OutStream BinaryWriter.Close() BinaryWriter.Dispose() BinaryWriter.Dispose(bool) BinaryWriter.Flush() BinaryWriter.Seek(int, SeekOrigin) BinaryWriter.Write(bool) BinaryWriter.Write(byte) BinaryWriter.Write(byte[]) BinaryWriter.Write(byte[], int, int) BinaryWriter.Write(char) BinaryWriter.Write(char[]) BinaryWriter.Write(char[], int, int) BinaryWriter.Write(decimal) BinaryWriter.Write(sbyte) BinaryWriter.Write(string) BinaryWriter.Write7BitEncodedInt(int) BinaryWriter.BaseStream object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.IO Assembly: NetTopologySuite.dll Syntax public class BEBinaryWriter : BinaryWriter, IDisposable Remarks While BEBinaryWriter extends BinaryWriter adding methods for writing integer values (Write(int)) and double values (Write(double)) in the BigEndian format, this implementation overrides methods, such Write(int) and Write(double) and more, for writing BigEndian values in the BigEndian format. Constructors | Edit this page View Source BEBinaryWriter() Initializes a new instance of the BEBinaryWriter class. Declaration public BEBinaryWriter() | Edit this page View Source BEBinaryWriter(Stream) Initializes a new instance of the BEBinaryWriter class. Declaration public BEBinaryWriter(Stream output) Parameters Type Name Description Stream output The supplied stream. Exceptions Type Condition ArgumentNullException output is null. ArgumentException The stream does not support writing, or the stream is already closed. | Edit this page View Source BEBinaryWriter(Stream, Encoding) Initializes a new instance of the BEBinaryWriter class. Declaration public BEBinaryWriter(Stream output, Encoding encoding) Parameters Type Name Description Stream output The supplied stream. Encoding encoding The character encoding. Exceptions Type Condition ArgumentNullException output or encoding is null. ArgumentException The stream does not support writing, or the stream is already closed. Methods | Edit this page View Source Write(double) Writes an eight-byte floating-point value to the current stream using BigEndian encoding and advances the stream position by eight bytes. Declaration public override void Write(double value) Parameters Type Name Description double value The eight-byte floating-point value to write. Overrides BinaryWriter.Write(double) Exceptions Type Condition ObjectDisposedException The stream is closed. IOException An I/O error occurs. | Edit this page View Source Write(short) Writes a two-byte signed integer to the current stream using BigEndian encoding and advances the stream position by two bytes. Declaration public override void Write(short value) Parameters Type Name Description short value The two-byte signed integer to write. Overrides BinaryWriter.Write(short) Exceptions Type Condition ObjectDisposedException The stream is closed. IOException An I/O error occurs. | Edit this page View Source Write(int) Writes a four-byte signed integer to the current stream using BigEndian encoding and advances the stream position by four bytes. Declaration public override void Write(int value) Parameters Type Name Description int value The four-byte signed integer to write. Overrides BinaryWriter.Write(int) Exceptions Type Condition ObjectDisposedException The stream is closed. IOException An I/O error occurs. | Edit this page View Source Write(long) Writes an eight-byte signed integer to the current stream using BigEndian encoding and advances the stream position by eight bytes. Declaration public override void Write(long value) Parameters Type Name Description long value The eight-byte signed integer to write. Overrides BinaryWriter.Write(long) Exceptions Type Condition ObjectDisposedException The stream is closed. IOException An I/O error occurs. | Edit this page View Source Write(float) Writes a four-byte floating-point value to the current stream using BigEndian encoding and advances the stream position by four bytes. Declaration public override void Write(float value) Parameters Type Name Description float value The four-byte floating-point value to write. Overrides BinaryWriter.Write(float) Exceptions Type Condition ObjectDisposedException The stream is closed. IOException An I/O error occurs. | Edit this page View Source Write(ushort) Writes a two-byte unsigned integer to the current stream using BigEndian encoding and advances the stream position by two bytes. Declaration [CLSCompliant(false)] public override void Write(ushort value) Parameters Type Name Description ushort value The two-byte unsigned integer to write. Overrides BinaryWriter.Write(ushort) Exceptions Type Condition ObjectDisposedException The stream is closed. IOException An I/O error occurs. | Edit this page View Source Write(uint) Writes a four-byte unsigned integer to the current stream using BigEndian encoding and advances the stream position by four bytes. Declaration [CLSCompliant(false)] public override void Write(uint value) Parameters Type Name Description uint value The four-byte unsigned integer to write. Overrides BinaryWriter.Write(uint) Exceptions Type Condition ObjectDisposedException The stream is closed. IOException An I/O error occurs. | Edit this page View Source Write(ulong) Writes an eight-byte unsigned integer to the current stream using BigEndian encoding and advances the stream position by eight bytes. Declaration [CLSCompliant(false)] public override void Write(ulong value) Parameters Type Name Description ulong value The eight-byte unsigned integer to write. Overrides BinaryWriter.Write(ulong) Exceptions Type Condition ObjectDisposedException The stream is closed. IOException An I/O error occurs. Implements IDisposable"
  },
  "api/NetTopologySuite.IO.BiEndianBinaryReader.html": {
    "href": "api/NetTopologySuite.IO.BiEndianBinaryReader.html",
    "title": "Class BiEndianBinaryReader | NetTopologySuite",
    "summary": "Class BiEndianBinaryReader Extends the BinaryReader class to allow reading values in the specified format. Inheritance object BinaryReader BiEndianBinaryReader Implements IDisposable Inherited Members BinaryReader.Close() BinaryReader.Dispose() BinaryReader.Dispose(bool) BinaryReader.FillBuffer(int) BinaryReader.PeekChar() BinaryReader.Read() BinaryReader.Read(byte[], int, int) BinaryReader.Read(char[], int, int) BinaryReader.Read7BitEncodedInt() BinaryReader.ReadBoolean() BinaryReader.ReadByte() BinaryReader.ReadBytes(int) BinaryReader.ReadChar() BinaryReader.ReadChars(int) BinaryReader.ReadSByte() BinaryReader.BaseStream object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.IO Assembly: NetTopologySuite.dll Syntax public class BiEndianBinaryReader : BinaryReader, IDisposable Remarks While BiEndianBinaryReader extends BinaryReader adding methods for reading integer values (ReadInt32()) and double values (ReadDouble()) in the specified format, this implementation overrides methods, such ReadInt32() and ReadDouble() and more, for reading values in the specified by Endianess format. Constructors | Edit this page View Source BiEndianBinaryReader(Stream) Initializes a new instance of the BiEndianBinaryReader class. Declaration public BiEndianBinaryReader(Stream stream) Parameters Type Name Description Stream stream The stream. | Edit this page View Source BiEndianBinaryReader(Stream, ByteOrder) Initializes a new instance of the BiEndianBinaryReader class. Declaration public BiEndianBinaryReader(Stream input, ByteOrder endianess) Parameters Type Name Description Stream input The supplied stream. ByteOrder endianess The byte order. Exceptions Type Condition ArgumentException The stream does not support reading, the stream is null, or the stream is already closed. Properties | Edit this page View Source Endianess Encoding type Declaration public ByteOrder Endianess { get; set; } Property Value Type Description ByteOrder Methods | Edit this page View Source ReadDecimal() Reads a decimal value from the current stream and advances the current position of the stream by sixteen bytes. Declaration public override decimal ReadDecimal() Returns Type Description decimal A decimal value read from the current stream. Overrides BinaryReader.ReadDecimal() Exceptions Type Condition ObjectDisposedException The stream is closed. IOException An I/O error occurs. EndOfStreamException The end of the stream is reached. | Edit this page View Source ReadDouble() Reads an 8-byte floating point value from the current stream using the specified encoding and advances the current position of the stream by eight bytes. Declaration public override double ReadDouble() Returns Type Description double An 8-byte floating point value read from the current stream. Overrides BinaryReader.ReadDouble() Exceptions Type Condition ObjectDisposedException The stream is closed. IOException An I/O error occurs. EndOfStreamException The end of the stream is reached. | Edit this page View Source ReadInt16() Reads a 2-byte signed integer from the current stream using the specified encoding and advances the current position of the stream by two bytes. Declaration public override short ReadInt16() Returns Type Description short A 2-byte signed integer read from the current stream. Overrides BinaryReader.ReadInt16() Exceptions Type Condition ObjectDisposedException The stream is closed. IOException An I/O error occurs. EndOfStreamException The end of the stream is reached. | Edit this page View Source ReadInt32() Reads a 4-byte signed integer from the current stream using the specified encoding and advances the current position of the stream by four bytes. Declaration public override int ReadInt32() Returns Type Description int A 4-byte signed integer read from the current stream. Overrides BinaryReader.ReadInt32() Exceptions Type Condition ObjectDisposedException The stream is closed. IOException An I/O error occurs. EndOfStreamException The end of the stream is reached. | Edit this page View Source ReadInt64() Reads an 8-byte signed integer from the current stream using the specified encoding and advances the current position of the stream by eight bytes. Declaration public override long ReadInt64() Returns Type Description long An 8-byte signed integer read from the current stream. Overrides BinaryReader.ReadInt64() Exceptions Type Condition ObjectDisposedException The stream is closed. IOException An I/O error occurs. EndOfStreamException The end of the stream is reached. | Edit this page View Source ReadSingle() Reads a 4-byte floating point value from the current stream using the specified encoding and advances the current position of the stream by four bytes. Declaration public override float ReadSingle() Returns Type Description float A 4-byte floating point value read from the current stream. Overrides BinaryReader.ReadSingle() Exceptions Type Condition ObjectDisposedException The stream is closed. IOException An I/O error occurs. EndOfStreamException The end of the stream is reached. | Edit this page View Source ReadString() Reads a string from the current stream. The string is prefixed with the length, encoded as an integer seven bits at a time. Declaration public override string ReadString() Returns Type Description string The string being read. Overrides BinaryReader.ReadString() Exceptions Type Condition ObjectDisposedException The stream is closed. IOException An I/O error occurs. EndOfStreamException The end of the stream is reached. | Edit this page View Source ReadUInt16() Reads a 2-byte unsigned integer from the current stream using the specified encoding and advances the position of the stream by two bytes. Declaration [CLSCompliant(false)] public override ushort ReadUInt16() Returns Type Description ushort A 2-byte unsigned integer read from this stream. Overrides BinaryReader.ReadUInt16() Exceptions Type Condition ObjectDisposedException The stream is closed. IOException An I/O error occurs. EndOfStreamException The end of the stream is reached. | Edit this page View Source ReadUInt32() Reads a 4-byte unsigned integer from the current stream using the specified encoding and advances the position of the stream by four bytes. Declaration [CLSCompliant(false)] public override uint ReadUInt32() Returns Type Description uint A 4-byte unsigned integer read from this stream. Overrides BinaryReader.ReadUInt32() Exceptions Type Condition ObjectDisposedException The stream is closed. IOException An I/O error occurs. EndOfStreamException The end of the stream is reached. | Edit this page View Source ReadUInt64() Reads an 8-byte unsigned integer from the current stream using the specified encoding and advances the position of the stream by eight bytes. Declaration [CLSCompliant(false)] public override ulong ReadUInt64() Returns Type Description ulong An 8-byte unsigned integer read from this stream. Overrides BinaryReader.ReadUInt64() Exceptions Type Condition ObjectDisposedException The stream is closed. IOException An I/O error occurs. EndOfStreamException The end of the stream is reached. Implements IDisposable"
  },
  "api/NetTopologySuite.IO.ByteOrder.html": {
    "href": "api/NetTopologySuite.IO.ByteOrder.html",
    "title": "Enum ByteOrder | NetTopologySuite",
    "summary": "Enum ByteOrder Byte order Namespace: NetTopologySuite.IO Assembly: NetTopologySuite.dll Syntax public enum ByteOrder : byte Fields Name Description BigEndian BigEndian LittleEndian LittleEndian"
  },
  "api/NetTopologySuite.IO.GML2.GMLReader.html": {
    "href": "api/NetTopologySuite.IO.GML2.GMLReader.html",
    "title": "Class GMLReader | NetTopologySuite",
    "summary": "Class GMLReader Reads a GML document and creates a representation of the features based on NetTopologySuite model. Uses GML 2.1.1 Geometry.xsd schema for base for features. Inheritance object GMLReader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.IO.GML2 Assembly: NetTopologySuite.dll Syntax public class GMLReader Constructors | Edit this page View Source GMLReader() Initialize reader with a standard GeometryFactory. Declaration public GMLReader() | Edit this page View Source GMLReader(GeometryFactory) Initialize reader with the given GeometryFactory. Declaration public GMLReader(GeometryFactory factory) Parameters Type Name Description GeometryFactory factory Properties | Edit this page View Source Factory Geometry builder. Declaration protected GeometryFactory Factory { get; } Property Value Type Description GeometryFactory Methods | Edit this page View Source GetFactory(string, GeometryFactory) Declaration protected virtual GeometryFactory GetFactory(string srsName, GeometryFactory gfDefault) Parameters Type Name Description string srsName GeometryFactory gfDefault Returns Type Description GeometryFactory | Edit this page View Source Read(StringReader) Declaration public Geometry Read(StringReader stringReader) Parameters Type Name Description StringReader stringReader Returns Type Description Geometry | Edit this page View Source Read(string) Declaration public Geometry Read(string xmlText) Parameters Type Name Description string xmlText Returns Type Description Geometry | Edit this page View Source Read(XDocument) Read a GML document and returns relative Geometry. Declaration public Geometry Read(XDocument document) Parameters Type Name Description XDocument document Returns Type Description Geometry | Edit this page View Source Read(XmlDocument) Read a GML document and returns relative Geometry. Declaration public Geometry Read(XmlDocument document) Parameters Type Name Description XmlDocument document Returns Type Description Geometry | Edit this page View Source Read(XmlReader) Declaration public Geometry Read(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description Geometry | Edit this page View Source ReadCoordinate(XmlReader) Reads the coordinate. Declaration protected Coordinate ReadCoordinate(XmlReader reader) Parameters Type Name Description XmlReader reader The reader. Returns Type Description Coordinate | Edit this page View Source ReadCoordinates(string) Extract a Coordinate from a x,y string value. Declaration protected Coordinate ReadCoordinates(string value) Parameters Type Name Description string value Returns Type Description Coordinate | Edit this page View Source ReadGeometryCollection(XmlReader) Declaration protected GeometryCollection ReadGeometryCollection(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description GeometryCollection | Edit this page View Source ReadGeometryCollection(XmlReader, GeometryFactory, int) Declaration protected GeometryCollection ReadGeometryCollection(XmlReader reader, GeometryFactory gf, int srsDimension) Parameters Type Name Description XmlReader reader GeometryFactory gf int srsDimension Returns Type Description GeometryCollection | Edit this page View Source ReadLineString(XmlReader) Declaration protected LineString ReadLineString(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description LineString | Edit this page View Source ReadLineString(XmlReader, GeometryFactory) Declaration protected LineString ReadLineString(XmlReader reader, GeometryFactory gf) Parameters Type Name Description XmlReader reader GeometryFactory gf Returns Type Description LineString | Edit this page View Source ReadLineString(XmlReader, GeometryFactory, int) Declaration protected LineString ReadLineString(XmlReader reader, GeometryFactory gf, int srsDimension) Parameters Type Name Description XmlReader reader GeometryFactory gf int srsDimension Returns Type Description LineString | Edit this page View Source ReadLinearRing(XmlReader) Declaration protected LinearRing ReadLinearRing(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description LinearRing | Edit this page View Source ReadLinearRing(XmlReader, GeometryFactory) Declaration protected LinearRing ReadLinearRing(XmlReader reader, GeometryFactory gf) Parameters Type Name Description XmlReader reader GeometryFactory gf Returns Type Description LinearRing | Edit this page View Source ReadLinearRing(XmlReader, GeometryFactory, int) Declaration protected LinearRing ReadLinearRing(XmlReader reader, GeometryFactory gf, int srsDimension) Parameters Type Name Description XmlReader reader GeometryFactory gf int srsDimension Returns Type Description LinearRing | Edit this page View Source ReadMultiCurve(XmlReader) Declaration protected MultiLineString ReadMultiCurve(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description MultiLineString | Edit this page View Source ReadMultiCurve(XmlReader, GeometryFactory, int) Declaration protected MultiLineString ReadMultiCurve(XmlReader reader, GeometryFactory gf, int srsDimension) Parameters Type Name Description XmlReader reader GeometryFactory gf int srsDimension Returns Type Description MultiLineString | Edit this page View Source ReadMultiLineString(XmlReader) Declaration protected MultiLineString ReadMultiLineString(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description MultiLineString | Edit this page View Source ReadMultiLineString(XmlReader, GeometryFactory, int) Declaration protected MultiLineString ReadMultiLineString(XmlReader reader, GeometryFactory gf, int srsDimension) Parameters Type Name Description XmlReader reader GeometryFactory gf int srsDimension Returns Type Description MultiLineString | Edit this page View Source ReadMultiPoint(XmlReader) Declaration protected MultiPoint ReadMultiPoint(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description MultiPoint | Edit this page View Source ReadMultiPoint(XmlReader, GeometryFactory, int) Declaration protected MultiPoint ReadMultiPoint(XmlReader reader, GeometryFactory gf, int srsDimension) Parameters Type Name Description XmlReader reader GeometryFactory gf int srsDimension Returns Type Description MultiPoint | Edit this page View Source ReadMultiPolygon(XmlReader) Declaration protected MultiPolygon ReadMultiPolygon(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description MultiPolygon | Edit this page View Source ReadMultiPolygon(XmlReader, GeometryFactory, int) Declaration protected MultiPolygon ReadMultiPolygon(XmlReader reader, GeometryFactory gf, int srsDimension) Parameters Type Name Description XmlReader reader GeometryFactory gf int srsDimension Returns Type Description MultiPolygon | Edit this page View Source ReadMultiSurface(XmlReader) Declaration protected MultiPolygon ReadMultiSurface(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description MultiPolygon | Edit this page View Source ReadMultiSurface(XmlReader, GeometryFactory, int) Declaration protected MultiPolygon ReadMultiSurface(XmlReader reader, GeometryFactory gf, int srsDimension) Parameters Type Name Description XmlReader reader GeometryFactory gf int srsDimension Returns Type Description MultiPolygon | Edit this page View Source ReadPoint(XmlReader) Declaration protected Point ReadPoint(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description Point | Edit this page View Source ReadPoint(XmlReader, GeometryFactory) Declaration protected Point ReadPoint(XmlReader reader, GeometryFactory gf) Parameters Type Name Description XmlReader reader GeometryFactory gf Returns Type Description Point | Edit this page View Source ReadPoint(XmlReader, GeometryFactory, int) Declaration protected Point ReadPoint(XmlReader reader, GeometryFactory gf, int srsDimension) Parameters Type Name Description XmlReader reader GeometryFactory gf int srsDimension Returns Type Description Point | Edit this page View Source ReadPolygon(XmlReader) Declaration protected Polygon ReadPolygon(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description Polygon | Edit this page View Source ReadPolygon(XmlReader, GeometryFactory) Declaration protected Polygon ReadPolygon(XmlReader reader, GeometryFactory gf) Parameters Type Name Description XmlReader reader GeometryFactory gf Returns Type Description Polygon | Edit this page View Source ReadPolygon(XmlReader, GeometryFactory, int) Declaration protected Polygon ReadPolygon(XmlReader reader, GeometryFactory gf, int srsDimension) Parameters Type Name Description XmlReader reader GeometryFactory gf int srsDimension Returns Type Description Polygon | Edit this page View Source ReadPosAsCoordinate(string[]) Extract a Coordinate from a pos entity string value. Declaration protected Coordinate ReadPosAsCoordinate(string[] value) Parameters Type Name Description string[] value An array of string ordinate values Returns Type Description Coordinate A coordinate | Edit this page View Source ReadPosList(XmlReader, int, CoordinateSequenceFactory) Extract a CoordinateSequence from a series of x-, y-[, z-]ordinate string values. Declaration protected CoordinateSequence ReadPosList(XmlReader reader, int srsDimension, CoordinateSequenceFactory csFactory) Parameters Type Name Description XmlReader reader A xml-reader int srsDimension The number of ordinates to read per coordinate CoordinateSequenceFactory csFactory The factory to use in order to create the result Returns Type Description CoordinateSequence A coordinate sequence | Edit this page View Source ReadPosListAsCoordinates(int, string[]) Extract an enumeration of Coordinates from a x-,y-[, z-]ordinate string values. Declaration [Obsolete(\"Use ReadPosList(xmlReader, int, CoordinateSequenceFactory)\")] protected IEnumerable<Coordinate> ReadPosListAsCoordinates(int numOrdinates, string[] value) Parameters Type Name Description int numOrdinates The number of ordinates string[] value An array of string ordinate values Returns Type Description IEnumerable<Coordinate> An enumeration of coordinates | Edit this page View Source ReadSrsDimension(XmlReader, int) Declaration protected static int ReadSrsDimension(XmlReader reader, int srsDimension) Parameters Type Name Description XmlReader reader int srsDimension Returns Type Description int | Edit this page View Source RemoveUnneccessaryWhitespace(string) Declaration protected static string RemoveUnneccessaryWhitespace(string text) Parameters Type Name Description string text Returns Type Description string"
  },
  "api/NetTopologySuite.IO.GML2.GMLWriter.html": {
    "href": "api/NetTopologySuite.IO.GML2.GMLWriter.html",
    "title": "Class GMLWriter | NetTopologySuite",
    "summary": "Class GMLWriter Writes the GML representation of the features of NetTopologySuite model. Uses GML 2.1.1 Geometry.xsd schema for base for features. Thanks to rstuven for improvements :) Inheritance object GMLWriter GML3Writer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.IO.GML2 Assembly: NetTopologySuite.dll Syntax public class GMLWriter Constructors | Edit this page View Source GMLWriter() Initializes a new instance of the GMLWriter class. Declaration public GMLWriter() Properties | Edit this page View Source NumberFormatter Formatter for double values of coordinates Declaration protected static NumberFormatInfo NumberFormatter { get; } Property Value Type Description NumberFormatInfo Methods | Edit this page View Source GetEpsgCode(int) Provides the EPSG code exposing the SRID of the geometry Declaration protected virtual string GetEpsgCode(int srid) Parameters Type Name Description int srid The SRID of the geometry Returns Type Description string | Edit this page View Source SetByteStreamLength(Geometry) Sets corrent length for Byte Stream. Declaration protected int SetByteStreamLength(Geometry geometry) Parameters Type Name Description Geometry geometry Returns Type Description int | Edit this page View Source SetByteStreamLength(GeometryCollection) Declaration protected int SetByteStreamLength(GeometryCollection geometryCollection) Parameters Type Name Description GeometryCollection geometryCollection Returns Type Description int | Edit this page View Source SetByteStreamLength(LineString) Declaration protected int SetByteStreamLength(LineString lineString) Parameters Type Name Description LineString lineString Returns Type Description int | Edit this page View Source SetByteStreamLength(MultiLineString) Declaration protected int SetByteStreamLength(MultiLineString multiLineString) Parameters Type Name Description MultiLineString multiLineString Returns Type Description int | Edit this page View Source SetByteStreamLength(MultiPoint) Declaration protected int SetByteStreamLength(MultiPoint multiPoint) Parameters Type Name Description MultiPoint multiPoint Returns Type Description int | Edit this page View Source SetByteStreamLength(MultiPolygon) Declaration protected int SetByteStreamLength(MultiPolygon multiPolygon) Parameters Type Name Description MultiPolygon multiPolygon Returns Type Description int | Edit this page View Source SetByteStreamLength(Point) Declaration protected int SetByteStreamLength(Point point) Parameters Type Name Description Point point Returns Type Description int | Edit this page View Source SetByteStreamLength(Polygon) Declaration protected int SetByteStreamLength(Polygon polygon) Parameters Type Name Description Polygon polygon Returns Type Description int | Edit this page View Source Write(Coordinate, XmlWriter) Declaration protected void Write(Coordinate coordinate, XmlWriter writer) Parameters Type Name Description Coordinate coordinate XmlWriter writer | Edit this page View Source Write(Coordinate[], XmlWriter) Declaration protected void Write(Coordinate[] coordinates, XmlWriter writer) Parameters Type Name Description Coordinate[] coordinates XmlWriter writer | Edit this page View Source Write(Geometry) Returns an XmlReader with feature informations. Use XmlDocument.Load(XmlReader) for obtain a XmlDocument to work. Declaration public XmlReader Write(Geometry geometry) Parameters Type Name Description Geometry geometry Returns Type Description XmlReader | Edit this page View Source Write(Geometry, Stream) Writes a GML feature into a generic Stream, such a FileStream or other streams. Declaration public void Write(Geometry geometry, Stream stream) Parameters Type Name Description Geometry geometry Stream stream | Edit this page View Source Write(Geometry, XmlWriter) Declaration public void Write(Geometry geometry, XmlWriter writer) Parameters Type Name Description Geometry geometry XmlWriter writer | Edit this page View Source Write(GeometryCollection, XmlWriter) Declaration protected void Write(GeometryCollection geometryCollection, XmlWriter writer) Parameters Type Name Description GeometryCollection geometryCollection XmlWriter writer | Edit this page View Source Write(LineString, XmlWriter) Declaration protected void Write(LineString lineString, XmlWriter writer) Parameters Type Name Description LineString lineString XmlWriter writer | Edit this page View Source Write(LinearRing, XmlWriter) Declaration protected void Write(LinearRing linearRing, XmlWriter writer) Parameters Type Name Description LinearRing linearRing XmlWriter writer | Edit this page View Source Write(MultiLineString, XmlWriter) Declaration protected void Write(MultiLineString multiLineString, XmlWriter writer) Parameters Type Name Description MultiLineString multiLineString XmlWriter writer | Edit this page View Source Write(MultiPoint, XmlWriter) Declaration protected void Write(MultiPoint multiPoint, XmlWriter writer) Parameters Type Name Description MultiPoint multiPoint XmlWriter writer | Edit this page View Source Write(MultiPolygon, XmlWriter) Declaration protected void Write(MultiPolygon multiPolygon, XmlWriter writer) Parameters Type Name Description MultiPolygon multiPolygon XmlWriter writer | Edit this page View Source Write(Point, XmlWriter) Declaration protected void Write(Point point, XmlWriter writer) Parameters Type Name Description Point point XmlWriter writer | Edit this page View Source Write(Polygon, XmlWriter) Declaration protected void Write(Polygon polygon, XmlWriter writer) Parameters Type Name Description Polygon polygon XmlWriter writer | Edit this page View Source WriteCoordinates(CoordinateSequence, XmlWriter) Declaration protected void WriteCoordinates(CoordinateSequence coordinates, XmlWriter writer) Parameters Type Name Description CoordinateSequence coordinates XmlWriter writer | Edit this page View Source WriteCoordinates(Coordinate[], XmlWriter) Declaration [Obsolete(\"Use the overload that accepts a CoordinateSequence instead.\")] protected void WriteCoordinates(Coordinate[] coordinates, XmlWriter writer) Parameters Type Name Description Coordinate[] coordinates XmlWriter writer"
  },
  "api/NetTopologySuite.IO.GML2.html": {
    "href": "api/NetTopologySuite.IO.GML2.html",
    "title": "Namespace NetTopologySuite.IO.GML2 | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.IO.GML2 Classes to read and write the GML2 geometry format. Classes GMLReader Reads a GML document and creates a representation of the features based on NetTopologySuite model. Uses GML 2.1.1 Geometry.xsd schema for base for features. GMLWriter Writes the GML representation of the features of NetTopologySuite model. Uses GML 2.1.1 Geometry.xsd schema for base for features. Thanks to rstuven for improvements :)"
  },
  "api/NetTopologySuite.IO.GML3.GML3Writer.html": {
    "href": "api/NetTopologySuite.IO.GML3.GML3Writer.html",
    "title": "Class GML3Writer | NetTopologySuite",
    "summary": "Class GML3Writer Writes the GML representation of the features of NetTopologySuite model. Uses GML 3.2.2 gml.xsd schema for base for features. Inheritance object GMLWriter GML3Writer Inherited Members GMLWriter.NumberFormatter GMLWriter.Write(Geometry) GMLWriter.Write(Geometry, Stream) GMLWriter.Write(Coordinate, XmlWriter) GMLWriter.Write(Coordinate[], XmlWriter) GMLWriter.WriteCoordinates(Coordinate[], XmlWriter) GMLWriter.WriteCoordinates(CoordinateSequence, XmlWriter) GMLWriter.Write(Geometry, XmlWriter) GMLWriter.Write(Point, XmlWriter) GMLWriter.Write(LineString, XmlWriter) GMLWriter.Write(LinearRing, XmlWriter) GMLWriter.Write(Polygon, XmlWriter) GMLWriter.Write(MultiPoint, XmlWriter) GMLWriter.Write(MultiLineString, XmlWriter) GMLWriter.Write(MultiPolygon, XmlWriter) GMLWriter.Write(GeometryCollection, XmlWriter) GMLWriter.SetByteStreamLength(Geometry) GMLWriter.SetByteStreamLength(GeometryCollection) GMLWriter.SetByteStreamLength(MultiPolygon) GMLWriter.SetByteStreamLength(MultiLineString) GMLWriter.SetByteStreamLength(MultiPoint) GMLWriter.SetByteStreamLength(Polygon) GMLWriter.SetByteStreamLength(LineString) GMLWriter.SetByteStreamLength(Point) GMLWriter.GetEpsgCode(int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.IO.GML3 Assembly: NetTopologySuite.dll Syntax public class GML3Writer : GMLWriter Constructors | Edit this page View Source GML3Writer() Initializes a new instance of the GML3Writer class. Declaration public GML3Writer()"
  },
  "api/NetTopologySuite.IO.GML3.html": {
    "href": "api/NetTopologySuite.IO.GML3.html",
    "title": "Namespace NetTopologySuite.IO.GML3 | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.IO.GML3 Classes GML3Writer Writes the GML representation of the features of NetTopologySuite model. Uses GML 3.2.2 gml.xsd schema for base for features."
  },
  "api/NetTopologySuite.IO.GeometryType.html": {
    "href": "api/NetTopologySuite.IO.GeometryType.html",
    "title": "Struct GeometryType | NetTopologySuite",
    "summary": "Struct GeometryType Lightweight class that handles OGC Geometry type declaration Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.IO Assembly: NetTopologySuite.dll Syntax [CLSCompliant(false)] public struct GeometryType Constructors | Edit this page View Source GeometryType(Geometry, Ordinates) Inititalizes this instance based on a geometry and an Ordinates flag. Declaration public GeometryType(Geometry geometry, Ordinates ordinates) Parameters Type Name Description Geometry geometry The geometry. Ordinates ordinates The ordinates flag. | Edit this page View Source GeometryType(OgcGeometryType) Inititalizes this instance based on an OgcGeometryType Declaration public GeometryType(OgcGeometryType ogcGeometryType) Parameters Type Name Description OgcGeometryType ogcGeometryType The OGC geometry type | Edit this page View Source GeometryType(OgcGeometryType, Ordinates, bool) Inititalizes this instance based on an OgcGeometryType and an SRID indicator Declaration public GeometryType(OgcGeometryType ogcGeometryType, Ordinates ordinates, bool hasSrid) Parameters Type Name Description OgcGeometryType ogcGeometryType The OGC geometry type Ordinates ordinates The ordinates flag. bool hasSrid Indicator if a SRID is supplied. | Edit this page View Source GeometryType(OgcGeometryType, bool) Inititalizes this instance based on an OgcGeometryType and an SRID indicator Declaration public GeometryType(OgcGeometryType ogcGeometryType, bool hasSrid) Parameters Type Name Description OgcGeometryType ogcGeometryType The OGC geometry type bool hasSrid Indicator if a SRID is supplied. | Edit this page View Source GeometryType(uint) Initializes this instance Declaration public GeometryType(uint geometryType) Parameters Type Name Description uint geometryType The value describing the GeometryType Properties | Edit this page View Source BaseGeometryType Gets or sets the base geometry type Declaration public OgcGeometryType BaseGeometryType { get; set; } Property Value Type Description OgcGeometryType | Edit this page View Source EwkbWkbGeometryType Gets the PostGIS Enhanced Well-Known-Binary type code Declaration public int EwkbWkbGeometryType { get; } Property Value Type Description int | Edit this page View Source HasEwkbM Gets or sets whether z-ordinates are stored along with the geometry. PostGis EWKB format. Declaration public bool HasEwkbM { get; set; } Property Value Type Description bool | Edit this page View Source HasEwkbSrid Gets or sets whether z-ordinates are stored along with the geometry. PostGis EWKB format. Declaration public bool HasEwkbSrid { get; set; } Property Value Type Description bool | Edit this page View Source HasEwkbZ Gets or sets whether z-ordinates are stored along with the geometry. PostGis EWKB format. Declaration public bool HasEwkbZ { get; set; } Property Value Type Description bool | Edit this page View Source HasM Gets or sets whether m-ordinate values are stored along with the geometry. Declaration public bool HasM { get; } Property Value Type Description bool | Edit this page View Source HasSrid Gets whether SRID value is stored along with the geometry. Declaration public bool HasSrid { get; } Property Value Type Description bool | Edit this page View Source HasWkbM Gets or sets whether m-ordinate values are stored along with the geometry. Declaration public bool HasWkbM { get; set; } Property Value Type Description bool | Edit this page View Source HasWkbZ Gets or sets whether z-ordinate values are stored along with the geometry. Declaration public bool HasWkbZ { get; set; } Property Value Type Description bool | Edit this page View Source HasZ Gets or sets whether z-ordinate values are stored along with the geometry. Declaration public bool HasZ { get; } Property Value Type Description bool | Edit this page View Source WkbGeometryType Gets the OGC Well-Known-Binary type code Declaration public int WkbGeometryType { get; } Property Value Type Description int"
  },
  "api/NetTopologySuite.IO.KML.KMLReader.html": {
    "href": "api/NetTopologySuite.IO.KML.KMLReader.html",
    "title": "Class KMLReader | NetTopologySuite",
    "summary": "Class KMLReader Constructs Geometry objects from the OGC KML representation. Works only with KML geometry elements and may also parse attributes within these elements Inheritance object KMLReader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.IO.KML Assembly: NetTopologySuite.dll Syntax public class KMLReader Constructors | Edit this page View Source KMLReader() Creates a reader that creates objects using the default GeometryFactory. Declaration public KMLReader() | Edit this page View Source KMLReader(GeometryFactory) Creates a reader that creates objects using the given GeometryFactory. Declaration public KMLReader(GeometryFactory geometryFactory) Parameters Type Name Description GeometryFactory geometryFactory The factory used to create Geometrys. | Edit this page View Source KMLReader(GeometryFactory, params string[]) Creates a reader that creates objects using the given GeometryFactory. Declaration public KMLReader(GeometryFactory geometryFactory, params string[] attributeNames) Parameters Type Name Description GeometryFactory geometryFactory The factory used to create Geometrys. string[] attributeNames Names of attributes that should be parsed (i.e. extrude, altitudeMode, tesselate, etc). | Edit this page View Source KMLReader(params string[]) Creates a reader that creates objects using the default GeometryFactory. Declaration public KMLReader(params string[] attributeNames) Parameters Type Name Description string[] attributeNames Names of attributes that should be parsed (i.e. extrude, altitudeMode, tesselate, etc). Methods | Edit this page View Source Read(TextReader) Reads a KML representation of a Geometry from a TextReader. If any attribute names were specified during {@link KMLReader} construction, they will be stored as IDictionary<TKey, TValue> in UserData. Declaration public Geometry Read(TextReader kmlStreamReader) Parameters Type Name Description TextReader kmlStreamReader The text stream reader. Returns Type Description Geometry A Geometry Exceptions Type Condition ParseException Thrown if a parsing problem occurs. | Edit this page View Source Read(string) Reads a KML representation of a Geometry from a string. If any attribute names were specified during {@link KMLReader} construction, they will be stored as IDictionary<TKey, TValue> in UserData. Declaration public Geometry Read(string kmlGeometrystring) Parameters Type Name Description string kmlGeometrystring The string that specifies kml representation of geometry. Returns Type Description Geometry A Geometry Exceptions Type Condition ParseException Thrown if a parsing problem occurs."
  },
  "api/NetTopologySuite.IO.KML.KMLWriter.html": {
    "href": "api/NetTopologySuite.IO.KML.KMLWriter.html",
    "title": "Class KMLWriter | NetTopologySuite",
    "summary": "Class KMLWriter Writes a formatted string containing the KML representation of a JTS Geometry. The output is KML fragments which can be substituted wherever the KML Geometry abstract element can be used. Inheritance object KMLWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.IO.KML Assembly: NetTopologySuite.dll Syntax public class KMLWriter Remarks Output elements are indented to provide a nicely-formatted representation. An output line prefix and maximum number of coordinates per line can be specified. Constructors | Edit this page View Source KMLWriter() Declaration public KMLWriter() Fields | Edit this page View Source AltitudeModeAbsolute The KML standard value absolute for use in AltitudeMode. Declaration public const string AltitudeModeAbsolute = \"absolute\" Field Value Type Description string | Edit this page View Source AltitudeModeClampToGround The KML standard value clampToGround for use in AltitudeMode. Declaration public const string AltitudeModeClampToGround = \"clampToGround \" Field Value Type Description string | Edit this page View Source AltitudeModeRelativeToGround The KML standard value relativeToGround for use in AltitudeMode. Declaration public const string AltitudeModeRelativeToGround = \"relativeToGround \" Field Value Type Description string Properties | Edit this page View Source AltitudeMode The value output in the altitudeMode element. Declaration public string AltitudeMode { get; set; } Property Value Type Description string | Edit this page View Source Extrude The flag to be output in the extrude element. Declaration public bool Extrude { get; set; } Property Value Type Description bool | Edit this page View Source LinePrefix A tag string which is prefixed to every emitted text line. This can be used to indent the geometry text in a containing document. Declaration public string LinePrefix { get; set; } Property Value Type Description string | Edit this page View Source MaxCoordinatesPerLine The maximum number of coordinates to output per line. Declaration public int MaxCoordinatesPerLine { get; set; } Property Value Type Description int | Edit this page View Source Precision The maximum number of decimal places to output in ordinate values. Useful for limiting output size. Declaration public int Precision { get; set; } Property Value Type Description int Remarks negative values set the precision to Floating, like standard behavior. | Edit this page View Source Tesselate The flag to be output in the tesselate element. Declaration public bool Tesselate { get; set; } Property Value Type Description bool | Edit this page View Source Z The Z value to be output for all coordinates. This overrides any Z value present in the Geometry coordinates. Declaration public double Z { get; set; } Property Value Type Description double Methods | Edit this page View Source Write(Geometry) Writes a Geometry in KML format as a string. Declaration public string Write(Geometry geom) Parameters Type Name Description Geometry geom the geometry to write Returns Type Description string a string containing the KML geometry representation | Edit this page View Source Write(Geometry, TextWriter) Writes the KML representation of a Geometry to a TextWriter. Declaration public void Write(Geometry geom, TextWriter writer) Parameters Type Name Description Geometry geom the geometry to write TextWriter writer the writer to write to | Edit this page View Source Write(Geometry, StringBuilder) Appends the KML representation of a Geometry to a StringBuilder. Declaration public void Write(Geometry geom, StringBuilder sb) Parameters Type Name Description Geometry geom the geometry to write StringBuilder sb the buffer to write into | Edit this page View Source WriteGeometry(Geometry, double) Writes a Geometry as KML to a string, using a specified Z value. Declaration public static string WriteGeometry(Geometry geometry, double z) Parameters Type Name Description Geometry geometry the geometry to write double z the Z value to use Returns Type Description string a string containing the KML geometry representation | Edit this page View Source WriteGeometry(Geometry, double, int, bool, string) Writes a Geometry as KML to a string, using a specified Z value, precision, extrude flag, and altitude mode code. Declaration public static string WriteGeometry(Geometry geometry, double z, int precision, bool extrude, string altitudeMode) Parameters Type Name Description Geometry geometry the geometry to write double z the Z value to use int precision the maximum number of decimal places to write bool extrude the extrude flag to write string altitudeMode the altitude model code to write Returns Type Description string a string containing the KML geometry representation"
  },
  "api/NetTopologySuite.IO.KML.html": {
    "href": "api/NetTopologySuite.IO.KML.html",
    "title": "Namespace NetTopologySuite.IO.KML | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.IO.KML Classes KMLReader Constructs Geometry objects from the OGC KML representation. Works only with KML geometry elements and may also parse attributes within these elements KMLWriter Writes a formatted string containing the KML representation of a JTS Geometry. The output is KML fragments which can be substituted wherever the KML Geometry abstract element can be used."
  },
  "api/NetTopologySuite.IO.OrdinateFormat.html": {
    "href": "api/NetTopologySuite.IO.OrdinateFormat.html",
    "title": "Class OrdinateFormat | NetTopologySuite",
    "summary": "Class OrdinateFormat Formats numeric values for ordinates in a consistent, accurate way. The format has the following characteristics: Inheritance object OrdinateFormat Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.IO Assembly: NetTopologySuite.dll Syntax public class OrdinateFormat Constructors | Edit this page View Source OrdinateFormat() Creates an OrdinateFormat using the default maximum number of fraction digits. Declaration public OrdinateFormat() | Edit this page View Source OrdinateFormat(int) Creates an OrdinateFormat using the given maximum number of fraction digits. Declaration public OrdinateFormat(int maximumFractionDigits) Parameters Type Name Description int maximumFractionDigits The maximum number of fraction digits to output Fields | Edit this page View Source Default The default formatter using the maximum number of digits in the fraction portion of a number. Declaration public static OrdinateFormat Default Field Value Type Description OrdinateFormat Methods | Edit this page View Source Format(double) Returns a string representation of the given ordinate numeric value. Declaration public string Format(double ord) Parameters Type Name Description double ord The ordinate value Returns Type Description string The formatted number string"
  },
  "api/NetTopologySuite.IO.ParseException.html": {
    "href": "api/NetTopologySuite.IO.ParseException.html",
    "title": "Class ParseException | NetTopologySuite",
    "summary": "Class ParseException Thrown by a WKTReader when a parsing problem occurs. Inheritance object Exception ApplicationException ParseException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.IO Assembly: NetTopologySuite.dll Syntax public class ParseException : ApplicationException, ISerializable Constructors | Edit this page View Source ParseException(Exception) Creates a ParseException with es detail message. Declaration public ParseException(Exception e) Parameters Type Name Description Exception e An exception that occurred while a WKTReader was parsing a Well-known Text string. | Edit this page View Source ParseException(string) Creates a ParseException with the given detail message. Declaration public ParseException(string message) Parameters Type Name Description string message A description of this ParseException. | Edit this page View Source ParseException(string, Exception) Creates a ParseException with innerExceptions detail message Declaration public ParseException(string message, Exception innerException) Parameters Type Name Description string message Exception innerException The inner exception Implements ISerializable"
  },
  "api/NetTopologySuite.IO.WKBGeometryTypes.html": {
    "href": "api/NetTopologySuite.IO.WKBGeometryTypes.html",
    "title": "Enum WKBGeometryTypes | NetTopologySuite",
    "summary": "Enum WKBGeometryTypes WKB Geometry Types Namespace: NetTopologySuite.IO Assembly: NetTopologySuite.dll Syntax public enum WKBGeometryTypes Fields Name Description WKBGeometryCollection GeometryCollection. WKBGeometryCollectionM GeometryCollection with M ordinate value. WKBGeometryCollectionZ GeometryCollection with Z coordinate. WKBGeometryCollectionZM GeometryCollection with Z coordinate and M ordinate value. WKBLineString LineString. WKBLineStringM LineString with M ordinate value. WKBLineStringZ LineString with Z coordinate. WKBLineStringZM LineString with Z coordinate and M ordinate value. WKBMultiLineString MultiLineString. WKBMultiLineStringM MultiLineString with M ordinate value. WKBMultiLineStringZ MultiLineString with Z coordinate. WKBMultiLineStringZM MultiLineString with Z coordinate and M ordinate value. WKBMultiPoint MultiPoint. WKBMultiPointM MultiPoint with M ordinate value. WKBMultiPointZ MultiPoint with Z coordinate. WKBMultiPointZM MultiPoint with Z coordinate and M ordinate value. WKBMultiPolygon MultiPolygon. WKBMultiPolygonM MultiPolygon with M ordinate value. WKBMultiPolygonZ MultiPolygon with Z coordinate. WKBMultiPolygonZM MultiPolygon with Z coordinate and M ordinate value. WKBPoint Point. WKBPointM Point with M ordinate value. WKBPointZ Point with Z coordinate. WKBPointZM Point with Z coordinate and M ordinate value. WKBPolygon Polygon. WKBPolygonM Polygon with M ordinate value. WKBPolygonZ Polygon with Z coordinate. WKBPolygonZM Polygon with Z coordinate and M ordinate value."
  },
  "api/NetTopologySuite.IO.WKBHexFileReader.html": {
    "href": "api/NetTopologySuite.IO.WKBHexFileReader.html",
    "title": "Class WKBHexFileReader | NetTopologySuite",
    "summary": "Class WKBHexFileReader Reads a sequence of {@link Geometry}s in WKBHex format from a text file. Each WKBHex geometry must be on a single line The geometries in the file may be separated by any amount of whitespace and newlines. Inheritance object WKBHexFileReader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.IO Assembly: NetTopologySuite.dll Syntax public class WKBHexFileReader Constructors | Edit this page View Source WKBHexFileReader(WKBReader) Creates a new WKBHexFileReader given the WKBReader to use to parse the geometries. Declaration public WKBHexFileReader(WKBReader wkbReader) Parameters Type Name Description WKBReader wkbReader The geometry reader to use Properties | Edit this page View Source Limit Gets or sets a value indicating the maximum number of geometries to read Declaration public int Limit { get; set; } Property Value Type Description int | Edit this page View Source Offset Gets or sets the number of geometries to skip before storing. Declaration public int Offset { get; set; } Property Value Type Description int Methods | Edit this page View Source Read(Stream) Reads a sequence of geometries. If an Offset is specified, geometries read up to the offset count are skipped. If a Limit is specified, no more than Limit geometries are read. Declaration public ReadOnlyCollection<Geometry> Read(Stream stream) Parameters Type Name Description Stream stream The path to the file Returns Type Description ReadOnlyCollection<Geometry> Exceptions Type Condition ArgumentNullException Thrown if no stream was passed ArgumentException Thrown if passed stream is not readable or seekable IOException Thrown if an I/O exception was encountered ParseException Thrown if an error occured reading a geometry | Edit this page View Source Read(string) Reads a sequence of geometries. If an Offset is specified, geometries read up to the offset count are skipped. If a Limit is specified, no more than Limit geometries are read. Declaration public ReadOnlyCollection<Geometry> Read(string file) Parameters Type Name Description string file The path to the file Returns Type Description ReadOnlyCollection<Geometry> Exceptions Type Condition ArgumentNullException Thrown if no filename was specified FileNotFoundException Thrown if the filename specified does not exist IOException Thrown if an I/O exception was encountered ParseException Thrown if an error occurred reading a geometry"
  },
  "api/NetTopologySuite.IO.WKBReader.CoordinateSystem.html": {
    "href": "api/NetTopologySuite.IO.WKBReader.CoordinateSystem.html",
    "title": "Enum WKBReader.CoordinateSystem | NetTopologySuite",
    "summary": "Enum WKBReader.CoordinateSystem WKB Coordinate Systems Namespace: NetTopologySuite.IO Assembly: NetTopologySuite.dll Syntax protected enum WKBReader.CoordinateSystem Fields Name Description XY 2D coordinate system XYM 2D coordinate system with additional measure value XYZ 3D coordinate system XYZM 3D coordinate system with additional measure value"
  },
  "api/NetTopologySuite.IO.WKBReader.html": {
    "href": "api/NetTopologySuite.IO.WKBReader.html",
    "title": "Class WKBReader | NetTopologySuite",
    "summary": "Class WKBReader Converts a Well-Known Binary byte data to a Geometry. Inheritance object WKBReader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.IO Assembly: NetTopologySuite.dll Syntax public class WKBReader Remarks This class reads the format describe in {@link WKBWriter}. It partially handles theExtended WKB format used by PostGIS, by parsing and storing optional SRID values. If a SRID is not specified in an element geometry, it is inherited from the parent's SRID. The default SRID value depends on DefaultSRID. Although not defined in the WKB spec, empty points are handled if they are represented as a Point with NaN X and Y ordinates. The reader repairs structurally-invalid input (specifically, LineStrings and LinearRings which contain too few points have vertices added, and non-closed rings are closed). The reader handles most errors caused by malformed or malicious WKB data. It checks for obviously excessive values of the fields numElems, numRings, and numCoords. It also checks that the reader does not read beyond the end of the data supplied. A ParseException is thrown if this situation is detected. Constructors | Edit this page View Source WKBReader() Initialize reader with a standard NtsGeometryServices. Declaration public WKBReader() | Edit this page View Source WKBReader(NtsGeometryServices) Creates an instance of this class using the provided NtsGeometryServices Declaration public WKBReader(NtsGeometryServices services) Parameters Type Name Description NtsGeometryServices services Properties | Edit this page View Source AllowedOrdinates Gets a value indicating which ordinates can be handled. Declaration public Ordinates AllowedOrdinates { get; } Property Value Type Description Ordinates | Edit this page View Source HandleOrdinates Gets a value indicating which ordinates should be handled. Declaration public Ordinates HandleOrdinates { get; set; } Property Value Type Description Ordinates | Edit this page View Source HandleSRID Gets or sets a value indicating if a possibly encoded SRID value should be handled. Declaration public bool HandleSRID { get; set; } Property Value Type Description bool | Edit this page View Source IsStrict Gets or sets a value indicating if the reader should attempt to repair malformed input. Declaration public bool IsStrict { get; set; } Property Value Type Description bool Remarks Malformed in this case means the ring has too few points (4), or is not closed. | Edit this page View Source RepairRings Gets or sets whether invalid linear rings should be fixed Declaration [Obsolete(\"Use !IsStrict\")] public bool RepairRings { get; set; } Property Value Type Description bool Methods | Edit this page View Source HexToBytes(string) Converts a hexadecimal string to a byte array. The hexadecimal digit symbols are case-insensitive. Declaration public static byte[] HexToBytes(string hex) Parameters Type Name Description string hex A string containing hex digits Returns Type Description byte[] An array of bytes with the value of the hex string | Edit this page View Source Read(byte[]) Reads a Geometry in binary WKB format from an array of bytes. Declaration public Geometry Read(byte[] data) Parameters Type Name Description byte[] data The byte array to read from Returns Type Description Geometry The geometry read Exceptions Type Condition ParseException if the WKB data is ill-formed. | Edit this page View Source Read(BinaryReader) Declaration protected Geometry Read(BinaryReader reader) Parameters Type Name Description BinaryReader reader Returns Type Description Geometry | Edit this page View Source Read(Stream) Reads a Geometry in binary WKB format from an Stream. Declaration public virtual Geometry Read(Stream stream) Parameters Type Name Description Stream stream The stream to read from Returns Type Description Geometry The geometry read Exceptions Type Condition ParseException if the WKB data is ill-formed. | Edit this page View Source ReadCoordinateSequence(BinaryReader, int, CoordinateSystem) Function to read a coordinate sequence. Declaration protected CoordinateSequence ReadCoordinateSequence(BinaryReader reader, int size, WKBReader.CoordinateSystem cs) Parameters Type Name Description BinaryReader reader The reader int size The number of ordinates WKBReader.CoordinateSystem cs The coordinate system Returns Type Description CoordinateSequence The read coordinate sequence. | Edit this page View Source ReadCoordinateSequenceLineString(BinaryReader, int, CoordinateSystem) Function to read a coordinate sequence that is supposed to serve a line string. Declaration protected CoordinateSequence ReadCoordinateSequenceLineString(BinaryReader reader, int size, WKBReader.CoordinateSystem cs) Parameters Type Name Description BinaryReader reader The reader int size The number of ordinates WKBReader.CoordinateSystem cs The coordinate system Returns Type Description CoordinateSequence The read coordinate sequence. | Edit this page View Source ReadCoordinateSequenceRing(BinaryReader, int, CoordinateSystem) Function to read a coordinate sequence that is supposed to form a ring. Declaration protected CoordinateSequence ReadCoordinateSequenceRing(BinaryReader reader, int size, WKBReader.CoordinateSystem cs) Parameters Type Name Description BinaryReader reader The reader int size The number of ordinates WKBReader.CoordinateSystem cs The coordinate system Returns Type Description CoordinateSequence The read coordinate sequence. | Edit this page View Source ReadGeometryCollection(BinaryReader, CoordinateSystem, int) Reads a GeometryCollection geometry. Declaration protected Geometry ReadGeometryCollection(BinaryReader reader, WKBReader.CoordinateSystem cs, int srid) Parameters Type Name Description BinaryReader reader The reader WKBReader.CoordinateSystem cs The coordinate system int srid The spatial reference id for the geometry. Returns Type Description Geometry A GeometryCollection geometry | Edit this page View Source ReadLineString(BinaryReader, CoordinateSystem, int) Reads a LineString geometry. Declaration protected Geometry ReadLineString(BinaryReader reader, WKBReader.CoordinateSystem cs, int srid) Parameters Type Name Description BinaryReader reader The reader WKBReader.CoordinateSystem cs The coordinate system int srid The spatial reference id for the geometry. Returns Type Description Geometry A LineString geometry | Edit this page View Source ReadLinearRing(BinaryReader, CoordinateSystem, int) Reads a LinearRing geometry. Declaration protected LinearRing ReadLinearRing(BinaryReader reader, WKBReader.CoordinateSystem cs, int srid) Parameters Type Name Description BinaryReader reader The reader WKBReader.CoordinateSystem cs The coordinate system int srid The spatial reference id for the geometry. Returns Type Description LinearRing A LinearRing geometry | Edit this page View Source ReadMultiLineString(BinaryReader, CoordinateSystem, int) Reads a MultiLineString geometry. Declaration protected Geometry ReadMultiLineString(BinaryReader reader, WKBReader.CoordinateSystem cs, int srid) Parameters Type Name Description BinaryReader reader The reader WKBReader.CoordinateSystem cs The coordinate system int srid The spatial reference id for the geometry. Returns Type Description Geometry A MultiLineString geometry | Edit this page View Source ReadMultiPoint(BinaryReader, CoordinateSystem, int) Reads a MultiPoint geometry. Declaration protected Geometry ReadMultiPoint(BinaryReader reader, WKBReader.CoordinateSystem cs, int srid) Parameters Type Name Description BinaryReader reader The reader WKBReader.CoordinateSystem cs The coordinate system int srid The spatial reference id for the geometry. Returns Type Description Geometry A MultiPoint geometry | Edit this page View Source ReadMultiPolygon(BinaryReader, CoordinateSystem, int) Reads a MultiPolygon geometry. Declaration protected Geometry ReadMultiPolygon(BinaryReader reader, WKBReader.CoordinateSystem cs, int srid) Parameters Type Name Description BinaryReader reader The reader WKBReader.CoordinateSystem cs The coordinate system int srid The spatial reference id for the geometry. Returns Type Description Geometry A MultiPolygon geometry | Edit this page View Source ReadPoint(BinaryReader, CoordinateSystem, int) Reads a Point geometry. Declaration protected Geometry ReadPoint(BinaryReader reader, WKBReader.CoordinateSystem cs, int srid) Parameters Type Name Description BinaryReader reader The reader WKBReader.CoordinateSystem cs The coordinate system int srid The spatial reference id for the geometry. Returns Type Description Geometry A Point geometry | Edit this page View Source ReadPolygon(BinaryReader, CoordinateSystem, int) Reads a Polygon geometry. Declaration protected Geometry ReadPolygon(BinaryReader reader, WKBReader.CoordinateSystem cs, int srid) Parameters Type Name Description BinaryReader reader The reader WKBReader.CoordinateSystem cs The coordinate system int srid The spatial reference id for the geometry. Returns Type Description Geometry A Polygon geometry"
  },
  "api/NetTopologySuite.IO.WKBWriter.html": {
    "href": "api/NetTopologySuite.IO.WKBWriter.html",
    "title": "Class WKBWriter | NetTopologySuite",
    "summary": "Class WKBWriter Writes a Well-Known Binary byte data representation of a Geometry. Inheritance object WKBWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.IO Assembly: NetTopologySuite.dll Syntax public class WKBWriter Remarks There are a few cases which are not specified in the standard. The implementation uses a representation which is compatible with other common spatial systems (notably, PostGIS). LinearRingsare written as LineStrings. Empty geometries are output as follows PointA WKBPoint with double.NaN ordinate values LineStringA WKBLineString with zero points Polygoncurrently output as a WKBPolygon with one LinearRing with zero points. Note: This is different to other systems. It will change to a WKBPolygon with zero LinearRings. Multi geometriesA WKBMulti with zero elements GeometryCollectionA WKBGeometryCollection with zero elements This implementation supports the Extended WKB standard. Extended WKB allows writing 3-dimensional coordinates and the geometry SRID value. The presence of 3D coordinates is indicated by setting the high bit of the wkbType word. The presence of a SRID is indicated by setting the third bit of the wkbType word. EWKB format is upward-compatible with the original SFS WKB format. SRID output is optimized, if specified. The top-level geometry has the SRID included. Child geometries have it included if their value differs from its parent. This class supports reuse of a single instance to read multiple geometries. This class is not thread - safe; each thread should create its own instance. Constructors | Edit this page View Source WKBWriter() Initializes writer with LittleIndian byte order. Declaration public WKBWriter() | Edit this page View Source WKBWriter(ByteOrder) Initializes writer with the specified byte order. Declaration public WKBWriter(ByteOrder encodingType) Parameters Type Name Description ByteOrder encodingType Encoding type | Edit this page View Source WKBWriter(ByteOrder, bool) Initializes writer with the specified byte order. Declaration public WKBWriter(ByteOrder encodingType, bool handleSRID) Parameters Type Name Description ByteOrder encodingType Encoding type bool handleSRID SRID values, present or not, should be emitted. | Edit this page View Source WKBWriter(ByteOrder, bool, bool) Initializes writer with the specified byte order. Declaration public WKBWriter(ByteOrder encodingType, bool handleSRID, bool emitZ) Parameters Type Name Description ByteOrder encodingType Encoding type bool handleSRID SRID values, present or not, should be emitted. bool emitZ Z values, present or not, should be emitted | Edit this page View Source WKBWriter(ByteOrder, bool, bool, bool) Initializes writer with the specified byte order. Declaration public WKBWriter(ByteOrder encodingType, bool handleSRID, bool emitZ, bool emitM) Parameters Type Name Description ByteOrder encodingType Encoding type bool handleSRID SRID values, present or not, should be emitted. bool emitZ Z values, present or not, should be emitted bool emitM M values, present or not, should be emitted Fields | Edit this page View Source AllowedOrdinates Gets the Ordinates that this class can write. Declaration public static readonly Ordinates AllowedOrdinates Field Value Type Description Ordinates Properties | Edit this page View Source EncodingType Gets or sets the binary encoding type Declaration public ByteOrder EncodingType { get; protected set; } Property Value Type Description ByteOrder | Edit this page View Source HandleOrdinates Gets or sets the maximum Ordinates to write out. The default is equivalent to AllowedOrdinates. Declaration public Ordinates HandleOrdinates { get; set; } Property Value Type Description Ordinates Remarks The purpose of this property is to restrict what gets written out to ensure that, e.g., Z values are never written out even if present on a geometry instance. Ordinates that are not present on a geometry instance will be omitted regardless of this value. Flags not present in AllowedOrdinates are silently ignored. X and Y are always present. | Edit this page View Source HandleSRID Gets or sets a value indicating if an encoded SRID value should be handled or ignored. Declaration public bool HandleSRID { get; set; } Property Value Type Description bool | Edit this page View Source InitCount Standard byte size for each complex point. Each complex point (LineString, Polygon, ...) contains: 1 byte for ByteOrder and 4 bytes for WKBType. 4 bytes for SRID value Declaration [Obsolete(\"Will be removed in a future version\")] protected int InitCount { get; } Property Value Type Description int | Edit this page View Source Strict Gets a value indicating if only original WKT elements should be handled Declaration public bool Strict { get; set; } Property Value Type Description bool Methods | Edit this page View Source GetBytes(Geometry) Gets a buffer for the MemoryStream to write geometry to. Declaration [Obsolete(\"Will be removed in a future version.\")] protected byte[] GetBytes(Geometry geometry) Parameters Type Name Description Geometry geometry The geometry to write Returns Type Description byte[] A buffer | Edit this page View Source SetByteStream(Geometry) Computes the length of a buffer to write geometry in its WKB format. Declaration [Obsolete(\"Will be removed in a future version.\")] protected virtual int SetByteStream(Geometry geometry) Parameters Type Name Description Geometry geometry The geometry Returns Type Description int The number of bytes required to store geometry in its WKB format. | Edit this page View Source SetByteStream(GeometryCollection) Computes the length of a buffer to write the GeometryCollection geometry in its WKB format. Declaration [Obsolete(\"Will be removed in a future version.\")] protected int SetByteStream(GeometryCollection geometry) Parameters Type Name Description GeometryCollection geometry The geometry Returns Type Description int The number of bytes required to store geometry in its WKB format. | Edit this page View Source SetByteStream(LineString) Computes the length of a buffer to write the LineString geometry in its WKB format. Declaration [Obsolete(\"Will be removed in a future version.\")] protected int SetByteStream(LineString geometry) Parameters Type Name Description LineString geometry The geometry Returns Type Description int The number of bytes required to store geometry in its WKB format. | Edit this page View Source SetByteStream(MultiLineString) Computes the length of a buffer to write the MultiLineString geometry in its WKB format. Declaration [Obsolete(\"Will be removed in a future version.\")] protected int SetByteStream(MultiLineString geometry) Parameters Type Name Description MultiLineString geometry The geometry Returns Type Description int The number of bytes required to store geometry in its WKB format. | Edit this page View Source SetByteStream(MultiPoint) Computes the length of a buffer to write the MultiPoint geometry in its WKB format. Declaration [Obsolete(\"Will be removed in a future version.\")] protected int SetByteStream(MultiPoint geometry) Parameters Type Name Description MultiPoint geometry The geometry Returns Type Description int The number of bytes required to store geometry in its WKB format. | Edit this page View Source SetByteStream(MultiPolygon) Computes the length of a buffer to write the MultiPolygon geometry in its WKB format. Declaration [Obsolete(\"Will be removed in a future version.\")] protected int SetByteStream(MultiPolygon geometry) Parameters Type Name Description MultiPolygon geometry The geometry Returns Type Description int The number of bytes required to store geometry in its WKB format. | Edit this page View Source SetByteStream(Point) Computes the length of a buffer to write the Point geometry in its WKB format. Declaration [Obsolete(\"Will be removed in a future version.\")] protected int SetByteStream(Point geometry) Parameters Type Name Description Point geometry The geometry Returns Type Description int The number of bytes required to store geometry in its WKB format. | Edit this page View Source SetByteStream(Polygon) Computes the length of a buffer to write the Polygon geometry in its WKB format. Declaration [Obsolete(\"Will be removed in a future version.\")] protected int SetByteStream(Polygon geometry) Parameters Type Name Description Polygon geometry The geometry Returns Type Description int The number of bytes required to store geometry in its WKB format. | Edit this page View Source ToHex(byte[]) Converts a byte array to a hexadecimal string. Declaration public static string ToHex(byte[] bytes) Parameters Type Name Description byte[] bytes A byte array Returns Type Description string | Edit this page View Source Write(Coordinate, BinaryWriter) Write a Coordinate. Declaration [Obsolete(\"Will be removed in a future version\")] protected void Write(Coordinate coordinate, BinaryWriter writer) Parameters Type Name Description Coordinate coordinate The coordinate BinaryWriter writer The writer. | Edit this page View Source Write(CoordinateSequence, bool, BinaryWriter) Write a CoordinateSequence. Declaration [Obsolete(\"Will be made private in a future version.\")] protected void Write(CoordinateSequence sequence, bool emitSize, BinaryWriter writer) Parameters Type Name Description CoordinateSequence sequence The coordinate sequence to write bool emitSize A flag indicating if the size of sequence should be written, too. BinaryWriter writer The writer. | Edit this page View Source Write(Geometry) Writes a WKB representation of a given point. Declaration public virtual byte[] Write(Geometry geometry) Parameters Type Name Description Geometry geometry Returns Type Description byte[] | Edit this page View Source Write(Geometry, BinaryWriter) Declaration protected void Write(Geometry geometry, BinaryWriter writer) Parameters Type Name Description Geometry geometry BinaryWriter writer | Edit this page View Source Write(Geometry, Stream) Writes a WKB representation of a given point. Declaration public virtual void Write(Geometry geometry, Stream stream) Parameters Type Name Description Geometry geometry Stream stream | Edit this page View Source Write(GeometryCollection, BinaryWriter) Write a GeometryCollection in its WKB format Declaration [Obsolete(\"Will be removed in a future version.\")] protected void Write(GeometryCollection geomCollection, BinaryWriter writer) Parameters Type Name Description GeometryCollection geomCollection The GeometryCollection BinaryWriter writer The writer | Edit this page View Source Write(LineString, BinaryWriter) Write a LineString in its WKB format Declaration [Obsolete(\"Will be removed in a future version.\")] protected void Write(LineString lineString, BinaryWriter writer) Parameters Type Name Description LineString lineString The LineString BinaryWriter writer The writer | Edit this page View Source Write(LinearRing, BinaryWriter) Write LinearRing information Declaration [Obsolete(\"Will be removed in a future version.\")] protected void Write(LinearRing ring, BinaryWriter writer) Parameters Type Name Description LinearRing ring The linear ring BinaryWriter writer The writer | Edit this page View Source Write(MultiLineString, BinaryWriter) Write a MultiLineString in its WKB format Declaration [Obsolete(\"Will be removed in a future version.\")] protected void Write(MultiLineString multiLineString, BinaryWriter writer) Parameters Type Name Description MultiLineString multiLineString The MultiLineString BinaryWriter writer The writer | Edit this page View Source Write(MultiPoint, BinaryWriter) Write a MultiPoint in its WKB format Declaration [Obsolete(\"Will be removed in a future version.\")] protected void Write(MultiPoint multiPoint, BinaryWriter writer) Parameters Type Name Description MultiPoint multiPoint The MultiPoint BinaryWriter writer The writer | Edit this page View Source Write(MultiPolygon, BinaryWriter) Write a MultiPolygon in its WKB format Declaration [Obsolete(\"Will be removed in a future version.\")] protected void Write(MultiPolygon multiPolygon, BinaryWriter writer) Parameters Type Name Description MultiPolygon multiPolygon The MultiPolygon BinaryWriter writer The writer | Edit this page View Source Write(Point, BinaryWriter) Write a point in its WKB format Declaration [Obsolete(\"Will be removed in a future version.\")] protected void Write(Point point, BinaryWriter writer) Parameters Type Name Description Point point The point BinaryWriter writer The writer | Edit this page View Source Write(Polygon, BinaryWriter) Write a Polygon in its WKB format Declaration [Obsolete(\"Will be removed in a future version.\")] protected void Write(Polygon polygon, BinaryWriter writer) Parameters Type Name Description Polygon polygon The Polygon BinaryWriter writer The writer | Edit this page View Source WriteByteOrder(BinaryWriter) Writes the ByteOrder defined in EncodingType. Declaration [Obsolete(\"Will be made private in a future version.\")] protected void WriteByteOrder(BinaryWriter writer) Parameters Type Name Description BinaryWriter writer The writer to use"
  },
  "api/NetTopologySuite.IO.WKTConstants.html": {
    "href": "api/NetTopologySuite.IO.WKTConstants.html",
    "title": "Class WKTConstants | NetTopologySuite",
    "summary": "Class WKTConstants Constants used in the WKT (Well-Known Text) format. Inheritance object WKTConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.IO Assembly: NetTopologySuite.dll Syntax public class WKTConstants Fields | Edit this page View Source EMPTY Token text for empty geometries Declaration public const string EMPTY = \"EMPTY\" Field Value Type Description string | Edit this page View Source GEOMETRYCOLLECTION Token text for GeometryCollection geometries Declaration public const string GEOMETRYCOLLECTION = \"GEOMETRYCOLLECTION\" Field Value Type Description string | Edit this page View Source LINEARRING Token text for LinearRing geometries Declaration public const string LINEARRING = \"LINEARRING\" Field Value Type Description string | Edit this page View Source LINESTRING Token text for LineString geometries Declaration public const string LINESTRING = \"LINESTRING\" Field Value Type Description string | Edit this page View Source M Token text indicating that geometries have measure-ordinate values Declaration public const string M = \"M\" Field Value Type Description string | Edit this page View Source MULTILINESTRING Token text for MultiLineString geometries Declaration public const string MULTILINESTRING = \"MULTILINESTRING\" Field Value Type Description string | Edit this page View Source MULTIPOINT Token text for MultiPoint geometries Declaration public const string MULTIPOINT = \"MULTIPOINT\" Field Value Type Description string | Edit this page View Source MULTIPOLYGON Token text for MultiPolygon geometries Declaration public const string MULTIPOLYGON = \"MULTIPOLYGON\" Field Value Type Description string | Edit this page View Source POINT Token text for Point geometries Declaration public const string POINT = \"POINT\" Field Value Type Description string | Edit this page View Source POLYGON Token text for Polygon geometries Declaration public const string POLYGON = \"POLYGON\" Field Value Type Description string | Edit this page View Source Z Token text indicating that geometries have z-ordinate values Declaration public const string Z = \"Z\" Field Value Type Description string | Edit this page View Source ZM Token text indicating that geometries have both z- and measure-ordinate values Declaration public const string ZM = \"ZM\" Field Value Type Description string"
  },
  "api/NetTopologySuite.IO.WKTFileReader.html": {
    "href": "api/NetTopologySuite.IO.WKTFileReader.html",
    "title": "Class WKTFileReader | NetTopologySuite",
    "summary": "Class WKTFileReader Reads a sequence of Geometrys in WKT format from a text file. Inheritance object WKTFileReader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.IO Assembly: NetTopologySuite.dll Syntax public class WKTFileReader Remarks The geometries in the file may be separated by any amount of whitespace and newlines. Constructors | Edit this page View Source WKTFileReader(FileInfo, WKTReader) Creates a new WKTFileReader given the file to read from and a WKTReader to use to parse the geometries. Declaration public WKTFileReader(FileInfo file, WKTReader wktReader) Parameters Type Name Description FileInfo file the FileInfo to read from WKTReader wktReader the geometry reader to use | Edit this page View Source WKTFileReader(Stream, WKTReader) Creates a new WKTFileReader, given a Stream to read from. Declaration public WKTFileReader(Stream stream, WKTReader wktReader) Parameters Type Name Description Stream stream The stream to read from WKTReader wktReader The geometry reader to use | Edit this page View Source WKTFileReader(TextReader, WKTReader) Creates a new WKTFileReader, given a TextReader to read with. Declaration public WKTFileReader(TextReader reader, WKTReader wktReader) Parameters Type Name Description TextReader reader The stream reader of the file to read from WKTReader wktReader The geometry reader to use | Edit this page View Source WKTFileReader(string, WKTReader) Creates a new WKTFileReader, given the name of the file to read from. Declaration public WKTFileReader(string filename, WKTReader wktReader) Parameters Type Name Description string filename The name of the file to read from WKTReader wktReader The geometry reader to use Properties | Edit this page View Source Limit Gets/Sets the maximum number of geometries to read. Declaration public int Limit { get; set; } Property Value Type Description int | Edit this page View Source Offset Gets/Sets the number of geometries to skip before reading. Declaration public int Offset { get; set; } Property Value Type Description int | Edit this page View Source StrictParsing Gets/Sets allow ignoring WKT parse errors after at least one geometry has been read, to return a partial result. Declaration public bool StrictParsing { get; set; } Property Value Type Description bool Methods | Edit this page View Source Read() Reads a sequence of geometries. Declaration public IList<Geometry> Read() Returns Type Description IList<Geometry> The list of geometries read Remarks If an offset is specified, geometries read up to the offset count are skipped. If a limit is specified, no more than Limit geometries are read. Exceptions Type Condition IOException Thrown if an I/O exception was encountered ParseException Thrown if an error occurred reading a geometry"
  },
  "api/NetTopologySuite.IO.WKTReader.html": {
    "href": "api/NetTopologySuite.IO.WKTReader.html",
    "title": "Class WKTReader | NetTopologySuite",
    "summary": "Class WKTReader Converts a Well-Known Text string to a Geometry. The WKTReader allows extracting Geometry objects from either input streams or internal strings. This allows it to function as a parser to read Geometry objects from text blocks embedded in other data formats (e.g. XML). The Well-known Text format is defined in the OpenGIS Simple Features Specification for SQL . As of version 2.0, NTS can read WKT syntax which specifies coordinate dimension Z, M or ZM as modifiers(e.g.POINT Z) or in the name of the geometry type(e.g.LINESTRINGZM). If the coordinate dimension is specified it will be set in the created geometry. If the coordinate dimension is not specified, the default behaviour is to create XYZ geometry(this is backwards compatible with older JTS versions). This can be altered to create XY geometry by setting IsOldNtsCoordinateSyntaxAllowed to false. A reader can be set to ensure the input is structurally valid by setting FixStructure to true. This ensures that geometry can be constructed without errors due to missing coordinates. The created geometry may still be topologically invalid. NOTE: There is an inconsistency in the SFS. The WKT grammar states that MultiPoints are represented by MULTIPOINT ( ( x y), (x y) ), but the examples show MultiPoints as MULTIPOINT ( x y, x y ). Other implementations follow the latter syntax, so NTS will adopt it as well. A WKTReader is parameterized by a GeometryFactory, to allow it to create Geometry objects of the appropriate implementation. In particular, the GeometryFactory will determine the PrecisionModel and SRID that is used. The WKTReader will convert the input numbers to the precise internal representation. WKTReader reads also non-standard LINEARRING tags. Inheritance object WKTReader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.IO Assembly: NetTopologySuite.dll Syntax public class WKTReader Constructors | Edit this page View Source WKTReader() Creates a WKTReader that creates objects using a basic GeometryFactory. Declaration public WKTReader() | Edit this page View Source WKTReader(GeometryFactory) Creates a WKTReader that creates objects using the given GeometryFactory. Declaration [Obsolete(\"Use a constructor with a configured NtsGeometryServices instance.\")] public WKTReader(GeometryFactory factory) Parameters Type Name Description GeometryFactory factory The factory used to create Geometrys. | Edit this page View Source WKTReader(NtsGeometryServices) Creates a WKTReader that creates objects using a basic GeometryFactory. Declaration public WKTReader(NtsGeometryServices ntsGeometryServices) Parameters Type Name Description NtsGeometryServices ntsGeometryServices Properties | Edit this page View Source DefaultSRID Gets or sets the default SRID Declaration [Obsolete(\"Supply an appropriate NtsGeometryServices instance to the constructor instead. The ability to set this value after an instance is created may be removed in a future release.\")] public int DefaultSRID { get; set; } Property Value Type Description int | Edit this page View Source Factory Gets or sets the factory to create geometries Declaration [Obsolete(\"Supply an appropriate NtsGeometryServices instance to the constructor instead. The ability to set this value after an instance is created may be removed in a future release.\")] public GeometryFactory Factory { get; set; } Property Value Type Description GeometryFactory | Edit this page View Source FixStructure Gets or sets a flag indicating that the structure of input geometry should be fixed so that the geometry can be constructed without error. This involves adding coordinates if the input coordinate sequence is shorter than required. Declaration public bool FixStructure { get; set; } Property Value Type Description bool See Also MinimumValidSize | Edit this page View Source IsOldNtsCoordinateSyntaxAllowed Gets or sets a value indicating whether or not coordinates may have 3 ordinate values even though no Z or M ordinate indicator is present. The default value is true. Declaration public bool IsOldNtsCoordinateSyntaxAllowed { get; set; } Property Value Type Description bool | Edit this page View Source IsOldNtsMultiPointSyntaxAllowed Gets or sets a value indicating whether or not point coordinates in a MultiPoint geometry must not be enclosed in paren. The default value is true. Declaration public bool IsOldNtsMultiPointSyntaxAllowed { get; set; } Property Value Type Description bool | Edit this page View Source IsStrict Gets or sets a value indicating if the reader should attempt to repair malformed input. Declaration public bool IsStrict { get; set; } Property Value Type Description bool Remarks Malformed in this case means the ring has too few points (4), or is not closed. Methods | Edit this page View Source Read(Stream) Converts a Well-known Text representation to a Geometry. Declaration public Geometry Read(Stream stream) Parameters Type Name Description Stream stream one or more Geometry Tagged Text strings (see the OpenGIS Simple Features Specification) separated by whitespace. Returns Type Description Geometry A Geometry specified by wellKnownText | Edit this page View Source Read(TextReader) Converts a Well-known Text representation to a Geometry. Declaration public Geometry Read(TextReader reader) Parameters Type Name Description TextReader reader A Reader which will return a \"Geometry Tagged Text\" string (see the OpenGIS Simple Features Specification). Returns Type Description Geometry A Geometry read from reader. | Edit this page View Source Read(string) Converts a Well-known Text representation to a Geometry. Declaration public Geometry Read(string wellKnownText) Parameters Type Name Description string wellKnownText one or more Geometry Tagged Text strings (see the OpenGIS Simple Features Specification) separated by whitespace. Returns Type Description Geometry A Geometry specified by wellKnownText"
  },
  "api/NetTopologySuite.IO.WKTWriter.html": {
    "href": "api/NetTopologySuite.IO.WKTWriter.html",
    "title": "Class WKTWriter | NetTopologySuite",
    "summary": "Class WKTWriter Outputs the textual representation of a Geometry. The WKTWriter outputs coordinates rounded to the precision model. No more than the maximum number of necessary decimal places will be output. The Well-known Text format is defined in the OpenGIS Simple Features Specification for SQL. A non-standard \"LINEARRING\" tag is used for LinearRings. The WKT spec does not define a special tag for LinearRings. The standard tag to use is \"LINESTRING\". Inheritance object WKTWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.IO Assembly: NetTopologySuite.dll Syntax public class WKTWriter Constructors | Edit this page View Source WKTWriter() Creates an instance of this class which is writing at most 2 dimensions. Declaration public WKTWriter() | Edit this page View Source WKTWriter(int) Creates an instance of this class which is writing at most outputDimension dimensions. Declaration public WKTWriter(int outputDimension) Parameters Type Name Description int outputDimension Properties | Edit this page View Source Formatted Gets/sets whether the output will be formatted Declaration public bool Formatted { get; set; } Property Value Type Description bool | Edit this page View Source MaxCoordinatesPerLine Gets/sets the maximum number of coordinates per line written in formatted output. Declaration public int MaxCoordinatesPerLine { get; set; } Property Value Type Description int Remarks If the provided coordinate number is < 0, coordinates will be written all on one line. | Edit this page View Source OutputOrdinates Gets or sets the Ordinates to be written. Possible members are: X Y Z M Values of X and Y are always assumed and not particularly checked for. Declaration public Ordinates OutputOrdinates { get; set; } Property Value Type Description Ordinates | Edit this page View Source PrecisionModel Gets or sets a PrecisionModel that should be used on the ordinates written. If none/null is assigned, the precision model of the Factory is used. Note: The precision model is applied to all ordinate values, not just x and y. Declaration public PrecisionModel PrecisionModel { get; set; } Property Value Type Description PrecisionModel | Edit this page View Source Tab Gets/sets the tab size to use for indenting. Declaration public int Tab { get; set; } Property Value Type Description int Exceptions Type Condition ArgumentException If the size is non-positive Methods | Edit this page View Source ForMicrosoftSqlServer() Creates a new instance of the WKTWriter class suitable for MSSQL's non- standard WKT format. Declaration public static WKTWriter ForMicrosoftSqlServer() Returns Type Description WKTWriter A new instance of the WKTWriter class suitable for MSSQL's non-standard WKT format. | Edit this page View Source ToLineString(Coordinate, Coordinate) Generates the WKT for a LineString specified by two Coordinates. Declaration public static string ToLineString(Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p0 The first coordinate. Coordinate p1 The second coordinate. Returns Type Description string The WKT | Edit this page View Source ToLineString(CoordinateSequence) Generates the WKT for a N-point LineString specified by a CoordinateSequence. Declaration public static string ToLineString(CoordinateSequence seq) Parameters Type Name Description CoordinateSequence seq The sequence to write. Returns Type Description string The WKT | Edit this page View Source ToLineString(Coordinate[]) Generates the WKT for a LINESTRING specified by an array of Coordinates. Declaration public static string ToLineString(Coordinate[] coord) Parameters Type Name Description Coordinate[] coord An array of coordinates Returns Type Description string The WKT | Edit this page View Source ToPoint(Coordinate) Generates the WKT for a Point specified by a Coordinate. Declaration public static string ToPoint(Coordinate p0) Parameters Type Name Description Coordinate p0 The point coordinate. Returns Type Description string The WKT | Edit this page View Source Write(Geometry) Converts a Geometry to its Well-known Text representation. Declaration public virtual string Write(Geometry geometry) Parameters Type Name Description Geometry geometry A Geometry to process. Returns Type Description string A Geometry Tagged Text string (see the OpenGIS Simple Features Specification). | Edit this page View Source Write(Geometry, Stream) Converts a Geometry to its Well-known Text representation. Declaration public void Write(Geometry geometry, Stream stream) Parameters Type Name Description Geometry geometry A Geometry to process. Stream stream A Stream to write into | Edit this page View Source Write(Geometry, TextWriter) Converts a Geometry to its Well-known Text representation. Declaration public virtual void Write(Geometry geometry, TextWriter writer) Parameters Type Name Description Geometry geometry A Geometry to process. TextWriter writer | Edit this page View Source WriteFormatted(Geometry) Same as write, but with newlines and spaces to make the well-known text more readable. Declaration public virtual string WriteFormatted(Geometry geometry) Parameters Type Name Description Geometry geometry A Geometry to process Returns Type Description string A \"Geometry Tagged Text\" string (see the OpenGIS Simple Features Specification), with newlines and spaces. | Edit this page View Source WriteFormatted(Geometry, TextWriter) Same as write, but with newlines and spaces to make the well-known text more readable. Declaration public virtual void WriteFormatted(Geometry geometry, TextWriter writer) Parameters Type Name Description Geometry geometry A Geometry to process TextWriter writer"
  },
  "api/NetTopologySuite.IO.html": {
    "href": "api/NetTopologySuite.IO.html",
    "title": "Namespace NetTopologySuite.IO | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.IO Contains the interfaces for converting JTS objects to and from other formats. The Net Topology Suite (NTS) is a .Net API that implements a core set of spatial data operations using an explicit precision model and robust geometric algorithms. NTS is intended to be used in the development of applications that support the validation, cleaning, integration and querying of spatial datasets. NTS attempts to implement the OpenGIS Simple Features Specification (SFS) as accurately as possible. In some cases the SFS is unclear or omits a specification; in this case NTS attempts to choose a reasonable and consistent alternative. Differences from and elaborations of the SFS are documented in this specification. Package Specification Java Topology Suite Technical Specifications OpenGIS Simple Features Specification for SQL Classes BEBinaryWriter Extends the BinaryWriter class to allow writing values in the BigEndian format. BiEndianBinaryReader Extends the BinaryReader class to allow reading values in the specified format. OrdinateFormat Formats numeric values for ordinates in a consistent, accurate way. The format has the following characteristics: ParseException Thrown by a WKTReader when a parsing problem occurs. WKBHexFileReader Reads a sequence of {@link Geometry}s in WKBHex format from a text file. Each WKBHex geometry must be on a single line The geometries in the file may be separated by any amount of whitespace and newlines. WKBReader Converts a Well-Known Binary byte data to a Geometry. WKBWriter Writes a Well-Known Binary byte data representation of a Geometry. WKTConstants Constants used in the WKT (Well-Known Text) format. WKTFileReader Reads a sequence of Geometrys in WKT format from a text file. WKTReader Converts a Well-Known Text string to a Geometry. The WKTReader allows extracting Geometry objects from either input streams or internal strings. This allows it to function as a parser to read Geometry objects from text blocks embedded in other data formats (e.g. XML). The Well-known Text format is defined in the OpenGIS Simple Features Specification for SQL . As of version 2.0, NTS can read WKT syntax which specifies coordinate dimension Z, M or ZM as modifiers(e.g.POINT Z) or in the name of the geometry type(e.g.LINESTRINGZM). If the coordinate dimension is specified it will be set in the created geometry. If the coordinate dimension is not specified, the default behaviour is to create XYZ geometry(this is backwards compatible with older JTS versions). This can be altered to create XY geometry by setting IsOldNtsCoordinateSyntaxAllowed to false. A reader can be set to ensure the input is structurally valid by setting FixStructure to true. This ensures that geometry can be constructed without errors due to missing coordinates. The created geometry may still be topologically invalid. NOTE: There is an inconsistency in the SFS. The WKT grammar states that MultiPoints are represented by MULTIPOINT ( ( x y), (x y) ), but the examples show MultiPoints as MULTIPOINT ( x y, x y ). Other implementations follow the latter syntax, so NTS will adopt it as well. A WKTReader is parameterized by a GeometryFactory, to allow it to create Geometry objects of the appropriate implementation. In particular, the GeometryFactory will determine the PrecisionModel and SRID that is used. The WKTReader will convert the input numbers to the precise internal representation. WKTReader reads also non-standard LINEARRING tags. WKTWriter Outputs the textual representation of a Geometry. The WKTWriter outputs coordinates rounded to the precision model. No more than the maximum number of necessary decimal places will be output. The Well-known Text format is defined in the OpenGIS Simple Features Specification for SQL. A non-standard \"LINEARRING\" tag is used for LinearRings. The WKT spec does not define a special tag for LinearRings. The standard tag to use is \"LINESTRING\". Structs GeometryType Lightweight class that handles OGC Geometry type declaration Enums ByteOrder Byte order WKBGeometryTypes WKB Geometry Types WKBReader.CoordinateSystem WKB Coordinate Systems"
  },
  "api/NetTopologySuite.Index.ArrayListVisitor-1.html": {
    "href": "api/NetTopologySuite.Index.ArrayListVisitor-1.html",
    "title": "Class ArrayListVisitor<T> | NetTopologySuite",
    "summary": "Class ArrayListVisitor<T> Builds an array of all visited items. Inheritance object ArrayListVisitor<T> ArrayListVisitor Implements IItemVisitor<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index Assembly: NetTopologySuite.dll Syntax public class ArrayListVisitor<T> : IItemVisitor<T> Type Parameters Name Description T Properties | Edit this page View Source Items Gets the array of visited items. Declaration public IList<T> Items { get; } Property Value Type Description IList<T> Methods | Edit this page View Source VisitItem(T) Visits an item. Declaration public void VisitItem(T item) Parameters Type Name Description T item The item to visit. Implements IItemVisitor<T>"
  },
  "api/NetTopologySuite.Index.ArrayListVisitor.html": {
    "href": "api/NetTopologySuite.Index.ArrayListVisitor.html",
    "title": "Class ArrayListVisitor | NetTopologySuite",
    "summary": "Class ArrayListVisitor Builds an array of all visited items. Inheritance object ArrayListVisitor<object> ArrayListVisitor Implements IItemVisitor<object> Inherited Members ArrayListVisitor<object>.VisitItem(object) ArrayListVisitor<object>.Items object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index Assembly: NetTopologySuite.dll Syntax public class ArrayListVisitor : ArrayListVisitor<object>, IItemVisitor<object> Implements IItemVisitor<T>"
  },
  "api/NetTopologySuite.Index.Bintree.Bintree-1.html": {
    "href": "api/NetTopologySuite.Index.Bintree.Bintree-1.html",
    "title": "Class Bintree<T> | NetTopologySuite",
    "summary": "Class Bintree<T> An BinTree (or \"Binary Interval Tree\") is a 1-dimensional version of a quadtree. It indexes 1-dimensional intervals (which may be the projection of 2-D objects on an axis). It supports range searching (where the range may be a single point). Inheritance object Bintree<T> Bintree Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Bintree Assembly: NetTopologySuite.dll Syntax public class Bintree<T> Type Parameters Name Description T Remarks This structure is dynamic - new items can be added at any time, and it will support deletion of items (although this is not currently implemented). This implementation does not require specifying the extent of the inserted items beforehand. It will automatically expand to accommodate any extent of dataset. This index is different to the Interval Tree of Edelsbrunner or the Segment Tree of Bentley. Constructors | Edit this page View Source Bintree() Declaration public Bintree() Properties | Edit this page View Source Count Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source Depth Declaration public int Depth { get; } Property Value Type Description int | Edit this page View Source NodeSize Compute the total number of nodes in the tree. Declaration public int NodeSize { get; } Property Value Type Description int The number of nodes in the tree. Methods | Edit this page View Source EnsureExtent(Interval, double) Ensure that the Interval for the inserted item has non-zero extents. Use the current minExtent to pad it, if necessary. Declaration public static Interval EnsureExtent(Interval itemInterval, double minExtent) Parameters Type Name Description Interval itemInterval double minExtent Returns Type Description Interval | Edit this page View Source GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator<T> | Edit this page View Source Insert(Interval, T) Declaration public void Insert(Interval itemInterval, T item) Parameters Type Name Description Interval itemInterval T item | Edit this page View Source Query(Interval) Queries the tree to find all candidate items which may overlap the query interval. If the query interval is null , all items in the tree are found. min and max may be the same value. Declaration public IList<T> Query(Interval interval) Parameters Type Name Description Interval interval The interval to query for or null Returns Type Description IList<T> | Edit this page View Source Query(Interval, ICollection<T>) Adds items in the tree which potentially overlap the query interval to the given collection. If the query interval is null, add all items in the tree. Declaration public void Query(Interval interval, ICollection<T> foundItems) Parameters Type Name Description Interval interval A query interval, or null ICollection<T> foundItems The candidate items found | Edit this page View Source Query(double) Declaration public IList<T> Query(double x) Parameters Type Name Description double x Returns Type Description IList<T> | Edit this page View Source Remove(Interval, T) Removes a single item from the tree. Declaration public bool Remove(Interval itemInterval, T item) Parameters Type Name Description Interval itemInterval itemEnv the Envelope of the item to be removed T item the item to remove Returns Type Description bool true if the item was found (and thus removed)"
  },
  "api/NetTopologySuite.Index.Bintree.Bintree.html": {
    "href": "api/NetTopologySuite.Index.Bintree.Bintree.html",
    "title": "Class Bintree | NetTopologySuite",
    "summary": "Class Bintree Inheritance object Bintree<object> Bintree Inherited Members Bintree<object>.EnsureExtent(Interval, double) Bintree<object>.Depth Bintree<object>.Count Bintree<object>.NodeSize Bintree<object>.Insert(Interval, object) Bintree<object>.Remove(Interval, object) Bintree<object>.GetEnumerator() Bintree<object>.Query(double) Bintree<object>.Query(Interval) Bintree<object>.Query(Interval, ICollection<object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Bintree Assembly: NetTopologySuite.dll Syntax public class Bintree : Bintree<object>"
  },
  "api/NetTopologySuite.Index.Bintree.Interval.html": {
    "href": "api/NetTopologySuite.Index.Bintree.Interval.html",
    "title": "Class Interval | NetTopologySuite",
    "summary": "Class Interval Represents an (1-dimensional) closed interval on the Real number line. Inheritance object Interval Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Bintree Assembly: NetTopologySuite.dll Syntax [Serializable] public class Interval Constructors | Edit this page View Source Interval() Creates a new interval instance, setting Min=Max=0d; Declaration public Interval() | Edit this page View Source Interval(Interval) Creates a new interval instance, setting Min=interval.Min.Min and Max=interval.Max.Max. Declaration public Interval(Interval interval) Parameters Type Name Description Interval interval | Edit this page View Source Interval(double, double) Creates a new interval instance, setting Min=min and Max=max; Declaration public Interval(double min, double max) Parameters Type Name Description double min The minimum value double max The maximum value Properties | Edit this page View Source Centre Gets the centre of the interval (Min + Width * 0.5d) Declaration public double Centre { get; } Property Value Type Description double | Edit this page View Source Max Gets or sets a value indicating the maximum value of the closed interval. Declaration public double Max { get; set; } Property Value Type Description double | Edit this page View Source Min Gets or sets a value indicating the minimum value of the closed interval. Declaration public double Min { get; set; } Property Value Type Description double | Edit this page View Source Width Gets the width of the interval (Max - Min) Declaration public double Width { get; } Property Value Type Description double Methods | Edit this page View Source Contains(Interval) Function to test if this Interval contains interval. Declaration public bool Contains(Interval interval) Parameters Type Name Description Interval interval The interval to test Returns Type Description bool true if this interval contains interval Remarks This is more rigid than Overlaps(Interval) | Edit this page View Source Contains(double) Function to test if this Interval contains the value p. Declaration public bool Contains(double p) Parameters Type Name Description double p The value to test Returns Type Description bool true if this interval contains the value p | Edit this page View Source Contains(double, double) Function to test if this Interval contains the interval R[min, max]. Declaration public bool Contains(double min, double max) Parameters Type Name Description double min The mimimum value of the interval double max The maximum value of the interval Returns Type Description bool true if this interval contains the interval R[min, max] Remarks This is more rigid than Overlaps(double, double) | Edit this page View Source ExpandToInclude(Interval) Method to expand this interval to contain interval. Declaration public void ExpandToInclude(Interval interval) Parameters Type Name Description Interval interval The interval to contain. | Edit this page View Source Init(double, double) Method to initialize the interval with the given min and max values. If max < min, their values are exchanged. Declaration public void Init(double min, double max) Parameters Type Name Description double min The minimum value double max The maximum value | Edit this page View Source Overlaps(Interval) Function to test if this Interval overlaps interval. Declaration public bool Overlaps(Interval interval) Parameters Type Name Description Interval interval The interval to test Returns Type Description bool true if this interval overlaps interval | Edit this page View Source Overlaps(double, double) Function to test if this Interval overlaps the interval R[min, max]. Declaration public bool Overlaps(double min, double max) Parameters Type Name Description double min The mimimum value of the interval double max The maximum value of the interval Returns Type Description bool true if this interval overlaps the interval R[min, max]"
  },
  "api/NetTopologySuite.Index.Bintree.Key.html": {
    "href": "api/NetTopologySuite.Index.Bintree.Key.html",
    "title": "Class Key | NetTopologySuite",
    "summary": "Class Key A Key is a unique identifier for a node in a tree. It contains a lower-left point and a level number. The level number is the power of two for the size of the node envelope. Inheritance object Key Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Bintree Assembly: NetTopologySuite.dll Syntax public class Key Constructors | Edit this page View Source Key(Interval) Declaration public Key(Interval interval) Parameters Type Name Description Interval interval Properties | Edit this page View Source Interval Declaration public Interval Interval { get; } Property Value Type Description Interval | Edit this page View Source Level Declaration public int Level { get; } Property Value Type Description int | Edit this page View Source Point Declaration public double Point { get; } Property Value Type Description double Methods | Edit this page View Source ComputeKey(Interval) Return a square envelope containing the argument envelope, whose extent is a power of two and which is based at a power of 2. Declaration public void ComputeKey(Interval itemInterval) Parameters Type Name Description Interval itemInterval | Edit this page View Source ComputeLevel(Interval) Declaration public static int ComputeLevel(Interval interval) Parameters Type Name Description Interval interval Returns Type Description int"
  },
  "api/NetTopologySuite.Index.Bintree.Node-1.html": {
    "href": "api/NetTopologySuite.Index.Bintree.Node-1.html",
    "title": "Class Node<T> | NetTopologySuite",
    "summary": "Class Node<T> A node of a Bintree. Inheritance object NodeBase<T> Node<T> Inherited Members NodeBase<T>.GetSubnodeIndex(Interval, double) NodeBase<T>.Subnode NodeBase<T>.Items NodeBase<T>.Add(T) NodeBase<T>.AddAllItems(IList<T>) NodeBase<T>.AddAllItemsFromOverlapping(Interval, ICollection<T>) NodeBase<T>.Remove(Interval, T) NodeBase<T>.IsPrunable NodeBase<T>.HasChildren NodeBase<T>.HasItems NodeBase<T>.Depth NodeBase<T>.Count NodeBase<T>.NodeCount object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Bintree Assembly: NetTopologySuite.dll Syntax [Serializable] public class Node<T> : NodeBase<T> Type Parameters Name Description T Constructors | Edit this page View Source Node(Interval, int) Creates a new node instance Declaration public Node(Interval interval, int level) Parameters Type Name Description Interval interval The node's interval int level The node's level Properties | Edit this page View Source Interval Gets the node's Interval Declaration public Interval Interval { get; } Property Value Type Description Interval Methods | Edit this page View Source CreateExpanded(Node<T>, Interval) Creates a larger node, that contains both node.Interval.Interval and addInterval If node is null, a node for addInterval is created. Declaration public static Node<T> CreateExpanded(Node<T> node, Interval addInterval) Parameters Type Name Description Node<T> node The original node Interval addInterval The additional interval Returns Type Description Node<T> A new node | Edit this page View Source CreateNode(Interval) Creates a node Declaration public static Node<T> CreateNode(Interval itemInterval) Parameters Type Name Description Interval itemInterval The interval of the node item Returns Type Description Node<T> A new node | Edit this page View Source Find(Interval) Returns the smallest existing node containing the envelope. Declaration public NodeBase<T> Find(Interval searchInterval) Parameters Type Name Description Interval searchInterval Returns Type Description NodeBase<T> | Edit this page View Source GetNode(Interval) Returns the subnode containing the envelope. Creates the node if it does not already exist. Declaration public Node<T> GetNode(Interval searchInterval) Parameters Type Name Description Interval searchInterval Returns Type Description Node<T> | Edit this page View Source Insert(Node<T>) Declaration public void Insert(Node<T> node) Parameters Type Name Description Node<T> node | Edit this page View Source IsSearchMatch(Interval) Declaration protected override bool IsSearchMatch(Interval itemInterval) Parameters Type Name Description Interval itemInterval Returns Type Description bool Overrides NodeBase<T>.IsSearchMatch(Interval)"
  },
  "api/NetTopologySuite.Index.Bintree.NodeBase-1.html": {
    "href": "api/NetTopologySuite.Index.Bintree.NodeBase-1.html",
    "title": "Class NodeBase<T> | NetTopologySuite",
    "summary": "Class NodeBase<T> The base class for nodes in a Bintree. Inheritance object NodeBase<T> Node<T> Root<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Bintree Assembly: NetTopologySuite.dll Syntax [Serializable] public abstract class NodeBase<T> Type Parameters Name Description T Fields | Edit this page View Source Subnode Subnodes are numbered as follows: 0 | 1 . Declaration protected Node<T>[] Subnode Field Value Type Description Node<T>[] Properties | Edit this page View Source Count Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source Depth Gets whether this node has any subnodes Declaration public int Depth { get; } Property Value Type Description int | Edit this page View Source HasChildren Gets whether this node has any children Declaration public bool HasChildren { get; } Property Value Type Description bool | Edit this page View Source HasItems Declaration public bool HasItems { get; } Property Value Type Description bool | Edit this page View Source IsPrunable Gets whether this node is prunable Declaration public bool IsPrunable { get; } Property Value Type Description bool | Edit this page View Source Items Declaration public IList<T> Items { get; protected set; } Property Value Type Description IList<T> | Edit this page View Source NodeCount Declaration public int NodeCount { get; } Property Value Type Description int Methods | Edit this page View Source Add(T) Declaration public void Add(T item) Parameters Type Name Description T item | Edit this page View Source AddAllItems(IList<T>) Declaration public IList<T> AddAllItems(IList<T> items) Parameters Type Name Description IList<T> items Returns Type Description IList<T> | Edit this page View Source AddAllItemsFromOverlapping(Interval, ICollection<T>) Adds items in the tree which potentially overlap the query interval to the given collection. If the query interval is null , add all items in the tree. Declaration public void AddAllItemsFromOverlapping(Interval interval, ICollection<T> resultItems) Parameters Type Name Description Interval interval A query interval, or null ICollection<T> resultItems The candidate items found | Edit this page View Source GetSubnodeIndex(Interval, double) Returns the index of the subnode that wholely contains the given interval. If none does, returns -1. Declaration public static int GetSubnodeIndex(Interval interval, double centre) Parameters Type Name Description Interval interval double centre Returns Type Description int | Edit this page View Source IsSearchMatch(Interval) Declaration protected abstract bool IsSearchMatch(Interval interval) Parameters Type Name Description Interval interval Returns Type Description bool | Edit this page View Source Remove(Interval, T) Removes a single item from this subtree. Declaration public bool Remove(Interval itemInterval, T item) Parameters Type Name Description Interval itemInterval The envelope containing the item T item The item to remove Returns Type Description bool true if the item was found and removed"
  },
  "api/NetTopologySuite.Index.Bintree.Root-1.html": {
    "href": "api/NetTopologySuite.Index.Bintree.Root-1.html",
    "title": "Class Root<T> | NetTopologySuite",
    "summary": "Class Root<T> The root node of a single Bintree. It is centred at the origin, and does not have a defined extent. Inheritance object NodeBase<T> Root<T> Inherited Members NodeBase<T>.GetSubnodeIndex(Interval, double) NodeBase<T>.Subnode NodeBase<T>.Items NodeBase<T>.Add(T) NodeBase<T>.AddAllItems(IList<T>) NodeBase<T>.AddAllItemsFromOverlapping(Interval, ICollection<T>) NodeBase<T>.Remove(Interval, T) NodeBase<T>.IsPrunable NodeBase<T>.HasChildren NodeBase<T>.HasItems NodeBase<T>.Depth NodeBase<T>.Count NodeBase<T>.NodeCount object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Bintree Assembly: NetTopologySuite.dll Syntax public class Root<T> : NodeBase<T> Type Parameters Name Description T Methods | Edit this page View Source Insert(Interval, T) Insert an item into the tree this is the root of. Declaration public void Insert(Interval itemInterval, T item) Parameters Type Name Description Interval itemInterval T item | Edit this page View Source IsSearchMatch(Interval) The root node matches all searches. Declaration protected override bool IsSearchMatch(Interval interval) Parameters Type Name Description Interval interval Returns Type Description bool Overrides NodeBase<T>.IsSearchMatch(Interval)"
  },
  "api/NetTopologySuite.Index.Bintree.html": {
    "href": "api/NetTopologySuite.Index.Bintree.html",
    "title": "Namespace NetTopologySuite.Index.Bintree | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Index.Bintree Contains classes that implement a Binary Interval Tree index Classes Bintree Bintree<T> An BinTree (or \"Binary Interval Tree\") is a 1-dimensional version of a quadtree. It indexes 1-dimensional intervals (which may be the projection of 2-D objects on an axis). It supports range searching (where the range may be a single point). Interval Represents an (1-dimensional) closed interval on the Real number line. Key A Key is a unique identifier for a node in a tree. It contains a lower-left point and a level number. The level number is the power of two for the size of the node envelope. NodeBase<T> The base class for nodes in a Bintree. Node<T> A node of a Bintree. Root<T> The root node of a single Bintree. It is centred at the origin, and does not have a defined extent."
  },
  "api/NetTopologySuite.Index.Chain.MonotoneChain.html": {
    "href": "api/NetTopologySuite.Index.Chain.MonotoneChain.html",
    "title": "Class MonotoneChain | NetTopologySuite",
    "summary": "Class MonotoneChain MonotoneChains are a way of partitioning the segments of a linestring to allow for fast searching of intersections. Inheritance object MonotoneChain Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Chain Assembly: NetTopologySuite.dll Syntax public class MonotoneChain Remarks They have the following properties: the segments within a monotone chain never intersect each other the envelope of any contiguous subset of the segments in a monotone chain is equal to the envelope of the endpoints of the subset. Property 1 means that there is no need to test pairs of segments from within the same monotone chain for intersection. Property 2 allows an efficient binary search to be used to find the intersection points of two monotone chains. For many types of real-world data, these properties eliminate a large number of segment comparisons, producing substantial speed gains. One of the goals of this implementation of MonotoneChains is to be as space and time efficient as possible. One design choice that aids this is that a MonotoneChain is based on a subarray of a list of points. This means that new arrays of points (potentially very large) do not have to be allocated. MonotoneChains support the following kinds of queries: This implementation of MonotoneChains uses the concept of internal iterators (MonotoneChainSelectAction and MonotoneChainOverlapAction) to return the resultsets for the above queries. This has time and space advantages, since it is not necessary to build lists of instantiated objects to represent the segments returned by the query. Queries made in this manner are thread-safe. MonotoneChains support being assigned an integer id value to provide a total ordering for a set of chains. This can be used during some kinds of processing to avoid redundant comparisons (i.e.by comparing only chains where the first id is less than the second). MonotoneChains support using an tolerance distance for overlap tests. This allows reporting overlap in situations where intersection snapping is being used. If this is used the chain envelope must be computed providing an expansion distance using GetEnvelope(double). Constructors | Edit this page View Source MonotoneChain(Coordinate[], int, int, object) Creates a new MonotoneChain based on the given array of points. Declaration public MonotoneChain(Coordinate[] pts, int start, int end, object context) Parameters Type Name Description Coordinate[] pts The points containing the chain int start The index of the first coordinate in the chain int end The index of the last coordinate in the chain object context A user-defined data object Properties | Edit this page View Source Context Gets the chain's user-defined context data value. Declaration public object Context { get; } Property Value Type Description object | Edit this page View Source Coordinates Return the subsequence of coordinates forming this chain. Allocates a new array to hold the Coordinates. Declaration public Coordinate[] Coordinates { get; } Property Value Type Description Coordinate[] | Edit this page View Source EndIndex Gets the index of the end of the monotone chain in the underlying array of points. Declaration public int EndIndex { get; } Property Value Type Description int | Edit this page View Source Envelope Gets the envelope of this chain Declaration public Envelope Envelope { get; } Property Value Type Description Envelope | Edit this page View Source Id Gets or sets the Id of this chain Declaration public int Id { get; set; } Property Value Type Description int Remarks Useful for assigning an ordering to a set of chains, which can be used to avoid redundant processing. | Edit this page View Source OverlapDistance Gets or sets the overlap distance used in overlap tests with other chains. Declaration public double OverlapDistance { get; set; } Property Value Type Description double | Edit this page View Source StartIndex Gets the index of the start of the monotone chain in the underlying array of points. Declaration public int StartIndex { get; } Property Value Type Description int Methods | Edit this page View Source ComputeOverlaps(MonotoneChain, MonotoneChainOverlapAction) Determines the line segments in two chains which may overlap, and passes them to an overlap action. Declaration public void ComputeOverlaps(MonotoneChain mc, MonotoneChainOverlapAction mco) Parameters Type Name Description MonotoneChain mc The chain to compare to MonotoneChainOverlapAction mco The overlap action to execute on selected segments Remarks The monotone chain search algorithm attempts to optimize performance by not calling the overlap action on chain segments which it can determine do not overlap. However, it* may* call the overlap action on segments which do not actually interact. This saves on the overhead of checking intersection each time, since clients may be able to do this more efficiently. | Edit this page View Source ComputeOverlaps(MonotoneChain, double, MonotoneChainOverlapAction) Determines the line segments in two chains which may overlap, using an overlap distance tolerance, and passes them to an overlap action. Declaration public void ComputeOverlaps(MonotoneChain mc, double overlapTolerance, MonotoneChainOverlapAction mco) Parameters Type Name Description MonotoneChain mc The chain to compare to double overlapTolerance The overlap tolerance distance (may be 0) MonotoneChainOverlapAction mco The overlap action to execute on selected segments | Edit this page View Source GetEnvelope(double) Gets the envelope for this chain, expanded by a given distance. Declaration public Envelope GetEnvelope(double expansionDistance) Parameters Type Name Description double expansionDistance Distance to expand the envelope by Returns Type Description Envelope The expanded envelope of the chain | Edit this page View Source GetLineSegment(int, ref LineSegment) Gets the line segment starting at index Declaration public void GetLineSegment(int index, ref LineSegment ls) Parameters Type Name Description int index The index of the segment LineSegment ls The line segment to extract to | Edit this page View Source Select(Envelope, MonotoneChainSelectAction) Determine all the line segments in the chain whose envelopes overlap the searchEnvelope, and process them. Declaration public void Select(Envelope searchEnv, MonotoneChainSelectAction mcs) Parameters Type Name Description Envelope searchEnv The search envelope MonotoneChainSelectAction mcs The select action to execute on selected segments Remarks The monotone chain search algorithm attempts to optimize performance by not calling the select action on chain segments which it can determine are not in the search envelope. However, it may call the select action on segments which do not intersect the search envelope. This saves on the overhead of checking envelope intersection each time, since clients may be able to do this more efficiently."
  },
  "api/NetTopologySuite.Index.Chain.MonotoneChainBuilder.html": {
    "href": "api/NetTopologySuite.Index.Chain.MonotoneChainBuilder.html",
    "title": "Class MonotoneChainBuilder | NetTopologySuite",
    "summary": "Class MonotoneChainBuilder Constructs MonotoneChains for sequences of Coordinates. Inheritance object MonotoneChainBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Chain Assembly: NetTopologySuite.dll Syntax public class MonotoneChainBuilder Methods | Edit this page View Source GetChainStartIndices(Coordinate[]) Return an array containing lists of start/end indexes of the monotone chains for the given list of coordinates. The last entry in the array points to the end point of the point array, for use as a sentinel. Declaration [Obsolete] public static int[] GetChainStartIndices(Coordinate[] pts) Parameters Type Name Description Coordinate[] pts Returns Type Description int[] | Edit this page View Source GetChains(Coordinate[]) Computes a list of the MonotoneChains for a list of coordinates. Declaration public static ReadOnlyCollection<MonotoneChain> GetChains(Coordinate[] pts) Parameters Type Name Description Coordinate[] pts The list of points to compute chains for Returns Type Description ReadOnlyCollection<MonotoneChain> A list of the monotone chains for the points | Edit this page View Source GetChains(Coordinate[], object) Return a list of the MonotoneChains for the given list of coordinates. Declaration public static ReadOnlyCollection<MonotoneChain> GetChains(Coordinate[] pts, object context) Parameters Type Name Description Coordinate[] pts The list of points to compute chains for object context A data object to attach to each chain Returns Type Description ReadOnlyCollection<MonotoneChain> A list of the monotone chains for the points | Edit this page View Source ToIntArray(IList<int>) Declaration [Obsolete] public static int[] ToIntArray(IList<int> list) Parameters Type Name Description IList<int> list Returns Type Description int[]"
  },
  "api/NetTopologySuite.Index.Chain.MonotoneChainOverlapAction.html": {
    "href": "api/NetTopologySuite.Index.Chain.MonotoneChainOverlapAction.html",
    "title": "Class MonotoneChainOverlapAction | NetTopologySuite",
    "summary": "Class MonotoneChainOverlapAction The action for the internal iterator for performing overlap queries on a MonotoneChain. Inheritance object MonotoneChainOverlapAction MCIndexNoder.SegmentOverlapAction MCIndexSegmentSetMutualIntersector.SegmentOverlapAction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Chain Assembly: NetTopologySuite.dll Syntax public class MonotoneChainOverlapAction Fields | Edit this page View Source overlapSeg1 Declaration protected LineSegment overlapSeg1 Field Value Type Description LineSegment | Edit this page View Source overlapSeg2 Declaration protected LineSegment overlapSeg2 Field Value Type Description LineSegment Methods | Edit this page View Source Overlap(LineSegment, LineSegment) This is a convenience function which can be overridden to obtain the actual line segments which overlap. Declaration public virtual void Overlap(LineSegment seg1, LineSegment seg2) Parameters Type Name Description LineSegment seg1 LineSegment seg2 | Edit this page View Source Overlap(MonotoneChain, int, MonotoneChain, int) This function can be overridden if the original chains are needed. Declaration public virtual void Overlap(MonotoneChain mc1, int start1, MonotoneChain mc2, int start2) Parameters Type Name Description MonotoneChain mc1 int start1 The index of the start of the overlapping segment from mc1. MonotoneChain mc2 int start2 The index of the start of the overlapping segment from mc2."
  },
  "api/NetTopologySuite.Index.Chain.MonotoneChainSelectAction.html": {
    "href": "api/NetTopologySuite.Index.Chain.MonotoneChainSelectAction.html",
    "title": "Class MonotoneChainSelectAction | NetTopologySuite",
    "summary": "Class MonotoneChainSelectAction The action for the internal iterator for performing envelope select queries on a MonotoneChain. Inheritance object MonotoneChainSelectAction MCIndexPointSnapper.HotPixelSnapAction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Chain Assembly: NetTopologySuite.dll Syntax public class MonotoneChainSelectAction Fields | Edit this page View Source SelectedSegment Declaration public LineSegment SelectedSegment Field Value Type Description LineSegment Methods | Edit this page View Source Select(LineSegment) This is a convenience method which can be overridden to obtain the actual line segment which is selected. Declaration public virtual void Select(LineSegment seg) Parameters Type Name Description LineSegment seg | Edit this page View Source Select(MonotoneChain, int) This method is overridden to process a segment in the context of the parent chain. Declaration public virtual void Select(MonotoneChain mc, int startIndex) Parameters Type Name Description MonotoneChain mc The parent chain int startIndex The index of the start vertex of the segment being processed"
  },
  "api/NetTopologySuite.Index.Chain.html": {
    "href": "api/NetTopologySuite.Index.Chain.html",
    "title": "Namespace NetTopologySuite.Index.Chain | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Index.Chain Contains classes that implement Monotone Chains Classes MonotoneChain MonotoneChains are a way of partitioning the segments of a linestring to allow for fast searching of intersections. MonotoneChainBuilder Constructs MonotoneChains for sequences of Coordinates. MonotoneChainOverlapAction The action for the internal iterator for performing overlap queries on a MonotoneChain. MonotoneChainSelectAction The action for the internal iterator for performing envelope select queries on a MonotoneChain."
  },
  "api/NetTopologySuite.Index.HPRtree.HPRtree-1.html": {
    "href": "api/NetTopologySuite.Index.HPRtree.HPRtree-1.html",
    "title": "Class HPRtree<T> | NetTopologySuite",
    "summary": "Class HPRtree<T> A Hilbert-Packed R-tree. This is a static R-tree which is packed by using the Hilbert ordering of the tree items. The tree is constructed by sorting the items by the Hilbert code of the midpoint of their envelope. Then, a set of internal layers is created recursively as follows: The items/nodes of the previous are partitioned into blocks of size nodeCapacity For each block a layer node is created with range equal to the envelope of the items/nodess in the block The internal layers are stored using an array to store the node bounds. The link between a node and its children is stored implicitly in the indexes of the array. For efficiency, the offsets to the layers within the node array are pre-computed and stored. NOTE: Based on performance testing, the HPRtree is somewhat faster than the STRtree. It should also be more memory-efficent, due to fewer object allocations. However, it is not clear whether this will produce a significant improvement for use in JTS operations. Inheritance object HPRtree<T> Implements ISpatialIndex<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.HPRtree Assembly: NetTopologySuite.dll Syntax public class HPRtree<T> : ISpatialIndex<T> Type Parameters Name Description T Constructors | Edit this page View Source HPRtree() Creates a new index with the default node capacity. Declaration public HPRtree() | Edit this page View Source HPRtree(int) Creates a new index with the given node capacity. Declaration public HPRtree(int nodeCapacity) Parameters Type Name Description int nodeCapacity The node capacity to use Properties | Edit this page View Source Count Gets the number of items in the index. Declaration public int Count { get; } Property Value Type Description int The number of items Methods | Edit this page View Source Build() Builds the index, if not already built. Declaration public void Build() | Edit this page View Source GetBounds() Gets the extents of the internal index nodes Declaration public Envelope[] GetBounds() Returns Type Description Envelope[] A list of the internal node extents | Edit this page View Source Insert(Envelope, T) Adds a spatial item with an extent specified by the given Envelope to the index. Declaration public void Insert(Envelope itemEnv, T item) Parameters Type Name Description Envelope itemEnv T item | Edit this page View Source Query(Envelope) Queries the index for all items whose extents intersect the given search Envelope Note that some kinds of indexes may also return objects which do not in fact intersect the query envelope. Declaration public IList<T> Query(Envelope searchEnv) Parameters Type Name Description Envelope searchEnv The envelope to query for. Returns Type Description IList<T> A list of the items found by the query. | Edit this page View Source Query(Envelope, IItemVisitor<T>) Queries the index for all items whose extents intersect the given search Envelope, and applies an IItemVisitor<T> to them. Note that some kinds of indexes may also return objects which do not in fact intersect the query envelope. Declaration public void Query(Envelope searchEnv, IItemVisitor<T> visitor) Parameters Type Name Description Envelope searchEnv The envelope to query for. IItemVisitor<T> visitor A visitor object to apply to the items found. | Edit this page View Source Remove(Envelope, T) Removes a single item from the tree. Declaration public bool Remove(Envelope itemEnv, T item) Parameters Type Name Description Envelope itemEnv The Envelope of the item to remove. T item The item to remove. Returns Type Description bool true if the item was found. Remarks Not supported, will always return false Implements ISpatialIndex<T> See Also STRtree<TItem>"
  },
  "api/NetTopologySuite.Index.HPRtree.HilbertEncoder.html": {
    "href": "api/NetTopologySuite.Index.HPRtree.HilbertEncoder.html",
    "title": "Class HilbertEncoder | NetTopologySuite",
    "summary": "Class HilbertEncoder Inheritance object HilbertEncoder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.HPRtree Assembly: NetTopologySuite.dll Syntax public class HilbertEncoder Constructors | Edit this page View Source HilbertEncoder(int, Envelope) Declaration public HilbertEncoder(int level, Envelope extent) Parameters Type Name Description int level Envelope extent Methods | Edit this page View Source Encode(Envelope) Declaration public int Encode(Envelope env) Parameters Type Name Description Envelope env Returns Type Description int"
  },
  "api/NetTopologySuite.Index.HPRtree.Item-1.html": {
    "href": "api/NetTopologySuite.Index.HPRtree.Item-1.html",
    "title": "Class Item<T> | NetTopologySuite",
    "summary": "Class Item<T> Inheritance object Item<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Index.HPRtree Assembly: NetTopologySuite.dll Syntax public class Item<T> Type Parameters Name Description T Constructors | Edit this page View Source Item(Envelope, T) Declaration public Item(Envelope env, T item) Parameters Type Name Description Envelope env T item Properties | Edit this page View Source Envelope Declaration public Envelope Envelope { get; } Property Value Type Description Envelope | Edit this page View Source Value Declaration public T Value { get; } Property Value Type Description T Remarks This property is named Item in JTS Methods | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/NetTopologySuite.Index.HPRtree.html": {
    "href": "api/NetTopologySuite.Index.HPRtree.html",
    "title": "Namespace NetTopologySuite.Index.HPRtree | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Index.HPRtree Classes HPRtree<T> A Hilbert-Packed R-tree. This is a static R-tree which is packed by using the Hilbert ordering of the tree items. The tree is constructed by sorting the items by the Hilbert code of the midpoint of their envelope. Then, a set of internal layers is created recursively as follows: The items/nodes of the previous are partitioned into blocks of size nodeCapacity For each block a layer node is created with range equal to the envelope of the items/nodess in the block The internal layers are stored using an array to store the node bounds. The link between a node and its children is stored implicitly in the indexes of the array. For efficiency, the offsets to the layers within the node array are pre-computed and stored. NOTE: Based on performance testing, the HPRtree is somewhat faster than the STRtree. It should also be more memory-efficent, due to fewer object allocations. However, it is not clear whether this will produce a significant improvement for use in JTS operations. HilbertEncoder Item<T>"
  },
  "api/NetTopologySuite.Index.IIndexVisitor.html": {
    "href": "api/NetTopologySuite.Index.IIndexVisitor.html",
    "title": "Interface IIndexVisitor | NetTopologySuite",
    "summary": "Interface IIndexVisitor A visitor for nodes and items in an index. Namespace: NetTopologySuite.Index Assembly: NetTopologySuite.dll Syntax public interface IIndexVisitor Methods | Edit this page View Source VisitItem(object) Declaration void VisitItem(object item) Parameters Type Name Description object item"
  },
  "api/NetTopologySuite.Index.IItemVisitor-1.html": {
    "href": "api/NetTopologySuite.Index.IItemVisitor-1.html",
    "title": "Interface IItemVisitor<T> | NetTopologySuite",
    "summary": "Interface IItemVisitor<T> A visitor for items in a ISpatialIndex<T>. Namespace: NetTopologySuite.Index Assembly: NetTopologySuite.dll Syntax public interface IItemVisitor<in T> Type Parameters Name Description T Methods | Edit this page View Source VisitItem(T) Visits an item in the index. Declaration void VisitItem(T item) Parameters Type Name Description T item The index item to be visited."
  },
  "api/NetTopologySuite.Index.ILimitingItemVisitor-1.html": {
    "href": "api/NetTopologySuite.Index.ILimitingItemVisitor-1.html",
    "title": "Interface ILimitingItemVisitor<T> | NetTopologySuite",
    "summary": "Interface ILimitingItemVisitor<T> A visitor for items in a ISpatialIndex<T> Not used, commited by accident! Inherited Members IItemVisitor<T>.VisitItem(T) Namespace: NetTopologySuite.Index Assembly: NetTopologySuite.dll Syntax public interface ILimitingItemVisitor<in T> : IItemVisitor<T> Type Parameters Name Description T The type of the items in the index Properties | Edit this page View Source IsDone Gets a value indicating if no more items need to be visited Declaration bool IsDone { get; } Property Value Type Description bool"
  },
  "api/NetTopologySuite.Index.ISpatialIndex-1.html": {
    "href": "api/NetTopologySuite.Index.ISpatialIndex-1.html",
    "title": "Interface ISpatialIndex<T> | NetTopologySuite",
    "summary": "Interface ISpatialIndex<T> The basic insertion and query operations supported by classes implementing spatial index algorithms. A spatial index typically provides a primary filter for range rectangle queries. A secondary filter is required to test for exact intersection. Of course, this secondary filter may consist of other tests besides intersection, such as testing other kinds of spatial relationships. Namespace: NetTopologySuite.Index Assembly: NetTopologySuite.dll Syntax public interface ISpatialIndex<T> Type Parameters Name Description T Methods | Edit this page View Source Insert(Envelope, T) Adds a spatial item with an extent specified by the given Envelope to the index. Declaration void Insert(Envelope itemEnv, T item) Parameters Type Name Description Envelope itemEnv T item | Edit this page View Source Query(Envelope) Queries the index for all items whose extents intersect the given search Envelope Note that some kinds of indexes may also return objects which do not in fact intersect the query envelope. Declaration IList<T> Query(Envelope searchEnv) Parameters Type Name Description Envelope searchEnv The envelope to query for. Returns Type Description IList<T> A list of the items found by the query. | Edit this page View Source Query(Envelope, IItemVisitor<T>) Queries the index for all items whose extents intersect the given search Envelope, and applies an IItemVisitor<T> to them. Note that some kinds of indexes may also return objects which do not in fact intersect the query envelope. Declaration void Query(Envelope searchEnv, IItemVisitor<T> visitor) Parameters Type Name Description Envelope searchEnv The envelope to query for. IItemVisitor<T> visitor A visitor object to apply to the items found. | Edit this page View Source Remove(Envelope, T) Removes a single item from the tree. Declaration bool Remove(Envelope itemEnv, T item) Parameters Type Name Description Envelope itemEnv The Envelope of the item to remove. T item The item to remove. Returns Type Description bool true if the item was found."
  },
  "api/NetTopologySuite.Index.ISpatialIndexEx-1.html": {
    "href": "api/NetTopologySuite.Index.ISpatialIndexEx-1.html",
    "title": "Interface ISpatialIndexEx<T> | NetTopologySuite",
    "summary": "Interface ISpatialIndexEx<T> Inherited Members ISpatialIndex<T>.Insert(Envelope, T) ISpatialIndex<T>.Query(Envelope, IItemVisitor<T>) ISpatialIndex<T>.Remove(Envelope, T) Namespace: NetTopologySuite.Index Assembly: NetTopologySuite.dll Syntax public interface ISpatialIndexEx<T> : ISpatialIndex<T> Type Parameters Name Description T Methods | Edit this page View Source Query(Envelope) Declaration IEnumerable<T> Query(Envelope extent) Parameters Type Name Description Envelope extent Returns Type Description IEnumerable<T> | Edit this page View Source Query(Envelope, Func<T, bool>) Declaration IEnumerable<T> Query(Envelope extent, Func<T, bool> predicate) Parameters Type Name Description Envelope extent Func<T, bool> predicate Returns Type Description IEnumerable<T>"
  },
  "api/NetTopologySuite.Index.IntervalRTree.IntervalRTreeBranchNode-1.html": {
    "href": "api/NetTopologySuite.Index.IntervalRTree.IntervalRTreeBranchNode-1.html",
    "title": "Class IntervalRTreeBranchNode<T> | NetTopologySuite",
    "summary": "Class IntervalRTreeBranchNode<T> Inheritance object IntervalRTreeNode<T> IntervalRTreeBranchNode<T> Inherited Members IntervalRTreeNode<T>.Min IntervalRTreeNode<T>.Max IntervalRTreeNode<T>.Intersects(double, double) IntervalRTreeNode<T>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Index.IntervalRTree Assembly: NetTopologySuite.dll Syntax public class IntervalRTreeBranchNode<T> : IntervalRTreeNode<T> Type Parameters Name Description T Constructors | Edit this page View Source IntervalRTreeBranchNode(IntervalRTreeNode<T>, IntervalRTreeNode<T>) Declaration public IntervalRTreeBranchNode(IntervalRTreeNode<T> n1, IntervalRTreeNode<T> n2) Parameters Type Name Description IntervalRTreeNode<T> n1 IntervalRTreeNode<T> n2 Methods | Edit this page View Source Query(double, double, IItemVisitor<T>) Declaration public override void Query(double queryMin, double queryMax, IItemVisitor<T> visitor) Parameters Type Name Description double queryMin double queryMax IItemVisitor<T> visitor Overrides IntervalRTreeNode<T>.Query(double, double, IItemVisitor<T>)"
  },
  "api/NetTopologySuite.Index.IntervalRTree.IntervalRTreeLeafNode-1.html": {
    "href": "api/NetTopologySuite.Index.IntervalRTree.IntervalRTreeLeafNode-1.html",
    "title": "Class IntervalRTreeLeafNode<T> | NetTopologySuite",
    "summary": "Class IntervalRTreeLeafNode<T> Inheritance object IntervalRTreeNode<T> IntervalRTreeLeafNode<T> Inherited Members IntervalRTreeNode<T>.Min IntervalRTreeNode<T>.Max IntervalRTreeNode<T>.Intersects(double, double) IntervalRTreeNode<T>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Index.IntervalRTree Assembly: NetTopologySuite.dll Syntax public class IntervalRTreeLeafNode<T> : IntervalRTreeNode<T> Type Parameters Name Description T Constructors | Edit this page View Source IntervalRTreeLeafNode(double, double, T) Declaration public IntervalRTreeLeafNode(double min, double max, T item) Parameters Type Name Description double min double max T item Methods | Edit this page View Source Query(double, double, IItemVisitor<T>) Declaration public override void Query(double queryMin, double queryMax, IItemVisitor<T> visitor) Parameters Type Name Description double queryMin double queryMax IItemVisitor<T> visitor Overrides IntervalRTreeNode<T>.Query(double, double, IItemVisitor<T>)"
  },
  "api/NetTopologySuite.Index.IntervalRTree.IntervalRTreeNode-1.NodeComparator.html": {
    "href": "api/NetTopologySuite.Index.IntervalRTree.IntervalRTreeNode-1.NodeComparator.html",
    "title": "Class IntervalRTreeNode<T>.NodeComparator | NetTopologySuite",
    "summary": "Class IntervalRTreeNode<T>.NodeComparator Inheritance object IntervalRTreeNode<T>.NodeComparator Implements IComparer<IntervalRTreeNode<T>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.IntervalRTree Assembly: NetTopologySuite.dll Syntax public class IntervalRTreeNode<T>.NodeComparator : IComparer<IntervalRTreeNode<T>> Fields | Edit this page View Source Instance Declaration public static IntervalRTreeNode<T>.NodeComparator Instance Field Value Type Description IntervalRTreeNode<T>.NodeComparator Methods | Edit this page View Source Compare(IntervalRTreeNode<T>, IntervalRTreeNode<T>) Declaration public int Compare(IntervalRTreeNode<T> n1, IntervalRTreeNode<T> n2) Parameters Type Name Description IntervalRTreeNode<T> n1 IntervalRTreeNode<T> n2 Returns Type Description int Implements IComparer<T>"
  },
  "api/NetTopologySuite.Index.IntervalRTree.IntervalRTreeNode-1.html": {
    "href": "api/NetTopologySuite.Index.IntervalRTree.IntervalRTreeNode-1.html",
    "title": "Class IntervalRTreeNode<T> | NetTopologySuite",
    "summary": "Class IntervalRTreeNode<T> Inheritance object IntervalRTreeNode<T> IntervalRTreeBranchNode<T> IntervalRTreeLeafNode<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Index.IntervalRTree Assembly: NetTopologySuite.dll Syntax public abstract class IntervalRTreeNode<T> Type Parameters Name Description T Constructors | Edit this page View Source IntervalRTreeNode() Declaration protected IntervalRTreeNode() | Edit this page View Source IntervalRTreeNode(double, double) Declaration protected IntervalRTreeNode(double min, double max) Parameters Type Name Description double min double max Properties | Edit this page View Source Max Declaration public double Max { get; protected set; } Property Value Type Description double | Edit this page View Source Min Declaration public double Min { get; protected set; } Property Value Type Description double Methods | Edit this page View Source Intersects(double, double) Declaration protected bool Intersects(double queryMin, double queryMax) Parameters Type Name Description double queryMin double queryMax Returns Type Description bool | Edit this page View Source Query(double, double, IItemVisitor<T>) Declaration public abstract void Query(double queryMin, double queryMax, IItemVisitor<T> visitor) Parameters Type Name Description double queryMin double queryMax IItemVisitor<T> visitor | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/NetTopologySuite.Index.IntervalRTree.SortedPackedIntervalRTree-1.html": {
    "href": "api/NetTopologySuite.Index.IntervalRTree.SortedPackedIntervalRTree-1.html",
    "title": "Class SortedPackedIntervalRTree<T> | NetTopologySuite",
    "summary": "Class SortedPackedIntervalRTree<T> A static index on a set of 1-dimensional intervals, using an R-Tree packed based on the order of the interval midpoints. Inheritance object SortedPackedIntervalRTree<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.IntervalRTree Assembly: NetTopologySuite.dll Syntax public class SortedPackedIntervalRTree<T> Type Parameters Name Description T Remarks It supports range searching, where the range is an interval of the real line (which may be a single point). A common use is to index 1-dimensional intervals which are the projection of 2-D objects onto an axis of the coordinate system. This index structure is static - items cannot be added or removed once the first query has been made. The advantage of this characteristic is that the index performance can be optimized based on a fixed set of items. Martin Davis Methods | Edit this page View Source Insert(double, double, T) Adds an item to the index which is associated with the given interval Declaration public void Insert(double min, double max, T item) Parameters Type Name Description double min The lower bound of the item interval double max The upper bound of the item interval T item The item to insert Exceptions Type Condition InvalidOperationException if the index has already been queried | Edit this page View Source Query(double, double, IItemVisitor<T>) Search for intervals in the index which intersect the given closed interval and apply the visitor to them. Declaration public void Query(double min, double max, IItemVisitor<T> visitor) Parameters Type Name Description double min The lower bound of the query interval double max The upper bound of the query interval IItemVisitor<T> visitor The visitor to pass any matched items to"
  },
  "api/NetTopologySuite.Index.IntervalRTree.html": {
    "href": "api/NetTopologySuite.Index.IntervalRTree.html",
    "title": "Namespace NetTopologySuite.Index.IntervalRTree | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Index.IntervalRTree Classes IntervalRTreeBranchNode<T> IntervalRTreeLeafNode<T> IntervalRTreeNode<T> IntervalRTreeNode<T>.NodeComparator SortedPackedIntervalRTree<T> A static index on a set of 1-dimensional intervals, using an R-Tree packed based on the order of the interval midpoints."
  },
  "api/NetTopologySuite.Index.KdTree.IKdNodeVisitor-1.html": {
    "href": "api/NetTopologySuite.Index.KdTree.IKdNodeVisitor-1.html",
    "title": "Interface IKdNodeVisitor<T> | NetTopologySuite",
    "summary": "Interface IKdNodeVisitor<T> A visitor for KdNode<T>s in a KdTree<T> index. Namespace: NetTopologySuite.Index.KdTree Assembly: NetTopologySuite.dll Syntax public interface IKdNodeVisitor<T> where T : class Type Parameters Name Description T Methods | Edit this page View Source Visit(KdNode<T>) Visits a node. Declaration void Visit(KdNode<T> node) Parameters Type Name Description KdNode<T> node The node to visit"
  },
  "api/NetTopologySuite.Index.KdTree.KdNode-1.html": {
    "href": "api/NetTopologySuite.Index.KdTree.KdNode-1.html",
    "title": "Class KdNode<T> | NetTopologySuite",
    "summary": "Class KdNode<T> A node of a KdTree<T>, which represents one or more points in the same location. Inheritance object KdNode<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.KdTree Assembly: NetTopologySuite.dll Syntax public class KdNode<T> where T : class Type Parameters Name Description T The type of the object Constructors | Edit this page View Source KdNode(Coordinate, T) Creates a new KdNode. Declaration public KdNode(Coordinate p, T data) Parameters Type Name Description Coordinate p The point location of new node T data A data objects to associate with this node | Edit this page View Source KdNode(double, double, T) Creates a new KdNode. Declaration public KdNode(double x, double y, T data) Parameters Type Name Description double x coordinate of point double y coordinate of point T data A data objects to associate with this node Properties | Edit this page View Source Coordinate Gets the location of this node Declaration public Coordinate Coordinate { get; } Property Value Type Description Coordinate The Coordinate | Edit this page View Source Count Gets the number of inserted points that are coincident at this location. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source Data Gets the user data object associated with this node. Declaration public T Data { get; } Property Value Type Description T The user data | Edit this page View Source IsRepeated Gets whether more than one point with this value have been inserted (up to the tolerance) Declaration public bool IsRepeated { get; } Property Value Type Description bool | Edit this page View Source Left Gets or sets the left node of the tree Declaration public KdNode<T> Left { get; set; } Property Value Type Description KdNode<T> The left node | Edit this page View Source Right Gets or sets the right node of the tree Declaration public KdNode<T> Right { get; set; } Property Value Type Description KdNode<T> The right node | Edit this page View Source X Gets x-ordinate of this node Declaration public double X { get; } Property Value Type Description double The x-ordinate | Edit this page View Source Y Gets y-ordinate of this node Declaration public double Y { get; } Property Value Type Description double The y-ordinate Methods | Edit this page View Source SplitValue(bool) Gets the split value at a node, depending on whether the node splits on X or Y. The X (or Y) ordinates of all points in the left subtree are less than the split value, and those in the right subtree are greater than or equal to the split value. Declaration public double SplitValue(bool isSplitOnX) Parameters Type Name Description bool isSplitOnX A flag whether the node splits a X or Y Returns Type Description double The splitting value"
  },
  "api/NetTopologySuite.Index.KdTree.KdTree-1.html": {
    "href": "api/NetTopologySuite.Index.KdTree.KdTree-1.html",
    "title": "Class KdTree<T> | NetTopologySuite",
    "summary": "Class KdTree<T> An implementation of a KD - Tree over two dimensions(X and Y). KD-trees provide fast range searching and fast lookup for point data. The tree is built dynamically by inserting points. The tree supports queries by range and for point equality. For querying an internal stack is used instead of recursion to avoid overflow. Inheritance object KdTree<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.KdTree Assembly: NetTopologySuite.dll Syntax public class KdTree<T> where T : class Type Parameters Name Description T The type of the user data object Remarks This implementation supports detecting and snapping points which are closer than a given distance tolerance. If the same point (up to tolerance) is inserted more than once , it is snapped to the existing node. In other words, if a point is inserted which lies within the tolerance of a node already in the index, it is snapped to that node. When an inserted point is snapped to a node then a new node is not created but the count of the existing node is incremented. If more than one node in the tree is within tolerance of an inserted point, the closest and then lowest node is snapped to. The structure of a KD-Tree depends on the order of insertion of the points. A tree may become umbalanced if the inserted points are coherent (e.g.monotonic in one or both dimensions). A perfectly balanced tree has depth of only log2(N), but an umbalanced tree may be much deeper. This has a serious impact on query efficiency. One solution to this is to randomize the order of points before insertion (e.g. by using Fisher - Yates shuffling). Constructors | Edit this page View Source KdTree() Creates a new instance of a KdTree with a snapping tolerance of 0.0. (I.e. distinct points will not be snapped) Declaration public KdTree() | Edit this page View Source KdTree(double) Creates a new instance of a KdTree with a snapping distance tolerance. Points which lie closer than the tolerance to a point already in the tree will be treated as identical to the existing point. Declaration public KdTree(double tolerance) Parameters Type Name Description double tolerance The tolerance distance for considering two points equal Properties | Edit this page View Source Count Gets a value indicating the number of items in the tree. Declaration public int Count { get; } Property Value Type Description int The number of items in the tree. | Edit this page View Source Depth Gets a value indicating the depth of the tree Declaration public int Depth { get; } Property Value Type Description int The depth of the tree | Edit this page View Source IsEmpty Tests whether the index contains any items. Declaration public bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source Root Gets a value indicating the root node of the tree Declaration public KdNode<T> Root { get; } Property Value Type Description KdNode<T> The root node of the tree Methods | Edit this page View Source Insert(Coordinate) Inserts a new point in the kd-tree, with no data. Declaration public KdNode<T> Insert(Coordinate p) Parameters Type Name Description Coordinate p The point to insert Returns Type Description KdNode<T> The kdnode containing the point | Edit this page View Source Insert(Coordinate, T) Inserts a new point into the kd-tree. Declaration public KdNode<T> Insert(Coordinate p, T data) Parameters Type Name Description Coordinate p The point to insert T data A data item for the point Returns Type Description KdNode<T> A new KdNode if a new point is inserted, else an existing node is returned with its counter incremented. This can be checked by testing returnedNode.getCount() > 1. | Edit this page View Source InsertExact(Coordinate, T) Inserts a point known to be beyond the distance tolerance of any existing node. The point is inserted at the bottom of the exact splitting path, so that tree shape is deterministic. Declaration public KdNode<T> InsertExact(Coordinate p, T data) Parameters Type Name Description Coordinate p The point to insert T data The data associated with p Returns Type Description KdNode<T> The data for the point The created node | Edit this page View Source Query(Coordinate) Searches for a given point in the index and returns its node if found. Declaration public KdNode<T> Query(Coordinate queryPt) Parameters Type Name Description Coordinate queryPt the point to query Returns Type Description KdNode<T> the point node, if it is found in the index, or null if not | Edit this page View Source Query(Envelope) Performs a range search of the points in the index. Declaration public IList<KdNode<T>> Query(Envelope queryEnv) Parameters Type Name Description Envelope queryEnv The range rectangle to query Returns Type Description IList<KdNode<T>> A collection of the KdNodes found | Edit this page View Source Query(Envelope, IKdNodeVisitor<T>) Performs a range search of the points in the index and visits all nodes found. Declaration public void Query(Envelope queryEnv, IKdNodeVisitor<T> visitor) Parameters Type Name Description Envelope queryEnv The range rectangle to query IKdNodeVisitor<T> visitor A visitor to visit all nodes found by the search | Edit this page View Source Query(Envelope, IList<KdNode<T>>) Performs a range search of the points in the index. Declaration public void Query(Envelope queryEnv, IList<KdNode<T>> result) Parameters Type Name Description Envelope queryEnv The range rectangle to query IList<KdNode<T>> result A collection to accumulate the result nodes into | Edit this page View Source ToCoordinates(IEnumerable<KdNode<T>>) Converts a collection ofKdNode<T> s to an array of Coordinates. Declaration public static Coordinate[] ToCoordinates(IEnumerable<KdNode<T>> kdnodes) Parameters Type Name Description IEnumerable<KdNode<T>> kdnodes A collection of nodes Returns Type Description Coordinate[] An array of the coordinates represented by the nodes | Edit this page View Source ToCoordinates(IEnumerable<KdNode<T>>, bool) Converts a collection of KdNode<T>{@link KdNode}s to an array of Coordinates, specifying whether repeated nodes should be represented by multiple coordinates. Declaration public static Coordinate[] ToCoordinates(IEnumerable<KdNode<T>> kdnodes, bool includeRepeated) Parameters Type Name Description IEnumerable<KdNode<T>> kdnodes a collection of nodes bool includeRepeated true if repeated nodes should be included multiple times Returns Type Description Coordinate[] An array of the coordinates represented by the nodes Extension Methods KdTreeExtensions.NearestNeighbor<T>(KdTree<T>, Coordinate)"
  },
  "api/NetTopologySuite.Index.KdTree.KdTreeExtensions.html": {
    "href": "api/NetTopologySuite.Index.KdTree.KdTreeExtensions.html",
    "title": "Class KdTreeExtensions | NetTopologySuite",
    "summary": "Class KdTreeExtensions Extensions methods for the KdTree<T>. Inheritance object KdTreeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.KdTree Assembly: NetTopologySuite.dll Syntax public static class KdTreeExtensions Methods | Edit this page View Source NearestNeighbor<T>(KdTree<T>, Coordinate) Performs a nearest neighbor search of the points in the index. Declaration public static KdNode<T> NearestNeighbor<T>(this KdTree<T> self, Coordinate coord) where T : class Parameters Type Name Description KdTree<T> self The KdTree to look for the nearest neighbor Coordinate coord The point to search the nearset neighbor for Returns Type Description KdNode<T> Type Parameters Name Description T"
  },
  "api/NetTopologySuite.Index.KdTree.html": {
    "href": "api/NetTopologySuite.Index.KdTree.html",
    "title": "Namespace NetTopologySuite.Index.KdTree | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Index.KdTree Classes KdNode<T> A node of a KdTree<T>, which represents one or more points in the same location. KdTreeExtensions Extensions methods for the KdTree<T>. KdTree<T> An implementation of a KD - Tree over two dimensions(X and Y). KD-trees provide fast range searching and fast lookup for point data. The tree is built dynamically by inserting points. The tree supports queries by range and for point equality. For querying an internal stack is used instead of recursion to avoid overflow. Interfaces IKdNodeVisitor<T> A visitor for KdNode<T>s in a KdTree<T> index."
  },
  "api/NetTopologySuite.Index.Quadtree.DoubleBits.html": {
    "href": "api/NetTopologySuite.Index.Quadtree.DoubleBits.html",
    "title": "Class DoubleBits | NetTopologySuite",
    "summary": "Class DoubleBits DoubleBits manipulates Double numbers by using bit manipulation and bit-field extraction. For some operations (such as determining the exponent) this is more accurate than using mathematical operations (which suffer from round-off error). The algorithms and constants in this class apply only to IEEE-754 double-precision floating point format. Inheritance object DoubleBits Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Index.Quadtree Assembly: NetTopologySuite.dll Syntax public class DoubleBits Constructors | Edit this page View Source DoubleBits(double) Declaration public DoubleBits(double x) Parameters Type Name Description double x Fields | Edit this page View Source ExponentBias Declaration public const int ExponentBias = 1023 Field Value Type Description int Properties | Edit this page View Source BiasedExponent Determines the exponent for the number. Declaration public int BiasedExponent { get; } Property Value Type Description int | Edit this page View Source Double Declaration public double Double { get; } Property Value Type Description double | Edit this page View Source Exponent Determines the exponent for the number. Declaration public int Exponent { get; } Property Value Type Description int Methods | Edit this page View Source GetBit(int) Declaration public int GetBit(int i) Parameters Type Name Description int i Returns Type Description int | Edit this page View Source GetExponent(double) Declaration public static int GetExponent(double d) Parameters Type Name Description double d Returns Type Description int | Edit this page View Source MaximumCommonMantissa(double, double) Declaration public static double MaximumCommonMantissa(double d1, double d2) Parameters Type Name Description double d1 double d2 Returns Type Description double | Edit this page View Source NumCommonMantissaBits(DoubleBits) This computes the number of common most-significant bits in the mantissa. It does not count the hidden bit, which is always 1. It does not determine whether the numbers have the same exponent - if they do not, the value computed by this function is meaningless. Declaration public int NumCommonMantissaBits(DoubleBits db) Parameters Type Name Description DoubleBits db Returns Type Description int The number of common most-significant mantissa bits. | Edit this page View Source PowerOf2(int) Declaration public static double PowerOf2(int exp) Parameters Type Name Description int exp Returns Type Description double | Edit this page View Source ToBinaryString(double) Declaration public static string ToBinaryString(double d) Parameters Type Name Description double d Returns Type Description string | Edit this page View Source ToString() A representation of the Double bits formatted for easy readability. Declaration public override string ToString() Returns Type Description string Overrides object.ToString() | Edit this page View Source TruncateToPowerOfTwo(double) Declaration public static double TruncateToPowerOfTwo(double d) Parameters Type Name Description double d Returns Type Description double | Edit this page View Source ZeroLowerBits(int) Declaration public void ZeroLowerBits(int nBits) Parameters Type Name Description int nBits"
  },
  "api/NetTopologySuite.Index.Quadtree.ExcludingItemVisitor-1.html": {
    "href": "api/NetTopologySuite.Index.Quadtree.ExcludingItemVisitor-1.html",
    "title": "Class ExcludingItemVisitor<T> | NetTopologySuite",
    "summary": "Class ExcludingItemVisitor<T> Item visitor that specifically excludes a predefined area. Inheritance object ExcludingItemVisitor<T> Implements IItemVisitor<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Quadtree Assembly: NetTopologySuite.dll Syntax public class ExcludingItemVisitor<T> : IItemVisitor<T> where T : Geometry Type Parameters Name Description T The type of the items to visit Constructors | Edit this page View Source ExcludingItemVisitor(Envelope) Initialize with exclude Declaration public ExcludingItemVisitor(Envelope exclude) Parameters Type Name Description Envelope exclude Properties | Edit this page View Source Items Get a value indicating the gathered items Declaration public IList<T> Items { get; } Property Value Type Description IList<T> Methods | Edit this page View Source VisitItem(T) Visits an item in the index. Declaration public void VisitItem(T item) Parameters Type Name Description T item The index item to be visited. Implements IItemVisitor<T>"
  },
  "api/NetTopologySuite.Index.Quadtree.IntervalSize.html": {
    "href": "api/NetTopologySuite.Index.Quadtree.IntervalSize.html",
    "title": "Class IntervalSize | NetTopologySuite",
    "summary": "Class IntervalSize Provides a test for whether an interval is so small it should be considered as zero for the purposes of inserting it into a binary tree. The reason this check is necessary is that round-off error can cause the algorithm used to subdivide an interval to fail, by computing a midpoint value which does not lie strictly between the endpoints. Inheritance object IntervalSize Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Quadtree Assembly: NetTopologySuite.dll Syntax public class IntervalSize Fields | Edit this page View Source MinBinaryExponent This value is chosen to be a few powers of 2 less than the number of bits available in the double representation (i.e. 53). This should allow enough extra precision for simple computations to be correct, at least for comparison purposes. Declaration public const int MinBinaryExponent = -50 Field Value Type Description int Methods | Edit this page View Source IsZeroWidth(double, double) Computes whether the interval [min, max] is effectively zero width. I.e. the width of the interval is so much less than the location of the interval that the midpoint of the interval cannot be represented precisely. Declaration public static bool IsZeroWidth(double min, double max) Parameters Type Name Description double min double max Returns Type Description bool"
  },
  "api/NetTopologySuite.Index.Quadtree.Key.html": {
    "href": "api/NetTopologySuite.Index.Quadtree.Key.html",
    "title": "Class Key | NetTopologySuite",
    "summary": "Class Key A Key is a unique identifier for a node in a quadtree. It contains a lower-left point and a level number. The level number is the power of two for the size of the node envelope. Inheritance object Key Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Quadtree Assembly: NetTopologySuite.dll Syntax public class Key Constructors | Edit this page View Source Key(Envelope) Declaration public Key(Envelope itemEnv) Parameters Type Name Description Envelope itemEnv Properties | Edit this page View Source Centre Declaration public Coordinate Centre { get; } Property Value Type Description Coordinate | Edit this page View Source Envelope Declaration public Envelope Envelope { get; } Property Value Type Description Envelope | Edit this page View Source Level Declaration public int Level { get; } Property Value Type Description int | Edit this page View Source Point Declaration public Coordinate Point { get; } Property Value Type Description Coordinate Methods | Edit this page View Source ComputeKey(Envelope) Return a square envelope containing the argument envelope, whose extent is a power of two and which is based at a power of 2. Declaration public void ComputeKey(Envelope itemEnv) Parameters Type Name Description Envelope itemEnv | Edit this page View Source ComputeQuadLevel(Envelope) Declaration public static int ComputeQuadLevel(Envelope env) Parameters Type Name Description Envelope env Returns Type Description int"
  },
  "api/NetTopologySuite.Index.Quadtree.Node-1.html": {
    "href": "api/NetTopologySuite.Index.Quadtree.Node-1.html",
    "title": "Class Node<T> | NetTopologySuite",
    "summary": "Class Node<T> Represents a node of a Quadtree. Nodes contain items which have a spatial extent corresponding to the node's position in the quadtree. Inheritance object NodeBase<T> Node<T> Inherited Members NodeBase<T>.GetSubnodeIndex(Envelope, double, double) NodeBase<T>.Subnode NodeBase<T>.Items NodeBase<T>.HasItems NodeBase<T>.Add(T) NodeBase<T>.Remove(Envelope, T) NodeBase<T>.IsPrunable NodeBase<T>.HasChildren NodeBase<T>.IsEmpty NodeBase<T>.AddAllItems(ref IList<T>) NodeBase<T>.AddAllItemsFromOverlapping(Envelope, ref IList<T>) NodeBase<T>.Visit(Envelope, IItemVisitor<T>) NodeBase<T>.Query(Envelope, Func<T, bool>) NodeBase<T>.Depth NodeBase<T>.Count NodeBase<T>.NodeCount object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Quadtree Assembly: NetTopologySuite.dll Syntax [Serializable] public class Node<T> : NodeBase<T> Type Parameters Name Description T Constructors | Edit this page View Source Node(Envelope, int) Declaration public Node(Envelope env, int level) Parameters Type Name Description Envelope env int level Properties | Edit this page View Source Envelope Declaration public Envelope Envelope { get; } Property Value Type Description Envelope | Edit this page View Source Level Gets a value indicating the level of this node Declaration public int Level { get; } Property Value Type Description int The level of this node Methods | Edit this page View Source CreateExpanded(Node<T>, Envelope) Declaration public static Node<T> CreateExpanded(Node<T> node, Envelope addEnv) Parameters Type Name Description Node<T> node Envelope addEnv Returns Type Description Node<T> | Edit this page View Source CreateNode(Envelope) Declaration public static Node<T> CreateNode(Envelope env) Parameters Type Name Description Envelope env Returns Type Description Node<T> | Edit this page View Source Find(Envelope) Returns the smallest existing node containing the envelope. Declaration public NodeBase<T> Find(Envelope searchEnv) Parameters Type Name Description Envelope searchEnv Returns Type Description NodeBase<T> | Edit this page View Source GetNode(Envelope) Returns the subquad containing the envelope searchEnv. Creates the subquad if it does not already exist. Declaration public Node<T> GetNode(Envelope searchEnv) Parameters Type Name Description Envelope searchEnv The envelope to search for Returns Type Description Node<T> The subquad containing the search envelope. | Edit this page View Source InsertNode(Node<T>) Declaration public void InsertNode(Node<T> node) Parameters Type Name Description Node<T> node | Edit this page View Source IsSearchMatch(Envelope) Declaration protected override bool IsSearchMatch(Envelope searchEnv) Parameters Type Name Description Envelope searchEnv Returns Type Description bool Overrides NodeBase<T>.IsSearchMatch(Envelope)"
  },
  "api/NetTopologySuite.Index.Quadtree.NodeBase-1.html": {
    "href": "api/NetTopologySuite.Index.Quadtree.NodeBase-1.html",
    "title": "Class NodeBase<T> | NetTopologySuite",
    "summary": "Class NodeBase<T> The base class for nodes in a Quadtree. Inheritance object NodeBase<T> Node<T> Root<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Quadtree Assembly: NetTopologySuite.dll Syntax [Serializable] public abstract class NodeBase<T> Type Parameters Name Description T Fields | Edit this page View Source Subnode subquads are numbered as follows: 2 | 3 --+-- 0 | 1 Declaration protected Node<T>[] Subnode Field Value Type Description Node<T>[] Properties | Edit this page View Source Count Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source Depth Declaration public int Depth { get; } Property Value Type Description int | Edit this page View Source HasChildren Declaration public bool HasChildren { get; } Property Value Type Description bool | Edit this page View Source HasItems Declaration public bool HasItems { get; } Property Value Type Description bool | Edit this page View Source IsEmpty Gets a value indicating that this node is empty, i.e. it does not contain an items or sub-nodes. Declaration public bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source IsPrunable Declaration public bool IsPrunable { get; } Property Value Type Description bool | Edit this page View Source Items Declaration public IList<T> Items { get; protected set; } Property Value Type Description IList<T> | Edit this page View Source NodeCount Declaration public int NodeCount { get; } Property Value Type Description int Methods | Edit this page View Source Add(T) Declaration public void Add(T item) Parameters Type Name Description T item | Edit this page View Source AddAllItems(ref IList<T>) Insert items in this into the parameter! Declaration public IList<T> AddAllItems(ref IList<T> resultItems) Parameters Type Name Description IList<T> resultItems IList for adding items. Returns Type Description IList<T> Parameter IList with this items. | Edit this page View Source AddAllItemsFromOverlapping(Envelope, ref IList<T>) Declaration public void AddAllItemsFromOverlapping(Envelope searchEnv, ref IList<T> resultItems) Parameters Type Name Description Envelope searchEnv IList<T> resultItems | Edit this page View Source GetSubnodeIndex(Envelope, double, double) Gets the index of the subquad that wholly contains the given envelope. If none does, returns -1. Declaration public static int GetSubnodeIndex(Envelope env, double centreX, double centreY) Parameters Type Name Description Envelope env double centreX double centreY Returns Type Description int The index of the subquad that wholly contains the given envelope or -1 if no subquad wholly contains the envelope | Edit this page View Source IsSearchMatch(Envelope) Declaration protected abstract bool IsSearchMatch(Envelope searchEnv) Parameters Type Name Description Envelope searchEnv Returns Type Description bool | Edit this page View Source Query(Envelope, Func<T, bool>) Declaration public IEnumerable<T> Query(Envelope searchEnv, Func<T, bool> predicate) Parameters Type Name Description Envelope searchEnv Func<T, bool> predicate Returns Type Description IEnumerable<T> | Edit this page View Source Remove(Envelope, T) Removes a single item from this subtree. Declaration public bool Remove(Envelope itemEnv, T item) Parameters Type Name Description Envelope itemEnv The envelope containing the item. T item The item to remove. Returns Type Description bool true if the item was found and removed. | Edit this page View Source Visit(Envelope, IItemVisitor<T>) Declaration public void Visit(Envelope searchEnv, IItemVisitor<T> visitor) Parameters Type Name Description Envelope searchEnv IItemVisitor<T> visitor"
  },
  "api/NetTopologySuite.Index.Quadtree.Quadtree-1.html": {
    "href": "api/NetTopologySuite.Index.Quadtree.Quadtree-1.html",
    "title": "Class Quadtree<T> | NetTopologySuite",
    "summary": "Class Quadtree<T> A Quadtree is a spatial index structure for efficient range querying of items bounded by 2D rectangles. Geometrys can be indexed by using their Envelopes. Any type of object can also be indexed, as long as it has an extent that can be represented by an Envelope. This Quadtree index provides a primary filter for range rectangle queries. The various query methods return a list of all items which may intersect the query rectangle. Note that it may thus return items which do not in fact intersect the query rectangle. A secondary filter is required to test for actual intersection between the query rectangle and the envelope of each candidate item. The secondary filter may be performed explicitly, or it may be provided implicitly by subsequent operations executed on the items (for instance, if the index query is followed by computing a spatial predicate between the query geometry and tree items, the envelope intersection check is performed automatically. This implementation does not require specifying the extent of the inserted items beforehand. It will automatically expand to accommodate any extent of dataset. This data structure is also known as an MX-CIF quadtree following the terminology usage of Samet and others. Inheritance object Quadtree<T> Implements ISpatialIndex<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Quadtree Assembly: NetTopologySuite.dll Syntax [Serializable] public class Quadtree<T> : ISpatialIndex<T> Type Parameters Name Description T Constructors | Edit this page View Source Quadtree() Constructs a Quadtree with zero items. Declaration public Quadtree() Properties | Edit this page View Source Count Returns the number of items in the tree. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source Depth Returns the number of levels in the tree. Declaration public int Depth { get; } Property Value Type Description int | Edit this page View Source IsEmpty Tests whether the index contains any items. Declaration public bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source Root Gets a value indicating the root node of this QuadTree Declaration public Root<T> Root { get; } Property Value Type Description Root<T> The root node of this QuadTree Methods | Edit this page View Source EnsureExtent(Envelope, double) Ensure that the envelope for the inserted item has non-zero extents. Use the current minExtent to pad the envelope, if necessary. Declaration public static Envelope EnsureExtent(Envelope itemEnv, double minExtent) Parameters Type Name Description Envelope itemEnv double minExtent Returns Type Description Envelope | Edit this page View Source Insert(Envelope, T) Declaration public void Insert(Envelope itemEnv, T item) Parameters Type Name Description Envelope itemEnv T item | Edit this page View Source Query(Envelope) Queries the tree and returns items which may lie in the given search envelope. Declaration public IList<T> Query(Envelope searchEnv) Parameters Type Name Description Envelope searchEnv The envelope of the desired query area. Returns Type Description IList<T> A List of items which may intersect the search envelope Remarks Precisely, the items that are returned are all items in the tree whose envelope may intersect the search Envelope. Note that some items with non-intersecting envelopes may be returned as well; the client is responsible for filtering these out. In most situations there will be many items in the tree which do not intersect the search envelope and which are not returned - thus providing improved performance over a simple linear scan. | Edit this page View Source Query(Envelope, IItemVisitor<T>) Queries the tree and visits items which may lie in the given search envelope. Declaration public void Query(Envelope searchEnv, IItemVisitor<T> visitor) Parameters Type Name Description Envelope searchEnv The envelope of the desired query area. IItemVisitor<T> visitor A visitor object which is passed the visited items Remarks Precisely, the items that are visited are all items in the tree whose envelope may intersect the search Envelope. Note that some items with non-intersecting envelopes may be visited as well; the client is responsible for filtering these out. In most situations there will be many items in the tree which do not intersect the search envelope and which are not visited - thus providing improved performance over a simple linear scan. | Edit this page View Source QueryAll() Return a list of all items in the Quadtree. Declaration public IList<T> QueryAll() Returns Type Description IList<T> | Edit this page View Source Remove(Envelope, T) Removes a single item from the tree. Declaration public bool Remove(Envelope itemEnv, T item) Parameters Type Name Description Envelope itemEnv The Envelope of the item to be removed. T item The item to remove. Returns Type Description bool true if the item was found (and thus removed). Implements ISpatialIndex<T>"
  },
  "api/NetTopologySuite.Index.Quadtree.Root-1.html": {
    "href": "api/NetTopologySuite.Index.Quadtree.Root-1.html",
    "title": "Class Root<T> | NetTopologySuite",
    "summary": "Class Root<T> QuadRoot is the root of a single Quadtree. It is centred at the origin, and does not have a defined extent. Inheritance object NodeBase<T> Root<T> Inherited Members NodeBase<T>.GetSubnodeIndex(Envelope, double, double) NodeBase<T>.Subnode NodeBase<T>.Items NodeBase<T>.HasItems NodeBase<T>.Add(T) NodeBase<T>.Remove(Envelope, T) NodeBase<T>.IsPrunable NodeBase<T>.HasChildren NodeBase<T>.IsEmpty NodeBase<T>.AddAllItems(ref IList<T>) NodeBase<T>.AddAllItemsFromOverlapping(Envelope, ref IList<T>) NodeBase<T>.Visit(Envelope, IItemVisitor<T>) NodeBase<T>.Query(Envelope, Func<T, bool>) NodeBase<T>.Depth NodeBase<T>.Count NodeBase<T>.NodeCount object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Quadtree Assembly: NetTopologySuite.dll Syntax [Serializable] public class Root<T> : NodeBase<T> Type Parameters Name Description T Methods | Edit this page View Source Insert(Envelope, T) Insert an item into the quadtree this is the root of. Declaration public void Insert(Envelope itemEnv, T item) Parameters Type Name Description Envelope itemEnv T item | Edit this page View Source IsSearchMatch(Envelope) Declaration protected override bool IsSearchMatch(Envelope searchEnv) Parameters Type Name Description Envelope searchEnv Returns Type Description bool Overrides NodeBase<T>.IsSearchMatch(Envelope)"
  },
  "api/NetTopologySuite.Index.Quadtree.html": {
    "href": "api/NetTopologySuite.Index.Quadtree.html",
    "title": "Namespace NetTopologySuite.Index.Quadtree | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Index.Quadtree Contains classes that implement a Quadtree spatial index Classes DoubleBits DoubleBits manipulates Double numbers by using bit manipulation and bit-field extraction. For some operations (such as determining the exponent) this is more accurate than using mathematical operations (which suffer from round-off error). The algorithms and constants in this class apply only to IEEE-754 double-precision floating point format. ExcludingItemVisitor<T> Item visitor that specifically excludes a predefined area. IntervalSize Provides a test for whether an interval is so small it should be considered as zero for the purposes of inserting it into a binary tree. The reason this check is necessary is that round-off error can cause the algorithm used to subdivide an interval to fail, by computing a midpoint value which does not lie strictly between the endpoints. Key A Key is a unique identifier for a node in a quadtree. It contains a lower-left point and a level number. The level number is the power of two for the size of the node envelope. NodeBase<T> The base class for nodes in a Quadtree. Node<T> Represents a node of a Quadtree. Nodes contain items which have a spatial extent corresponding to the node's position in the quadtree. Quadtree<T> A Quadtree is a spatial index structure for efficient range querying of items bounded by 2D rectangles. Geometrys can be indexed by using their Envelopes. Any type of object can also be indexed, as long as it has an extent that can be represented by an Envelope. This Quadtree index provides a primary filter for range rectangle queries. The various query methods return a list of all items which may intersect the query rectangle. Note that it may thus return items which do not in fact intersect the query rectangle. A secondary filter is required to test for actual intersection between the query rectangle and the envelope of each candidate item. The secondary filter may be performed explicitly, or it may be provided implicitly by subsequent operations executed on the items (for instance, if the index query is followed by computing a spatial predicate between the query geometry and tree items, the envelope intersection check is performed automatically. This implementation does not require specifying the extent of the inserted items beforehand. It will automatically expand to accommodate any extent of dataset. This data structure is also known as an MX-CIF quadtree following the terminology usage of Samet and others. Root<T> QuadRoot is the root of a single Quadtree. It is centred at the origin, and does not have a defined extent."
  },
  "api/NetTopologySuite.Index.Strtree.AbstractNode-2.html": {
    "href": "api/NetTopologySuite.Index.Strtree.AbstractNode-2.html",
    "title": "Class AbstractNode<T, TItem> | NetTopologySuite",
    "summary": "Class AbstractNode<T, TItem> A node of an AbstractSTRtree<T, TItem>. A node is one of: empty an interior node containing child AbstractNode<T, TItem>s a leaf node containing data items (ItemBoundable<T, TItem>s). A node stores the bounds of its children, and its level within the index tree. Inheritance object AbstractNode<T, TItem> Implements IBoundable<T, TItem> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Strtree Assembly: NetTopologySuite.dll Syntax [Serializable] public abstract class AbstractNode<T, TItem> : IBoundable<T, TItem> where T : IIntersectable<T>, IExpandable<T> Type Parameters Name Description T TItem Constructors | Edit this page View Source AbstractNode(int) Constructs an AbstractNode at the given level in the tree Declaration protected AbstractNode(int level) Parameters Type Name Description int level 0 if this node is a leaf, 1 if a parent of a leaf, and so on; the root node will have the highest level. Properties | Edit this page View Source Bounds Gets the bounds of this node Declaration public T Bounds { get; } Property Value Type Description T | Edit this page View Source ChildBoundables Returns either child AbstractNode<T, TItem>s, or if this is a leaf node, real data (wrapped in ItemBoundable<T, TItem>s). Declaration public IList<IBoundable<T, TItem>> ChildBoundables { get; set; } Property Value Type Description IList<IBoundable<T, TItem>> | Edit this page View Source Count Gets the count of the IBoundable<T, TItem>s at this node. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source IsEmpty Tests whether there are any IBoundable<T, TItem>s at this node. Declaration public bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source Item Gets the item that is bounded Declaration public TItem Item { get; } Property Value Type Description TItem | Edit this page View Source Level Returns 0 if this node is a leaf, 1 if a parent of a leaf, and so on; the root node will have the highest level. Declaration public int Level { get; } Property Value Type Description int Methods | Edit this page View Source AddChildBoundable(IBoundable<T, TItem>) Adds either an AbstractNode, or if this is a leaf node, a data object (wrapped in an ItemBoundable). Declaration public void AddChildBoundable(IBoundable<T, TItem> childBoundable) Parameters Type Name Description IBoundable<T, TItem> childBoundable The child to add. | Edit this page View Source ComputeBounds() Returns a representation of space that encloses this Boundable, preferably not much bigger than this Boundable's boundary yet fast to test for intersection with the bounds of other Boundables. The class of object returned depends on the subclass of AbstractSTRtree. Declaration protected abstract T ComputeBounds() Returns Type Description T An Envelope (for STRtrees), an Interval (for SIRtrees), or other object (for other subclasses of AbstractSTRtree). Implements IBoundable<T, TItem>"
  },
  "api/NetTopologySuite.Index.Strtree.AbstractSTRtree-2.IIntersectsOp.html": {
    "href": "api/NetTopologySuite.Index.Strtree.AbstractSTRtree-2.IIntersectsOp.html",
    "title": "Interface AbstractSTRtree<T, TItem>.IIntersectsOp | NetTopologySuite",
    "summary": "Interface AbstractSTRtree<T, TItem>.IIntersectsOp Namespace: NetTopologySuite.Index.Strtree Assembly: NetTopologySuite.dll Syntax protected interface AbstractSTRtree<T, TItem>.IIntersectsOp Methods | Edit this page View Source Intersects(T, T) For STRtrees, the bounds will be Envelopes; for SIRtrees, Intervals; for other subclasses of AbstractSTRtree, some other class. Declaration bool Intersects(T aBounds, T bBounds) Parameters Type Name Description T aBounds The bounds of one spatial object. T bBounds The bounds of another spatial object. Returns Type Description bool Whether the two bounds intersect."
  },
  "api/NetTopologySuite.Index.Strtree.AbstractSTRtree-2.html": {
    "href": "api/NetTopologySuite.Index.Strtree.AbstractSTRtree-2.html",
    "title": "Class AbstractSTRtree<T, TItem> | NetTopologySuite",
    "summary": "Class AbstractSTRtree<T, TItem> Base class for STRtree and SIRtree. STR-packed R-trees are described in: P. Rigaux, Michel Scholl and Agnes Voisard. Spatial Databases With Application To GIS. Morgan Kaufmann, San Francisco, 2002. This implementation is based on IBoundable<T, TItem>s rather than just AbstractNode<T, TItem>s, because the STR algorithm operates on both nodes and data, both of which are treated as IBoundable<T, TItem>s. Inheritance object AbstractSTRtree<T, TItem> SIRtree<TItem> STRtree<TItem> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Strtree Assembly: NetTopologySuite.dll Syntax [Serializable] public abstract class AbstractSTRtree<T, TItem> where T : IIntersectable<T>, IExpandable<T> Type Parameters Name Description T TItem Constructors | Edit this page View Source AbstractSTRtree(int) Constructs an AbstractSTRtree with the specified maximum number of child nodes that a node may have. Declaration protected AbstractSTRtree(int nodeCapacity) Parameters Type Name Description int nodeCapacity | Edit this page View Source AbstractSTRtree(int, AbstractNode<T, TItem>) Constructs an AbstractSTRtree with the specified maximum number of child nodes that a node may have, and the root node Declaration protected AbstractSTRtree(int nodeCapacity, AbstractNode<T, TItem> root) Parameters Type Name Description int nodeCapacity The maximum number of child nodes in a node AbstractNode<T, TItem> root The root node that links to all other nodes in the tree | Edit this page View Source AbstractSTRtree(int, IList<IBoundable<T, TItem>>) Constructs an AbstractSTRtree with the specified maximum number of child nodes that a node may have, and all leaf nodes in the tree Declaration protected AbstractSTRtree(int nodeCapacity, IList<IBoundable<T, TItem>> itemBoundables) Parameters Type Name Description int nodeCapacity The maximum number of child nodes in a node IList<IBoundable<T, TItem>> itemBoundables The list of leaf nodes in the tree Properties | Edit this page View Source Count Gets the number of elements in the tree Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source Depth Gets the number of levels in the tree. Declaration public int Depth { get; } Property Value Type Description int | Edit this page View Source IntersectsOp Declaration protected abstract AbstractSTRtree<T, TItem>.IIntersectsOp IntersectsOp { get; } Property Value Type Description AbstractSTRtree<T, TItem>.IIntersectsOp A test for intersection between two bounds, necessary because subclasses of AbstractSTRtree have different implementations of bounds. | Edit this page View Source IsEmpty Tests whether the index contains any items. This method does not build the index, so items can still be inserted after it has been called. Declaration public bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source ItemBoundables Gets a value indicating the boundable items that have to be included in the index Declaration public IList<IBoundable<T, TItem>> ItemBoundables { get; } Property Value Type Description IList<IBoundable<T, TItem>> A list of boundable items | Edit this page View Source NodeCapacity Gets the maximum number of child nodes that a node may have. Declaration public int NodeCapacity { get; } Property Value Type Description int | Edit this page View Source Root Gets the root node of the tree. Declaration public AbstractNode<T, TItem> Root { get; protected set; } Property Value Type Description AbstractNode<T, TItem> Methods | Edit this page View Source BoundablesAtLevel(int) Declaration protected IList<IBoundable<T, TItem>> BoundablesAtLevel(int level) Parameters Type Name Description int level Returns Type Description IList<IBoundable<T, TItem>> | Edit this page View Source Build() Creates parent nodes, grandparent nodes, and so forth up to the root node, for the data that has been inserted into the tree. Can only be called once, and thus can be called only after all of the data has been inserted into the tree. Declaration public void Build() | Edit this page View Source CompareDoubles(double, double) Declaration protected static int CompareDoubles(double a, double b) Parameters Type Name Description double a double b Returns Type Description int | Edit this page View Source CreateNode(int) Declaration protected abstract AbstractNode<T, TItem> CreateNode(int level) Parameters Type Name Description int level Returns Type Description AbstractNode<T, TItem> | Edit this page View Source CreateParentBoundables(IList<IBoundable<T, TItem>>, int) Sorts the childBoundables then divides them into groups of size M, where M is the node capacity. Declaration protected virtual IList<IBoundable<T, TItem>> CreateParentBoundables(IList<IBoundable<T, TItem>> childBoundables, int newLevel) Parameters Type Name Description IList<IBoundable<T, TItem>> childBoundables int newLevel Returns Type Description IList<IBoundable<T, TItem>> | Edit this page View Source GetComparer() Declaration protected abstract IComparer<IBoundable<T, TItem>> GetComparer() Returns Type Description IComparer<IBoundable<T, TItem>> | Edit this page View Source GetDepth(AbstractNode<T, TItem>) Declaration protected int GetDepth(AbstractNode<T, TItem> node) Parameters Type Name Description AbstractNode<T, TItem> node Returns Type Description int | Edit this page View Source GetSize(AbstractNode<T, TItem>) Declaration protected int GetSize(AbstractNode<T, TItem> node) Parameters Type Name Description AbstractNode<T, TItem> node Returns Type Description int | Edit this page View Source Insert(T, TItem) Declaration protected void Insert(T bounds, TItem item) Parameters Type Name Description T bounds TItem item | Edit this page View Source ItemsTree() Gets a tree structure (as a nested list) corresponding to the structure of the items and nodes in this tree. The returned Lists contain either Object items, or Lists which correspond to subtrees of the tree Subtrees which do not contain any items are not included. Builds the tree if necessary. Declaration public IList<object> ItemsTree() Returns Type Description IList<object> a List of items and/or Lists | Edit this page View Source LastNode(IList<IBoundable<T, TItem>>) Declaration protected AbstractNode<T, TItem> LastNode(IList<IBoundable<T, TItem>> nodes) Parameters Type Name Description IList<IBoundable<T, TItem>> nodes Returns Type Description AbstractNode<T, TItem> | Edit this page View Source Query(T) Also builds the tree, if necessary. Declaration protected IList<TItem> Query(T searchBounds) Parameters Type Name Description T searchBounds Returns Type Description IList<TItem> | Edit this page View Source Query(T, IItemVisitor<TItem>) Declaration protected void Query(T searchBounds, IItemVisitor<TItem> visitor) Parameters Type Name Description T searchBounds IItemVisitor<TItem> visitor | Edit this page View Source Remove(T, TItem) Removes an item from the tree. (Builds the tree, if necessary.) Declaration protected bool Remove(T searchBounds, TItem item) Parameters Type Name Description T searchBounds TItem item Returns Type Description bool"
  },
  "api/NetTopologySuite.Index.Strtree.EnvelopeDistance.html": {
    "href": "api/NetTopologySuite.Index.Strtree.EnvelopeDistance.html",
    "title": "Class EnvelopeDistance | NetTopologySuite",
    "summary": "Class EnvelopeDistance Utility functions for working with Envelopes. Inheritance object EnvelopeDistance Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Strtree Assembly: NetTopologySuite.dll Syntax public class EnvelopeDistance Methods | Edit this page View Source MaximumDistance(Envelope, Envelope) Computes the maximum distance between the points defining two envelopes. This is the distance between the two corners which are farthest apart. Note that this is NOT the MinMax distance, which is a tighter bound on the distance between the points in the envelopes. Declaration public static double MaximumDistance(Envelope env1, Envelope env2) Parameters Type Name Description Envelope env1 An envelope Envelope env2 An envelope Returns Type Description double The maximum distance between the points defining the envelopes | Edit this page View Source MinMaxDistance(Envelope, Envelope) Computes the Min-Max Distance between two Envelopes. It is equal to the minimum of the maximum distances between all pairs of edge segments from the two envelopes. This is the tight upper bound on the distance between geometric items bounded by the envelopes. Theoretically this bound can be used in the R-tree nearest-neighbour branch-and-bound search instead of MaximumDistance(Envelope, Envelope). However, little performance improvement is observed in practice. Declaration public static double MinMaxDistance(Envelope a, Envelope b) Parameters Type Name Description Envelope a An envelope Envelope b An envelope Returns Type Description double The min-max-distance between the envelopes"
  },
  "api/NetTopologySuite.Index.Strtree.GeometryItemDistance.html": {
    "href": "api/NetTopologySuite.Index.Strtree.GeometryItemDistance.html",
    "title": "Class GeometryItemDistance | NetTopologySuite",
    "summary": "Class GeometryItemDistance An IItemDistance<T, TItem> function for items which are Geometry using the Distance(Geometry) method. To make this distance function suitable for using to query a single index tree, the distance metric is anti-reflexive. That is, if the two arguments are the same Geometry object, the distance returned is MaxValue. Inheritance object GeometryItemDistance Implements IItemDistance<Envelope, Geometry> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Strtree Assembly: NetTopologySuite.dll Syntax public class GeometryItemDistance : IItemDistance<Envelope, Geometry> Methods | Edit this page View Source Distance(IBoundable<Envelope, Geometry>, IBoundable<Envelope, Geometry>) Computes the distance between two Geometry items, using the Distance(Geometry) method. Declaration public double Distance(IBoundable<Envelope, Geometry> item1, IBoundable<Envelope, Geometry> item2) Parameters Type Name Description IBoundable<Envelope, Geometry> item1 An item which is a geometry. IBoundable<Envelope, Geometry> item2 An item which is a geometry. Returns Type Description double The distance between the two items. Exceptions Type Condition InvalidCastException if either item is not a Geometry Implements IItemDistance<T, TItem>"
  },
  "api/NetTopologySuite.Index.Strtree.IItemDistance-2.html": {
    "href": "api/NetTopologySuite.Index.Strtree.IItemDistance-2.html",
    "title": "Interface IItemDistance<T, TItem> | NetTopologySuite",
    "summary": "Interface IItemDistance<T, TItem> A function method which computes the distance between two IBoundable<T, TItem>s in an STRtree<TItem>. Used for Nearest Neighbour searches. To make a distance function suitable for querying a single index tree via NearestNeighbour(IItemDistance<Envelope, TItem>), the function should have a non-zero reflexive distance. That is, if the two arguments are the same object, the distance returned should be non-zero. If it is required that only pairs of distinct items be returned, the distance function must be anti-reflexive, and must return MaxValue for identical arguments. Namespace: NetTopologySuite.Index.Strtree Assembly: NetTopologySuite.dll Syntax public interface IItemDistance<T, TItem> where T : IIntersectable<T>, IExpandable<T> Type Parameters Name Description T TItem Methods | Edit this page View Source Distance(IBoundable<T, TItem>, IBoundable<T, TItem>) Computes the distance between two items. Declaration double Distance(IBoundable<T, TItem> item1, IBoundable<T, TItem> item2) Parameters Type Name Description IBoundable<T, TItem> item1 The first item. IBoundable<T, TItem> item2 The second item. Returns Type Description double The distance between item1 and item2. Exceptions Type Condition ArgumentException If the metric is not applicable to the arguments"
  },
  "api/NetTopologySuite.Index.Strtree.Interval.html": {
    "href": "api/NetTopologySuite.Index.Strtree.Interval.html",
    "title": "Class Interval | NetTopologySuite",
    "summary": "Class Interval A contiguous portion of 1D-space. Used internally by SIRtree. Inheritance object Interval Implements IIntersectable<Interval> IExpandable<Interval> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Strtree Assembly: NetTopologySuite.dll Syntax public class Interval : IIntersectable<Interval>, IExpandable<Interval> Constructors | Edit this page View Source Interval(Interval) Declaration public Interval(Interval other) Parameters Type Name Description Interval other | Edit this page View Source Interval(double, double) Declaration public Interval(double min, double max) Parameters Type Name Description double min double max Properties | Edit this page View Source Centre Gets the centre of the interval. Declaration public double Centre { get; } Property Value Type Description double Methods | Edit this page View Source Equals(object) Declaration public override bool Equals(object o) Parameters Type Name Description object o Returns Type Description bool Overrides object.Equals(object) | Edit this page View Source ExpandToInclude(Interval) Declaration public void ExpandToInclude(Interval other) Parameters Type Name Description Interval other | Edit this page View Source ExpandedBy(Interval) Declaration public Interval ExpandedBy(Interval other) Parameters Type Name Description Interval other Returns Type Description Interval this | Edit this page View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() | Edit this page View Source Intersects(Interval) Declaration public bool Intersects(Interval other) Parameters Type Name Description Interval other Returns Type Description bool Implements IIntersectable<T> IExpandable<T>"
  },
  "api/NetTopologySuite.Index.Strtree.ItemBoundable-2.html": {
    "href": "api/NetTopologySuite.Index.Strtree.ItemBoundable-2.html",
    "title": "Class ItemBoundable<T, TItem> | NetTopologySuite",
    "summary": "Class ItemBoundable<T, TItem> Boundable wrapper for a non-Boundable spatial object. Used internally by AbstractSTRtree. Inheritance object ItemBoundable<T, TItem> Implements IBoundable<T, TItem> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Strtree Assembly: NetTopologySuite.dll Syntax [Serializable] public class ItemBoundable<T, TItem> : IBoundable<T, TItem> where T : IIntersectable<T>, IExpandable<T> Type Parameters Name Description T TItem Constructors | Edit this page View Source ItemBoundable(T, TItem) Declaration public ItemBoundable(T bounds, TItem item) Parameters Type Name Description T bounds TItem item Properties | Edit this page View Source Bounds The bounds Declaration public T Bounds { get; } Property Value Type Description T | Edit this page View Source Item The item Declaration public TItem Item { get; } Property Value Type Description TItem Implements IBoundable<T, TItem>"
  },
  "api/NetTopologySuite.Index.Strtree.SIRtree-1.html": {
    "href": "api/NetTopologySuite.Index.Strtree.SIRtree-1.html",
    "title": "Class SIRtree<TItem> | NetTopologySuite",
    "summary": "Class SIRtree<TItem> One-dimensional version of an STR-packed R-tree. SIR stands for \"Sort-Interval-Recursive\". STR-packed R-trees are described in: P. Rigaux, Michel Scholl and Agnes Voisard. Spatial Databases With Application To GIS. Morgan Kaufmann, San Francisco, 2002. Inheritance object AbstractSTRtree<Interval, TItem> SIRtree<TItem> Inherited Members AbstractSTRtree<Interval, TItem>.Build() AbstractSTRtree<Interval, TItem>.CreateNode(int) AbstractSTRtree<Interval, TItem>.CreateParentBoundables(IList<IBoundable<Interval, TItem>>, int) AbstractSTRtree<Interval, TItem>.LastNode(IList<IBoundable<Interval, TItem>>) AbstractSTRtree<Interval, TItem>.CompareDoubles(double, double) AbstractSTRtree<Interval, TItem>.Root AbstractSTRtree<Interval, TItem>.NodeCapacity AbstractSTRtree<Interval, TItem>.IsEmpty AbstractSTRtree<Interval, TItem>.Count AbstractSTRtree<Interval, TItem>.GetSize(AbstractNode<Interval, TItem>) AbstractSTRtree<Interval, TItem>.Depth AbstractSTRtree<Interval, TItem>.GetDepth(AbstractNode<Interval, TItem>) AbstractSTRtree<Interval, TItem>.Insert(Interval, TItem) AbstractSTRtree<Interval, TItem>.Query(Interval) AbstractSTRtree<Interval, TItem>.Query(Interval, IItemVisitor<TItem>) AbstractSTRtree<Interval, TItem>.ItemsTree() AbstractSTRtree<Interval, TItem>.IntersectsOp AbstractSTRtree<Interval, TItem>.Remove(Interval, TItem) AbstractSTRtree<Interval, TItem>.BoundablesAtLevel(int) AbstractSTRtree<Interval, TItem>.GetComparer() AbstractSTRtree<Interval, TItem>.ItemBoundables object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Strtree Assembly: NetTopologySuite.dll Syntax public class SIRtree<TItem> : AbstractSTRtree<Interval, TItem> Type Parameters Name Description TItem Constructors | Edit this page View Source SIRtree() Constructs an SIRtree with the default (10) node capacity. Declaration public SIRtree() | Edit this page View Source SIRtree(int) Constructs an SIRtree with the given maximum number of child nodes that a node may have. Declaration public SIRtree(int nodeCapacity) Parameters Type Name Description int nodeCapacity Properties | Edit this page View Source IntersectsOp Declaration protected override AbstractSTRtree<Interval, TItem>.IIntersectsOp IntersectsOp { get; } Property Value Type Description AbstractSTRtree<Interval, TItem>.IIntersectsOp Overrides AbstractSTRtree<Interval, TItem>.IntersectsOp Methods | Edit this page View Source CreateNode(int) Declaration protected override AbstractNode<Interval, TItem> CreateNode(int level) Parameters Type Name Description int level Returns Type Description AbstractNode<Interval, TItem> Overrides AbstractSTRtree<Interval, TItem>.CreateNode(int) | Edit this page View Source GetComparer() Declaration protected override IComparer<IBoundable<Interval, TItem>> GetComparer() Returns Type Description IComparer<IBoundable<Interval, TItem>> Overrides AbstractSTRtree<Interval, TItem>.GetComparer() | Edit this page View Source Insert(double, double, TItem) Inserts an item having the given bounds into the tree. Declaration public void Insert(double x1, double x2, TItem item) Parameters Type Name Description double x1 double x2 TItem item | Edit this page View Source Query(double) Returns items whose bounds intersect the given value. Declaration public IList<TItem> Query(double x) Parameters Type Name Description double x Returns Type Description IList<TItem> | Edit this page View Source Query(double, double) Returns items whose bounds intersect the given bounds. Declaration public IList<TItem> Query(double x1, double x2) Parameters Type Name Description double x1 Possibly equal to x2. double x2 Possibly equal to x1. Returns Type Description IList<TItem>"
  },
  "api/NetTopologySuite.Index.Strtree.STRtree-1.html": {
    "href": "api/NetTopologySuite.Index.Strtree.STRtree-1.html",
    "title": "Class STRtree<TItem> | NetTopologySuite",
    "summary": "Class STRtree<TItem> A query-only R-tree created using the Sort-Tile-Recursive (STR) algorithm. For two-dimensional spatial data. The STR packed R-tree is simple to implement and maximizes space utilization; that is, as many leaves as possible are filled to capacity. Overlap between nodes is far less than in a basic R-tree. However, the index is semi-static; once the tree has been built (which happens automatically upon the first query), items may not be added. Items may be removed from the tree using Remove(Envelope, TItem). Described in: P. Rigaux, Michel Scholl and Agnes Voisard. Spatial Databases With Application To GIS. Morgan Kaufmann, San Francisco, 2002. Note that inserting items into a tree is not thread-safe. Inserting performed on more than one thread must be synchronized externally. Querying a tree is thread-safe. The building phase is done synchronously, and querying is stateless. Inheritance object AbstractSTRtree<Envelope, TItem> STRtree<TItem> Implements ISpatialIndex<TItem> Inherited Members AbstractSTRtree<Envelope, TItem>.Build() AbstractSTRtree<Envelope, TItem>.CreateNode(int) AbstractSTRtree<Envelope, TItem>.CreateParentBoundables(IList<IBoundable<Envelope, TItem>>, int) AbstractSTRtree<Envelope, TItem>.LastNode(IList<IBoundable<Envelope, TItem>>) AbstractSTRtree<Envelope, TItem>.CompareDoubles(double, double) AbstractSTRtree<Envelope, TItem>.Root AbstractSTRtree<Envelope, TItem>.NodeCapacity AbstractSTRtree<Envelope, TItem>.IsEmpty AbstractSTRtree<Envelope, TItem>.Count AbstractSTRtree<Envelope, TItem>.GetSize(AbstractNode<Envelope, TItem>) AbstractSTRtree<Envelope, TItem>.Depth AbstractSTRtree<Envelope, TItem>.GetDepth(AbstractNode<Envelope, TItem>) AbstractSTRtree<Envelope, TItem>.Insert(Envelope, TItem) AbstractSTRtree<Envelope, TItem>.Query(Envelope) AbstractSTRtree<Envelope, TItem>.Query(Envelope, IItemVisitor<TItem>) AbstractSTRtree<Envelope, TItem>.ItemsTree() AbstractSTRtree<Envelope, TItem>.IntersectsOp AbstractSTRtree<Envelope, TItem>.Remove(Envelope, TItem) AbstractSTRtree<Envelope, TItem>.BoundablesAtLevel(int) AbstractSTRtree<Envelope, TItem>.GetComparer() AbstractSTRtree<Envelope, TItem>.ItemBoundables object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Strtree Assembly: NetTopologySuite.dll Syntax [Serializable] public class STRtree<TItem> : AbstractSTRtree<Envelope, TItem>, ISpatialIndex<TItem> Type Parameters Name Description TItem Constructors | Edit this page View Source STRtree() Constructs an STRtree with the default (10) node capacity. Declaration public STRtree() | Edit this page View Source STRtree(int) Constructs an STRtree with the given maximum number of child nodes that a node may have. Declaration public STRtree(int nodeCapacity) Parameters Type Name Description int nodeCapacity Remarks The minimum recommended capacity setting is 4. | Edit this page View Source STRtree(int, AbstractNode<Envelope, TItem>) Constructs an AbstractSTRtree with the specified maximum number of child nodes that a node may have, and the root node Declaration public STRtree(int nodeCapacity, AbstractNode<Envelope, TItem> root) Parameters Type Name Description int nodeCapacity The maximum number of child nodes in a node AbstractNode<Envelope, TItem> root The root node that links to all other nodes in the tree | Edit this page View Source STRtree(int, IList<IBoundable<Envelope, TItem>>) Constructs an AbstractSTRtree with the specified maximum number of child nodes that a node may have, and all leaf nodes in the tree Declaration public STRtree(int nodeCapacity, IList<IBoundable<Envelope, TItem>> itemBoundables) Parameters Type Name Description int nodeCapacity The maximum number of child nodes in a node IList<IBoundable<Envelope, TItem>> itemBoundables The list of leaf nodes in the tree Properties | Edit this page View Source IntersectsOp Declaration protected override AbstractSTRtree<Envelope, TItem>.IIntersectsOp IntersectsOp { get; } Property Value Type Description AbstractSTRtree<Envelope, TItem>.IIntersectsOp Overrides AbstractSTRtree<Envelope, TItem>.IntersectsOp Methods | Edit this page View Source CreateNode(int) Declaration protected override AbstractNode<Envelope, TItem> CreateNode(int level) Parameters Type Name Description int level Returns Type Description AbstractNode<Envelope, TItem> Overrides AbstractSTRtree<Envelope, TItem>.CreateNode(int) | Edit this page View Source CreateParentBoundables(IList<IBoundable<Envelope, TItem>>, int) Creates the parent level for the given child level. First, orders the items by the x-values of the midpoints, and groups them into vertical slices. For each slice, orders the items by the y-values of the midpoints, and group them into runs of size M (the node capacity). For each run, creates a new (parent) node. Declaration protected override IList<IBoundable<Envelope, TItem>> CreateParentBoundables(IList<IBoundable<Envelope, TItem>> childBoundables, int newLevel) Parameters Type Name Description IList<IBoundable<Envelope, TItem>> childBoundables int newLevel Returns Type Description IList<IBoundable<Envelope, TItem>> Overrides AbstractSTRtree<Envelope, TItem>.CreateParentBoundables(IList<IBoundable<Envelope, TItem>>, int) | Edit this page View Source CreateParentBoundablesFromVerticalSlice(IList<IBoundable<Envelope, TItem>>, int) Declaration protected IList<IBoundable<Envelope, TItem>> CreateParentBoundablesFromVerticalSlice(IList<IBoundable<Envelope, TItem>> childBoundables, int newLevel) Parameters Type Name Description IList<IBoundable<Envelope, TItem>> childBoundables int newLevel Returns Type Description IList<IBoundable<Envelope, TItem>> | Edit this page View Source GetComparer() Declaration protected override IComparer<IBoundable<Envelope, TItem>> GetComparer() Returns Type Description IComparer<IBoundable<Envelope, TItem>> Overrides AbstractSTRtree<Envelope, TItem>.GetComparer() | Edit this page View Source Insert(Envelope, TItem) Inserts an item having the given bounds into the tree. Declaration public void Insert(Envelope itemEnv, TItem item) Parameters Type Name Description Envelope itemEnv TItem item | Edit this page View Source IsWithinDistance(STRtree<TItem>, IItemDistance<Envelope, TItem>, double) Tests whether some two items from this tree and another tree lie within a given distance. IItemDistance<T, TItem> is used as the distance metric. A Branch-and-Bound tree traversal algorithm is used to provide an efficient search. Declaration public bool IsWithinDistance(STRtree<TItem> tree, IItemDistance<Envelope, TItem> itemDist, double maxDistance) Parameters Type Name Description STRtree<TItem> tree Another tree IItemDistance<Envelope, TItem> itemDist A distance metric applicable to the items in the trees double maxDistance The distance limit for the search Returns Type Description bool true if there are items within the distance | Edit this page View Source NearestNeighbour(Envelope, TItem, IItemDistance<Envelope, TItem>) Finds the item in this tree which is nearest to the given item, using IItemDistance<T, TItem> as the distance metric. A Branch-and-Bound tree traversal algorithm is used to provide an efficient search. The query item does not have to be contained in the tree, but it does have to be compatible with the itemDist distance metric. Declaration public TItem NearestNeighbour(Envelope env, TItem item, IItemDistance<Envelope, TItem> itemDist) Parameters Type Name Description Envelope env The envelope of the query item TItem item The item to find the nearest neighbour of IItemDistance<Envelope, TItem> itemDist A distance metric applicable to the items in this tree and the query item Returns Type Description TItem The nearest item in this tree or null if the tree is empty | Edit this page View Source NearestNeighbour(Envelope, TItem, IItemDistance<Envelope, TItem>, int) Finds up to k items in this tree which are the top k nearest neighbors to the given item, using itemDist as the distance metric. A Branch-and-Bound tree traversal algorithm is used to provide an efficient search. This method implements the KNN algorithm described in the following paper: Roussopoulos, Nick, Stephen Kelley, and Fr�d�ric Vincent. \"Nearest neighbor queries.\" ACM sigmod record. Vol. 24. No. 2. ACM, 1995. The query item does not have to be contained in the tree, but it does have to be compatible with the itemDist distance metric. If the tree size is smaller than k fewer items will be returned. If the tree is empty an array of size 0 is returned. Declaration public TItem[] NearestNeighbour(Envelope env, TItem item, IItemDistance<Envelope, TItem> itemDist, int k) Parameters Type Name Description Envelope env The envelope of the query item TItem item The item to find the nearest neighbours of IItemDistance<Envelope, TItem> itemDist A distance metric applicable to the items in this tree and the query item int k The maximum number of nearest items to search for Returns Type Description TItem[] An array of the nearest items found (with length between 0 and k) | Edit this page View Source NearestNeighbour(IItemDistance<Envelope, TItem>) Finds the two nearest items in the tree, using IItemDistance<T, TItem> as the distance metric. A Branch-and-Bound tree traversal algorithm is used to provide an efficient search. If the tree is empty, the return value is null. If the tree contains only one item, the return value is a pair containing that item. If it is required to find only pairs of distinct items, the IItemDistance<T, TItem> function must be anti-reflexive. Declaration public TItem[] NearestNeighbour(IItemDistance<Envelope, TItem> itemDist) Parameters Type Name Description IItemDistance<Envelope, TItem> itemDist A distance metric applicable to the items in this tree Returns Type Description TItem[] The pair of the nearest items or null if the tree is empty | Edit this page View Source NearestNeighbour(STRtree<TItem>, IItemDistance<Envelope, TItem>) Finds the two nearest items from this tree and another tree, using IItemDistance<T, TItem> as the distance metric. A Branch-and-Bound tree traversal algorithm is used to provide an efficient search. The result value is a pair of items, the first from this tree and the second from the argument tree. Declaration public TItem[] NearestNeighbour(STRtree<TItem> tree, IItemDistance<Envelope, TItem> itemDist) Parameters Type Name Description STRtree<TItem> tree Another tree IItemDistance<Envelope, TItem> itemDist A distance metric applicable to the items in the trees Returns Type Description TItem[] The pair of the nearest items, one from each tree or null if no pair of distinct items can be found. | Edit this page View Source Query(Envelope) Returns items whose bounds intersect the given envelope. Declaration public IList<TItem> Query(Envelope searchEnv) Parameters Type Name Description Envelope searchEnv Returns Type Description IList<TItem> | Edit this page View Source Query(Envelope, IItemVisitor<TItem>) Returns items whose bounds intersect the given envelope. Declaration public void Query(Envelope searchEnv, IItemVisitor<TItem> visitor) Parameters Type Name Description Envelope searchEnv IItemVisitor<TItem> visitor | Edit this page View Source Remove(Envelope, TItem) Removes a single item from the tree. Declaration public bool Remove(Envelope itemEnv, TItem item) Parameters Type Name Description Envelope itemEnv The Envelope of the item to remove. TItem item The item to remove. Returns Type Description bool true if the item was found. | Edit this page View Source VerticalSlices(IList<IBoundable<Envelope, TItem>>, int) Declaration protected IList<IBoundable<Envelope, TItem>>[] VerticalSlices(IList<IBoundable<Envelope, TItem>> childBoundables, int sliceCount) Parameters Type Name Description IList<IBoundable<Envelope, TItem>> childBoundables Must be sorted by the x-value of the envelope midpoints. int sliceCount Returns Type Description IList<IBoundable<Envelope, TItem>>[] Implements ISpatialIndex<T>"
  },
  "api/NetTopologySuite.Index.Strtree.html": {
    "href": "api/NetTopologySuite.Index.Strtree.html",
    "title": "Namespace NetTopologySuite.Index.Strtree | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Index.Strtree Contains 2-D and 1-D versions of the Sort-Tile-Recursive (STR) tree, a query-only R-tree. Classes AbstractNode<T, TItem> A node of an AbstractSTRtree<T, TItem>. A node is one of: empty an interior node containing child AbstractNode<T, TItem>s a leaf node containing data items (ItemBoundable<T, TItem>s). A node stores the bounds of its children, and its level within the index tree. AbstractSTRtree<T, TItem> Base class for STRtree and SIRtree. STR-packed R-trees are described in: P. Rigaux, Michel Scholl and Agnes Voisard. Spatial Databases With Application To GIS. Morgan Kaufmann, San Francisco, 2002. This implementation is based on IBoundable<T, TItem>s rather than just AbstractNode<T, TItem>s, because the STR algorithm operates on both nodes and data, both of which are treated as IBoundable<T, TItem>s. EnvelopeDistance Utility functions for working with Envelopes. GeometryItemDistance An IItemDistance<T, TItem> function for items which are Geometry using the Distance(Geometry) method. To make this distance function suitable for using to query a single index tree, the distance metric is anti-reflexive. That is, if the two arguments are the same Geometry object, the distance returned is MaxValue. Interval A contiguous portion of 1D-space. Used internally by SIRtree. ItemBoundable<T, TItem> Boundable wrapper for a non-Boundable spatial object. Used internally by AbstractSTRtree. SIRtree<TItem> One-dimensional version of an STR-packed R-tree. SIR stands for \"Sort-Interval-Recursive\". STR-packed R-trees are described in: P. Rigaux, Michel Scholl and Agnes Voisard. Spatial Databases With Application To GIS. Morgan Kaufmann, San Francisco, 2002. STRtree<TItem> A query-only R-tree created using the Sort-Tile-Recursive (STR) algorithm. For two-dimensional spatial data. The STR packed R-tree is simple to implement and maximizes space utilization; that is, as many leaves as possible are filled to capacity. Overlap between nodes is far less than in a basic R-tree. However, the index is semi-static; once the tree has been built (which happens automatically upon the first query), items may not be added. Items may be removed from the tree using Remove(Envelope, TItem). Described in: P. Rigaux, Michel Scholl and Agnes Voisard. Spatial Databases With Application To GIS. Morgan Kaufmann, San Francisco, 2002. Note that inserting items into a tree is not thread-safe. Inserting performed on more than one thread must be synchronized externally. Querying a tree is thread-safe. The building phase is done synchronously, and querying is stateless. Interfaces AbstractSTRtree<T, TItem>.IIntersectsOp IItemDistance<T, TItem> A function method which computes the distance between two IBoundable<T, TItem>s in an STRtree<TItem>. Used for Nearest Neighbour searches. To make a distance function suitable for querying a single index tree via NearestNeighbour(IItemDistance<Envelope, TItem>), the function should have a non-zero reflexive distance. That is, if the two arguments are the same object, the distance returned should be non-zero. If it is required that only pairs of distinct items be returned, the distance function must be anti-reflexive, and must return MaxValue for identical arguments."
  },
  "api/NetTopologySuite.Index.Sweepline.ISweepLineOverlapAction.html": {
    "href": "api/NetTopologySuite.Index.Sweepline.ISweepLineOverlapAction.html",
    "title": "Interface ISweepLineOverlapAction | NetTopologySuite",
    "summary": "Interface ISweepLineOverlapAction Namespace: NetTopologySuite.Index.Sweepline Assembly: NetTopologySuite.dll Syntax public interface ISweepLineOverlapAction Methods | Edit this page View Source Overlap(SweepLineInterval, SweepLineInterval) Declaration void Overlap(SweepLineInterval s0, SweepLineInterval s1) Parameters Type Name Description SweepLineInterval s0 SweepLineInterval s1"
  },
  "api/NetTopologySuite.Index.Sweepline.SweepLineEvent.html": {
    "href": "api/NetTopologySuite.Index.Sweepline.SweepLineEvent.html",
    "title": "Class SweepLineEvent | NetTopologySuite",
    "summary": "Class SweepLineEvent Inheritance object SweepLineEvent Implements IComparable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Sweepline Assembly: NetTopologySuite.dll Syntax public class SweepLineEvent : IComparable Constructors | Edit this page View Source SweepLineEvent(double, SweepLineEvent, SweepLineInterval) Declaration public SweepLineEvent(double x, SweepLineEvent insertEvent, SweepLineInterval sweepInt) Parameters Type Name Description double x SweepLineEvent insertEvent SweepLineInterval sweepInt Properties | Edit this page View Source DeleteEventIndex Declaration public int DeleteEventIndex { get; set; } Property Value Type Description int | Edit this page View Source InsertEvent Declaration public SweepLineEvent InsertEvent { get; } Property Value Type Description SweepLineEvent | Edit this page View Source Interval Declaration public SweepLineInterval Interval { get; } Property Value Type Description SweepLineInterval | Edit this page View Source IsDelete Declaration public bool IsDelete { get; } Property Value Type Description bool | Edit this page View Source IsInsert Declaration public bool IsInsert { get; } Property Value Type Description bool Methods | Edit this page View Source CompareTo(object) ProjectionEvents are ordered first by their x-value, and then by their eventType. It is important that Insert events are sorted before Delete events, so that items whose Insert and Delete events occur at the same x-value will be correctly handled. Declaration public int CompareTo(object o) Parameters Type Name Description object o Returns Type Description int Implements IComparable"
  },
  "api/NetTopologySuite.Index.Sweepline.SweepLineEvents.html": {
    "href": "api/NetTopologySuite.Index.Sweepline.SweepLineEvents.html",
    "title": "Enum SweepLineEvents | NetTopologySuite",
    "summary": "Enum SweepLineEvents Namespace: NetTopologySuite.Index.Sweepline Assembly: NetTopologySuite.dll Syntax public enum SweepLineEvents Fields Name Description Delete Insert"
  },
  "api/NetTopologySuite.Index.Sweepline.SweepLineIndex.html": {
    "href": "api/NetTopologySuite.Index.Sweepline.SweepLineIndex.html",
    "title": "Class SweepLineIndex | NetTopologySuite",
    "summary": "Class SweepLineIndex A sweepline implements a sorted index on a set of intervals. It is used to compute all overlaps between the interval in the index. Inheritance object SweepLineIndex Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Sweepline Assembly: NetTopologySuite.dll Syntax public class SweepLineIndex Methods | Edit this page View Source Add(SweepLineInterval) Declaration public void Add(SweepLineInterval sweepInt) Parameters Type Name Description SweepLineInterval sweepInt | Edit this page View Source ComputeOverlaps(ISweepLineOverlapAction) Declaration public void ComputeOverlaps(ISweepLineOverlapAction action) Parameters Type Name Description ISweepLineOverlapAction action"
  },
  "api/NetTopologySuite.Index.Sweepline.SweepLineInterval.html": {
    "href": "api/NetTopologySuite.Index.Sweepline.SweepLineInterval.html",
    "title": "Class SweepLineInterval | NetTopologySuite",
    "summary": "Class SweepLineInterval Inheritance object SweepLineInterval Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index.Sweepline Assembly: NetTopologySuite.dll Syntax public class SweepLineInterval Constructors | Edit this page View Source SweepLineInterval(double, double) Declaration public SweepLineInterval(double min, double max) Parameters Type Name Description double min double max | Edit this page View Source SweepLineInterval(double, double, object) Declaration public SweepLineInterval(double min, double max, object item) Parameters Type Name Description double min double max object item Properties | Edit this page View Source Item Declaration public object Item { get; } Property Value Type Description object | Edit this page View Source Max Declaration public double Max { get; } Property Value Type Description double | Edit this page View Source Min Declaration public double Min { get; } Property Value Type Description double"
  },
  "api/NetTopologySuite.Index.Sweepline.html": {
    "href": "api/NetTopologySuite.Index.Sweepline.html",
    "title": "Namespace NetTopologySuite.Index.Sweepline | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Index.Sweepline Contains classes which implement a sweepline algorithm for scanning geometric data structures. Classes SweepLineEvent SweepLineIndex A sweepline implements a sorted index on a set of intervals. It is used to compute all overlaps between the interval in the index. SweepLineInterval Interfaces ISweepLineOverlapAction Enums SweepLineEvents"
  },
  "api/NetTopologySuite.Index.VertexSequencePackedRtree.html": {
    "href": "api/NetTopologySuite.Index.VertexSequencePackedRtree.html",
    "title": "Class VertexSequencePackedRtree | NetTopologySuite",
    "summary": "Class VertexSequencePackedRtree A semi-static spatial index for points which occur in a spatially-coherent sequence. In particular, this is suitable for indexing the vertices of a {@link LineString} or {@link Polygon} ring. The index is constructed in a batch fashion on a given sequence of coordinates. Coordinates can be removed via the {@link #remove(int)} method. Note that this index queries only the individual points of the input coordinate sequence, not any line segments which might be lie between them. The input coordinate array is read-only, and is not changed when vertices are removed. Inheritance object VertexSequencePackedRtree Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Index Assembly: NetTopologySuite.dll Syntax public class VertexSequencePackedRtree Constructors | Edit this page View Source VertexSequencePackedRtree(Coordinate[]) Creates a new tree over the given sequence of coordinates. The sequence should be spatially coherent to provide query performance. Declaration public VertexSequencePackedRtree(Coordinate[] pts) Parameters Type Name Description Coordinate[] pts A sequence of points Methods | Edit this page View Source GetBounds() Declaration public Envelope[] GetBounds() Returns Type Description Envelope[] | Edit this page View Source Query(Envelope) Queries the index to find all items which intersect an extent. The query result is a list of the indices of input coordinates which intersect the extent. Declaration public int[] Query(Envelope queryEnv) Parameters Type Name Description Envelope queryEnv The query extent Returns Type Description int[] An array of the indices of the input coordinates | Edit this page View Source RemoveAt(int) Removes the input item at the given index from the spatial index. Declaration public void RemoveAt(int index) Parameters Type Name Description int index Index the index of the item in the input Remarks This does not change the underlying coordinate array."
  },
  "api/NetTopologySuite.Index.html": {
    "href": "api/NetTopologySuite.Index.html",
    "title": "Namespace NetTopologySuite.Index | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Index Provides classes for various kinds of spatial indexes. Classes ArrayListVisitor Builds an array of all visited items. ArrayListVisitor<T> Builds an array of all visited items. VertexSequencePackedRtree A semi-static spatial index for points which occur in a spatially-coherent sequence. In particular, this is suitable for indexing the vertices of a {@link LineString} or {@link Polygon} ring. The index is constructed in a batch fashion on a given sequence of coordinates. Coordinates can be removed via the {@link #remove(int)} method. Note that this index queries only the individual points of the input coordinate sequence, not any line segments which might be lie between them. The input coordinate array is read-only, and is not changed when vertices are removed. Interfaces IIndexVisitor A visitor for nodes and items in an index. IItemVisitor<T> A visitor for items in a ISpatialIndex<T>. ILimitingItemVisitor<T> A visitor for items in a ISpatialIndex<T> Not used, commited by accident! ISpatialIndexEx<T> ISpatialIndex<T> The basic insertion and query operations supported by classes implementing spatial index algorithms. A spatial index typically provides a primary filter for range rectangle queries. A secondary filter is required to test for exact intersection. Of course, this secondary filter may consist of other tests besides intersection, such as testing other kinds of spatial relationships."
  },
  "api/NetTopologySuite.LinearReferencing.ExtractLineByLocation.html": {
    "href": "api/NetTopologySuite.LinearReferencing.ExtractLineByLocation.html",
    "title": "Class ExtractLineByLocation | NetTopologySuite",
    "summary": "Class ExtractLineByLocation Extracts the subline of a linear Geometry between two LinearLocations on the line. Inheritance object ExtractLineByLocation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.LinearReferencing Assembly: NetTopologySuite.dll Syntax public class ExtractLineByLocation Constructors | Edit this page View Source ExtractLineByLocation(Geometry) Initializes a new instance of the ExtractLineByLocation class. Declaration public ExtractLineByLocation(Geometry line) Parameters Type Name Description Geometry line Methods | Edit this page View Source Extract(Geometry, LinearLocation, LinearLocation) Computes the subline of a LineString between two LinearLocations on the line. If the start location is after the end location, the computed linear geometry has reverse orientation to the input line. Declaration public static Geometry Extract(Geometry line, LinearLocation start, LinearLocation end) Parameters Type Name Description Geometry line The line to use as the baseline. LinearLocation start The start location. LinearLocation end The end location. Returns Type Description Geometry The extracted subline. | Edit this page View Source Extract(LinearLocation, LinearLocation) Extracts a subline of the input. If end is minor that start, the linear geometry computed will be reversed. Declaration public Geometry Extract(LinearLocation start, LinearLocation end) Parameters Type Name Description LinearLocation start The start location. LinearLocation end The end location. Returns Type Description Geometry A linear geometry."
  },
  "api/NetTopologySuite.LinearReferencing.LengthIndexOfPoint.html": {
    "href": "api/NetTopologySuite.LinearReferencing.LengthIndexOfPoint.html",
    "title": "Class LengthIndexOfPoint | NetTopologySuite",
    "summary": "Class LengthIndexOfPoint Inheritance object LengthIndexOfPoint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.LinearReferencing Assembly: NetTopologySuite.dll Syntax public class LengthIndexOfPoint Constructors | Edit this page View Source LengthIndexOfPoint(Geometry) Initializes a new instance of the LengthIndexOfPoint class. Declaration public LengthIndexOfPoint(Geometry linearGeom) Parameters Type Name Description Geometry linearGeom A linear geometry. Methods | Edit this page View Source IndexOf(Coordinate) Find the nearest location along a linear Geometry to a given point. Declaration public double IndexOf(Coordinate inputPt) Parameters Type Name Description Coordinate inputPt The coordinate to locate. Returns Type Description double The location of the nearest point. | Edit this page View Source IndexOf(Geometry, Coordinate) Declaration public static double IndexOf(Geometry linearGeom, Coordinate inputPt) Parameters Type Name Description Geometry linearGeom Coordinate inputPt Returns Type Description double | Edit this page View Source IndexOfAfter(Coordinate, double) Finds the nearest index along the linear Geometry to a given Coordinate after the specified minimum index. If possible the location returned will be strictly greater than the minIndex. If this is not possible, the value returned will equal minIndex. (An example where this is not possible is when minIndex = [end of line] ). Declaration public double IndexOfAfter(Coordinate inputPt, double minIndex) Parameters Type Name Description Coordinate inputPt The coordinate to locate. double minIndex The minimum location for the point location. Returns Type Description double The location of the nearest point. | Edit this page View Source IndexOfAfter(Geometry, Coordinate, double) Declaration public static double IndexOfAfter(Geometry linearGeom, Coordinate inputPt, double minIndex) Parameters Type Name Description Geometry linearGeom Coordinate inputPt double minIndex Returns Type Description double"
  },
  "api/NetTopologySuite.LinearReferencing.LengthIndexedLine.html": {
    "href": "api/NetTopologySuite.LinearReferencing.LengthIndexedLine.html",
    "title": "Class LengthIndexedLine | NetTopologySuite",
    "summary": "Class LengthIndexedLine Supports linear referencing along a linear Geometry using the length along the line as the index. Negative length values are taken as measured in the reverse direction from the end of the geometry. Out-of-range index values are handled by clamping them to the valid range of values. Non-simple lines (i.e. which loop back to cross or touch themselves) are supported. Inheritance object LengthIndexedLine Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.LinearReferencing Assembly: NetTopologySuite.dll Syntax public class LengthIndexedLine Constructors | Edit this page View Source LengthIndexedLine(Geometry) Constructs an object which allows a linear Geometry to be linearly referenced using length as an index. Declaration public LengthIndexedLine(Geometry linearGeom) Parameters Type Name Description Geometry linearGeom The linear geometry to reference along. Properties | Edit this page View Source EndIndex Returns the index of the end of the line. Declaration public double EndIndex { get; } Property Value Type Description double | Edit this page View Source StartIndex Returns the index of the start of the line. Declaration public double StartIndex { get; } Property Value Type Description double Methods | Edit this page View Source ClampIndex(double) Computes a valid index for this line by clamping the given index to the valid range of index values Declaration public double ClampIndex(double index) Parameters Type Name Description double index Returns Type Description double A valid index value | Edit this page View Source ExtractLine(double, double) Computes the LineString for the interval on the line between the given indices. If the endIndex lies before the startIndex, the computed geometry is reversed. Declaration public Geometry ExtractLine(double startIndex, double endIndex) Parameters Type Name Description double startIndex double endIndex Returns Type Description Geometry | Edit this page View Source ExtractPoint(double) Computes the Coordinate for the point on the line at the given index. If the index is out of range the first or last point on the line will be returned. Declaration public Coordinate ExtractPoint(double index) Parameters Type Name Description double index The index of the desired point. Returns Type Description Coordinate The Coordinate at the given index. Remarks The Z-ordinate of the computed point will be interpolated from the Z-ordinates of the line segment containing it, if they exist. | Edit this page View Source ExtractPoint(double, double) Computes the Coordinate for the point on the line at the given index, offset by the given distance. Declaration public Coordinate ExtractPoint(double index, double offsetDistance) Parameters Type Name Description double index The index of the desired point double offsetDistance The distance the point is offset from the segment (positive is to the left, negative is to the right) Returns Type Description Coordinate The Coordinate at the given index Remarks If the index is out of range the first or last point on the line will be returned. The computed point is offset to the left of the line if the offset distance is positive, to the right if negative. The Z-ordinate of the computed point will be interpolated from the Z-ordinates of the line segment containing it, if they exist. | Edit this page View Source IndexOf(Coordinate) Computes the minimum index for a point on the line. If the line is not simple (i.e. loops back on itself) a single point may have more than one possible index. In this case, the smallest index is returned. The supplied point does not necessarily have to lie precisely on the line, but if it is far from the line the accuracy and performance of this function is not guaranteed. Use Project(Coordinate) to compute a guaranteed result for points which may be far from the line. Declaration public double IndexOf(Coordinate pt) Parameters Type Name Description Coordinate pt A point on the line. Returns Type Description double The minimum index of the point. See Also Project(Coordinate) | Edit this page View Source IndexOfAfter(Coordinate, double) Finds the index for a point on the line which is greater than the given index. If no such index exists, returns minIndex. This method can be used to determine all indexes for a point which occurs more than once on a non-simple line. It can also be used to disambiguate cases where the given point lies slightly off the line and is equidistant from two different points on the line. The supplied point does not necessarily have to lie precisely on the line, but if it is far from the line the accuracy and performance of this function is not guaranteed. Use Project(Coordinate) to compute a guaranteed result for points which may be far from the line. Declaration public double IndexOfAfter(Coordinate pt, double minIndex) Parameters Type Name Description Coordinate pt A point on the line. double minIndex The value the returned index must be greater than. Returns Type Description double The index of the point greater than the given minimum index. See Also Project(Coordinate) | Edit this page View Source IndicesOf(Geometry) Computes the indices for a subline of the line. (The subline must conform to the line; that is, all vertices in the subline (except possibly the first and last) must be vertices of the line and occur in the same order). Declaration public double[] IndicesOf(Geometry subLine) Parameters Type Name Description Geometry subLine A subLine of the line. Returns Type Description double[] A pair of indices for the start and end of the subline.. | Edit this page View Source IsValidIndex(double) Tests whether an index is in the valid index range for the line. Declaration public bool IsValidIndex(double index) Parameters Type Name Description double index The index to test. Returns Type Description bool true if the index is in the valid range. | Edit this page View Source Project(Coordinate) Computes the index for the closest point on the line to the given point. If more than one point has the closest distance the first one along the line is returned. (The point does not necessarily have to lie precisely on the line.) Declaration public double Project(Coordinate pt) Parameters Type Name Description Coordinate pt Returns Type Description double"
  },
  "api/NetTopologySuite.LinearReferencing.LengthLocationMap.html": {
    "href": "api/NetTopologySuite.LinearReferencing.LengthLocationMap.html",
    "title": "Class LengthLocationMap | NetTopologySuite",
    "summary": "Class LengthLocationMap Computes the LinearLocation for a given length along a linear Geometry Negative lengths are measured in reverse from end of the linear geometry. Out-of-range values are clamped. Inheritance object LengthLocationMap Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.LinearReferencing Assembly: NetTopologySuite.dll Syntax public class LengthLocationMap Constructors | Edit this page View Source LengthLocationMap(Geometry) Initializes a new instance of the LengthLocationMap class. Declaration public LengthLocationMap(Geometry linearGeom) Parameters Type Name Description Geometry linearGeom A linear geometry. Methods | Edit this page View Source GetLength(Geometry, LinearLocation) Computes the length for a given LinearLocation on a linear Geometry. Declaration public static double GetLength(Geometry linearGeom, LinearLocation loc) Parameters Type Name Description Geometry linearGeom The linear geometry to use. LinearLocation loc The LinearLocation index of the location. Returns Type Description double The length for the LinearLocation. | Edit this page View Source GetLength(LinearLocation) Declaration public double GetLength(LinearLocation loc) Parameters Type Name Description LinearLocation loc Returns Type Description double | Edit this page View Source GetLocation(Geometry, double) Computes the LinearLocation for a given length along a linear Geometry. Declaration public static LinearLocation GetLocation(Geometry linearGeom, double length) Parameters Type Name Description Geometry linearGeom The linear geometry to use. double length The length index of the location. Returns Type Description LinearLocation The LinearLocation for the length. | Edit this page View Source GetLocation(Geometry, double, bool) Computes the LinearLocation for a given length along a linear Geometry, with control over how the location is resolved at component endpoints. Declaration public static LinearLocation GetLocation(Geometry linearGeom, double length, bool resolveLower) Parameters Type Name Description Geometry linearGeom The linear geometry to use double length The length index of the location bool resolveLower If true lengths are resolved to the lowest possible index Returns Type Description LinearLocation | Edit this page View Source GetLocation(double) Compute the LinearLocation corresponding to a length. Negative lengths are measured in reverse from end of the linear geometry. Out-of-range values are clamped. Ambiguous indexes are resolved to the lowest possible location value. Declaration public LinearLocation GetLocation(double length) Parameters Type Name Description double length The length index. Returns Type Description LinearLocation The corresponding LinearLocation. | Edit this page View Source GetLocation(double, bool) Compute the LinearLocation corresponding to a length. Negative lengths are measured in reverse from end of the linear geometry. Out-of-range values are clamped. Ambiguous indexes are resolved to the lowest or highest possible location value, depending on the value of resolveLower Declaration public LinearLocation GetLocation(double length, bool resolveLower) Parameters Type Name Description double length The length index bool resolveLower Returns Type Description LinearLocation The corresponding LinearLocation."
  },
  "api/NetTopologySuite.LinearReferencing.LinearGeometryBuilder.html": {
    "href": "api/NetTopologySuite.LinearReferencing.LinearGeometryBuilder.html",
    "title": "Class LinearGeometryBuilder | NetTopologySuite",
    "summary": "Class LinearGeometryBuilder Builds a linear geometry (LineString or MultiLineString) incrementally (point-by-point). Inheritance object LinearGeometryBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.LinearReferencing Assembly: NetTopologySuite.dll Syntax public class LinearGeometryBuilder Constructors | Edit this page View Source LinearGeometryBuilder(GeometryFactory) Creates an instance of this class. Declaration public LinearGeometryBuilder(GeometryFactory geomFact) Parameters Type Name Description GeometryFactory geomFact The geometry factory to use. Properties | Edit this page View Source FixInvalidLines Allows invalid lines to be fixed rather than causing Exceptions. An invalid line is one which has only one unique point. Declaration public bool FixInvalidLines { get; set; } Property Value Type Description bool | Edit this page View Source IgnoreInvalidLines Allows invalid lines to be ignored rather than causing Exceptions. An invalid line is one which has only one unique point. Declaration public bool IgnoreInvalidLines { get; set; } Property Value Type Description bool | Edit this page View Source LastCoordinate Declaration public Coordinate LastCoordinate { get; } Property Value Type Description Coordinate Methods | Edit this page View Source Add(Coordinate) Adds a point to the current line. Declaration public void Add(Coordinate pt) Parameters Type Name Description Coordinate pt The Coordinate to add. | Edit this page View Source Add(Coordinate, bool) Adds a point to the current line. Declaration public void Add(Coordinate pt, bool allowRepeatedPoints) Parameters Type Name Description Coordinate pt The Coordinate to add. bool allowRepeatedPoints If true, allows the insertions of repeated points. | Edit this page View Source EndLine() Terminate the current LineString. Declaration public void EndLine() | Edit this page View Source GetGeometry() Builds and returns the Geometry. Declaration public Geometry GetGeometry() Returns Type Description Geometry"
  },
  "api/NetTopologySuite.LinearReferencing.LinearIterator.html": {
    "href": "api/NetTopologySuite.LinearReferencing.LinearIterator.html",
    "title": "Class LinearIterator | NetTopologySuite",
    "summary": "Class LinearIterator An iterator over the components and coordinates of a linear geometry (LineStrings and MultiLineStrings. Inheritance object LinearIterator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.LinearReferencing Assembly: NetTopologySuite.dll Syntax public class LinearIterator Constructors | Edit this page View Source LinearIterator(Geometry) Creates an iterator initialized to the start of a linear Geometry. Declaration public LinearIterator(Geometry linearGeom) Parameters Type Name Description Geometry linearGeom The linear geometry to iterate over. Exceptions Type Condition ArgumentException if linearGeom is not ILineal | Edit this page View Source LinearIterator(Geometry, LinearLocation) Creates an iterator starting at a LinearLocation on a linear Geometry. Declaration public LinearIterator(Geometry linearGeom, LinearLocation start) Parameters Type Name Description Geometry linearGeom The linear geometry to iterate over. LinearLocation start The location to start at. Exceptions Type Condition ArgumentException if linearGeom is not ILineal | Edit this page View Source LinearIterator(Geometry, int, int) Creates an iterator starting at a component and vertex in a linear Geometry. Declaration public LinearIterator(Geometry linearGeom, int componentIndex, int vertexIndex) Parameters Type Name Description Geometry linearGeom The linear geometry to iterate over. int componentIndex The component to start at. int vertexIndex The vertex to start at. Exceptions Type Condition ArgumentException if linearGeom is not ILineal Properties | Edit this page View Source ComponentIndex The component index of the vertex the iterator is currently at. Declaration public int ComponentIndex { get; } Property Value Type Description int | Edit this page View Source IsEndOfLine Checks whether the iterator cursor is pointing to the endpoint of a component LineString. Declaration public bool IsEndOfLine { get; } Property Value Type Description bool | Edit this page View Source Line Gets the LineString component the iterator is current at. Declaration public LineString Line { get; } Property Value Type Description LineString | Edit this page View Source SegmentEnd Gets the second Coordinate of the current segment (the coordinate of the next vertex). If the iterator is at the end of a line, null is returned. Declaration public Coordinate SegmentEnd { get; } Property Value Type Description Coordinate | Edit this page View Source SegmentStart Gets the first Coordinate of the current segment (the coordinate of the current vertex). Declaration public Coordinate SegmentStart { get; } Property Value Type Description Coordinate | Edit this page View Source VertexIndex The vertex index of the vertex the iterator is currently at. Declaration public int VertexIndex { get; } Property Value Type Description int Methods | Edit this page View Source HasNext() Tests whether there are any vertices left to iterator over. Specifically, HasNext() returns true if the current state of the iterator represents a valid location on the linear geometry. Declaration public bool HasNext() Returns Type Description bool true if there are more vertices to scan. | Edit this page View Source Next() Jump to the next element of the iteration. Declaration public void Next() | Edit this page View Source SegmentEndVertexIndex(LinearLocation) Declaration public static int SegmentEndVertexIndex(LinearLocation loc) Parameters Type Name Description LinearLocation loc Returns Type Description int"
  },
  "api/NetTopologySuite.LinearReferencing.LinearLocation.html": {
    "href": "api/NetTopologySuite.LinearReferencing.LinearLocation.html",
    "title": "Class LinearLocation | NetTopologySuite",
    "summary": "Class LinearLocation Represents a location along a LineString or MultiLineString. The referenced geometry is not maintained within this location, but must be provided for operations which require it. Various methods are provided to manipulate the location value and query the geometry it references. Inheritance object LinearLocation Implements IComparable<LinearLocation> IComparable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.LinearReferencing Assembly: NetTopologySuite.dll Syntax public class LinearLocation : IComparable<LinearLocation>, IComparable Constructors | Edit this page View Source LinearLocation() Initializes a new instance of the LinearLocation class: creates a location referring to the start of a linear geometry. Declaration public LinearLocation() | Edit this page View Source LinearLocation(LinearLocation) Creates a new location equal to a given one. Declaration public LinearLocation(LinearLocation loc) Parameters Type Name Description LinearLocation loc A linear location | Edit this page View Source LinearLocation(int, double) Initializes a new instance of the LinearLocation class: creates a location referring to the start of a linear geometry. Declaration public LinearLocation(int segmentIndex, double segmentFraction) Parameters Type Name Description int segmentIndex Index of the segment. double segmentFraction The segment fraction. | Edit this page View Source LinearLocation(int, int, double) Initializes a new instance of the LinearLocation class: creates a location referring to the start of a linear geometry. Declaration public LinearLocation(int componentIndex, int segmentIndex, double segmentFraction) Parameters Type Name Description int componentIndex Index of the component. int segmentIndex Index of the segment. double segmentFraction The segment fraction. Properties | Edit this page View Source ComponentIndex Gets the component index for this location. Declaration public int ComponentIndex { get; } Property Value Type Description int | Edit this page View Source IsVertex Tests whether this location refers to a vertex: returns true if the location is a vertex. Declaration public bool IsVertex { get; } Property Value Type Description bool | Edit this page View Source SegmentFraction Gets the segment fraction for this location. Declaration public double SegmentFraction { get; } Property Value Type Description double | Edit this page View Source SegmentIndex Gets the segment index for this location. Declaration public int SegmentIndex { get; } Property Value Type Description int Methods | Edit this page View Source Clamp(Geometry) Ensures the indexes are valid for a given linear Geometry. Declaration public void Clamp(Geometry linear) Parameters Type Name Description Geometry linear A linear geometry. | Edit this page View Source CompareLocationValues(int, int, double) Compares this object with the specified index values for order. Declaration public int CompareLocationValues(int componentIndex1, int segmentIndex1, double segmentFraction1) Parameters Type Name Description int componentIndex1 The component index. int segmentIndex1 The segment index. double segmentFraction1 The segment fraction. Returns Type Description int A negative integer, zero, or a positive integer as this LineStringLocation is less than, equal to, or greater than the specified locationValues. | Edit this page View Source CompareLocationValues(int, int, double, int, int, double) Compares two sets of location values for order. Declaration public static int CompareLocationValues(int componentIndex0, int segmentIndex0, double segmentFraction0, int componentIndex1, int segmentIndex1, double segmentFraction1) Parameters Type Name Description int componentIndex0 The first component index. int segmentIndex0 The first segment index. double segmentFraction0 The first segment fraction. int componentIndex1 The second component index. int segmentIndex1 The second segment index. double segmentFraction1 The second segment fraction. Returns Type Description int A negative integer, zero, or a positive integer as the first set of location values is less than, equal to, or greater than the second set of locationValues. | Edit this page View Source CompareTo(LinearLocation) Compares the current instance with another object of the same type. Declaration public int CompareTo(LinearLocation other) Parameters Type Name Description LinearLocation other The LineStringLocation with which this Coordinate is being compared. Returns Type Description int A negative integer, zero, or a positive integer as this LineStringLocation is less than, equal to, or greater than the specified LineStringLocation. | Edit this page View Source CompareTo(object) Compares the current instance with another object of the same type. Declaration public int CompareTo(object obj) Parameters Type Name Description object obj The LineStringLocation with which this Coordinate is being compared. Returns Type Description int A negative integer, zero, or a positive integer as this LineStringLocation is less than, equal to, or greater than the specified LineStringLocation. Exceptions Type Condition ArgumentException obj is not the same type as this instance. | Edit this page View Source Copy() Declaration public LinearLocation Copy() Returns Type Description LinearLocation | Edit this page View Source GetCoordinate(Geometry) Gets the Coordinate along the given linear Geometry which is referenced by this location. Declaration public Coordinate GetCoordinate(Geometry linearGeom) Parameters Type Name Description Geometry linearGeom A linear geometry. Returns Type Description Coordinate The Coordinate at the location. | Edit this page View Source GetEndLocation(Geometry) Gets a location which refers to the end of a linear Geometry. Declaration public static LinearLocation GetEndLocation(Geometry linear) Parameters Type Name Description Geometry linear The linear geometry. Returns Type Description LinearLocation A new LinearLocation. | Edit this page View Source GetSegment(Geometry) Gets a LineSegment representing the segment of the given linear Geometry which contains this location. Declaration public LineSegment GetSegment(Geometry linearGeom) Parameters Type Name Description Geometry linearGeom A linear geometry Returns Type Description LineSegment the LineSegment containing the location | Edit this page View Source GetSegmentLength(Geometry) Gets the length of the segment in the given Geometry containing this location. Declaration public double GetSegmentLength(Geometry linearGeom) Parameters Type Name Description Geometry linearGeom A linear geometry. Returns Type Description double The length of the segment. | Edit this page View Source IsEndpoint(Geometry) Tests whether this location is an endpoint of the linear component it refers to. Declaration public bool IsEndpoint(Geometry linearGeom) Parameters Type Name Description Geometry linearGeom The linear geometry referenced by this location Returns Type Description bool True if the location is a component endpoint | Edit this page View Source IsOnSameSegment(LinearLocation) Tests whether two locations are on the same segment in the parent Geometry. Declaration public bool IsOnSameSegment(LinearLocation loc) Parameters Type Name Description LinearLocation loc A location on the same geometry Returns Type Description bool true if the locations are on the same segment of the parent geometry | Edit this page View Source IsValid(Geometry) Tests whether this location refers to a valid location on the given linear Geometry. Declaration public bool IsValid(Geometry linearGeom) Parameters Type Name Description Geometry linearGeom A linear geometry. Returns Type Description bool true if this location is valid. | Edit this page View Source PointAlongSegmentByFraction(Coordinate, Coordinate, double) Computes the Coordinate of a point a given fraction along the line segment (p0, p1). Declaration public static Coordinate PointAlongSegmentByFraction(Coordinate p0, Coordinate p1, double fraction) Parameters Type Name Description Coordinate p0 The first point of the line segment. Coordinate p1 The last point of the line segment. double fraction The length to the desired point. Returns Type Description Coordinate Remarks If the fraction is greater than 1.0 the last point of the segment is returned. If the fraction is less than or equal to 0.0 the first point of the segment is returned. The Z ordinate is interpolated from the Z-ordinates of the given points, if they are specified. | Edit this page View Source SetToEnd(Geometry) Sets the value of this location to refer to the end of a linear geometry. Declaration public void SetToEnd(Geometry linear) Parameters Type Name Description Geometry linear The linear geometry to use to set the end. | Edit this page View Source SnapToVertex(Geometry, double) Snaps the value of this location to the nearest vertex on the given linear Geometry, if the vertex is closer than minDistance. Declaration public void SnapToVertex(Geometry linearGeom, double minDistance) Parameters Type Name Description Geometry linearGeom A linear geometry. double minDistance The minimum allowable distance to a vertex. | Edit this page View Source ToLowest(Geometry) Converts a linear location to the lowest equivalent location index. The lowest index has the lowest possible component and segment indices. Specifically: if the location point is an endpoint, a location value is returned as (nseg-1, 1.0) if the location point is ambiguous (i.e. an endpoint and a startpoint), the lowest endpoint location is returned If the location index is already the lowest possible value, the original location is returned. Declaration public LinearLocation ToLowest(Geometry linearGeom) Parameters Type Name Description Geometry linearGeom The linear geometry referenced by this location. Returns Type Description LinearLocation The lowest equivalent location. | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Implements IComparable<T> IComparable"
  },
  "api/NetTopologySuite.LinearReferencing.LocationIndexOfLine.html": {
    "href": "api/NetTopologySuite.LinearReferencing.LocationIndexOfLine.html",
    "title": "Class LocationIndexOfLine | NetTopologySuite",
    "summary": "Class LocationIndexOfLine Determines the location of a subline along a linear Geometry. The location is reported as a pair of LinearLocations. NOTE: Currently this algorithm is not guaranteed to return the correct substring in some situations where an endpoint of the test line occurs more than once in the input line. (However, the common case of a ring is always handled correctly). Inheritance object LocationIndexOfLine Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.LinearReferencing Assembly: NetTopologySuite.dll Syntax public class LocationIndexOfLine Constructors | Edit this page View Source LocationIndexOfLine(Geometry) Initializes a new instance of the LocationIndexOfLine class. Declaration public LocationIndexOfLine(Geometry linearGeom) Parameters Type Name Description Geometry linearGeom The linear geom. Methods | Edit this page View Source IndicesOf(Geometry) Declaration public virtual LinearLocation[] IndicesOf(Geometry subLine) Parameters Type Name Description Geometry subLine Returns Type Description LinearLocation[] | Edit this page View Source IndicesOf(Geometry, Geometry) Declaration public static LinearLocation[] IndicesOf(Geometry linearGeom, Geometry subLine) Parameters Type Name Description Geometry linearGeom Geometry subLine Returns Type Description LinearLocation[]"
  },
  "api/NetTopologySuite.LinearReferencing.LocationIndexOfPoint.html": {
    "href": "api/NetTopologySuite.LinearReferencing.LocationIndexOfPoint.html",
    "title": "Class LocationIndexOfPoint | NetTopologySuite",
    "summary": "Class LocationIndexOfPoint Computes the LinearLocation of the point on a linear Geometrynearest a given Coordinate. The nearest point is not necessarily unique; this class always computes the nearest point closest to the start of the geometry. Inheritance object LocationIndexOfPoint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.LinearReferencing Assembly: NetTopologySuite.dll Syntax public class LocationIndexOfPoint Constructors | Edit this page View Source LocationIndexOfPoint(Geometry) Initializes a new instance of the LocationIndexOfPoint class. Declaration public LocationIndexOfPoint(Geometry linearGeom) Parameters Type Name Description Geometry linearGeom A linear geometry. Methods | Edit this page View Source IndexOf(Coordinate) Find the nearest location along a linear Geometry to a given point. Declaration public LinearLocation IndexOf(Coordinate inputPt) Parameters Type Name Description Coordinate inputPt The coordinate to locate. Returns Type Description LinearLocation The location of the nearest point. | Edit this page View Source IndexOf(Geometry, Coordinate) Declaration public static LinearLocation IndexOf(Geometry linearGeom, Coordinate inputPt) Parameters Type Name Description Geometry linearGeom Coordinate inputPt Returns Type Description LinearLocation | Edit this page View Source IndexOfAfter(Coordinate, LinearLocation) Find the nearest LinearLocation along the linear Geometry to a given Geometry after the specified minimum LinearLocation. If possible the location returned will be strictly greater than the minIndex. If this is not possible, the value returned will equal minIndex. (An example where this is not possible is when minIndex = [end of line] ). Declaration public LinearLocation IndexOfAfter(Coordinate inputPt, LinearLocation minIndex) Parameters Type Name Description Coordinate inputPt The coordinate to locate. LinearLocation minIndex The minimum location for the point location. Returns Type Description LinearLocation The location of the nearest point. | Edit this page View Source IndexOfAfter(Geometry, Coordinate, LinearLocation) Declaration public static LinearLocation IndexOfAfter(Geometry linearGeom, Coordinate inputPt, LinearLocation minIndex) Parameters Type Name Description Geometry linearGeom Coordinate inputPt LinearLocation minIndex Returns Type Description LinearLocation"
  },
  "api/NetTopologySuite.LinearReferencing.LocationIndexedLine.html": {
    "href": "api/NetTopologySuite.LinearReferencing.LocationIndexedLine.html",
    "title": "Class LocationIndexedLine | NetTopologySuite",
    "summary": "Class LocationIndexedLine Supports linear referencing along a linear Geometry using LinearLocations as the index. Inheritance object LocationIndexedLine Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.LinearReferencing Assembly: NetTopologySuite.dll Syntax public class LocationIndexedLine Constructors | Edit this page View Source LocationIndexedLine(Geometry) Constructs an object which allows linear referencing along a given linear Geometry. Declaration public LocationIndexedLine(Geometry linearGeom) Parameters Type Name Description Geometry linearGeom The linear geometry to reference alo Properties | Edit this page View Source EndIndex Returns the index of the end of the line. Declaration public LinearLocation EndIndex { get; } Property Value Type Description LinearLocation | Edit this page View Source StartIndex Returns the index of the start of the line. Declaration public LinearLocation StartIndex { get; } Property Value Type Description LinearLocation Methods | Edit this page View Source ClampIndex(LinearLocation) Computes a valid index for this line by clamping the given index to the valid range of index values. Declaration public LinearLocation ClampIndex(LinearLocation index) Parameters Type Name Description LinearLocation index Returns Type Description LinearLocation A valid index value. | Edit this page View Source ExtractLine(LinearLocation, LinearLocation) Computes the LineString for the interval on the line between the given indices. If the start location is after the end location, the computed linear geometry has reverse orientation to the input line. Declaration public Geometry ExtractLine(LinearLocation startIndex, LinearLocation endIndex) Parameters Type Name Description LinearLocation startIndex The index of the start of the interval. LinearLocation endIndex The index of the end of the interval. Returns Type Description Geometry The linear interval between the indices. | Edit this page View Source ExtractPoint(LinearLocation) Computes the Coordinatefor the point on the line at the given index. If the index is out of range, the first or last point on the line will be returned. Declaration public Coordinate ExtractPoint(LinearLocation index) Parameters Type Name Description LinearLocation index The index of the desired point. Returns Type Description Coordinate The Coordinate at the given index. Remarks The Z-ordinate of the computed point will be interpolated from the Z-ordinates of the line segment containing it, if they exist. | Edit this page View Source ExtractPoint(LinearLocation, double) Computes the Coordinate for the point on the line at the given index, offset by the given distance. If the index is out of range the first or last point on the line will be returned. The computed point is offset to the left of the line if the offset distance is positive, to the right if negative. The Z-ordinate of the computed point will be interpolated from the Z-ordinates of the line segment containing it, if they exist. Declaration public Coordinate ExtractPoint(LinearLocation index, double offsetDistance) Parameters Type Name Description LinearLocation index The index of the desired point double offsetDistance The distance the point is offset from the segment (positive is to the left, negative is to the right) Returns Type Description Coordinate The Coordinate at the given index | Edit this page View Source ExtractPoint(double, double) Computes the Coordinate for the point on the line at the given index, offset by the given distance. Declaration public Coordinate ExtractPoint(double index, double offsetDistance) Parameters Type Name Description double index The index of the desired point double offsetDistance The distance the point is offset from the segment (positive is to the left, negative is to the right) Returns Type Description Coordinate The Coordinate at the given index Remarks If the index is out of range the first or last point on the line will be returned. The computed point is offset to the left of the line if the offset distance is positive, to the right if negative. The Z-ordinate of the computed point will be interpolated from the Z-ordinates of the line segment containing it, if they exist. | Edit this page View Source IndexOf(Coordinate) Computes the index for a given point on the line. The supplied point does not necessarily have to lie precisely on the line, but if it is far from the line the accuracy and performance of this function is not guaranteed. Use Project(Coordinate) to compute a guaranteed result for points which may be far from the line. Declaration public LinearLocation IndexOf(Coordinate pt) Parameters Type Name Description Coordinate pt A point on the line. Returns Type Description LinearLocation The index of the point. See Also Project(Coordinate) | Edit this page View Source IndexOfAfter(Coordinate, LinearLocation) Finds the index for a point on the line which is greater than the given index. If no such index exists, returns minIndex. Declaration public LinearLocation IndexOfAfter(Coordinate pt, LinearLocation minIndex) Parameters Type Name Description Coordinate pt A point on the line LinearLocation minIndex The value the returned index must be greater than Returns Type Description LinearLocation The index of the point greater than the given minimum index Remarks This method can be used to determine all indexes for a point which occurs more than once on a non-simple line. It can also be used to disambiguate cases where the given point lies slightly off the line and is equidistant from two different points on the line. The supplied point does not necessarily have to lie precisely on the line, but if it is far from the line the accuracy and performance of this function is not guaranteed. Use Project(Coordinate) to compute a guaranteed result for points which may be far from the line. See Also Project(Coordinate) | Edit this page View Source IndicesOf(Geometry) Computes the indices for a subline of the line. (The subline must conform to the line; that is, all vertices in the subline (except possibly the first and last) must be vertices of the line and occur in the same order). Declaration public LinearLocation[] IndicesOf(Geometry subLine) Parameters Type Name Description Geometry subLine A subLine of the line. Returns Type Description LinearLocation[] A pair of indices for the start and end of the subline. | Edit this page View Source IsValidIndex(LinearLocation) Tests whether an index is in the valid index range for the line. Declaration public bool IsValidIndex(LinearLocation index) Parameters Type Name Description LinearLocation index The index to test. Returns Type Description bool true if the index is in the valid range. | Edit this page View Source Project(Coordinate) Computes the index for the closest point on the line to the given point. If more than one point has the closest distance the first one along the line is returned. (The point does not necessarily have to lie precisely on the line.) Declaration public LinearLocation Project(Coordinate pt) Parameters Type Name Description Coordinate pt A point on the line. Returns Type Description LinearLocation The index of the point."
  },
  "api/NetTopologySuite.LinearReferencing.html": {
    "href": "api/NetTopologySuite.LinearReferencing.html",
    "title": "Namespace NetTopologySuite.LinearReferencing | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.LinearReferencing Contains classes and interfaces implementing linear referencing on linear geometries Linear Referencing Linear Referencing is a way of defining positions along linear geometries (LineStrings and MultiLineStrings). It is used extensively in linear network systems. There are numerous possible Linear Referencing Methods which can be used to define positions along linear geometry. This package supports two: Linear Location A linear location is a triple (component index, segment index, segment fraction) which precisely specifies a point on a linear geometry. It allows for efficient mapping of the index value to actual coordinate values. Length The natural concept of using the length along the geometry to specify a position. Package Specification Java Topology Suite Technical Specifications Classes ExtractLineByLocation Extracts the subline of a linear Geometry between two LinearLocations on the line. LengthIndexOfPoint LengthIndexedLine Supports linear referencing along a linear Geometry using the length along the line as the index. Negative length values are taken as measured in the reverse direction from the end of the geometry. Out-of-range index values are handled by clamping them to the valid range of values. Non-simple lines (i.e. which loop back to cross or touch themselves) are supported. LengthLocationMap Computes the LinearLocation for a given length along a linear Geometry Negative lengths are measured in reverse from end of the linear geometry. Out-of-range values are clamped. LinearGeometryBuilder Builds a linear geometry (LineString or MultiLineString) incrementally (point-by-point). LinearIterator An iterator over the components and coordinates of a linear geometry (LineStrings and MultiLineStrings. LinearLocation Represents a location along a LineString or MultiLineString. The referenced geometry is not maintained within this location, but must be provided for operations which require it. Various methods are provided to manipulate the location value and query the geometry it references. LocationIndexOfLine Determines the location of a subline along a linear Geometry. The location is reported as a pair of LinearLocations. NOTE: Currently this algorithm is not guaranteed to return the correct substring in some situations where an endpoint of the test line occurs more than once in the input line. (However, the common case of a ring is always handled correctly). LocationIndexOfPoint Computes the LinearLocation of the point on a linear Geometrynearest a given Coordinate. The nearest point is not necessarily unique; this class always computes the nearest point closest to the start of the geometry. LocationIndexedLine Supports linear referencing along a linear Geometry using LinearLocations as the index."
  },
  "api/NetTopologySuite.Mathematics.DD.html": {
    "href": "api/NetTopologySuite.Mathematics.DD.html",
    "title": "Struct DD | NetTopologySuite",
    "summary": "Struct DD Implements extended-precision floating-point numbers which maintain 106 bits (approximately 30 decimal digits) of precision. A DoubleDouble uses a representation containing two double-precision values. A number x is represented as a pair of doubles, x.hi and x.lo, such that the number represented by x is x.hi + x.lo, where |x.lo| <= 0.5*ulp(x.hi) and ulp(y) means \"unit in the last place of y\". The basic arithmetic operations are implemented using convenient properties of IEEE-754 floating-point arithmetic. The range of values which can be represented is the same as in IEEE-754. The precision of the representable numbers is twice as great as IEEE-754 double precision. The correctness of the arithmetic algorithms relies on operations being performed with standard IEEE-754 double precision and rounding. This is the Java standard arithmetic model, but for performance reasons Java implementations are not constrained to using this standard by default. Some processors (notably the Intel Pentium architecture) perform floating point operations in (non-IEEE-754-standard) extended-precision. A JVM implementation may choose to use the non-standard extended-precision as its default arithmetic mode. To prevent this from happening, this code uses the Java strictfp modifier, which forces all operations to take place in the standard IEEE-754 rounding model. The API provides both a set of value-oriented operations and a set of mutating operations. Value-oriented operations treat DoubleDouble values as immutable; operations on them return new objects carrying the result of the operation. This provides a simple and safe semantics for writing DoubleDouble expressions. However, there is a performance penalty for the object allocations required. The mutable interface updates object values in-place. It provides optimum memory performance, but requires care to ensure that aliasing errors are not created and constant values are not changed. This implementation uses algorithms originally designed variously by Knuth, Kahan, Dekker, and Linnainmaa. Douglas Priest developed the first C implementation of these techniques. Other more recent C++ implementation are due to Keith M. Briggs and David Bailey et al. References Priest, D., Algorithms for Arbitrary Precision Floating Point Arithmetic, in P. Kornerup and D. Matula, Eds., Proc. 10th Symposium on Computer Arithmetic, IEEE Computer Society Press, Los Alamitos, Calif., 1991. Yozo Hida, Xiaoye S. Li and David H. Bailey, Quad-Double Arithmetic: Algorithms, Implementation, and Application, manuscript, Oct 2000; Lawrence Berkeley National Laboratory Report BNL-46996. David Bailey, High Precision Software Directory; http://crd.lbl.gov/~dhbailey/mpdist/index.html Implements IComparable IComparable<DD> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Mathematics Assembly: NetTopologySuite.dll Syntax [Serializable] public struct DD : IComparable, IComparable<DD> Constructors | Edit this page View Source DD(DD) Creates a DD with a value equal to the argument Declaration public DD(DD dd) Parameters Type Name Description DD dd The initial value | Edit this page View Source DD(double) Creates a new DD with value x. Declaration public DD(double x) Parameters Type Name Description double x The initial value | Edit this page View Source DD(double, double) Creates a new DD with value (hi, lo). Declaration public DD(double hi, double lo) Parameters Type Name Description double hi The high order component double lo The low order component | Edit this page View Source DD(string) Creates a new DD with value equal to the argument. Declaration public DD(string str) Parameters Type Name Description string str The value to initialize by Exceptions Type Condition FormatException if str is not a valid representation of a number Fields | Edit this page View Source E The value nearest to the constant e (the natural logarithm base). Declaration public static readonly DD E Field Value Type Description DD | Edit this page View Source Epsilon The smallest representable relative difference between two DD values Declaration public static readonly double Epsilon Field Value Type Description double | Edit this page View Source NaN A value representing the result of an operation which does not return a valid number. Declaration public static readonly DD NaN Field Value Type Description DD | Edit this page View Source PI The value nearest to the constant Pi. Declaration public static readonly DD PI Field Value Type Description DD | Edit this page View Source PiHalf The value nearest to the constant Pi / 2. Declaration public static readonly DD PiHalf Field Value Type Description DD | Edit this page View Source TwoPi The value nearest to the constant 2 * Pi. Declaration public static readonly DD TwoPi Field Value Type Description DD Properties | Edit this page View Source IsNegative Gets a value indicating whether this object is negative or not Declaration public bool IsNegative { get; } Property Value Type Description bool | Edit this page View Source IsZero Gets a value indicating whether this object is zero (0) or not Declaration public bool IsZero { get; } Property Value Type Description bool Methods | Edit this page View Source Abs() Returns the absolute value of this value. Special cases: if this value is NaN, it is returned. Declaration public DD Abs() Returns Type Description DD The absolute value of this value | Edit this page View Source Ceiling() Returns the smallest (closest to negative infinity) value that is not less than the argument and is equal to a mathematical integer. Special cases: If this value is NaN, returns NaN. Declaration public DD Ceiling() Returns Type Description DD The smallest (closest to negative infinity) value that is not less than the argument and is equal to a mathematical integer. | Edit this page View Source Clone() Creates and returns a copy of this value. Declaration public object Clone() Returns Type Description object A copy of this value | Edit this page View Source CompareTo(DD) Compares two DoubleDouble objects numerically. Declaration public int CompareTo(DD other) Parameters Type Name Description DD other An other DoubleDouble value Returns Type Description int -1,0 or 1 depending on whether this value is less than, equal to or greater than the value of other | Edit this page View Source CompareTo(object) Declaration public int CompareTo(object o) Parameters Type Name Description object o Returns Type Description int | Edit this page View Source Copy(DD) Creates a new DD with the value of the argument. Declaration public static DD Copy(DD dd) Parameters Type Name Description DD dd The value to copy Returns Type Description DD A copy of dd | Edit this page View Source Determinant(DD, DD, DD, DD) Computes the determinant of the 2x2 matrix with the given entries. Declaration public static DD Determinant(DD x1, DD y1, DD x2, DD y2) Parameters Type Name Description DD x1 A matrix entry DD y1 A matrix entry DD x2 A matrix entry DD y2 A matrix entry Returns Type Description DD The determinant of the matrix of values | Edit this page View Source Determinant(double, double, double, double) Computes the determinant of the 2x2 matrix with the given entries. Declaration public static DD Determinant(double x1, double y1, double x2, double y2) Parameters Type Name Description double x1 A matrix entry double y1 A matrix entry double x2 A matrix entry double y2 A matrix entry Returns Type Description DD The determinant of the matrix of values | Edit this page View Source Dump() Dumps the components of this number to a string. Declaration public string Dump() Returns Type Description string A string showing the components of the number | Edit this page View Source Equals(DD) Tests whether this value is equal to another DoubleDouble value. Declaration public bool Equals(DD y) Parameters Type Name Description DD y A DoubleDouble value Returns Type Description bool true if this value == y. | Edit this page View Source Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) | Edit this page View Source Floor() Returns the largest (closest to positive infinity) value that is not greater than the argument and is equal to a mathematical integer. Special cases: If this value is NaN, returns NaN. Declaration public DD Floor() Returns Type Description DD The largest (closest to positive infinity) value that is not greater than the argument and is equal to a mathematical integer. | Edit this page View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() | Edit this page View Source GreaterOrEqualThan(DD) Tests whether this value is greater than or equals to another DoubleDouble value. Declaration public bool GreaterOrEqualThan(DD y) Parameters Type Name Description DD y A DoubleDouble value Returns Type Description bool true if this value >= y. | Edit this page View Source GreaterThan(DD) Tests whether this value is greater than another DoubleDouble value. Declaration public bool GreaterThan(DD y) Parameters Type Name Description DD y A DoubleDouble value Returns Type Description bool true if this value > y. | Edit this page View Source IsInfinity(DD) Checks if value is infinity. Declaration public static bool IsInfinity(DD value) Parameters Type Name Description DD value A DoubleDouble value Returns Type Description bool true if value is infinity. | Edit this page View Source IsNaN(DD) Gets a value indicating whether this object is positive or not Declaration public static bool IsNaN(DD value) Parameters Type Name Description DD value Returns Type Description bool | Edit this page View Source IsPositive() Gets a value indicating whether this object is positive or not Declaration public bool IsPositive() Returns Type Description bool | Edit this page View Source LessOrEqualThan(DD) Tests whether this value is less than or equal to another DoubleDouble value. Declaration public bool LessOrEqualThan(DD y) Parameters Type Name Description DD y A DoubleDouble Returns Type Description bool true if this value is <= y | Edit this page View Source LessThan(DD) Tests whether this value is less than another DoubleDouble value. Declaration public bool LessThan(DD y) Parameters Type Name Description DD y A DoubleDouble value Returns Type Description bool true if this value is < y | Edit this page View Source Max(DD) Computes the maximum of this and another DD number. Declaration public DD Max(DD x) Parameters Type Name Description DD x A DD number Returns Type Description DD The maximum of the two numbers | Edit this page View Source Min(DD) Computes the minimum of this and another DD number. Declaration public DD Min(DD x) Parameters Type Name Description DD x A DD number Returns Type Description DD The minimum of the two numbers | Edit this page View Source Parse(string) Converts a string representation of a real number into a DoubleDouble value. The format accepted is similar to the standard Java real number syntax. It is defined by the following regular expression: [ + | - ] {digit} [ . {digit} ] [ ( e | E ) [ + | - ] {digit}+ Declaration public static DD Parse(string str) Parameters Type Name Description string str The string to parse Returns Type Description DD The value of the parsed number Exceptions Type Condition FormatException Thrown if str is not a valid representation of a number | Edit this page View Source Pow(int) Computes the value of this number raised to an integral power. Follows semantics of .Net Math.Pow as closely as possible. Declaration [Pure] public DD Pow(int exp) Parameters Type Name Description int exp The integer exponent Returns Type Description DD x raised to the integral power exp | Edit this page View Source Reciprocal() Returns a DD whose value is 1 / this. Declaration public DD Reciprocal() Returns Type Description DD The reciprocal of this value | Edit this page View Source Rint() Rounds this value to the nearest integer. The value is rounded to an integer by adding 1/2 and taking the floor of the result. Special cases: If this value is NaN, returns NaN. Declaration public DD Rint() Returns Type Description DD This value rounded to the nearest integer | Edit this page View Source Signum() Returns an integer indicating the sign of this value. if this value is > 0, returns 1 if this value is < 0, returns -1 if this value is = 0, returns 0 if this value is NaN, returns 0 Declaration public int Signum() Returns Type Description int An integer indicating the sign of this value | Edit this page View Source Sqr() Computes the square of this value. Declaration public DD Sqr() Returns Type Description DD The square of this value | Edit this page View Source Sqr(double) Computes the square of this value. Declaration public static DD Sqr(double x) Parameters Type Name Description double x Returns Type Description DD The square of this value. | Edit this page View Source Sqrt() Computes the positive square root of this value. If the number is NaN or negative, NaN is returned. Declaration public DD Sqrt() Returns Type Description DD If this is NaN or less than zero, the result is NaN. | Edit this page View Source Sqrt(double) Computes the positive square root of a DoubleDouble value. If the number is NaN or negative, NaN is returned. Declaration public static DD Sqrt(double x) Parameters Type Name Description double x A numeric value Returns Type Description DD the positive square root of this number. If the argument is NaN or less than zero, the result is NaN. | Edit this page View Source ToDoubleValue() Converts this value to the nearest double number. Declaration public double ToDoubleValue() Returns Type Description double The nearest double value | Edit this page View Source ToIntValue() Converts this value to the nearest int value. Declaration public int ToIntValue() Returns Type Description int The nearest int value | Edit this page View Source ToSciNotation() Returns the string representation of this value in scientific notation. Declaration public string ToSciNotation() Returns Type Description string The string representation in scientific notation | Edit this page View Source ToStandardNotation() Returns the string representation of this value in standard notation. Declaration public string ToStandardNotation() Returns Type Description string The string representation in standard notation | Edit this page View Source ToString() Returns a string representation of this number, in either standard or scientific notation. If the magnitude of the number is in the range [ 10-3, 108 ] standard notation will be used. Otherwise, scientific notation will be used. Declaration public override string ToString() Returns Type Description string A string representation of this number Overrides ValueType.ToString() | Edit this page View Source Truncate() Returns the integer which is largest in absolute value and not further from zero than this value. Special cases: If this value is NaN, returns NaN. Declaration public DD Truncate() Returns Type Description DD The integer which is largest in absolute value and not further from zero than this value | Edit this page View Source ValueOf(double) Converts the double argument to a DoubleDouble number. Declaration public static DD ValueOf(double x) Parameters Type Name Description double x A numeric value Returns Type Description DD The extended precision version of the value | Edit this page View Source ValueOf(string) Converts the string argument to a DoubleDouble number. Declaration public static DD ValueOf(string str) Parameters Type Name Description string str A string containing a representation of a numeric value Returns Type Description DD The extended precision version of the value Exceptions Type Condition FormatException Thrown if str is not a valid representation of a number Operators | Edit this page View Source operator +(DD, DD) Returns the sum of lhs and rhs. Declaration public static DD operator +(DD lhs, DD rhs) Parameters Type Name Description DD lhs The left hand side DD rhs The right hand side Returns Type Description DD The sum of lhs and rhs | Edit this page View Source operator +(DD, double) Returns the sum of lhs and rhs. Declaration public static DD operator +(DD lhs, double rhs) Parameters Type Name Description DD lhs The left hand side double rhs The right hand side Returns Type Description DD The sum of lhs and rhs | Edit this page View Source operator /(DD, DD) Divides lhs by rhs. Declaration public static DD operator /(DD lhs, DD rhs) Parameters Type Name Description DD lhs A DoubleDouble numerator. DD rhs A DoubleDouble divisor. Returns Type Description DD The result of the division. | Edit this page View Source operator /(DD, double) Divides lhs by rhs. Declaration public static DD operator /(DD lhs, double rhs) Parameters Type Name Description DD lhs A DoubleDouble numerator. double rhs A double divisor. Returns Type Description DD The result of the division. | Edit this page View Source operator ==(DD, DD) Equality operator for DoubleDouble values Declaration public static bool operator ==(DD lhs, DD rhs) Parameters Type Name Description DD lhs A DoubleDouble value DD rhs A DoubleDouble value Returns Type Description bool true if lhs == rhs. | Edit this page View Source explicit operator DD(string) Operator to parse a DoubleDouble from a string Declaration public static explicit operator DD(string val) Parameters Type Name Description string val The DoubleDouble string Returns Type Description DD | Edit this page View Source implicit operator DD(double) Operator to convert the double value to a DoubleDouble value. Declaration public static implicit operator DD(double val) Parameters Type Name Description double val The DoubleDouble string Returns Type Description DD | Edit this page View Source operator !=(DD, DD) Inequality operator for DoubleDouble values Declaration public static bool operator !=(DD rhs, DD lhs) Parameters Type Name Description DD rhs A DoubleDouble value DD lhs A DoubleDouble value Returns Type Description bool true if lhs != rhs. | Edit this page View Source operator *(DD, DD) Multiplies lhs by rhs. Declaration public static DD operator *(DD lhs, DD rhs) Parameters Type Name Description DD lhs A DoubleDouble value. DD rhs A DoubleDouble value. Returns Type Description DD The result of the multiplication. | Edit this page View Source operator *(DD, double) Multiplies lhs by rhs. Declaration public static DD operator *(DD lhs, double rhs) Parameters Type Name Description DD lhs A DoubleDouble value. double rhs A double value. Returns Type Description DD The result of the multiplication. | Edit this page View Source operator -(DD, DD) Returns the difference of lhs and rhs. Declaration public static DD operator -(DD lhs, DD rhs) Parameters Type Name Description DD lhs The left hand side DD rhs The right hand side Returns Type Description DD The difference of lhs and rhs | Edit this page View Source operator -(DD, double) Returns the difference of lhs and rhs. Declaration public static DD operator -(DD lhs, double rhs) Parameters Type Name Description DD lhs The left hand side double rhs The right hand side Returns Type Description DD The difference of lhs and rhs | Edit this page View Source operator -(DD) Subtracts the argument from the value of this . Declaration public static DD operator -(DD val) Parameters Type Name Description DD val The subtrahend Returns Type Description DD The result of this - y Implements IComparable IComparable<T>"
  },
  "api/NetTopologySuite.Mathematics.MathUtil.html": {
    "href": "api/NetTopologySuite.Mathematics.MathUtil.html",
    "title": "Class MathUtil | NetTopologySuite",
    "summary": "Class MathUtil Various utility functions for mathematical and numerical operations. Inheritance object MathUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Mathematics Assembly: NetTopologySuite.dll Syntax public class MathUtil Fields | Edit this page View Source PhiInv The inverse of the Golden Ratio phi. Declaration public static readonly double PhiInv Field Value Type Description double Methods | Edit this page View Source Average(double, double) Computes the average of two numbers. Declaration public static double Average(double x1, double x2) Parameters Type Name Description double x1 A number double x2 A number Returns Type Description double The average of the inputs | Edit this page View Source Ceiling(int, int) Computes the ceiling function of the dividend of two integers. Declaration public static int Ceiling(int num, int denom) Parameters Type Name Description int num The numerator int denom The denominator Returns Type Description int The ceiling of num / denom | Edit this page View Source Clamp(double, double, double) Clamps a double value to a given range. Declaration public static double Clamp(double x, double min, double max) Parameters Type Name Description double x The value to clamp double min The minimum value of the range double max The maximum value of the range Returns Type Description double The clamped value | Edit this page View Source Clamp(int, int, int) Clamps a int value to a given range. Declaration public static int Clamp(int x, int min, int max) Parameters Type Name Description int x The value to clamp int min The minimum value of the range int max The maximum value of the range Returns Type Description int The clamped value | Edit this page View Source ClampMax(int, int) Clamps an integer to a given maximum limit. Declaration public static int ClampMax(int x, int max) Parameters Type Name Description int x The value to clamp int max The maximum value of the range Returns Type Description int The clamped value | Edit this page View Source Log10(double) Computes the base-10 logarithm of a double value. If the argument is NaN or less than zero, then the result is NaN. If the argument is positive infinity, then the result is positive infinity. If the argument is positive zero or negative zero, then the result is negative infinity. Declaration public static double Log10(double x) Parameters Type Name Description double x A positive number Returns Type Description double The value log a, the base-10 logarithm of the input value | Edit this page View Source Max(double, double, double) Computes the maximum fo three values Declaration public static double Max(double v1, double v2, double v3) Parameters Type Name Description double v1 A number double v2 A number double v3 A number Returns Type Description double The maximum value of v1, v2 and v3 | Edit this page View Source Max(double, double, double, double) Computes the maximum of four values Declaration public static double Max(double v1, double v2, double v3, double v4) Parameters Type Name Description double v1 A number double v2 A number double v3 A number double v4 A number Returns Type Description double The maximum value of v1, v2, v3 and v4 | Edit this page View Source Min(double, double, double) Computes the minimum of four values Declaration public static double Min(double v1, double v2, double v3) Parameters Type Name Description double v1 A number double v2 A number double v3 A number Returns Type Description double The minimum value of v1, v2 and v3 | Edit this page View Source Min(double, double, double, double) Computes the minimum of four values Declaration public static double Min(double v1, double v2, double v3, double v4) Parameters Type Name Description double v1 A number double v2 A number double v3 A number double v4 A number Returns Type Description double The minimum value of v1, v2, v3 and v4 | Edit this page View Source QuasiRandom(double) Generates a quasi-random sequence of numbers in the range [0,1]. They are produced by an additive recurrence with 1/φ as the constant. This produces a low-discrepancy sequence which is more evenly distribute than random numbers. See Wikipedia: Low-discrepancy Sequences - Additive Recurrence. The sequence is initialized by calling it with any positive fractional number; 0 works well for most uses. Declaration public static double QuasiRandom(double curr) Parameters Type Name Description double curr The current number in the sequence Returns Type Description double The next value in the sequence | Edit this page View Source QuasiRandom(double, double) Generates a quasi-random sequence of numbers in the range [0,1]. They are produced by an additive recurrence with constant α. R(α) : tn = { t0 + nα }, n = 1,2,3,... When α is irrational this produces a Low discrepancy sequence which is more evenly distributed than random numbers. The sequence is initialized by calling it with any positive fractional number. 0 works well for most uses. Declaration public static double QuasiRandom(double curr, double alpha) Parameters Type Name Description double curr The current number in the sequence double alpha the sequence's additive constant Returns Type Description double The next value in the sequence | Edit this page View Source Shuffle(int) Generates a randomly-shuffled list of the integers from [0..n-1]. One use is to randomize points inserted into a KdTree<T>. Declaration public static int[] Shuffle(int n) Parameters Type Name Description int n The number of integers to shuffle Returns Type Description int[] The shuffled array | Edit this page View Source Wrap(int, int) Computes an index which wraps around a given maximum value. For values >= 0, this is equals to val % max. For values < 0, this is equal to max - (-val) % max Declaration public static int Wrap(int index, int max) Parameters Type Name Description int index The index to wrap int max The maximum value (or modulus) Returns Type Description int The wrapped index"
  },
  "api/NetTopologySuite.Mathematics.Matrix.html": {
    "href": "api/NetTopologySuite.Mathematics.Matrix.html",
    "title": "Class Matrix | NetTopologySuite",
    "summary": "Class Matrix Implements some 2D matrix operations (in particular, solving systems of linear equations). Inheritance object Matrix Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Mathematics Assembly: NetTopologySuite.dll Syntax public class Matrix Methods | Edit this page View Source Solve(double[][], double[]) Solves a system of equations using Gaussian Elimination. In order to avoid overhead the algorithm runs in-place on - if should not be modified the client must supply a copy. Declaration public static double[] Solve(double[][] a, double[] b) Parameters Type Name Description double[][] a An nxn matrix in row/column order )modified by this method) double[] b A vector of length n Returns Type Description double[] A vector containing the solution (if any) or null if the system has no or no unique solution Exceptions Type Condition ArgumentException If the matrix has the wrong size"
  },
  "api/NetTopologySuite.Mathematics.Plane.html": {
    "href": "api/NetTopologySuite.Mathematics.Plane.html",
    "title": "Enum Plane | NetTopologySuite",
    "summary": "Enum Plane Enumeration for the 3 coordinate planes Namespace: NetTopologySuite.Mathematics Assembly: NetTopologySuite.dll Syntax public enum Plane Fields Name Description Undefined XY XZ YZ"
  },
  "api/NetTopologySuite.Mathematics.Plane3D.html": {
    "href": "api/NetTopologySuite.Mathematics.Plane3D.html",
    "title": "Class Plane3D | NetTopologySuite",
    "summary": "Class Plane3D Models a plane in 3-dimensional Cartesian space. Inheritance object Plane3D Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Mathematics Assembly: NetTopologySuite.dll Syntax public class Plane3D Constructors | Edit this page View Source Plane3D(Vector3D, Coordinate) Declaration public Plane3D(Vector3D normal, Coordinate basePt) Parameters Type Name Description Vector3D normal Coordinate basePt Methods | Edit this page View Source ClosestAxisPlane() Computes the axis plane that this plane lies closest to. Geometries lying in this plane undergo least distortion (and have maximum area) when projected to the closest axis plane. This provides optimal conditioning for computing a Point-in-Polygon test. Declaration public Plane ClosestAxisPlane() Returns Type Description Plane The index of the closest axis plane | Edit this page View Source OrientedDistance(Coordinate) Computes the oriented distance from a point to the plane. The distance is: positive if the point lies above the plane (relative to the plane normal) zero if the point is on the plane negative if the point lies below the plane (relative to the plane normal) Declaration public double OrientedDistance(Coordinate p) Parameters Type Name Description Coordinate p The point to compute the distance for Returns Type Description double The oriented distance to the plane"
  },
  "api/NetTopologySuite.Mathematics.Vector2D.html": {
    "href": "api/NetTopologySuite.Mathematics.Vector2D.html",
    "title": "Class Vector2D | NetTopologySuite",
    "summary": "Class Vector2D A 2-dimensional mathematical vector represented by double-precision X and Y components. Inheritance object Vector2D Implements ICloneable Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Mathematics Assembly: NetTopologySuite.dll Syntax public class Vector2D : ICloneable Constructors | Edit this page View Source Vector2D() Creates an new vector instance Declaration public Vector2D() | Edit this page View Source Vector2D(Coordinate) Creates a vector from a Coordinate. Declaration public Vector2D(Coordinate v) Parameters Type Name Description Coordinate v The coordinate | Edit this page View Source Vector2D(Coordinate, Coordinate) Creates a new vector with the direction and magnitude of the difference between the to and from Coordinates. Declaration public Vector2D(Coordinate from, Coordinate to) Parameters Type Name Description Coordinate from The origin coordinate Coordinate to The destination coordinate | Edit this page View Source Vector2D(Vector2D) Creates a new vector instance based on v. Declaration public Vector2D(Vector2D v) Parameters Type Name Description Vector2D v The vector | Edit this page View Source Vector2D(double, double) Creates a new vector instance using the provided x and y ordinates Declaration public Vector2D(double x, double y) Parameters Type Name Description double x The x-ordinate value double y The y-ordinate value Properties | Edit this page View Source this[int] Gets the ordinate values by index Declaration public double this[int index] { get; } Parameters Type Name Description int index The index Property Value Type Description double Exceptions Type Condition ArgumentOutOfRangeException Thrown if index < 0 or > 1 | Edit this page View Source X Gets the x-ordinate value Declaration public double X { get; } Property Value Type Description double | Edit this page View Source Y Gets the y-ordinate value Declaration public double Y { get; } Property Value Type Description double | Edit this page View Source Zero Creates a new vector with all components set to Zero Declaration public static Vector2D Zero { get; } Property Value Type Description Vector2D Methods | Edit this page View Source Add(Vector2D) Adds v to this vector instance. Declaration public Vector2D Add(Vector2D v) Parameters Type Name Description Vector2D v The vector to add Returns Type Description Vector2D The result vector | Edit this page View Source Angle() Computes the angle this vector describes to the horizontal axis Declaration public double Angle() Returns Type Description double The angle | Edit this page View Source Angle(Vector2D) Declaration public double Angle(Vector2D v) Parameters Type Name Description Vector2D v Returns Type Description double | Edit this page View Source AngleTo(Vector2D) Declaration public double AngleTo(Vector2D v) Parameters Type Name Description Vector2D v Returns Type Description double | Edit this page View Source Average(Vector2D) Declaration public Vector2D Average(Vector2D v) Parameters Type Name Description Vector2D v Returns Type Description Vector2D | Edit this page View Source Clone() Creates a copy of this vector Declaration public object Clone() Returns Type Description object A copy of this vector | Edit this page View Source Create(Coordinate) Creates a vector from a Coordinate. Declaration public static Vector2D Create(Coordinate coord) Parameters Type Name Description Coordinate coord The coordinate to copy Returns Type Description Vector2D A new vector | Edit this page View Source Create(Coordinate, Coordinate) Creates a vector with the direction and magnitude of the difference between the to and from Coordinates. Declaration public static Vector2D Create(Coordinate from, Coordinate to) Parameters Type Name Description Coordinate from The origin coordinate Coordinate to The destination coordinate Returns Type Description Vector2D A new vector | Edit this page View Source Create(Vector2D) Creates a new vector from an existing one. Declaration public static Vector2D Create(Vector2D v) Parameters Type Name Description Vector2D v The vector to copy Returns Type Description Vector2D A new vector | Edit this page View Source Create(double, double) Creates a new vector with given X and Y components. Declaration public static Vector2D Create(double x, double y) Parameters Type Name Description double x The x component double y The y component Returns Type Description Vector2D A new vector | Edit this page View Source Distance(Vector2D) Computes the distance between this vector and another one. Declaration public double Distance(Vector2D v) Parameters Type Name Description Vector2D v A vector Returns Type Description double The distance between the vectors | Edit this page View Source Divide(double) Divides the vector by a scalar value. Declaration public Vector2D Divide(double d) Parameters Type Name Description double d The value to divide by Returns Type Description Vector2D A new vector with the value v / d | Edit this page View Source Dot(Vector2D) Computes the dot-product of two vectors Declaration public double Dot(Vector2D v) Parameters Type Name Description Vector2D v A vector Returns Type Description double The dot product of the vectors | Edit this page View Source Equals(object) Tests if a vector o has the same values for the x and y components. Declaration public override bool Equals(object o) Parameters Type Name Description object o A Vector2D with which to do the comparison. Returns Type Description bool true if o is a Vector2Dwith the same values for the X and Y components. Overrides object.Equals(object) | Edit this page View Source GetHashCode() Gets a hashcode for this vector. Declaration public override int GetHashCode() Returns Type Description int A hashcode for this vector Overrides object.GetHashCode() | Edit this page View Source IsParallel(Vector2D) Declaration public bool IsParallel(Vector2D v) Parameters Type Name Description Vector2D v Returns Type Description bool | Edit this page View Source Length() Declaration public double Length() Returns Type Description double | Edit this page View Source LengthSquared() Declaration public double LengthSquared() Returns Type Description double | Edit this page View Source Multiply(double) Multiplies the vector by a scalar value. Declaration public Vector2D Multiply(double d) Parameters Type Name Description double d The value to multiply by Returns Type Description Vector2D A new vector with the value v * d | Edit this page View Source Negate() Negates this vector Declaration public Vector2D Negate() Returns Type Description Vector2D A new vector with [-_x, -_y] | Edit this page View Source Normalize() Normalizes the vector Declaration public Vector2D Normalize() Returns Type Description Vector2D A new normalized vector | Edit this page View Source Rotate(double) Rotates this vector by angle Declaration public Vector2D Rotate(double angle) Parameters Type Name Description double angle The angle Returns Type Description Vector2D The rotated vector | Edit this page View Source RotateByQuarterCircle(int) Rotates a vector by a given number of quarter-circles (i.e. multiples of 90 degrees or Pi/2 radians). A positive number rotates counter-clockwise, a negative number rotates clockwise. Under this operation the magnitude of the vector and the absolute values of the ordinates do not change, only their sign and ordinate index. Declaration public Vector2D RotateByQuarterCircle(int numQuarters) Parameters Type Name Description int numQuarters The number of quarter-circles to rotate by Returns Type Description Vector2D The rotated vector. | Edit this page View Source Subtract(Vector2D) Subtracts v from this vector instance Declaration public Vector2D Subtract(Vector2D v) Parameters Type Name Description Vector2D v The vector to subtract Returns Type Description Vector2D The result vector | Edit this page View Source ToCoordinate() Gets a Coordinate from this vector Declaration public Coordinate ToCoordinate() Returns Type Description Coordinate A coordinate | Edit this page View Source ToString() Gets a string representation of this vector Declaration public override string ToString() Returns Type Description string A string representing this vector Overrides object.ToString() | Edit this page View Source Translate(Coordinate) Gets a Coordinate made of this vector translated by coord. Declaration public Coordinate Translate(Coordinate coord) Parameters Type Name Description Coordinate coord The translation coordinate Returns Type Description Coordinate A coordinate | Edit this page View Source WeightedSum(Vector2D, double) Computes the weighted sum of this vector with another vector, with this vector contributing a fraction of frac to the total. In other words, sum = frac * this + (1 - frac) * v Declaration public Vector2D WeightedSum(Vector2D v, double frac) Parameters Type Name Description Vector2D v The vector to sum double frac The fraction of the total contributed by this vector Returns Type Description Vector2D The weighted sum of the two vectors Operators | Edit this page View Source operator +(Vector2D, Vector2D) Adds two vectors. Declaration public static Vector2D operator +(Vector2D left, Vector2D right) Parameters Type Name Description Vector2D left The first vector to add. Vector2D right The second vector to add. Returns Type Description Vector2D The sum of the two vectors. | Edit this page View Source operator /(Vector2D, Vector2D) Scales a vector by the given value. Declaration public static Vector2D operator /(Vector2D value, Vector2D scale) Parameters Type Name Description Vector2D value The vector to scale. Vector2D scale The amount by which to scale the vector. Returns Type Description Vector2D The scaled vector. | Edit this page View Source operator /(Vector2D, double) Scales a vector by the given value. Declaration public static Vector2D operator /(Vector2D value, double scale) Parameters Type Name Description Vector2D value The vector to scale. double scale The amount by which to scale the vector. Returns Type Description Vector2D The scaled vector. | Edit this page View Source operator ==(Vector2D, Vector2D) Tests for equality between two objects. Declaration public static bool operator ==(Vector2D left, Vector2D right) Parameters Type Name Description Vector2D left The first value to compare. Vector2D right The second value to compare. Returns Type Description bool true if left has the same value as right; otherwise, false. | Edit this page View Source operator !=(Vector2D, Vector2D) Tests for inequality between two objects. Declaration public static bool operator !=(Vector2D left, Vector2D right) Parameters Type Name Description Vector2D left The first value to compare. Vector2D right The second value to compare. Returns Type Description bool true if left has a different value than right; otherwise, false. | Edit this page View Source operator *(Vector2D, Vector2D) Modulates a vector with another by performing component-wise multiplication\"/>. Declaration public static Vector2D operator *(Vector2D left, Vector2D right) Parameters Type Name Description Vector2D left The first vector to multiply. Vector2D right The second vector to multiply. Returns Type Description Vector2D The multiplication of the two vectors. | Edit this page View Source operator *(Vector2D, double) Scales a vector by the given value. Declaration public static Vector2D operator *(Vector2D value, double scale) Parameters Type Name Description Vector2D value The vector to scale. double scale The amount by which to scale the vector. Returns Type Description Vector2D The scaled vector. | Edit this page View Source operator *(double, Vector2D) Scales a vector by the given value. Declaration public static Vector2D operator *(double scale, Vector2D value) Parameters Type Name Description double scale The amount by which to scale the vector. Vector2D value The vector to scale. Returns Type Description Vector2D The scaled vector. | Edit this page View Source operator -(Vector2D, Vector2D) Subtracts two vectors. Declaration public static Vector2D operator -(Vector2D left, Vector2D right) Parameters Type Name Description Vector2D left The first vector to subtract. Vector2D right The second vector to subtract. Returns Type Description Vector2D The difference of the two vectors. | Edit this page View Source operator -(Vector2D) Reverses the direction of a given vector. Declaration public static Vector2D operator -(Vector2D value) Parameters Type Name Description Vector2D value The vector to negate. Returns Type Description Vector2D A vector facing in the opposite direction. Implements ICloneable"
  },
  "api/NetTopologySuite.Mathematics.Vector3D.html": {
    "href": "api/NetTopologySuite.Mathematics.Vector3D.html",
    "title": "Class Vector3D | NetTopologySuite",
    "summary": "Class Vector3D Represents a vector in 3-dimensional Cartesian space. Inheritance object Vector3D Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Mathematics Assembly: NetTopologySuite.dll Syntax public class Vector3D Constructors | Edit this page View Source Vector3D(Coordinate) Creates a new 3D vector from a Coordinate. The coordinate should have the X,Y and Z ordinates specified. Declaration public Vector3D(Coordinate coord) Parameters Type Name Description Coordinate coord The coordinate to copy | Edit this page View Source Vector3D(Coordinate, Coordinate) Creates a new vector with the direction and magnitude of the difference between the to and from Coordinates. Declaration public Vector3D(Coordinate from, Coordinate to) Parameters Type Name Description Coordinate from The origin coordinate Coordinate to The destination coordinate | Edit this page View Source Vector3D(Vector2D, double) Creates a new Vector3D using a Vector2D plus a value for z component Declaration public Vector3D(Vector2D value, double z) Parameters Type Name Description Vector2D value A vector containing the values with which to initialize the X and Y components. double z Initial value for the Z component of the vector. | Edit this page View Source Vector3D(double, double, double) Creates a new vector with the given x, y and z components Declaration public Vector3D(double x, double y, double z) Parameters Type Name Description double x The x component double y The y component double z The z component Properties | Edit this page View Source X Gets a value indicating the x-ordinate Declaration public double X { get; } Property Value Type Description double | Edit this page View Source Y Gets a value indicating the y-ordinate Declaration public double Y { get; } Property Value Type Description double | Edit this page View Source Z Gets a value indicating the z-ordinate Declaration public double Z { get; } Property Value Type Description double | Edit this page View Source Zero Creates a new vector with all components set to Zero Declaration public static Vector3D Zero { get; } Property Value Type Description Vector3D Methods | Edit this page View Source Add(Vector3D) Computes a vector which is the sum of this vector and the given vector. Declaration public Vector3D Add(Vector3D v) Parameters Type Name Description Vector3D v The vector to add Returns Type Description Vector3D The sum of this and v | Edit this page View Source Create(Coordinate) Creates a vector from a 3D Coordinate. The coordinate should have the X,Y and Z ordinates specified. Declaration public static Vector3D Create(Coordinate coord) Parameters Type Name Description Coordinate coord The coordinate to copy Returns Type Description Vector3D A new vector | Edit this page View Source Create(double, double, double) Creates a new vector with given x, y and z components. Declaration public static Vector3D Create(double x, double y, double z) Parameters Type Name Description double x The x component double y The y component double z The z component Returns Type Description Vector3D A new vector | Edit this page View Source Cross(Vector3D) Computes the cross-product of this Vector3D and v Declaration public Vector3D Cross(Vector3D v) Parameters Type Name Description Vector3D v Returns Type Description Vector3D The cross product of the vectors | Edit this page View Source Cross(Vector3D, Vector3D) Calculates the cross product of two vectors. Declaration public static Vector3D Cross(Vector3D left, Vector3D right) Parameters Type Name Description Vector3D left First source vector. Vector3D right Second source vector. Returns Type Description Vector3D | Edit this page View Source Divide(double) Creates a new vector which has the same direction and with length equals to the length of this vector divided by the scalar value d. Declaration public Vector3D Divide(double d) Parameters Type Name Description double d The scalar divisor Returns Type Description Vector3D A new vector with divided length | Edit this page View Source Dot(Coordinate, Coordinate) Computes the 3D dot-product of two Coordinates Declaration public static double Dot(Coordinate v1, Coordinate v2) Parameters Type Name Description Coordinate v1 The 1st vector Coordinate v2 The 2nd vector Returns Type Description double The dot product of the (coordinate) vectors | Edit this page View Source Dot(Coordinate, Coordinate, Coordinate, Coordinate) Computes the dot product of the 3D vectors AB and CD. Declaration public static double Dot(Coordinate A, Coordinate B, Coordinate C, Coordinate D) Parameters Type Name Description Coordinate A The start point of the 1st vector Coordinate B The end point of the 1st vector Coordinate C The start point of the 2nd vector Coordinate D The end point of the 2nd vector Returns Type Description double The dot product | Edit this page View Source Dot(Vector3D) Computes the dot-product of this Vector3D and v Declaration public double Dot(Vector3D v) Parameters Type Name Description Vector3D v Returns Type Description double The dot product of the vectors | Edit this page View Source Equals(object) Declaration public override bool Equals(object o) Parameters Type Name Description object o Returns Type Description bool Overrides object.Equals(object) | Edit this page View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() | Edit this page View Source Length() Computes the length of this vector Declaration public double Length() Returns Type Description double The length of this vector | Edit this page View Source Length(Coordinate) Computes the length of vector v. Declaration public static double Length(Coordinate v) Parameters Type Name Description Coordinate v A coordinate representing a 3D Vector Returns Type Description double The length of v | Edit this page View Source Normalize() Computes a vector having identical direction but normalized to have length 1. Declaration public Vector3D Normalize() Returns Type Description Vector3D A new normalized vector | Edit this page View Source Normalize(Coordinate) Computes a vector having identical direction as v but normalized to have length 1. Declaration public static Coordinate Normalize(Coordinate v) Parameters Type Name Description Coordinate v A coordinate representing a 3D vector Returns Type Description Coordinate A coordinate representing the normalized vector | Edit this page View Source Subtract(Vector3D) Computes a vector which is the difference of this vector and the given vector. Declaration public Vector3D Subtract(Vector3D v) Parameters Type Name Description Vector3D v The vector to subtract Returns Type Description Vector3D The difference of this and v | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Operators | Edit this page View Source operator +(Vector3D, Vector3D) Adds two vectors. Declaration public static Vector3D operator +(Vector3D left, Vector3D right) Parameters Type Name Description Vector3D left The first vector to add. Vector3D right The second vector to add. Returns Type Description Vector3D The sum of the two vectors. | Edit this page View Source operator /(Vector3D, Vector3D) Scales a vector by the given value. Declaration public static Vector3D operator /(Vector3D value, Vector3D scale) Parameters Type Name Description Vector3D value The vector to scale. Vector3D scale The amount by which to scale the vector. Returns Type Description Vector3D The scaled vector. | Edit this page View Source operator /(Vector3D, double) Scales a vector by the given value. Declaration public static Vector3D operator /(Vector3D value, double scale) Parameters Type Name Description Vector3D value The vector to scale. double scale The amount by which to scale the vector. Returns Type Description Vector3D The scaled vector. | Edit this page View Source operator ==(Vector3D, Vector3D) Tests for equality between two objects. Declaration public static bool operator ==(Vector3D left, Vector3D right) Parameters Type Name Description Vector3D left The first value to compare. Vector3D right The second value to compare. Returns Type Description bool true if left has the same value as right; otherwise, false. | Edit this page View Source operator !=(Vector3D, Vector3D) Tests for inequality between two objects. Declaration public static bool operator !=(Vector3D left, Vector3D right) Parameters Type Name Description Vector3D left The first value to compare. Vector3D right The second value to compare. Returns Type Description bool true if left has a different value than right; otherwise, false. | Edit this page View Source operator *(Vector3D, Vector3D) Modulates a vector with another by performing component-wise multiplication. Declaration public static Vector3D operator *(Vector3D left, Vector3D right) Parameters Type Name Description Vector3D left The first vector to multiply. Vector3D right The second vector to multiply. Returns Type Description Vector3D The multiplication of the two vectors. | Edit this page View Source operator *(Vector3D, double) Scales a vector by the given value. Declaration public static Vector3D operator *(Vector3D value, double scale) Parameters Type Name Description Vector3D value The vector to scale. double scale The amount by which to scale the vector. Returns Type Description Vector3D The scaled vector. | Edit this page View Source operator *(double, Vector3D) Scales a vector by the given value. Declaration public static Vector3D operator *(double scale, Vector3D value) Parameters Type Name Description double scale The amount by which to scale the vector. Vector3D value The vector to scale. Returns Type Description Vector3D The scaled vector. | Edit this page View Source operator -(Vector3D, Vector3D) Subtracts two vectors. Declaration public static Vector3D operator -(Vector3D left, Vector3D right) Parameters Type Name Description Vector3D left The first vector to subtract. Vector3D right The second vector to subtract. Returns Type Description Vector3D The difference of the two vectors. | Edit this page View Source operator -(Vector3D) Reverses the direction of a given vector. Declaration public static Vector3D operator -(Vector3D value) Parameters Type Name Description Vector3D value The vector to negate. Returns Type Description Vector3D A vector facing in the opposite direction. | Edit this page View Source operator +(Vector3D) Assert a vector (return it unchanged). Declaration public static Vector3D operator +(Vector3D value) Parameters Type Name Description Vector3D value The vector to assert (unchanged). Returns Type Description Vector3D The asserted (unchanged) vector."
  },
  "api/NetTopologySuite.Mathematics.VectorMath.html": {
    "href": "api/NetTopologySuite.Mathematics.VectorMath.html",
    "title": "Class VectorMath | NetTopologySuite",
    "summary": "Class VectorMath Functions for performing vector mathematics. Inheritance object VectorMath Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Mathematics Assembly: NetTopologySuite.dll Syntax public static class VectorMath Methods | Edit this page View Source CrossProduct(Coordinate, Coordinate) Computes the cross product of v1 and v2 Declaration public static Coordinate CrossProduct(Coordinate v1, Coordinate v2) Parameters Type Name Description Coordinate v1 A vector Coordinate v2 A vector Returns Type Description Coordinate The cross product of v1 and v2 | Edit this page View Source Det(double, double, double, double) Computes the determinant of a 2x2 matrix Declaration public static double Det(double a1, double a2, double b1, double b2) Parameters Type Name Description double a1 The m[0,0] value double a2 The m[0,1] value double b1 The m[1,0] value double b2 The m[1,1] value Returns Type Description double The determinant | Edit this page View Source DotProduct(Coordinate, Coordinate) Computes the dot product of v1 and v2 Declaration public static double DotProduct(Coordinate v1, Coordinate v2) Parameters Type Name Description Coordinate v1 A vector Coordinate v2 A vector Returns Type Description double The dot product of v1 and v2 | Edit this page View Source NormalToTriangle(Coordinate, Coordinate, Coordinate) Computes the normal vector to the triangle p0-p1-p2. In order to compute the normal each triangle coordinate must have a Z value. If this is not the case, the returned Coordinate will have NaN values. The returned vector has unit length. Declaration public static Coordinate NormalToTriangle(Coordinate p0, Coordinate p1, Coordinate p2) Parameters Type Name Description Coordinate p0 A point Coordinate p1 A point Coordinate p2 A point Returns Type Description Coordinate The normal vector to the triangle p0-p1-p2 | Edit this page View Source Normalize(Coordinate) Normalizes the vector v Declaration public static void Normalize(Coordinate v) Parameters Type Name Description Coordinate v The normalized v"
  },
  "api/NetTopologySuite.Mathematics.html": {
    "href": "api/NetTopologySuite.Mathematics.html",
    "title": "Namespace NetTopologySuite.Mathematics | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Mathematics Classes MathUtil Various utility functions for mathematical and numerical operations. Matrix Implements some 2D matrix operations (in particular, solving systems of linear equations). Plane3D Models a plane in 3-dimensional Cartesian space. Vector2D A 2-dimensional mathematical vector represented by double-precision X and Y components. Vector3D Represents a vector in 3-dimensional Cartesian space. VectorMath Functions for performing vector mathematics. Structs DD Implements extended-precision floating-point numbers which maintain 106 bits (approximately 30 decimal digits) of precision. A DoubleDouble uses a representation containing two double-precision values. A number x is represented as a pair of doubles, x.hi and x.lo, such that the number represented by x is x.hi + x.lo, where |x.lo| <= 0.5*ulp(x.hi) and ulp(y) means \"unit in the last place of y\". The basic arithmetic operations are implemented using convenient properties of IEEE-754 floating-point arithmetic. The range of values which can be represented is the same as in IEEE-754. The precision of the representable numbers is twice as great as IEEE-754 double precision. The correctness of the arithmetic algorithms relies on operations being performed with standard IEEE-754 double precision and rounding. This is the Java standard arithmetic model, but for performance reasons Java implementations are not constrained to using this standard by default. Some processors (notably the Intel Pentium architecture) perform floating point operations in (non-IEEE-754-standard) extended-precision. A JVM implementation may choose to use the non-standard extended-precision as its default arithmetic mode. To prevent this from happening, this code uses the Java strictfp modifier, which forces all operations to take place in the standard IEEE-754 rounding model. The API provides both a set of value-oriented operations and a set of mutating operations. Value-oriented operations treat DoubleDouble values as immutable; operations on them return new objects carrying the result of the operation. This provides a simple and safe semantics for writing DoubleDouble expressions. However, there is a performance penalty for the object allocations required. The mutable interface updates object values in-place. It provides optimum memory performance, but requires care to ensure that aliasing errors are not created and constant values are not changed. This implementation uses algorithms originally designed variously by Knuth, Kahan, Dekker, and Linnainmaa. Douglas Priest developed the first C implementation of these techniques. Other more recent C++ implementation are due to Keith M. Briggs and David Bailey et al. References Priest, D., Algorithms for Arbitrary Precision Floating Point Arithmetic, in P. Kornerup and D. Matula, Eds., Proc. 10th Symposium on Computer Arithmetic, IEEE Computer Society Press, Los Alamitos, Calif., 1991. Yozo Hida, Xiaoye S. Li and David H. Bailey, Quad-Double Arithmetic: Algorithms, Implementation, and Application, manuscript, Oct 2000; Lawrence Berkeley National Laboratory Report BNL-46996. David Bailey, High Precision Software Directory; http://crd.lbl.gov/~dhbailey/mpdist/index.html Enums Plane Enumeration for the 3 coordinate planes"
  },
  "api/NetTopologySuite.Noding.BasicSegmentString.html": {
    "href": "api/NetTopologySuite.Noding.BasicSegmentString.html",
    "title": "Class BasicSegmentString | NetTopologySuite",
    "summary": "Class BasicSegmentString Represents a read-only list of contiguous line segments. This can be used for detection of intersections or nodes. ISegmentStrings can carry a context object, which is useful for preserving topological or parentage information. If adding nodes is required use NodedSegmentString. Inheritance object BasicSegmentString Implements ISegmentString Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public class BasicSegmentString : ISegmentString Constructors | Edit this page View Source BasicSegmentString(Coordinate[], object) Creates a new segment string from a list of vertices. Declaration public BasicSegmentString(Coordinate[] pts, object data) Parameters Type Name Description Coordinate[] pts the vertices of the segment string object data the user-defined data of this segment string (may be null) Properties | Edit this page View Source Context Gets the user-defined data for this segment string. Declaration public object Context { get; set; } Property Value Type Description object | Edit this page View Source Coordinates Points that make up ISegmentString Declaration public Coordinate[] Coordinates { get; } Property Value Type Description Coordinate[] | Edit this page View Source Count Gets the number of Coordinates in this segment string. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source IsClosed States whether ISegmentString is closed Declaration public bool IsClosed { get; } Property Value Type Description bool | Edit this page View Source this[int] Declaration public LineSegment this[int index] { get; set; } Parameters Type Name Description int index Property Value Type Description LineSegment Methods | Edit this page View Source GetCoordinate(int) Declaration public Coordinate GetCoordinate(int idx) Parameters Type Name Description int idx Returns Type Description Coordinate | Edit this page View Source GetSegmentOctant(int) Gets the octant of the segment starting at vertex index Declaration public Octants GetSegmentOctant(int index) Parameters Type Name Description int index the index of the vertex starting the segment. Must not be the last index in the vertex list Returns Type Description Octants octant of the segment at the vertex | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Implements ISegmentString Extension Methods SegmentStringEx.GetCoordinate(ISegmentString, int) SegmentStringEx.NextInRing(ISegmentString, int) SegmentStringEx.PrevInRing(ISegmentString, int) See Also NodedSegmentString"
  },
  "api/NetTopologySuite.Noding.BoundaryChainNoder.html": {
    "href": "api/NetTopologySuite.Noding.BoundaryChainNoder.html",
    "title": "Class BoundaryChainNoder | NetTopologySuite",
    "summary": "Class BoundaryChainNoder A noder which extracts chains of boundary segments as {@link SegmentString}s from a polygonal coverage. Boundary segments are those which are not duplicated in the input polygonal coverage. Extracting chains of segments minimize the number of segment strings created, which produces a more efficient topological graph structure. This enables fast overlay of polygonal coverages in CoverageUnion. Using this noder is faster than SegmentExtractingNoder and BoundarySegmentNoder. No precision reduction is carried out. If that is required, another noder must be used (such as a snap-rounding noder), or the input must be precision-reduced beforehand. Inheritance object BoundaryChainNoder Implements INoder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public class BoundaryChainNoder : INoder Constructors | Edit this page View Source BoundaryChainNoder() Creates a new boundary-extracting noder. Declaration public BoundaryChainNoder() Methods | Edit this page View Source ComputeNodes(IList<ISegmentString>) Computes the noding for a collection of ISegmentStrings. Some Noders may add all these nodes to the input ISegmentStrings; others may only add some or none at all. Declaration public void ComputeNodes(IList<ISegmentString> segStrings) Parameters Type Name Description IList<ISegmentString> segStrings | Edit this page View Source GetNodedSubstrings() Returns a IList<T> of fully noded ISegmentStrings. The ISegmentStrings have the same context as their parent. Declaration public IList<ISegmentString> GetNodedSubstrings() Returns Type Description IList<ISegmentString> Implements INoder"
  },
  "api/NetTopologySuite.Noding.BoundarySegmentNoder.html": {
    "href": "api/NetTopologySuite.Noding.BoundarySegmentNoder.html",
    "title": "Class BoundarySegmentNoder | NetTopologySuite",
    "summary": "Class BoundarySegmentNoder A noder which extracts boundary line segments as ISegmentString. Boundary segments are those which are not duplicated in the input. It is appropriate for use with valid polygonal coverages. No precision reduction is carried out. If that is required, another noder must be used (such as a snap-rounding noder), or the input must be precision-reduced beforehand. Inheritance object BoundarySegmentNoder Implements INoder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public class BoundarySegmentNoder : INoder Constructors | Edit this page View Source BoundarySegmentNoder() Creates a new segment-dissolving noder. Declaration public BoundarySegmentNoder() Methods | Edit this page View Source ComputeNodes(IList<ISegmentString>) Computes the noding for a collection of ISegmentStrings. Some Noders may add all these nodes to the input ISegmentStrings; others may only add some or none at all. Declaration public void ComputeNodes(IList<ISegmentString> segStrings) Parameters Type Name Description IList<ISegmentString> segStrings | Edit this page View Source GetNodedSubstrings() Returns a IList<T> of fully noded ISegmentStrings. The ISegmentStrings have the same context as their parent. Declaration public IList<ISegmentString> GetNodedSubstrings() Returns Type Description IList<ISegmentString> Implements INoder"
  },
  "api/NetTopologySuite.Noding.FastNodingValidator.html": {
    "href": "api/NetTopologySuite.Noding.FastNodingValidator.html",
    "title": "Class FastNodingValidator | NetTopologySuite",
    "summary": "Class FastNodingValidator Validates that a collection of ISegmentStrings is correctly noded. Indexing is used to improve performance. Inheritance object FastNodingValidator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public class FastNodingValidator Remarks By default validation stops after a single non-noded intersection is detected. Alternatively, it can be requested to detect all intersections by using the FindAllIntersections property. The validator does not check for topology collapse situations (e.g. where two segment strings are fully co-incident). The validator checks for the following situations which indicated incorrect noding: The client may either test the IsValid condition, or request that a suitable TopologyException be thrown. Constructors | Edit this page View Source FastNodingValidator(IEnumerable<ISegmentString>) Creates a new noding validator for a given set of linework. Declaration public FastNodingValidator(IEnumerable<ISegmentString> segStrings) Parameters Type Name Description IEnumerable<ISegmentString> segStrings A collection of ISegmentStrings Properties | Edit this page View Source FindAllIntersections Gets or sets whether all intersections should be found. Declaration public bool FindAllIntersections { get; set; } Property Value Type Description bool | Edit this page View Source Intersections Gets a list of all intersections found. Intersections are represented as Coordinates. List is empty if none were found. Declaration public IList<Coordinate> Intersections { get; } Property Value Type Description IList<Coordinate> | Edit this page View Source IsValid Checks for an intersection and reports if one is found. Declaration public bool IsValid { get; } Property Value Type Description bool Methods | Edit this page View Source CheckValid() Checks for an intersection and throws a TopologyException if one is found. Declaration public void CheckValid() Exceptions Type Condition TopologyException if an intersection is found | Edit this page View Source ComputeIntersections(IEnumerable<ISegmentString>) Gets a list of all intersections found. Intersections are represented as Coordinates. List is empty if none were found. A collection of SegmentStrings a list of Coordinate Declaration public static IList<Coordinate> ComputeIntersections(IEnumerable<ISegmentString> segStrings) Parameters Type Name Description IEnumerable<ISegmentString> segStrings Returns Type Description IList<Coordinate> | Edit this page View Source GetErrorMessage() Returns an error message indicating the segments containing the intersection. Declaration public string GetErrorMessage() Returns Type Description string an error message documenting the intersection location See Also NodingValidator"
  },
  "api/NetTopologySuite.Noding.FastSegmentSetIntersectionFinder.html": {
    "href": "api/NetTopologySuite.Noding.FastSegmentSetIntersectionFinder.html",
    "title": "Class FastSegmentSetIntersectionFinder | NetTopologySuite",
    "summary": "Class FastSegmentSetIntersectionFinder Finds if two sets of ISegmentStrings intersect. Inheritance object FastSegmentSetIntersectionFinder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public class FastSegmentSetIntersectionFinder Remarks Uses indexing for fast performance and to optimize repeated tests against a target set of lines. Short-circuited to return as soon an intersection is found. Immutable and thread-safe. Constructors | Edit this page View Source FastSegmentSetIntersectionFinder(IEnumerable<ISegmentString>) Creates an intersection finder against a given set of segment strings. Declaration public FastSegmentSetIntersectionFinder(IEnumerable<ISegmentString> baseSegStrings) Parameters Type Name Description IEnumerable<ISegmentString> baseSegStrings The segment strings to search for intersections | Edit this page View Source FastSegmentSetIntersectionFinder(IEnumerable<ISegmentString>, ElevationModel) Creates an intersection finder against a given set of segment strings. Declaration public FastSegmentSetIntersectionFinder(IEnumerable<ISegmentString> baseSegStrings, ElevationModel em) Parameters Type Name Description IEnumerable<ISegmentString> baseSegStrings The segment strings to search for intersections ElevationModel em An elevation model, may be null Properties | Edit this page View Source SegmentSetIntersector Gets the segment set intersector used by this class. Declaration public ISegmentSetMutualIntersector SegmentSetIntersector { get; } Property Value Type Description ISegmentSetMutualIntersector Remarks This allows other uses of the same underlying indexed structure. Methods | Edit this page View Source Intersects(IList<ISegmentString>) Tests for intersections with a given set of target ISegmentStrings. Declaration public bool Intersects(IList<ISegmentString> segStrings) Parameters Type Name Description IList<ISegmentString> segStrings The SegmentStrings to test Returns Type Description bool true if an intersection was found | Edit this page View Source Intersects(IList<ISegmentString>, SegmentIntersectionDetector) Tests for intersections with a given set of target ISegmentStrings. using a given SegmentIntersectionDetector. Declaration public bool Intersects(IList<ISegmentString> segStrings, SegmentIntersectionDetector intDetector) Parameters Type Name Description IList<ISegmentString> segStrings The SegmentStrings to test SegmentIntersectionDetector intDetector The intersection detector to use Returns Type Description bool true if the detector reports intersections"
  },
  "api/NetTopologySuite.Noding.INodableSegmentString.html": {
    "href": "api/NetTopologySuite.Noding.INodableSegmentString.html",
    "title": "Interface INodableSegmentString | NetTopologySuite",
    "summary": "Interface INodableSegmentString An interface for classes which support adding nodes to a segment string. Inherited Members ISegmentString.Context ISegmentString.Count ISegmentString.Coordinates ISegmentString.IsClosed ISegmentString.this[int] Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public interface INodableSegmentString : ISegmentString Methods | Edit this page View Source AddIntersection(Coordinate, int) Adds an intersection node for a given point and segment to this segment string. Declaration void AddIntersection(Coordinate intPt, int segmentIndex) Parameters Type Name Description Coordinate intPt the location of the intersection int segmentIndex the index of the segment containing the intersection Extension Methods SegmentStringEx.GetCoordinate(ISegmentString, int) SegmentStringEx.NextInRing(ISegmentString, int) SegmentStringEx.PrevInRing(ISegmentString, int)"
  },
  "api/NetTopologySuite.Noding.INoder.html": {
    "href": "api/NetTopologySuite.Noding.INoder.html",
    "title": "Interface INoder | NetTopologySuite",
    "summary": "Interface INoder Computes all intersections between segments in a set of ISegmentStrings. Intersections found are represented as SegmentNodes and added to the ISegmentStrings in which they occur. As a final step in the noding a new set of segment strings split at the nodes may be returned. Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public interface INoder Methods | Edit this page View Source ComputeNodes(IList<ISegmentString>) Computes the noding for a collection of ISegmentStrings. Some Noders may add all these nodes to the input ISegmentStrings; others may only add some or none at all. Declaration void ComputeNodes(IList<ISegmentString> segStrings) Parameters Type Name Description IList<ISegmentString> segStrings | Edit this page View Source GetNodedSubstrings() Returns a IList<T> of fully noded ISegmentStrings. The ISegmentStrings have the same context as their parent. Declaration IList<ISegmentString> GetNodedSubstrings() Returns Type Description IList<ISegmentString>"
  },
  "api/NetTopologySuite.Noding.ISegmentIntersector.html": {
    "href": "api/NetTopologySuite.Noding.ISegmentIntersector.html",
    "title": "Interface ISegmentIntersector | NetTopologySuite",
    "summary": "Interface ISegmentIntersector Processes possible intersections detected by a INoder. Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public interface ISegmentIntersector Remarks The ISegmentIntersector is passed to a INoder. The ProcessIntersections(ISegmentString, int, ISegmentString, int) method is called whenever the INoder detects that two ISegmentStrings might intersect. This class may be used either to find all intersections, or to detect the presence of an intersection. In the latter case, Noders may choose to short-circuit their computation by calling the IsDone property. This class is an example of the Strategy pattern. This class may be used either to find all intersections, or to detect the presence of an intersection. In the latter case, Noders may choose to short-circuit their computation by calling the IsDone property. Properties | Edit this page View Source IsDone Reports whether the client of this class needs to continue testing all intersections in an arrangement. Declaration bool IsDone { get; } Property Value Type Description bool if there is no need to continue testing segments Methods | Edit this page View Source ProcessIntersections(ISegmentString, int, ISegmentString, int) This method is called by clients of the ISegmentIntersector interface to process intersections for two segments of the ISegmentStrings being intersected. Declaration void ProcessIntersections(ISegmentString e0, int segIndex0, ISegmentString e1, int segIndex1) Parameters Type Name Description ISegmentString e0 int segIndex0 ISegmentString e1 int segIndex1"
  },
  "api/NetTopologySuite.Noding.ISegmentSetMutualIntersector.html": {
    "href": "api/NetTopologySuite.Noding.ISegmentSetMutualIntersector.html",
    "title": "Interface ISegmentSetMutualIntersector | NetTopologySuite",
    "summary": "Interface ISegmentSetMutualIntersector An intersector for the red-blue intersection problem. In this class of line arrangement problem, two disjoint sets of linestrings are intersected. Implementing classes must provide a way of supplying the base set of segment strings to test against (e.g. in the constructor, for straightforward thread-safety). In order to allow optimizing processing, the following condition is assumed to hold for each set: Implementations can take advantage of this fact to optimize processing (i.e. by avoiding testing for intersections between linestrings belonging to the same set). Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public interface ISegmentSetMutualIntersector Methods | Edit this page View Source Process(IEnumerable<ISegmentString>, ISegmentIntersector) Computes the intersections with a given set of ISegmentStrings, using the supplied ISegmentIntersector. Declaration void Process(IEnumerable<ISegmentString> segmentStrings, ISegmentIntersector segmentIntersector) Parameters Type Name Description IEnumerable<ISegmentString> segmentStrings A collection of ISegmentStrings to node ISegmentIntersector segmentIntersector The intersection detector to either record intersection occurrences or add intersection nodes to the input segment strings."
  },
  "api/NetTopologySuite.Noding.ISegmentString.html": {
    "href": "api/NetTopologySuite.Noding.ISegmentString.html",
    "title": "Interface ISegmentString | NetTopologySuite",
    "summary": "Interface ISegmentString An interface for classes which represent a sequence of contiguous line segments. SegmentStrings can carry a context object, which is useful for preserving topological or parentage information. Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public interface ISegmentString Properties | Edit this page View Source Context Gets/Sets the user-defined data for this segment string. Declaration object Context { get; set; } Property Value Type Description object | Edit this page View Source Coordinates Points that make up ISegmentString Declaration Coordinate[] Coordinates { get; } Property Value Type Description Coordinate[] | Edit this page View Source Count Gets the number of Coordinates in this segment string. Declaration int Count { get; } Property Value Type Description int | Edit this page View Source IsClosed States whether ISegmentString is closed Declaration bool IsClosed { get; } Property Value Type Description bool | Edit this page View Source this[int] Declaration LineSegment this[int index] { get; set; } Parameters Type Name Description int index Property Value Type Description LineSegment Extension Methods SegmentStringEx.GetCoordinate(ISegmentString, int) SegmentStringEx.NextInRing(ISegmentString, int) SegmentStringEx.PrevInRing(ISegmentString, int)"
  },
  "api/NetTopologySuite.Noding.InteriorIntersectionFinderAdder.html": {
    "href": "api/NetTopologySuite.Noding.InteriorIntersectionFinderAdder.html",
    "title": "Class InteriorIntersectionFinderAdder | NetTopologySuite",
    "summary": "Class InteriorIntersectionFinderAdder Finds interior intersections between line segments in NodedSegmentStrings, and adds them as nodes using AddIntersection(LineIntersector, int, int, int). This class is used primarily for Snap-Rounding. For general-purpose noding, use IntersectionAdder. Inheritance object InteriorIntersectionFinderAdder Implements ISegmentIntersector Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public class InteriorIntersectionFinderAdder : ISegmentIntersector Constructors | Edit this page View Source InteriorIntersectionFinderAdder(LineIntersector) Creates an intersection finder which finds all proper intersections. Declaration public InteriorIntersectionFinderAdder(LineIntersector li) Parameters Type Name Description LineIntersector li The LineIntersector to use. Properties | Edit this page View Source InteriorIntersections Declaration public IList<Coordinate> InteriorIntersections { get; } Property Value Type Description IList<Coordinate> | Edit this page View Source IsDone Always process all intersections Declaration public bool IsDone { get; } Property Value Type Description bool Methods | Edit this page View Source ProcessIntersections(ISegmentString, int, ISegmentString, int) This method is called by clients of the ISegmentIntersector class to process intersections for two segments of the ISegmentStrings being intersected. Note that some clients (such as MonotoneChains) may optimize away this call for segment pairs which they have determined do not intersect (e.g. by an disjoint envelope test). Declaration public void ProcessIntersections(ISegmentString e0, int segIndex0, ISegmentString e1, int segIndex1) Parameters Type Name Description ISegmentString e0 int segIndex0 ISegmentString e1 int segIndex1 Implements ISegmentIntersector See Also IntersectionAdder"
  },
  "api/NetTopologySuite.Noding.IntersectionAdder.html": {
    "href": "api/NetTopologySuite.Noding.IntersectionAdder.html",
    "title": "Class IntersectionAdder | NetTopologySuite",
    "summary": "Class IntersectionAdder Computes the possible intersections between two line segments in ISegmentStrings and adds them to each string using AddIntersection(LineIntersector, int, int, int). Inheritance object IntersectionAdder Implements ISegmentIntersector Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public class IntersectionAdder : ISegmentIntersector Constructors | Edit this page View Source IntersectionAdder(LineIntersector) Initializes a new instance of the IntersectionAdder class. Declaration public IntersectionAdder(LineIntersector li) Parameters Type Name Description LineIntersector li Fields | Edit this page View Source NumInteriorIntersections Declaration public int NumInteriorIntersections Field Value Type Description int | Edit this page View Source NumIntersections Declaration public int NumIntersections Field Value Type Description int | Edit this page View Source NumProperIntersections Declaration public int NumProperIntersections Field Value Type Description int | Edit this page View Source NumTests Declaration public int NumTests Field Value Type Description int Properties | Edit this page View Source HasInteriorIntersection An interior intersection is an intersection which is in the interior of some segment. Declaration public bool HasInteriorIntersection { get; } Property Value Type Description bool | Edit this page View Source HasIntersection Declaration public bool HasIntersection { get; } Property Value Type Description bool | Edit this page View Source HasProperInteriorIntersection A proper interior intersection is a proper intersection which is not contained in the set of boundary nodes set for this ISegmentIntersector. Declaration public bool HasProperInteriorIntersection { get; } Property Value Type Description bool | Edit this page View Source HasProperIntersection A proper intersection is an intersection which is interior to at least two line segments. Note that a proper intersection is not necessarily in the interior of the entire Geometry, since another edge may have an endpoint equal to the intersection, which according to SFS semantics can result in the point being on the Boundary of the Geometry. Declaration public bool HasProperIntersection { get; } Property Value Type Description bool | Edit this page View Source IsDone Always process all intersections Declaration public bool IsDone { get; } Property Value Type Description bool | Edit this page View Source LineIntersector Declaration public LineIntersector LineIntersector { get; } Property Value Type Description LineIntersector | Edit this page View Source ProperIntersectionPoint Returns the proper intersection point, or null if none was found. Declaration public Coordinate ProperIntersectionPoint { get; } Property Value Type Description Coordinate Methods | Edit this page View Source IsAdjacentSegments(int, int) Declaration public static bool IsAdjacentSegments(int i1, int i2) Parameters Type Name Description int i1 int i2 Returns Type Description bool | Edit this page View Source ProcessIntersections(ISegmentString, int, ISegmentString, int) This method is called by clients of the ISegmentIntersector class to process intersections for two segments of the ISegmentString being intersected. Note that some clients (such as MonotoneChain\") may optimize away this call for segment pairs which they have determined do not intersect (e.g. by an disjoint envelope test). Declaration public void ProcessIntersections(ISegmentString e0, int segIndex0, ISegmentString e1, int segIndex1) Parameters Type Name Description ISegmentString e0 int segIndex0 ISegmentString e1 int segIndex1 Implements ISegmentIntersector"
  },
  "api/NetTopologySuite.Noding.IteratedNoder.html": {
    "href": "api/NetTopologySuite.Noding.IteratedNoder.html",
    "title": "Class IteratedNoder | NetTopologySuite",
    "summary": "Class IteratedNoder Nodes a set of ISegmentStrings completely. The set of ISegmentStrings is fully noded; i.e. noding is repeated until no further intersections are detected. Iterated noding using a Floating precision model is not guaranteed to converge, due to round off error. This problem is detected and an exception is thrown. Clients can choose to rerun the noding using a lower precision model. Inheritance object IteratedNoder Implements INoder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public class IteratedNoder : INoder Constructors | Edit this page View Source IteratedNoder(PrecisionModel) Initializes a new instance of the IteratedNoder class. Declaration public IteratedNoder(PrecisionModel pm) Parameters Type Name Description PrecisionModel pm Fields | Edit this page View Source MaxIterations Declaration public const int MaxIterations = 5 Field Value Type Description int Properties | Edit this page View Source MaximumIterations Gets/Sets the maximum number of noding iterations performed before the noding is aborted. Experience suggests that this should rarely need to be changed from the default. The default is MaxIterations. Declaration public int MaximumIterations { get; set; } Property Value Type Description int Methods | Edit this page View Source ComputeNodes(IList<ISegmentString>) Fully nodes a list of ISegmentStrings, i.e. performs noding iteratively until no intersections are found between segments. Maintains labelling of edges correctly through the noding. Declaration public void ComputeNodes(IList<ISegmentString> segStrings) Parameters Type Name Description IList<ISegmentString> segStrings A collection of SegmentStrings to be noded. Exceptions Type Condition TopologyException If the iterated noding fails to converge. | Edit this page View Source GetNodedSubstrings() Returns a IList of fully noded ISegmentStrings. The ISegmentStrings have the same context as their parent. Declaration public IList<ISegmentString> GetNodedSubstrings() Returns Type Description IList<ISegmentString> Implements INoder"
  },
  "api/NetTopologySuite.Noding.MCIndexNoder.SegmentOverlapAction.html": {
    "href": "api/NetTopologySuite.Noding.MCIndexNoder.SegmentOverlapAction.html",
    "title": "Class MCIndexNoder.SegmentOverlapAction | NetTopologySuite",
    "summary": "Class MCIndexNoder.SegmentOverlapAction Inheritance object MonotoneChainOverlapAction MCIndexNoder.SegmentOverlapAction Inherited Members MonotoneChainOverlapAction.overlapSeg1 MonotoneChainOverlapAction.overlapSeg2 MonotoneChainOverlapAction.Overlap(LineSegment, LineSegment) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public class MCIndexNoder.SegmentOverlapAction : MonotoneChainOverlapAction Constructors | Edit this page View Source SegmentOverlapAction(ISegmentIntersector) Initializes a new instance of the MCIndexNoder.SegmentOverlapAction class. Declaration public SegmentOverlapAction(ISegmentIntersector si) Parameters Type Name Description ISegmentIntersector si The ISegmentIntersector Methods | Edit this page View Source Overlap(MonotoneChain, int, MonotoneChain, int) Declaration public override void Overlap(MonotoneChain mc1, int start1, MonotoneChain mc2, int start2) Parameters Type Name Description MonotoneChain mc1 int start1 MonotoneChain mc2 int start2 Overrides MonotoneChainOverlapAction.Overlap(MonotoneChain, int, MonotoneChain, int)"
  },
  "api/NetTopologySuite.Noding.MCIndexNoder.html": {
    "href": "api/NetTopologySuite.Noding.MCIndexNoder.html",
    "title": "Class MCIndexNoder | NetTopologySuite",
    "summary": "Class MCIndexNoder Nodes a set of ISegmentStrings using a index based on MonotoneChains and a ISpatialIndex<T>. The ISpatialIndex<T> used should be something that supports envelope (range) queries efficiently (such as a Quadtree\" or HPRtree<T>. The noder supports using an overlap tolerance distance. This allows determining segment intersection using a buffer for uses involving snapping with a distance tolerance. Inheritance object SinglePassNoder MCIndexNoder Implements INoder Inherited Members SinglePassNoder.SegmentIntersector object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public class MCIndexNoder : SinglePassNoder, INoder Constructors | Edit this page View Source MCIndexNoder() Initializes a new instance of the MCIndexNoder class. Declaration public MCIndexNoder() | Edit this page View Source MCIndexNoder(ISegmentIntersector) Initializes a new instance of the MCIndexNoder class. Declaration public MCIndexNoder(ISegmentIntersector si) Parameters Type Name Description ISegmentIntersector si The ISegmentIntersector to use. | Edit this page View Source MCIndexNoder(ISegmentIntersector, double) Initializes a new instance of the MCIndexNoder class. Declaration public MCIndexNoder(ISegmentIntersector si, double overlapTolerance) Parameters Type Name Description ISegmentIntersector si The ISegmentIntersector to use. double overlapTolerance The expansion distance for overlap tests Properties | Edit this page View Source Index Declaration public ISpatialIndex<MonotoneChain> Index { get; } Property Value Type Description ISpatialIndex<MonotoneChain> | Edit this page View Source MonotoneChains Declaration public IList<MonotoneChain> MonotoneChains { get; } Property Value Type Description IList<MonotoneChain> Methods | Edit this page View Source ComputeNodes(IList<ISegmentString>) Computes the noding for a collection of ISegmentStrings. Some Noders may add all these nodes to the input ISegmentStrings; others may only add some or none at all. Declaration public override void ComputeNodes(IList<ISegmentString> inputSegStrings) Parameters Type Name Description IList<ISegmentString> inputSegStrings Overrides SinglePassNoder.ComputeNodes(IList<ISegmentString>) | Edit this page View Source GetNodedSubstrings() Returns a IList<T> of fully noded ISegmentStrings. The ISegmentStrings have the same context as their parent. Declaration public override IList<ISegmentString> GetNodedSubstrings() Returns Type Description IList<ISegmentString> Overrides SinglePassNoder.GetNodedSubstrings() Implements INoder"
  },
  "api/NetTopologySuite.Noding.MCIndexSegmentSetMutualIntersector.SegmentOverlapAction.html": {
    "href": "api/NetTopologySuite.Noding.MCIndexSegmentSetMutualIntersector.SegmentOverlapAction.html",
    "title": "Class MCIndexSegmentSetMutualIntersector.SegmentOverlapAction | NetTopologySuite",
    "summary": "Class MCIndexSegmentSetMutualIntersector.SegmentOverlapAction Segment overlap action class Inheritance object MonotoneChainOverlapAction MCIndexSegmentSetMutualIntersector.SegmentOverlapAction Inherited Members MonotoneChainOverlapAction.overlapSeg1 MonotoneChainOverlapAction.overlapSeg2 MonotoneChainOverlapAction.Overlap(LineSegment, LineSegment) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public class MCIndexSegmentSetMutualIntersector.SegmentOverlapAction : MonotoneChainOverlapAction Constructors | Edit this page View Source SegmentOverlapAction(ISegmentIntersector) Creates an instance of this class using the provided ISegmentIntersector Declaration public SegmentOverlapAction(ISegmentIntersector si) Parameters Type Name Description ISegmentIntersector si The segment intersector to use Methods | Edit this page View Source Overlap(MonotoneChain, int, MonotoneChain, int) This function can be overridden if the original chains are needed. Declaration public override void Overlap(MonotoneChain mc1, int start1, MonotoneChain mc2, int start2) Parameters Type Name Description MonotoneChain mc1 int start1 The index of the start of the overlapping segment from mc1. MonotoneChain mc2 int start2 The index of the start of the overlapping segment from mc2. Overrides MonotoneChainOverlapAction.Overlap(MonotoneChain, int, MonotoneChain, int)"
  },
  "api/NetTopologySuite.Noding.MCIndexSegmentSetMutualIntersector.html": {
    "href": "api/NetTopologySuite.Noding.MCIndexSegmentSetMutualIntersector.html",
    "title": "Class MCIndexSegmentSetMutualIntersector | NetTopologySuite",
    "summary": "Class MCIndexSegmentSetMutualIntersector Intersects two sets of ISegmentStrings using a index based on MonotoneChains and a ISpatialIndex<T>. Thread-safe and immutable. Inheritance object MCIndexSegmentSetMutualIntersector Implements ISegmentSetMutualIntersector Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public class MCIndexSegmentSetMutualIntersector : ISegmentSetMutualIntersector Constructors | Edit this page View Source MCIndexSegmentSetMutualIntersector(IEnumerable<ISegmentString>) Constructs a new intersector for a given set of ISegmentStrings. Declaration public MCIndexSegmentSetMutualIntersector(IEnumerable<ISegmentString> baseSegStrings) Parameters Type Name Description IEnumerable<ISegmentString> baseSegStrings The base segment strings to intersect | Edit this page View Source MCIndexSegmentSetMutualIntersector(IEnumerable<ISegmentString>, Envelope) Constructs a new intersector for a given set of ISegmentStrings. Declaration public MCIndexSegmentSetMutualIntersector(IEnumerable<ISegmentString> baseSegStrings, Envelope env) Parameters Type Name Description IEnumerable<ISegmentString> baseSegStrings The base segment strings to intersect Envelope env The envelope | Edit this page View Source MCIndexSegmentSetMutualIntersector(IEnumerable<ISegmentString>, double) Constructs a new intersector for a given set of ISegmentStrings. Declaration public MCIndexSegmentSetMutualIntersector(IEnumerable<ISegmentString> baseSegStrings, double overlapTolerance) Parameters Type Name Description IEnumerable<ISegmentString> baseSegStrings The base segment strings to intersect double overlapTolerance A tolerance for overlapping segments Properties | Edit this page View Source Index Gets the index constructed over the base segment strings Declaration public ISpatialIndex<MonotoneChain> Index { get; } Property Value Type Description ISpatialIndex<MonotoneChain> Remarks NOTE: To retain thread-safety, treat returned value as immutable Methods | Edit this page View Source Process(IEnumerable<ISegmentString>, ISegmentIntersector) Calls ProcessIntersections(ISegmentString, int, ISegmentString, int) for all candidate intersections between the given collection of SegmentStrings and the set of indexed segments. Declaration public void Process(IEnumerable<ISegmentString> segStrings, ISegmentIntersector segInt) Parameters Type Name Description IEnumerable<ISegmentString> segStrings A set of segments to intersect ISegmentIntersector segInt The SegmentIntersector to use Implements ISegmentSetMutualIntersector"
  },
  "api/NetTopologySuite.Noding.NodedSegmentString.html": {
    "href": "api/NetTopologySuite.Noding.NodedSegmentString.html",
    "title": "Class NodedSegmentString | NetTopologySuite",
    "summary": "Class NodedSegmentString Represents a list of contiguous line segments, and supports noding the segments. The line segments are represented by an array of Coordinates. Intended to optimize the noding of contiguous segments by reducing the number of allocated objects. ISegmentStrings can carry a context object, which is useful for preserving topological or parentage information. All noded substrings are initialized with the same context object. For read-only applications use BasicSegmentString, which is (slightly)more lightweight. Inheritance object NodedSegmentString Implements INodableSegmentString ISegmentString Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public class NodedSegmentString : INodableSegmentString, ISegmentString Constructors | Edit this page View Source NodedSegmentString(Coordinate[], object) Creates an instance from a list of vertices and optional data object. Declaration public NodedSegmentString(Coordinate[] pts, object context) Parameters Type Name Description Coordinate[] pts The vertices of the segment string. object context The user-defined data of this segment string (may be null). | Edit this page View Source NodedSegmentString(ISegmentString) Creates a new instance from a ISegmentString. Declaration public NodedSegmentString(ISegmentString ss) Parameters Type Name Description ISegmentString ss The segment string to use. Properties | Edit this page View Source Context Gets/Sets the user-defined data for this segment string. Declaration public object Context { get; set; } Property Value Type Description object Remarks In JTS this property is called Data | Edit this page View Source Coordinates Declaration public Coordinate[] Coordinates { get; } Property Value Type Description Coordinate[] | Edit this page View Source Count Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source HasNodes Gets a value indicating if any nodes have been added. Declaration public bool HasNodes { get; } Property Value Type Description bool | Edit this page View Source IsClosed Declaration public bool IsClosed { get; } Property Value Type Description bool | Edit this page View Source this[int] Declaration public LineSegment this[int index] { get; set; } Parameters Type Name Description int index Property Value Type Description LineSegment | Edit this page View Source NodeList Declaration public SegmentNodeList NodeList { get; } Property Value Type Description SegmentNodeList | Edit this page View Source NodedCoordinates Gets a list of coordinates with all nodes included. Declaration public Coordinate[] NodedCoordinates { get; } Property Value Type Description Coordinate[] An array of coordinates including nodes Methods | Edit this page View Source AddIntersection(LineIntersector, int, int, int) Add an SegmentNode for intersection intIndex. An intersection that falls exactly on a vertex of the NodedSegmentString is normalized to use the higher of the two possible segmentIndexes. Declaration public void AddIntersection(LineIntersector li, int segmentIndex, int geomIndex, int intIndex) Parameters Type Name Description LineIntersector li int segmentIndex int geomIndex int intIndex | Edit this page View Source AddIntersection(Coordinate, int) Declaration public void AddIntersection(Coordinate intPt, int segmentIndex) Parameters Type Name Description Coordinate intPt int segmentIndex | Edit this page View Source AddIntersectionNode(Coordinate, int) Adds an intersection node for a given point and segment to this segment string. If an intersection already exists for this exact location, the existing node will be returned. Declaration public SegmentNode AddIntersectionNode(Coordinate intPt, int segmentIndex) Parameters Type Name Description Coordinate intPt The location of the intersection int segmentIndex The index of the segment containing the intersection Returns Type Description SegmentNode the intersection node for the point | Edit this page View Source AddIntersections(LineIntersector, int, int) Adds EdgeIntersections for one or both intersections found for a segment of an edge to the edge intersection list. Declaration public void AddIntersections(LineIntersector li, int segmentIndex, int geomIndex) Parameters Type Name Description LineIntersector li int segmentIndex int geomIndex | Edit this page View Source GetCoordinate(int) Declaration public Coordinate GetCoordinate(int i) Parameters Type Name Description int i Returns Type Description Coordinate | Edit this page View Source GetNodedSubstrings(IEnumerable<ISegmentString>) Gets the ISegmentStrings which result from splitting this string at node points. Declaration public static ReadOnlyCollection<ISegmentString> GetNodedSubstrings(IEnumerable<ISegmentString> segStrings) Parameters Type Name Description IEnumerable<ISegmentString> segStrings A collection of NodedSegmentStrings Returns Type Description ReadOnlyCollection<ISegmentString> A collection of NodedSegmentStrings representing the substrings | Edit this page View Source GetNodedSubstrings(IEnumerable<ISegmentString>, ICollection<ISegmentString>) Adds the noded ISegmentStrings which result from splitting this string at node points. Declaration public static void GetNodedSubstrings(IEnumerable<ISegmentString> segStrings, ICollection<ISegmentString> resultEdgelist) Parameters Type Name Description IEnumerable<ISegmentString> segStrings A collection of NodedSegmentStrings ICollection<ISegmentString> resultEdgelist A list which will collect the NodedSegmentStrings representing the substrings | Edit this page View Source GetSegmentOctant(int) Gets the octant of the segment starting at vertex index. Declaration public Octants GetSegmentOctant(int index) Parameters Type Name Description int index The index of the vertex starting the segment. Must not be the last index in the vertex list Returns Type Description Octants The octant of the segment at the vertex | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Implements INodableSegmentString ISegmentString Extension Methods SegmentStringEx.GetCoordinate(ISegmentString, int) SegmentStringEx.NextInRing(ISegmentString, int) SegmentStringEx.PrevInRing(ISegmentString, int) See Also BasicSegmentString"
  },
  "api/NetTopologySuite.Noding.NodingIntersectionFinder.html": {
    "href": "api/NetTopologySuite.Noding.NodingIntersectionFinder.html",
    "title": "Class NodingIntersectionFinder | NetTopologySuite",
    "summary": "Class NodingIntersectionFinder Finds non-noded intersections in a set of {@link SegmentString}s, if any exist. Non-noded intersections include: The finder can be limited to finding only interior intersections by setting InteriorIntersectionsOnly. By default only the first intersection is found, but all can be found by setting FindAllIntersections. Inheritance object NodingIntersectionFinder Implements ISegmentIntersector Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public class NodingIntersectionFinder : ISegmentIntersector Constructors | Edit this page View Source NodingIntersectionFinder(LineIntersector) Creates an intersection finder which finds an interior intersection if one exists Declaration public NodingIntersectionFinder(LineIntersector li) Parameters Type Name Description LineIntersector li the LineIntersector to use Properties | Edit this page View Source CheckEndSegmentsOnly Gets/Sets whether only end segments should be tested for intersection. This is a performance optimization that may be used if the segments have been previously noded by an appropriate algorithm. It may be known that any potential noding failures will occur only in end segments. Declaration public bool CheckEndSegmentsOnly { get; set; } Property Value Type Description bool | Edit this page View Source Count Gets the count of intersections found. Declaration public int Count { get; } Property Value Type Description int The intersection count. | Edit this page View Source FindAllIntersections Gets/Sets whether all intersections should be computed. When this is false (the default value), the value of IsDone is true after the first intersection is found. Default is false. Declaration public bool FindAllIntersections { get; set; } Property Value Type Description bool | Edit this page View Source HasIntersection Tests whether an intersection was found. Declaration public bool HasIntersection { get; } Property Value Type Description bool | Edit this page View Source InteriorIntersection Gets the computed location of the intersection. Due to round-off, the location may not be exact. Declaration [Obsolete(\"Renamed to just Intersection\")] public Coordinate InteriorIntersection { get; } Property Value Type Description Coordinate | Edit this page View Source InteriorIntersectionsOnly Gets or sets a value indicating whether only interior (proper) intersections will be found. Declaration public bool InteriorIntersectionsOnly { get; set; } Property Value Type Description bool | Edit this page View Source Intersection Gets the computed location of the intersection. Due to round-off, the location may not be exact. Declaration public Coordinate Intersection { get; } Property Value Type Description Coordinate | Edit this page View Source IntersectionSegments Gets the endpoints of the intersecting segments. Declaration public Coordinate[] IntersectionSegments { get; } Property Value Type Description Coordinate[] | Edit this page View Source Intersections Gets the intersections found. Declaration public ReadOnlyCollection<Coordinate> Intersections { get; } Property Value Type Description ReadOnlyCollection<Coordinate> A list of Coordinate. | Edit this page View Source IsDone Declaration public bool IsDone { get; } Property Value Type Description bool | Edit this page View Source KeepIntersections Gets/Sets whether intersection points are recorded. If the only need is to count intersection points, this can be set to false. Default is true. Declaration public bool KeepIntersections { get; set; } Property Value Type Description bool Methods | Edit this page View Source CreateAllIntersectionsFinder(LineIntersector) Creates a finder which tests if there is at least one intersection. The intersections are recorded for later inspection. Declaration public static NodingIntersectionFinder CreateAllIntersectionsFinder(LineIntersector li) Parameters Type Name Description LineIntersector li A line intersector. Returns Type Description NodingIntersectionFinder A finder which finds all intersections. | Edit this page View Source CreateAnyIntersectionFinder(LineIntersector) Creates a finder which tests if there is at least one intersection. Uses short-circuiting for efficient performance. The intersection found is recorded. Declaration public static NodingIntersectionFinder CreateAnyIntersectionFinder(LineIntersector li) Parameters Type Name Description LineIntersector li A line intersector. Returns Type Description NodingIntersectionFinder A finder which tests if there is at least one intersection. | Edit this page View Source CreateInteriorIntersectionCounter(LineIntersector) Creates a finder which counts all interior intersections. The intersections are note recorded to reduce memory usage. Declaration public static NodingIntersectionFinder CreateInteriorIntersectionCounter(LineIntersector li) Parameters Type Name Description LineIntersector li A line intersector. Returns Type Description NodingIntersectionFinder A finder which counts all interior intersections. | Edit this page View Source CreateInteriorIntersectionsFinder(LineIntersector) Creates a finder which finds all interior intersections. The intersections are recorded for later inspection. Declaration public static NodingIntersectionFinder CreateInteriorIntersectionsFinder(LineIntersector li) Parameters Type Name Description LineIntersector li A line intersector Returns Type Description NodingIntersectionFinder A finder which finds all interior intersections. | Edit this page View Source CreateIntersectionCounter(LineIntersector) Creates a finder which counts all intersections. The intersections are note recorded to reduce memory usage. Declaration public static NodingIntersectionFinder CreateIntersectionCounter(LineIntersector li) Parameters Type Name Description LineIntersector li A line intersector. Returns Type Description NodingIntersectionFinder A finder which counts all intersections. | Edit this page View Source ProcessIntersections(ISegmentString, int, ISegmentString, int) This method is called by clients of the ISegmentIntersector class to process intersections for two segments of the ISegmentStrings being intersected. Note that some clients (such as MonotoneChains) may optimize away this call for segment pairs which they have determined do not intersect (e.g. by an disjoint envelope test). Declaration public void ProcessIntersections(ISegmentString e0, int segIndex0, ISegmentString e1, int segIndex1) Parameters Type Name Description ISegmentString e0 int segIndex0 ISegmentString e1 int segIndex1 Implements ISegmentIntersector"
  },
  "api/NetTopologySuite.Noding.NodingValidator.html": {
    "href": "api/NetTopologySuite.Noding.NodingValidator.html",
    "title": "Class NodingValidator | NetTopologySuite",
    "summary": "Class NodingValidator Validates that a collection of ISegmentStrings is correctly noded. Throws an appropriate exception if an noding error is found. Inheritance object NodingValidator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public class NodingValidator Constructors | Edit this page View Source NodingValidator(IList<ISegmentString>) Creates a new validator for the given collection of ISegmentStrings. Declaration public NodingValidator(IList<ISegmentString> segStrings) Parameters Type Name Description IList<ISegmentString> segStrings The seg strings. Methods | Edit this page View Source CheckValid() Checks whether the supplied segment strings are correctly noded. Throws an exception if they are not. Declaration public void CheckValid()"
  },
  "api/NetTopologySuite.Noding.Octant.html": {
    "href": "api/NetTopologySuite.Noding.Octant.html",
    "title": "Class Octant | NetTopologySuite",
    "summary": "Class Octant Methods for computing and working with Octants of the Cartesian plane. Inheritance object Octant Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public static class Octant Methods | Edit this page View Source GetOctant(Coordinate, Coordinate) Returns the octant of a directed line segment from p0 to p1. Declaration public static Octants GetOctant(Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p0 Coordinate p1 Returns Type Description Octants | Edit this page View Source GetOctant(double, double) Returns the octant of a directed line segment (specified as x and y displacements, which cannot both be 0). Declaration public static Octants GetOctant(double dx, double dy) Parameters Type Name Description double dx double dy Returns Type Description Octants"
  },
  "api/NetTopologySuite.Noding.Octants.html": {
    "href": "api/NetTopologySuite.Noding.Octants.html",
    "title": "Enum Octants | NetTopologySuite",
    "summary": "Enum Octants Octants in the Cartesian plane. Octants are numbered as follows: \\2|1/ 3 \\|/ 0 ---+-- 4 /|\\ 7 /5|6\\ If line segments lie along a coordinate axis, the octant is the lower of the two possible values. Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public enum Octants Fields Name Description Five Four Null One Seven Six Three Two Zero"
  },
  "api/NetTopologySuite.Noding.OrientedCoordinateArray.html": {
    "href": "api/NetTopologySuite.Noding.OrientedCoordinateArray.html",
    "title": "Class OrientedCoordinateArray | NetTopologySuite",
    "summary": "Class OrientedCoordinateArray Allows comparing Coordinate arrays in an orientation-independent way. Inheritance object OrientedCoordinateArray Implements IComparable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public class OrientedCoordinateArray : IComparable Constructors | Edit this page View Source OrientedCoordinateArray(Coordinate[]) Creates a new OrientedCoordinateArray} for the given Coordinate array. Declaration public OrientedCoordinateArray(Coordinate[] pts) Parameters Type Name Description Coordinate[] pts Methods | Edit this page View Source CompareTo(object) Compares two OrientedCoordinateArrays for their relative order. Declaration public int CompareTo(object o1) Parameters Type Name Description object o1 Returns Type Description int -1 this one is smaller; 0 the two objects are equal; 1 this one is greater. Implements IComparable"
  },
  "api/NetTopologySuite.Noding.ScaledNoder.html": {
    "href": "api/NetTopologySuite.Noding.ScaledNoder.html",
    "title": "Class ScaledNoder | NetTopologySuite",
    "summary": "Class ScaledNoder Wraps a INoder and transforms its input into the integer domain. This is intended for use with Snap-Rounding noders, which typically are only intended to work in the integer domain. Clients should be aware that rescaling can involve loss of precision, which can cause zero-length line segments to be created. These in turn can cause problems when used to build a planar graph. This situation should be checked for and collapsed segments removed if necessary. Inheritance object ScaledNoder Implements INoder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public class ScaledNoder : INoder Constructors | Edit this page View Source ScaledNoder(INoder, double) Initializes a new instance of the ScaledNoder class. Declaration public ScaledNoder(INoder noder, double scaleFactor) Parameters Type Name Description INoder noder The noder to use double scaleFactor The scale factor to use Properties | Edit this page View Source IsIntegerPrecision Declaration public bool IsIntegerPrecision { get; } Property Value Type Description bool Methods | Edit this page View Source ComputeNodes(IList<ISegmentString>) Declaration public void ComputeNodes(IList<ISegmentString> inputSegStrings) Parameters Type Name Description IList<ISegmentString> inputSegStrings | Edit this page View Source GetNodedSubstrings() Declaration public IList<ISegmentString> GetNodedSubstrings() Returns Type Description IList<ISegmentString> Implements INoder"
  },
  "api/NetTopologySuite.Noding.SegmentExtractingNoder.html": {
    "href": "api/NetTopologySuite.Noding.SegmentExtractingNoder.html",
    "title": "Class SegmentExtractingNoder | NetTopologySuite",
    "summary": "Class SegmentExtractingNoder A noder which extracts all line segments as ISegmentStrings. This enables fast overlay of geometries which are known to be already fully noded. In particular, it provides fast union of polygonal and linear coverages. Unioning a noded set of lines is an effective way to perform line merging and line dissolving. No precision reduction is carried out. If that is required, another noder must be used (such as a snap-rounding noder), or the input must be precision-reduced beforehand. Inheritance object SegmentExtractingNoder Implements INoder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public sealed class SegmentExtractingNoder : INoder Methods | Edit this page View Source ComputeNodes(IList<ISegmentString>) Computes the noding for a collection of ISegmentStrings. Some Noders may add all these nodes to the input ISegmentStrings; others may only add some or none at all. Declaration public void ComputeNodes(IList<ISegmentString> segStrings) Parameters Type Name Description IList<ISegmentString> segStrings | Edit this page View Source GetNodedSubstrings() Returns a IList<T> of fully noded ISegmentStrings. The ISegmentStrings have the same context as their parent. Declaration public IList<ISegmentString> GetNodedSubstrings() Returns Type Description IList<ISegmentString> Implements INoder"
  },
  "api/NetTopologySuite.Noding.SegmentIntersectionDetector.html": {
    "href": "api/NetTopologySuite.Noding.SegmentIntersectionDetector.html",
    "title": "Class SegmentIntersectionDetector | NetTopologySuite",
    "summary": "Class SegmentIntersectionDetector Detects and records an intersection between two ISegmentStrings, if one exists. Only a single intersection is recorded. Inheritance object SegmentIntersectionDetector Implements ISegmentIntersector Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public class SegmentIntersectionDetector : ISegmentIntersector Remarks This strategy can be configured to search for proper intersections. In this case, the presence of any intersection will still be recorded, but searching will continue until either a proper intersection has been found or no intersections are detected. Constructors | Edit this page View Source SegmentIntersectionDetector() Creates an intersection finder using a RobustLineIntersector Declaration public SegmentIntersectionDetector() | Edit this page View Source SegmentIntersectionDetector(ElevationModel) Creates an intersection finder using a RobustLineIntersector with an ElevationModel Declaration public SegmentIntersectionDetector(ElevationModel em) Parameters Type Name Description ElevationModel em An elevation model. May be null | Edit this page View Source SegmentIntersectionDetector(LineIntersector) Creates an intersection finder using a given LineIntersector Declaration public SegmentIntersectionDetector(LineIntersector li) Parameters Type Name Description LineIntersector li The LineIntersector to use Properties | Edit this page View Source FindAllIntersectionTypes Gets or sets whether processing can terminate once any intersection is found. Declaration public bool FindAllIntersectionTypes { get; set; } Property Value Type Description bool | Edit this page View Source FindProper Gets or sets whether processing must continue until a proper intersection is found Declaration public bool FindProper { get; set; } Property Value Type Description bool | Edit this page View Source HasIntersection Tests whether an intersection was found. Declaration public bool HasIntersection { get; } Property Value Type Description bool | Edit this page View Source HasNonProperIntersection Tests whether a non-proper intersection was found. Declaration public bool HasNonProperIntersection { get; } Property Value Type Description bool | Edit this page View Source HasProperIntersection Tests whether a proper intersection was found. Declaration public bool HasProperIntersection { get; } Property Value Type Description bool | Edit this page View Source Intersection Gets the computed location of the intersection. Due to round-off, the location may not be exact. Declaration public Coordinate Intersection { get; } Property Value Type Description Coordinate | Edit this page View Source IntersectionSegments Gets the endpoints of the intersecting segments. Declaration public Coordinate[] IntersectionSegments { get; } Property Value Type Description Coordinate[] Remarks An array of the segment endpoints (p00, p01, p10, p11) | Edit this page View Source IsDone Tests whether processing can terminate, because all required information has been obtained (e.g. an intersection of the desired type has been detected). Declaration public bool IsDone { get; } Property Value Type Description bool Methods | Edit this page View Source ProcessIntersections(ISegmentString, int, ISegmentString, int) This method is called by clients of the ISegmentIntersector class to process intersections for two segments of the ISegmentStrings being intersected. Declaration public void ProcessIntersections(ISegmentString e0, int segIndex0, ISegmentString e1, int segIndex1) Parameters Type Name Description ISegmentString e0 int segIndex0 ISegmentString e1 int segIndex1 Remarks Note that some clients (such as MonotoneChains) may optimize away this call for segment pairs which they have determined do not intersect (e.g. by an disjoint envelope test). Implements ISegmentIntersector"
  },
  "api/NetTopologySuite.Noding.SegmentNode.html": {
    "href": "api/NetTopologySuite.Noding.SegmentNode.html",
    "title": "Class SegmentNode | NetTopologySuite",
    "summary": "Class SegmentNode Represents an intersection point between two ISegmentStrings. Inheritance object SegmentNode Implements IComparable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public class SegmentNode : IComparable Constructors | Edit this page View Source SegmentNode(INodableSegmentString, Coordinate, int, Octants) Initializes a new instance of the SegmentNode class. Declaration public SegmentNode(INodableSegmentString segString, Coordinate coord, int segmentIndex, Octants segmentOctant) Parameters Type Name Description INodableSegmentString segString Coordinate coord int segmentIndex Octants segmentOctant Fields | Edit this page View Source Coord Declaration public readonly Coordinate Coord Field Value Type Description Coordinate | Edit this page View Source SegmentIndex Declaration public readonly int SegmentIndex Field Value Type Description int Properties | Edit this page View Source Coordinate Gets the Coordinate giving the location of this node. Declaration public Coordinate Coordinate { get; } Property Value Type Description Coordinate | Edit this page View Source IsInterior Declaration public bool IsInterior { get; } Property Value Type Description bool Methods | Edit this page View Source CompareTo(object) Declaration public int CompareTo(object obj) Parameters Type Name Description object obj Returns Type Description int -1 this SegmentNode is located before the argument location; 0 this SegmentNode is at the argument location; 1 this SegmentNode is located after the argument location. | Edit this page View Source IsEndPoint(int) Declaration public bool IsEndPoint(int maxSegmentIndex) Parameters Type Name Description int maxSegmentIndex Returns Type Description bool | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() | Edit this page View Source Write(StreamWriter) Declaration public void Write(StreamWriter outstream) Parameters Type Name Description StreamWriter outstream Implements IComparable"
  },
  "api/NetTopologySuite.Noding.SegmentNodeList.html": {
    "href": "api/NetTopologySuite.Noding.SegmentNodeList.html",
    "title": "Class SegmentNodeList | NetTopologySuite",
    "summary": "Class SegmentNodeList A list of the SegmentNodes present along a noded ISegmentString. Inheritance object SegmentNodeList Implements IEnumerable<object> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public class SegmentNodeList : IEnumerable<object>, IEnumerable Constructors | Edit this page View Source SegmentNodeList(NodedSegmentString) Initializes a new instance of the SegmentNodeList class. Declaration public SegmentNodeList(NodedSegmentString edge) Parameters Type Name Description NodedSegmentString edge The edge. Properties | Edit this page View Source Count Gets a value indicating the number of nodes in the list. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source Edge Declaration public NodedSegmentString Edge { get; } Property Value Type Description NodedSegmentString Methods | Edit this page View Source Add(Coordinate, int) Adds an intersection into the list, if it isn't already there. The input segmentIndex and dist are expected to be normalized. Declaration public SegmentNode Add(Coordinate intPt, int segmentIndex) Parameters Type Name Description Coordinate intPt int segmentIndex Returns Type Description SegmentNode The SegmentIntersection found or added. | Edit this page View Source AddSplitEdges(ICollection<ISegmentString>) Creates new edges for all the edges that the intersections in this list split the parent edge into. Adds the edges to the provided argument list (this is so a single list can be used to accumulate all split edges for a set of ISegmentStrings). Declaration public void AddSplitEdges(ICollection<ISegmentString> edgeList) Parameters Type Name Description ICollection<ISegmentString> edgeList | Edit this page View Source GetEnumerator() Returns an iterator of SegmentNodes. Declaration public IEnumerator<object> GetEnumerator() Returns Type Description IEnumerator<object> An iterator of SegmentNodes. | Edit this page View Source GetSplitCoordinates() Gets the list of coordinates for the fully noded segment string, including all original segment string vertices and vertices introduced by nodes in this list. Repeated coordinates are collapsed. Declaration public Coordinate[] GetSplitCoordinates() Returns Type Description Coordinate[] An array of Coordinates | Edit this page View Source Write(StreamWriter) Declaration public void Write(StreamWriter outstream) Parameters Type Name Description StreamWriter outstream Implements IEnumerable<T> IEnumerable"
  },
  "api/NetTopologySuite.Noding.SegmentPointComparator.html": {
    "href": "api/NetTopologySuite.Noding.SegmentPointComparator.html",
    "title": "Class SegmentPointComparator | NetTopologySuite",
    "summary": "Class SegmentPointComparator Implements a robust method of comparing the relative position of two points along the same segment. The coordinates are assumed to lie \"near\" the segment. This means that this algorithm will only return correct results if the input coordinates have the same precision and correspond to rounded values of exact coordinates lying on the segment. Inheritance object SegmentPointComparator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public class SegmentPointComparator Methods | Edit this page View Source Compare(Octants, Coordinate, Coordinate) Compares two Coordinates for their relative position along a segment lying in the specified Octant. Declaration public static int Compare(Octants octant, Coordinate p0, Coordinate p1) Parameters Type Name Description Octants octant Coordinate p0 Coordinate p1 Returns Type Description int -1 if node0 occurs first, or 0 if the two nodes are equal, or 1 if node1 occurs first. | Edit this page View Source RelativeSign(double, double) Declaration public static int RelativeSign(double x0, double x1) Parameters Type Name Description double x0 double x1 Returns Type Description int"
  },
  "api/NetTopologySuite.Noding.SegmentStringDissolver.ISegmentStringMerger.html": {
    "href": "api/NetTopologySuite.Noding.SegmentStringDissolver.ISegmentStringMerger.html",
    "title": "Interface SegmentStringDissolver.ISegmentStringMerger | NetTopologySuite",
    "summary": "Interface SegmentStringDissolver.ISegmentStringMerger A merging strategy which can be used to update the context data of ISegmentStrings which are merged during the dissolve process. Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public interface SegmentStringDissolver.ISegmentStringMerger Methods | Edit this page View Source Merge(ISegmentString, ISegmentString, bool) Updates the context data of a ISegmentString when an identical (up to orientation) one is found during dissolving. Declaration void Merge(ISegmentString mergeTarget, ISegmentString ssToMerge, bool isSameOrientation) Parameters Type Name Description ISegmentString mergeTarget The segment string to update. ISegmentString ssToMerge The segment string being dissolved. bool isSameOrientation true if the strings are in the same direction, false if they are opposite."
  },
  "api/NetTopologySuite.Noding.SegmentStringDissolver.html": {
    "href": "api/NetTopologySuite.Noding.SegmentStringDissolver.html",
    "title": "Class SegmentStringDissolver | NetTopologySuite",
    "summary": "Class SegmentStringDissolver Dissolves a noded collection of ISegmentStrings to produce a set of merged linework with unique segments. Inheritance object SegmentStringDissolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public class SegmentStringDissolver Remarks A custom SegmentStringDissolver.ISegmentStringMerger merging strategy can be supplied. This strategy will be called when two identical (up to orientation) strings are dissolved together. The default merging strategy is simply to discard one of the merged strings. A common use for this class is to merge noded edges while preserving topological labelling. This requires a custom merging strategy to be supplied to merge the topology labels appropriately. Constructors | Edit this page View Source SegmentStringDissolver() Creates a dissolver with the default merging strategy. Declaration public SegmentStringDissolver() | Edit this page View Source SegmentStringDissolver(ISegmentStringMerger) Creates a dissolver with a user-defined merge strategy. Declaration public SegmentStringDissolver(SegmentStringDissolver.ISegmentStringMerger merger) Parameters Type Name Description SegmentStringDissolver.ISegmentStringMerger merger Properties | Edit this page View Source Dissolved Gets the collection of dissolved (i.e. unique) ISegmentStrings Declaration public ICollection<ISegmentString> Dissolved { get; } Property Value Type Description ICollection<ISegmentString> Methods | Edit this page View Source Dissolve(ISegmentString) Dissolve the given ISegmentString. Declaration public void Dissolve(ISegmentString segString) Parameters Type Name Description ISegmentString segString | Edit this page View Source Dissolve(IEnumerable<ISegmentString>) Dissolve all ISegmentStrings in the input IEnumerable<T>. Declaration public void Dissolve(IEnumerable<ISegmentString> segStrings) Parameters Type Name Description IEnumerable<ISegmentString> segStrings"
  },
  "api/NetTopologySuite.Noding.SegmentStringEx.html": {
    "href": "api/NetTopologySuite.Noding.SegmentStringEx.html",
    "title": "Class SegmentStringEx | NetTopologySuite",
    "summary": "Class SegmentStringEx Extension methods to mimic JTS' default methods on SegmentString interface Inheritance object SegmentStringEx Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public static class SegmentStringEx Methods | Edit this page View Source GetCoordinate(ISegmentString, int) Gets the segment string Coordinate at a given index Declaration public static Coordinate GetCoordinate(this ISegmentString self, int idx) Parameters Type Name Description ISegmentString self A segment string forming a ring int idx An index Returns Type Description Coordinate The Coordinate at the index | Edit this page View Source NextInRing(ISegmentString, int) Gets the next vertex in a ring from a vertex index. Declaration public static Coordinate NextInRing(this ISegmentString self, int index) Parameters Type Name Description ISegmentString self A segment string forming a ring int index The vertex index Returns Type Description Coordinate The next vertex in the ring See Also IsClosed | Edit this page View Source PrevInRing(ISegmentString, int) Gets the previous vertex in a ring from a vertex index. Declaration public static Coordinate PrevInRing(this ISegmentString self, int index) Parameters Type Name Description ISegmentString self A segment string forming a ring int index The vertex index Returns Type Description Coordinate The previous vertex in the ring See Also IsClosed"
  },
  "api/NetTopologySuite.Noding.SegmentStringUtil.html": {
    "href": "api/NetTopologySuite.Noding.SegmentStringUtil.html",
    "title": "Class SegmentStringUtil | NetTopologySuite",
    "summary": "Class SegmentStringUtil Utility methods for processing ISegmentStrings Inheritance object SegmentStringUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public class SegmentStringUtil Methods | Edit this page View Source ExtractBasicSegmentStrings(Geometry) Extracts all linear components from a given Geometry to BasicSegmentStrings. The BasicSegmentString's data item is set to be the source Geometry. Declaration public static IList<ISegmentString> ExtractBasicSegmentStrings(Geometry geom) Parameters Type Name Description Geometry geom The Geometry to extract from. Returns Type Description IList<ISegmentString> a list of ISegmentStrings. | Edit this page View Source ExtractNodedSegmentStrings(Geometry) Extracts all linear components from a given Geometry to NodedSegmentStrings. The NodedSegmentString's data item is set to be the source Geometry. Declaration public static IList<ISegmentString> ExtractNodedSegmentStrings(Geometry geom) Parameters Type Name Description Geometry geom The Geometry to extract from. Returns Type Description IList<ISegmentString> a list of ISegmentStrings. | Edit this page View Source ExtractSegmentStrings(Geometry) Extracts all linear components from a given Geometry to ISegmentStrings. The ISegmentString's data item is set to be the source Geometry. Declaration public static IList<ISegmentString> ExtractSegmentStrings(Geometry geom) Parameters Type Name Description Geometry geom The Geometry to extract from. Returns Type Description IList<ISegmentString> a list of ISegmentStrings. | Edit this page View Source ToGeometry(IList<ISegmentString>, GeometryFactory) Converts a collection of ISegmentStrings into a Geometry. The geometry will be either a LineString or a MultiLineString (possibly empty). Declaration public static Geometry ToGeometry(IList<ISegmentString> segStrings, GeometryFactory geomFact) Parameters Type Name Description IList<ISegmentString> segStrings A collection of ISegmentString. GeometryFactory geomFact A geometry factory Returns Type Description Geometry A LineString or a MultiLineString. | Edit this page View Source ToString(IEnumerable<ISegmentString>) Declaration public static string ToString(IEnumerable<ISegmentString> segStrings) Parameters Type Name Description IEnumerable<ISegmentString> segStrings Returns Type Description string"
  },
  "api/NetTopologySuite.Noding.SimpleNoder.html": {
    "href": "api/NetTopologySuite.Noding.SimpleNoder.html",
    "title": "Class SimpleNoder | NetTopologySuite",
    "summary": "Class SimpleNoder Nodes a set of ISegmentStrings by performing a brute-force comparison of every segment to every other one. This has n^2 performance, so is too slow for use on large numbers of segments. Inheritance object SinglePassNoder SimpleNoder Implements INoder Inherited Members SinglePassNoder.SegmentIntersector object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public class SimpleNoder : SinglePassNoder, INoder Constructors | Edit this page View Source SimpleNoder() Initializes a new instance of the SimpleNoder class. Declaration public SimpleNoder() | Edit this page View Source SimpleNoder(ISegmentIntersector) Initializes a new instance of the SimpleNoder class. Declaration public SimpleNoder(ISegmentIntersector segInt) Parameters Type Name Description ISegmentIntersector segInt Methods | Edit this page View Source ComputeNodes(IList<ISegmentString>) Computes the noding for a collection of ISegmentStrings. Some Noders may add all these nodes to the input ISegmentStrings; others may only add some or none at all. Declaration public override void ComputeNodes(IList<ISegmentString> inputSegStrings) Parameters Type Name Description IList<ISegmentString> inputSegStrings Overrides SinglePassNoder.ComputeNodes(IList<ISegmentString>) | Edit this page View Source GetNodedSubstrings() Returns a IList<T> of fully noded NodedSegmentStrings. The NodedSegmentStrings have the same context as their parent. Declaration public override IList<ISegmentString> GetNodedSubstrings() Returns Type Description IList<ISegmentString> Overrides SinglePassNoder.GetNodedSubstrings() Implements INoder"
  },
  "api/NetTopologySuite.Noding.SimpleSegmentSetMutualIntersector.html": {
    "href": "api/NetTopologySuite.Noding.SimpleSegmentSetMutualIntersector.html",
    "title": "Class SimpleSegmentSetMutualIntersector | NetTopologySuite",
    "summary": "Class SimpleSegmentSetMutualIntersector Intersects two sets of ISegmentStrings using brute-force comparison. Inheritance object SimpleSegmentSetMutualIntersector Implements ISegmentSetMutualIntersector Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public class SimpleSegmentSetMutualIntersector : ISegmentSetMutualIntersector Constructors | Edit this page View Source SimpleSegmentSetMutualIntersector(IEnumerable<ISegmentString>) Constructs a new intersector for a given set of ISegmentStrings. Declaration public SimpleSegmentSetMutualIntersector(IEnumerable<ISegmentString> baseSegStrings) Parameters Type Name Description IEnumerable<ISegmentString> baseSegStrings The base segment strings to intersect Methods | Edit this page View Source Process(IEnumerable<ISegmentString>, ISegmentIntersector) Calls ProcessIntersections(ISegmentString, int, ISegmentString, int) for all candidate intersections between the given collection of SegmentStrings and the set of base segments. Declaration public void Process(IEnumerable<ISegmentString> segmentStrings, ISegmentIntersector segmentIntersector) Parameters Type Name Description IEnumerable<ISegmentString> segmentStrings A collection of ISegmentStrings to node ISegmentIntersector segmentIntersector The intersection detector to either record intersection occurences or add intersection nodes to the input segment strings. Implements ISegmentSetMutualIntersector"
  },
  "api/NetTopologySuite.Noding.SinglePassNoder.html": {
    "href": "api/NetTopologySuite.Noding.SinglePassNoder.html",
    "title": "Class SinglePassNoder | NetTopologySuite",
    "summary": "Class SinglePassNoder Base class for INoders which make a single pass to find intersections. This allows using a custom ISegmentIntersector (which for instance may simply identify intersections, rather than insert them). Inheritance object SinglePassNoder MCIndexNoder SimpleNoder Implements INoder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public abstract class SinglePassNoder : INoder Constructors | Edit this page View Source SinglePassNoder() Initializes a new instance of the SinglePassNoder class. Declaration protected SinglePassNoder() | Edit this page View Source SinglePassNoder(ISegmentIntersector) Initializes a new instance of the SinglePassNoder class. Declaration protected SinglePassNoder(ISegmentIntersector segInt) Parameters Type Name Description ISegmentIntersector segInt The ISegmentIntersector to use. Properties | Edit this page View Source SegmentIntersector Gets/sets the ISegmentIntersector to use with this noder. A ISegmentIntersector will normally add intersection nodes to the input segment strings, but it may not - it may simply record the presence of intersections. However, some INoders may require that intersections be added. Declaration public ISegmentIntersector SegmentIntersector { get; set; } Property Value Type Description ISegmentIntersector Methods | Edit this page View Source ComputeNodes(IList<ISegmentString>) Computes the noding for a collection of ISegmentStrings. Some Noders may add all these nodes to the input ISegmentStrings; others may only add some or none at all. Declaration public abstract void ComputeNodes(IList<ISegmentString> segStrings) Parameters Type Name Description IList<ISegmentString> segStrings | Edit this page View Source GetNodedSubstrings() Returns a IList<T> of fully noded ISegmentStrings. The ISegmentStrings have the same context as their parent. Declaration public abstract IList<ISegmentString> GetNodedSubstrings() Returns Type Description IList<ISegmentString> Implements INoder"
  },
  "api/NetTopologySuite.Noding.Snap.SnappingIntersectionAdder.html": {
    "href": "api/NetTopologySuite.Noding.Snap.SnappingIntersectionAdder.html",
    "title": "Class SnappingIntersectionAdder | NetTopologySuite",
    "summary": "Class SnappingIntersectionAdder Finds intersections between line segments which are being snapped, and adds them as nodes. Inheritance object SnappingIntersectionAdder Implements ISegmentIntersector Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding.Snap Assembly: NetTopologySuite.dll Syntax public sealed class SnappingIntersectionAdder : ISegmentIntersector Constructors | Edit this page View Source SnappingIntersectionAdder(double, SnappingPointIndex) Creates an intersector which finds all snapped intersections, and adds them as nodes. Declaration public SnappingIntersectionAdder(double snapTolerance, SnappingPointIndex snapPointIndex) Parameters Type Name Description double snapTolerance The snapping tolerance distance SnappingPointIndex snapPointIndex A snap index to use | Edit this page View Source SnappingIntersectionAdder(double, SnappingPointIndex, ElevationModel) Creates an intersector which finds all snapped intersections, and adds them as nodes. Declaration public SnappingIntersectionAdder(double snapTolerance, SnappingPointIndex snapPointIndex, ElevationModel em) Parameters Type Name Description double snapTolerance The snapping tolerance distance SnappingPointIndex snapPointIndex A snap index to use ElevationModel em An elevation model. May be null Properties | Edit this page View Source IsDone Reports whether the client of this class needs to continue testing all intersections in an arrangement. Declaration public bool IsDone { get; } Property Value Type Description bool if there is no need to continue testing segments Remarks Always process all intersections Methods | Edit this page View Source ProcessIntersections(ISegmentString, int, ISegmentString, int) This method is called by clients of the ISegmentIntersector class to process intersections for two segments of the ISegmentStrings being intersected. Note that some clients (such as MonotoneChains) may optimize away this call for segment pairs which they have determined do not intersect (e.g. by an disjoint envelope test). Declaration public void ProcessIntersections(ISegmentString seg0, int segIndex0, ISegmentString seg1, int segIndex1) Parameters Type Name Description ISegmentString seg0 int segIndex0 ISegmentString seg1 int segIndex1 Implements ISegmentIntersector"
  },
  "api/NetTopologySuite.Noding.Snap.SnappingNoder.html": {
    "href": "api/NetTopologySuite.Noding.Snap.SnappingNoder.html",
    "title": "Class SnappingNoder | NetTopologySuite",
    "summary": "Class SnappingNoder Nodes a set of segment strings snapping vertices and intersection points together if they lie within the given snap tolerance distance. Vertices take priority over intersection points for snapping. Input segment strings are generally only split at true node points (i.e.the output segment strings are of maximal length in the output arrangement). The snap tolerance should be chosen to be as small as possible while still producing a correct result. It probably only needs to be small enough to eliminate \"nearly-coincident\" segments, for which intersection points cannot be computed accurately. This implies a factor of about 10e-12 smaller than the magnitude of the segment coordinates. With an appropriate snap tolerance this algorithm appears to be very robust. So far no failure cases have been found, given a small enough snap tolerance. The correctness of the output is not verified by this noder. If required this can be done by ValidatingNoder. Inheritance object SnappingNoder Implements INoder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding.Snap Assembly: NetTopologySuite.dll Syntax public sealed class SnappingNoder : INoder Constructors | Edit this page View Source SnappingNoder(double) Creates a snapping noder using the given snap distance tolerance. Declaration public SnappingNoder(double snapTolerance) Parameters Type Name Description double snapTolerance Points are snapped if within this distance | Edit this page View Source SnappingNoder(double, ElevationModel) Creates a snapping noder using the given snap distance tolerance. Declaration public SnappingNoder(double snapTolerance, ElevationModel em) Parameters Type Name Description double snapTolerance Points are snapped if within this distance ElevationModel em An elevation model. May be null Methods | Edit this page View Source ComputeNodes(IList<ISegmentString>) Computes the noding of a set of ISegmentStrings Declaration public void ComputeNodes(IList<ISegmentString> inputSegmentStrings) Parameters Type Name Description IList<ISegmentString> inputSegmentStrings A Collection of ISegmentStrings | Edit this page View Source GetNodedSubstrings() Returns a IList<T> of fully noded ISegmentStrings. The ISegmentStrings have the same context as their parent. Declaration public IList<ISegmentString> GetNodedSubstrings() Returns Type Description IList<ISegmentString> Implements INoder"
  },
  "api/NetTopologySuite.Noding.Snap.SnappingPointIndex.html": {
    "href": "api/NetTopologySuite.Noding.Snap.SnappingPointIndex.html",
    "title": "Class SnappingPointIndex | NetTopologySuite",
    "summary": "Class SnappingPointIndex An index providing fast creation and lookup of snap points. Inheritance object SnappingPointIndex Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding.Snap Assembly: NetTopologySuite.dll Syntax public sealed class SnappingPointIndex Constructors | Edit this page View Source SnappingPointIndex(double) Creates a snap point index using a specified distance tolerance. Declaration public SnappingPointIndex(double snapTolerance) Parameters Type Name Description double snapTolerance Points are snapped if within this distance Properties | Edit this page View Source Depth Gets a value indicating the depth of the tree Declaration public int Depth { get; } Property Value Type Description int | Edit this page View Source Tolerance Gets a value indicating the snapping tolerance value for the index Declaration public double Tolerance { get; } Property Value Type Description double Methods | Edit this page View Source Snap(Coordinate) Snaps a coordinate to an existing snap point, if it is within the snap tolerance distance. Otherwise adds the coordinate to the snap point index. Declaration public Coordinate Snap(Coordinate p) Parameters Type Name Description Coordinate p The point to snap Returns Type Description Coordinate The point it snapped to, or the input point"
  },
  "api/NetTopologySuite.Noding.Snap.html": {
    "href": "api/NetTopologySuite.Noding.Snap.html",
    "title": "Namespace NetTopologySuite.Noding.Snap | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Noding.Snap Classes SnappingIntersectionAdder Finds intersections between line segments which are being snapped, and adds them as nodes. SnappingNoder Nodes a set of segment strings snapping vertices and intersection points together if they lie within the given snap tolerance distance. Vertices take priority over intersection points for snapping. Input segment strings are generally only split at true node points (i.e.the output segment strings are of maximal length in the output arrangement). The snap tolerance should be chosen to be as small as possible while still producing a correct result. It probably only needs to be small enough to eliminate \"nearly-coincident\" segments, for which intersection points cannot be computed accurately. This implies a factor of about 10e-12 smaller than the magnitude of the segment coordinates. With an appropriate snap tolerance this algorithm appears to be very robust. So far no failure cases have been found, given a small enough snap tolerance. The correctness of the output is not verified by this noder. If required this can be done by ValidatingNoder. SnappingPointIndex An index providing fast creation and lookup of snap points."
  },
  "api/NetTopologySuite.Noding.Snapround.GeometryNoder.html": {
    "href": "api/NetTopologySuite.Noding.Snapround.GeometryNoder.html",
    "title": "Class GeometryNoder | NetTopologySuite",
    "summary": "Class GeometryNoder Nodes the linework in a list of Geometrys using Snap-Rounding to a given PrecisionModel. The input coordinates do not need to be rounded to the precision model. All output coordinates are rounded to the precision model. This class does not dissolve the output linework, so there may be duplicate linestrings in the output. Subsequent processing (e.g. polygonization) may require the linework to be unique. Using UnaryUnion is one way to do this (although this is an inefficient approach). Inheritance object GeometryNoder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding.Snapround Assembly: NetTopologySuite.dll Syntax public class GeometryNoder Constructors | Edit this page View Source GeometryNoder(PrecisionModel) Creates a new noder which snap-rounds to a grid specified by the given PrecisionModel Declaration public GeometryNoder(PrecisionModel pm) Parameters Type Name Description PrecisionModel pm The precision model for the grid to snap-round to. Properties | Edit this page View Source IsValidityChecked Gets or sets whether noding validity is checked after noding is performed. Declaration public bool IsValidityChecked { get; set; } Property Value Type Description bool Methods | Edit this page View Source Node(IEnumerable<Geometry>) Nodes the linework of a set of Geometrys using SnapRounding. Declaration public ReadOnlyCollection<LineString> Node(IEnumerable<Geometry> geoms) Parameters Type Name Description IEnumerable<Geometry> geoms A collection of Geometrys of any type Returns Type Description ReadOnlyCollection<LineString> A list of LineStrings representing the noded linework of the input"
  },
  "api/NetTopologySuite.Noding.Snapround.HotPixel.html": {
    "href": "api/NetTopologySuite.Noding.Snapround.HotPixel.html",
    "title": "Class HotPixel | NetTopologySuite",
    "summary": "Class HotPixel Implements a \"hot pixel\" as used in the Snap Rounding algorithm. A hot pixel is a square region centred on the rounded valud of the coordinate given, and of width equal to the size of the scale factor. It is a partially open region, which contains the interior of the tolerance square and the boundary minus the top and right segments. This ensures that every point of the space lies in a unique hot pixel. It also matches the rounding semantics for numbers. The hot pixel operations are all computed in the integer domain to avoid rounding problems. Hot Pixels support being marked as nodes. This is used to prevent introducing nodes at line vertices which do not have other lines snapped to them. Inheritance object HotPixel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Noding.Snapround Assembly: NetTopologySuite.dll Syntax public class HotPixel Constructors | Edit this page View Source HotPixel(Coordinate, double) Creates a new hot pixel centered on a rounded point, using a given scale factor. The scale factor must be strictly positive(non-zero). Declaration public HotPixel(Coordinate pt, double scaleFactor) Parameters Type Name Description Coordinate pt The coordinate at the center of the hot pixel (already rounded) double scaleFactor The scale factor determining the pixel size | Edit this page View Source HotPixel(Coordinate, double, LineIntersector) Initializes a new instance of the HotPixel class. Declaration [Obsolete(\"LineIntersector is no longer used.\")] public HotPixel(Coordinate pt, double scaleFactor, LineIntersector li) Parameters Type Name Description Coordinate pt The coordinate at the center of the hot pixel double scaleFactor The scale factor determining the pixel size LineIntersector li The intersector to use for testing intersection with line segments Properties | Edit this page View Source Coordinate Gets the coordinate this hot pixel is based at. Declaration public Coordinate Coordinate { get; } Property Value Type Description Coordinate | Edit this page View Source IsNode Gets or sets a value indicating whether this pixel has been marked as a node. Declaration public bool IsNode { get; set; } Property Value Type Description bool true if the pixel is marked as a node | Edit this page View Source ScaleFactor Gets the scale factor for the precision grid for this pixel. Declaration public double ScaleFactor { get; } Property Value Type Description double | Edit this page View Source Width Gets the width of the hot pixel in the original coordinate system. Declaration public double Width { get; } Property Value Type Description double Methods | Edit this page View Source AddSnappedNode(INodableSegmentString, int) Adds a new node (equal to the snap pt) to the specified segment if the segment passes through the hot pixel Declaration [Obsolete(\"Moved to MCIndexPointSnapper\")] public bool AddSnappedNode(INodableSegmentString segStr, int segIndex) Parameters Type Name Description INodableSegmentString segStr int segIndex Returns Type Description bool true if a node was added to the segment | Edit this page View Source GetSafeEnvelope() Returns a \"safe\" envelope that is guaranteed to contain the hot pixel. The envelope returned will be larger than the exact envelope of the pixel. Declaration [Obsolete(\"Moved to MCIndexPointSnapper\")] public Envelope GetSafeEnvelope() Returns Type Description Envelope An envelope which contains the pixel | Edit this page View Source Intersects(Coordinate) Tests whether a coordinate lies in (intersects) this hot pixel. Declaration public bool Intersects(Coordinate p) Parameters Type Name Description Coordinate p The coordinate to test Returns Type Description bool true if the coordinate intersects this hot pixel | Edit this page View Source Intersects(Coordinate, Coordinate) Tests whether the line segment (p0-p1) intersects this hot pixel. Declaration public bool Intersects(Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p0 The first coordinate of the line segment to test Coordinate p1 The second coordinate of the line segment to test Returns Type Description bool true if the line segment intersects this hot pixel. | Edit this page View Source IntersectsScaled(Coordinate, Coordinate) Declaration [Obsolete(\"This method was never intended to be public and will be removed in a future release.\")] public bool IntersectsScaled(Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p0 Coordinate p1 Returns Type Description bool | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.HotPixelSnapAction.html": {
    "href": "api/NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.HotPixelSnapAction.html",
    "title": "Class MCIndexPointSnapper.HotPixelSnapAction | NetTopologySuite",
    "summary": "Class MCIndexPointSnapper.HotPixelSnapAction Inheritance object MonotoneChainSelectAction MCIndexPointSnapper.HotPixelSnapAction Inherited Members MonotoneChainSelectAction.SelectedSegment MonotoneChainSelectAction.Select(LineSegment) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding.Snapround Assembly: NetTopologySuite.dll Syntax public class MCIndexPointSnapper.HotPixelSnapAction : MonotoneChainSelectAction Constructors | Edit this page View Source HotPixelSnapAction(HotPixel, ISegmentString, int) Initializes a new instance of the MCIndexPointSnapper.HotPixelSnapAction class. Declaration public HotPixelSnapAction(HotPixel hotPixel, ISegmentString parentEdge, int hotPixelVertexIndex) Parameters Type Name Description HotPixel hotPixel ISegmentString parentEdge int hotPixelVertexIndex Properties | Edit this page View Source IsNodeAdded Reports whether the HotPixel caused a node to be added in any target segmentString(including its own). If so, the HotPixel must be added as a node as well. Declaration public bool IsNodeAdded { get; } Property Value Type Description bool true if a node was added in any target segmentString. Methods | Edit this page View Source Select(MonotoneChain, int) Check if a segment of the monotone chain intersects the hot pixel vertex and introduce a snap node if so. Optimized to avoid noding segments which contain the vertex (which otherwise would cause every vertex to be noded). Declaration public override void Select(MonotoneChain mc, int startIndex) Parameters Type Name Description MonotoneChain mc A monotone chain int startIndex A start index Overrides MonotoneChainSelectAction.Select(MonotoneChain, int)"
  },
  "api/NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.html": {
    "href": "api/NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.html",
    "title": "Class MCIndexPointSnapper | NetTopologySuite",
    "summary": "Class MCIndexPointSnapper \"Snaps\" all ISegmentStrings in a ISpatialIndex<T> containing MonotoneChains to a given HotPixel. Inheritance object MCIndexPointSnapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding.Snapround Assembly: NetTopologySuite.dll Syntax public class MCIndexPointSnapper Constructors | Edit this page View Source MCIndexPointSnapper(ISpatialIndex<MonotoneChain>) Initializes a new instance of the MCIndexPointSnapper class. Declaration public MCIndexPointSnapper(ISpatialIndex<MonotoneChain> index) Parameters Type Name Description ISpatialIndex<MonotoneChain> index Methods | Edit this page View Source Snap(HotPixel) Snaps (nodes) all interacting segments to this hot pixel. The hot pixel may represent a vertex of an edge, in which case this routine uses the optimization of not noding the vertex itself Declaration public bool Snap(HotPixel hotPixel) Parameters Type Name Description HotPixel hotPixel The hot pixel to snap to. Returns Type Description bool true if a node was added for this pixel. | Edit this page View Source Snap(HotPixel, ISegmentString, int) Snaps (nodes) all interacting segments to this hot pixel. The hot pixel may represent a vertex of an edge, in which case this routine uses the optimization of not noding the vertex itself Declaration public bool Snap(HotPixel hotPixel, ISegmentString parentEdge, int hotPixelVertexIndex) Parameters Type Name Description HotPixel hotPixel The hot pixel to snap to. ISegmentString parentEdge The edge containing the vertex, if applicable, or null. int hotPixelVertexIndex Returns Type Description bool true if a node was added for this pixel."
  },
  "api/NetTopologySuite.Noding.Snapround.MCIndexSnapRounder.html": {
    "href": "api/NetTopologySuite.Noding.Snapround.MCIndexSnapRounder.html",
    "title": "Class MCIndexSnapRounder | NetTopologySuite",
    "summary": "Class MCIndexSnapRounder Uses Snap Rounding to compute a rounded, fully noded arrangement from a set of ISegmentStrings. Implements the Snap Rounding technique described in papers by Hobby, Guibas and Marimont, and Goodrich et al. Snap Rounding assumes that all vertices lie on a uniform grid; hence the precision model of the input must be fixed precision, and all the input vertices must be rounded to that precision. This implementation uses a monotone chains and a spatial index to speed up the intersection tests. KNOWN BUGS This implementation is not fully robust. instead. Inheritance object MCIndexSnapRounder Implements INoder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding.Snapround Assembly: NetTopologySuite.dll Syntax [Obsolete(\"Not robust. Use SnapRoundingNoder instead.\")] public class MCIndexSnapRounder : INoder Constructors | Edit this page View Source MCIndexSnapRounder(PrecisionModel) Initializes a new instance of the MCIndexSnapRounder class. Declaration public MCIndexSnapRounder(PrecisionModel pm) Parameters Type Name Description PrecisionModel pm The PrecisionModel to use. Methods | Edit this page View Source ComputeNodes(IList<ISegmentString>) Computes the noding for a collection of ISegmentStrings. Some Noders may add all these nodes to the input ISegmentStrings; others may only add some or none at all. Declaration public void ComputeNodes(IList<ISegmentString> inputSegmentStrings) Parameters Type Name Description IList<ISegmentString> inputSegmentStrings | Edit this page View Source ComputeVertexSnaps(IList<ISegmentString>) Snaps segments to all vertices Declaration public void ComputeVertexSnaps(IList<ISegmentString> edges) Parameters Type Name Description IList<ISegmentString> edges The list of segment strings to snap together | Edit this page View Source GetNodedSubstrings() Returns a IList<T> of fully noded ISegmentStrings. The ISegmentStrings have the same context as their parent. Declaration public IList<ISegmentString> GetNodedSubstrings() Returns Type Description IList<ISegmentString> Implements INoder"
  },
  "api/NetTopologySuite.Noding.Snapround.SimpleSnapRounder.html": {
    "href": "api/NetTopologySuite.Noding.Snapround.SimpleSnapRounder.html",
    "title": "Class SimpleSnapRounder | NetTopologySuite",
    "summary": "Class SimpleSnapRounder Uses Snap Rounding to compute a rounded, fully noded arrangement from a set of ISegmentStrings. Implements the Snap Rounding technique described in the papers by Hobby, Guibas & Marimont, and Goodrich et al. Snap Rounding enforces that all vertices lie on a uniform grid, which is determined by the provided PrecisionModel. Input vertices do not have to be rounded to this grid; this will be done during the snap-rounding process. This implementation uses simple iteration over the line segments. This is not an efficient approach for large sets of segments. This implementation appears to be fully robust using an integer precision model. It will function with non-integer precision models, but the results are not 100% guaranteed to be correctly noded. Inheritance object SimpleSnapRounder Implements INoder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding.Snapround Assembly: NetTopologySuite.dll Syntax [Obsolete(\"Use SnapRoundingNoder instead\")] public class SimpleSnapRounder : INoder Constructors | Edit this page View Source SimpleSnapRounder(PrecisionModel) Initializes a new instance of the SimpleSnapRounder class. Declaration public SimpleSnapRounder(PrecisionModel pm) Parameters Type Name Description PrecisionModel pm The PrecisionModel to use. Methods | Edit this page View Source ComputeNodes(IList<ISegmentString>) Computes the noding for a collection of ISegmentStrings. Some Noders may add all these nodes to the input ISegmentStrings; others may only add some or none at all. Declaration public void ComputeNodes(IList<ISegmentString> inputSegmentStrings) Parameters Type Name Description IList<ISegmentString> inputSegmentStrings A collection of NodedSegmentStrings | Edit this page View Source ComputeVertexSnaps(IList<ISegmentString>) Computes nodes introduced as a result of snapping segments to vertices of other segments. Declaration [Obsolete(\"This method is no longer supported in the latest version of NetTopologySuite and may cause unexpected behavior. Strongly favor using MCIndexPointSnapper instead.\")] public void ComputeVertexSnaps(IList<ISegmentString> edges) Parameters Type Name Description IList<ISegmentString> edges The list of segment strings to snap together | Edit this page View Source GetNodedSubstrings() Returns a IList of fully noded ISegmentStrings. The ISegmentStrings have the same context as their parent. Declaration public IList<ISegmentString> GetNodedSubstrings() Returns Type Description IList<ISegmentString> A Collection of NodedSegmentStrings representing the substrings Implements INoder"
  },
  "api/NetTopologySuite.Noding.Snapround.SnapRoundingIntersectionAdder.html": {
    "href": "api/NetTopologySuite.Noding.Snapround.SnapRoundingIntersectionAdder.html",
    "title": "Class SnapRoundingIntersectionAdder | NetTopologySuite",
    "summary": "Class SnapRoundingIntersectionAdder Finds intersections between line segments which will be snap-rounded, and adds them as nodes to the segments. Intersections are detected and computed using full precision. Snapping takes place in a subsequent phase. The intersection points are recorded, so that HotPixels can be created for them. To avoid robustness issues with vertices which lie very close to line segments a heuristic is used: nodes are created if a vertex lies within a tolerance distance of the interior of a segment. The tolerance distance is chosen to be significantly below the snap-rounding grid size. This has empirically proven to eliminate noding failures. Inheritance object SnapRoundingIntersectionAdder Implements ISegmentIntersector Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding.Snapround Assembly: NetTopologySuite.dll Syntax public sealed class SnapRoundingIntersectionAdder : ISegmentIntersector Constructors | Edit this page View Source SnapRoundingIntersectionAdder(PrecisionModel) Creates an intersector which finds all snapped interior intersections, and adds them as nodes. Declaration [Obsolete] public SnapRoundingIntersectionAdder(PrecisionModel pm) Parameters Type Name Description PrecisionModel pm The precision model to use | Edit this page View Source SnapRoundingIntersectionAdder(double) Creates an intersector which finds all snapped interior intersections, and adds them as nodes. Declaration public SnapRoundingIntersectionAdder(double nearnessTol) Parameters Type Name Description double nearnessTol the intersection distance tolerance | Edit this page View Source SnapRoundingIntersectionAdder(double, ElevationModel) Creates an intersector which finds all snapped interior intersections, and adds them as nodes. Declaration public SnapRoundingIntersectionAdder(double nearnessTol, ElevationModel em) Parameters Type Name Description double nearnessTol the intersection distance tolerance ElevationModel em An elevation model. May be null Properties | Edit this page View Source Intersections Gets the created intersection nodes, so they can be processed as hot pixels. Declaration public Collection<Coordinate> Intersections { get; } Property Value Type Description Collection<Coordinate> A list of intersection points | Edit this page View Source IsDone Always process all intersections Declaration public bool IsDone { get; } Property Value Type Description bool Always false Methods | Edit this page View Source ProcessIntersections(ISegmentString, int, ISegmentString, int) This method is called by clients of the ISegmentIntersector class to process intersections for two segments of the ISegmentString s being intersected. Note that some clients (such as MonotoneChain s) may optimize away this call for segment pairs which they have determined do not intersect (e.g.by an disjoint envelope test). Declaration public void ProcessIntersections(ISegmentString e0, int segIndex0, ISegmentString e1, int segIndex1) Parameters Type Name Description ISegmentString e0 int segIndex0 ISegmentString e1 int segIndex1 Implements ISegmentIntersector"
  },
  "api/NetTopologySuite.Noding.Snapround.SnapRoundingNoder.html": {
    "href": "api/NetTopologySuite.Noding.Snapround.SnapRoundingNoder.html",
    "title": "Class SnapRoundingNoder | NetTopologySuite",
    "summary": "Class SnapRoundingNoder Uses Snap Rounding to compute a rounded, fully noded arrangement from a set of ISegmentStrings, in a performant way, and avoiding unnecessary noding. Implements the Snap Rounding technique described in the papers by Hobby, Guibas & Marimont, and Goodrich et al. Snap Rounding enforces that all output vertices lie on a uniform grid, which is determined by the provided PrecisionModel. Input vertices do not have to be rounded to the grid beforehand; this is done during the snap-rounding process. In fact, rounding cannot be done a priori, since rounding vertices by themselves can distort the rounded topology of the arrangement (i.e. by moving segments away from hot pixels that would otherwise intersect them, or by moving vertices across segments). To minimize the number of introduced nodes, the Snap-Rounding Noder avoids creating nodes at edge vertices if there is no intersection or snap at that location. However, if two different input edges contain identical segments, each of the segment vertices will be noded. This still provides fully-noded output. This is the same behaviour provided by other noders, such as MCIndexNoder and SnappingNoder. Inheritance object SnapRoundingNoder Implements INoder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding.Snapround Assembly: NetTopologySuite.dll Syntax public sealed class SnapRoundingNoder : INoder Constructors | Edit this page View Source SnapRoundingNoder(PrecisionModel) Declaration public SnapRoundingNoder(PrecisionModel pm) Parameters Type Name Description PrecisionModel pm | Edit this page View Source SnapRoundingNoder(PrecisionModel, ElevationModel) Declaration public SnapRoundingNoder(PrecisionModel pm, ElevationModel em) Parameters Type Name Description PrecisionModel pm ElevationModel em Methods | Edit this page View Source ComputeNodes(IList<ISegmentString>) Computes the nodes in the snap-rounding line arrangement. The nodes are added to the NodedSegmentStrings provided as the input. Declaration public void ComputeNodes(IList<ISegmentString> inputSegmentStrings) Parameters Type Name Description IList<ISegmentString> inputSegmentStrings A Collection of NodedSegmentStrings | Edit this page View Source GetNodedSubstrings() Gets a Collection of NodedSegmentStrings representing the substrings Declaration public IList<ISegmentString> GetNodedSubstrings() Returns Type Description IList<ISegmentString> Implements INoder"
  },
  "api/NetTopologySuite.Noding.Snapround.html": {
    "href": "api/NetTopologySuite.Noding.Snapround.html",
    "title": "Namespace NetTopologySuite.Noding.Snapround | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Noding.Snapround Contains classes to implement the Snap Rounding algorithm for noding linestrings. Classes GeometryNoder Nodes the linework in a list of Geometrys using Snap-Rounding to a given PrecisionModel. The input coordinates do not need to be rounded to the precision model. All output coordinates are rounded to the precision model. This class does not dissolve the output linework, so there may be duplicate linestrings in the output. Subsequent processing (e.g. polygonization) may require the linework to be unique. Using UnaryUnion is one way to do this (although this is an inefficient approach). HotPixel Implements a \"hot pixel\" as used in the Snap Rounding algorithm. A hot pixel is a square region centred on the rounded valud of the coordinate given, and of width equal to the size of the scale factor. It is a partially open region, which contains the interior of the tolerance square and the boundary minus the top and right segments. This ensures that every point of the space lies in a unique hot pixel. It also matches the rounding semantics for numbers. The hot pixel operations are all computed in the integer domain to avoid rounding problems. Hot Pixels support being marked as nodes. This is used to prevent introducing nodes at line vertices which do not have other lines snapped to them. MCIndexPointSnapper \"Snaps\" all ISegmentStrings in a ISpatialIndex<T> containing MonotoneChains to a given HotPixel. MCIndexPointSnapper.HotPixelSnapAction MCIndexSnapRounder Uses Snap Rounding to compute a rounded, fully noded arrangement from a set of ISegmentStrings. Implements the Snap Rounding technique described in papers by Hobby, Guibas and Marimont, and Goodrich et al. Snap Rounding assumes that all vertices lie on a uniform grid; hence the precision model of the input must be fixed precision, and all the input vertices must be rounded to that precision. This implementation uses a monotone chains and a spatial index to speed up the intersection tests. KNOWN BUGS This implementation is not fully robust. instead. SimpleSnapRounder Uses Snap Rounding to compute a rounded, fully noded arrangement from a set of ISegmentStrings. Implements the Snap Rounding technique described in the papers by Hobby, Guibas & Marimont, and Goodrich et al. Snap Rounding enforces that all vertices lie on a uniform grid, which is determined by the provided PrecisionModel. Input vertices do not have to be rounded to this grid; this will be done during the snap-rounding process. This implementation uses simple iteration over the line segments. This is not an efficient approach for large sets of segments. This implementation appears to be fully robust using an integer precision model. It will function with non-integer precision models, but the results are not 100% guaranteed to be correctly noded. SnapRoundingIntersectionAdder Finds intersections between line segments which will be snap-rounded, and adds them as nodes to the segments. Intersections are detected and computed using full precision. Snapping takes place in a subsequent phase. The intersection points are recorded, so that HotPixels can be created for them. To avoid robustness issues with vertices which lie very close to line segments a heuristic is used: nodes are created if a vertex lies within a tolerance distance of the interior of a segment. The tolerance distance is chosen to be significantly below the snap-rounding grid size. This has empirically proven to eliminate noding failures. SnapRoundingNoder Uses Snap Rounding to compute a rounded, fully noded arrangement from a set of ISegmentStrings, in a performant way, and avoiding unnecessary noding. Implements the Snap Rounding technique described in the papers by Hobby, Guibas & Marimont, and Goodrich et al. Snap Rounding enforces that all output vertices lie on a uniform grid, which is determined by the provided PrecisionModel. Input vertices do not have to be rounded to the grid beforehand; this is done during the snap-rounding process. In fact, rounding cannot be done a priori, since rounding vertices by themselves can distort the rounded topology of the arrangement (i.e. by moving segments away from hot pixels that would otherwise intersect them, or by moving vertices across segments). To minimize the number of introduced nodes, the Snap-Rounding Noder avoids creating nodes at edge vertices if there is no intersection or snap at that location. However, if two different input edges contain identical segments, each of the segment vertices will be noded. This still provides fully-noded output. This is the same behaviour provided by other noders, such as MCIndexNoder and SnappingNoder."
  },
  "api/NetTopologySuite.Noding.ValidatingNoder.html": {
    "href": "api/NetTopologySuite.Noding.ValidatingNoder.html",
    "title": "Class ValidatingNoder | NetTopologySuite",
    "summary": "Class ValidatingNoder A wrapper for INoders which validates the output arrangement is correctly noded. An arrangement of line segments is fully noded if there is no line segment which has another segment intersecting its interior. If the noding is not correct, a TopologyException is thrown with details of the first invalid location found. Inheritance object ValidatingNoder Implements INoder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Noding Assembly: NetTopologySuite.dll Syntax public sealed class ValidatingNoder : INoder Constructors | Edit this page View Source ValidatingNoder(INoder) Creates a noding validator wrapping the given noder Declaration public ValidatingNoder(INoder noder) Parameters Type Name Description INoder noder The noder to validate Methods | Edit this page View Source ComputeNodes(IList<ISegmentString>) Checks whether the output of the wrapped noder is fully noded. Throws an exception if it is not. Declaration public void ComputeNodes(IList<ISegmentString> segStrings) Parameters Type Name Description IList<ISegmentString> segStrings Exceptions Type Condition TopologyException | Edit this page View Source GetNodedSubstrings() Returns a IList<T> of fully noded ISegmentStrings. The ISegmentStrings have the same context as their parent. Declaration public IList<ISegmentString> GetNodedSubstrings() Returns Type Description IList<ISegmentString> Implements INoder See Also FastNodingValidator"
  },
  "api/NetTopologySuite.Noding.html": {
    "href": "api/NetTopologySuite.Noding.html",
    "title": "Namespace NetTopologySuite.Noding | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Noding Classes to compute nodings for arrangements of line segments and line segment sequences. Classes BasicSegmentString Represents a read-only list of contiguous line segments. This can be used for detection of intersections or nodes. ISegmentStrings can carry a context object, which is useful for preserving topological or parentage information. If adding nodes is required use NodedSegmentString. BoundaryChainNoder A noder which extracts chains of boundary segments as {@link SegmentString}s from a polygonal coverage. Boundary segments are those which are not duplicated in the input polygonal coverage. Extracting chains of segments minimize the number of segment strings created, which produces a more efficient topological graph structure. This enables fast overlay of polygonal coverages in CoverageUnion. Using this noder is faster than SegmentExtractingNoder and BoundarySegmentNoder. No precision reduction is carried out. If that is required, another noder must be used (such as a snap-rounding noder), or the input must be precision-reduced beforehand. BoundarySegmentNoder A noder which extracts boundary line segments as ISegmentString. Boundary segments are those which are not duplicated in the input. It is appropriate for use with valid polygonal coverages. No precision reduction is carried out. If that is required, another noder must be used (such as a snap-rounding noder), or the input must be precision-reduced beforehand. FastNodingValidator Validates that a collection of ISegmentStrings is correctly noded. Indexing is used to improve performance. FastSegmentSetIntersectionFinder Finds if two sets of ISegmentStrings intersect. InteriorIntersectionFinderAdder Finds interior intersections between line segments in NodedSegmentStrings, and adds them as nodes using AddIntersection(LineIntersector, int, int, int). This class is used primarily for Snap-Rounding. For general-purpose noding, use IntersectionAdder. IntersectionAdder Computes the possible intersections between two line segments in ISegmentStrings and adds them to each string using AddIntersection(LineIntersector, int, int, int). IteratedNoder Nodes a set of ISegmentStrings completely. The set of ISegmentStrings is fully noded; i.e. noding is repeated until no further intersections are detected. Iterated noding using a Floating precision model is not guaranteed to converge, due to round off error. This problem is detected and an exception is thrown. Clients can choose to rerun the noding using a lower precision model. MCIndexNoder Nodes a set of ISegmentStrings using a index based on MonotoneChains and a ISpatialIndex<T>. The ISpatialIndex<T> used should be something that supports envelope (range) queries efficiently (such as a Quadtree\" or HPRtree<T>. The noder supports using an overlap tolerance distance. This allows determining segment intersection using a buffer for uses involving snapping with a distance tolerance. MCIndexNoder.SegmentOverlapAction MCIndexSegmentSetMutualIntersector Intersects two sets of ISegmentStrings using a index based on MonotoneChains and a ISpatialIndex<T>. Thread-safe and immutable. MCIndexSegmentSetMutualIntersector.SegmentOverlapAction Segment overlap action class NodedSegmentString Represents a list of contiguous line segments, and supports noding the segments. The line segments are represented by an array of Coordinates. Intended to optimize the noding of contiguous segments by reducing the number of allocated objects. ISegmentStrings can carry a context object, which is useful for preserving topological or parentage information. All noded substrings are initialized with the same context object. For read-only applications use BasicSegmentString, which is (slightly)more lightweight. NodingIntersectionFinder Finds non-noded intersections in a set of {@link SegmentString}s, if any exist. Non-noded intersections include: The finder can be limited to finding only interior intersections by setting InteriorIntersectionsOnly. By default only the first intersection is found, but all can be found by setting FindAllIntersections. NodingValidator Validates that a collection of ISegmentStrings is correctly noded. Throws an appropriate exception if an noding error is found. Octant Methods for computing and working with Octants of the Cartesian plane. OrientedCoordinateArray Allows comparing Coordinate arrays in an orientation-independent way. ScaledNoder Wraps a INoder and transforms its input into the integer domain. This is intended for use with Snap-Rounding noders, which typically are only intended to work in the integer domain. Clients should be aware that rescaling can involve loss of precision, which can cause zero-length line segments to be created. These in turn can cause problems when used to build a planar graph. This situation should be checked for and collapsed segments removed if necessary. SegmentExtractingNoder A noder which extracts all line segments as ISegmentStrings. This enables fast overlay of geometries which are known to be already fully noded. In particular, it provides fast union of polygonal and linear coverages. Unioning a noded set of lines is an effective way to perform line merging and line dissolving. No precision reduction is carried out. If that is required, another noder must be used (such as a snap-rounding noder), or the input must be precision-reduced beforehand. SegmentIntersectionDetector Detects and records an intersection between two ISegmentStrings, if one exists. Only a single intersection is recorded. SegmentNode Represents an intersection point between two ISegmentStrings. SegmentNodeList A list of the SegmentNodes present along a noded ISegmentString. SegmentPointComparator Implements a robust method of comparing the relative position of two points along the same segment. The coordinates are assumed to lie \"near\" the segment. This means that this algorithm will only return correct results if the input coordinates have the same precision and correspond to rounded values of exact coordinates lying on the segment. SegmentStringDissolver Dissolves a noded collection of ISegmentStrings to produce a set of merged linework with unique segments. SegmentStringEx Extension methods to mimic JTS' default methods on SegmentString interface SegmentStringUtil Utility methods for processing ISegmentStrings SimpleNoder Nodes a set of ISegmentStrings by performing a brute-force comparison of every segment to every other one. This has n^2 performance, so is too slow for use on large numbers of segments. SimpleSegmentSetMutualIntersector Intersects two sets of ISegmentStrings using brute-force comparison. SinglePassNoder Base class for INoders which make a single pass to find intersections. This allows using a custom ISegmentIntersector (which for instance may simply identify intersections, rather than insert them). ValidatingNoder A wrapper for INoders which validates the output arrangement is correctly noded. An arrangement of line segments is fully noded if there is no line segment which has another segment intersecting its interior. If the noding is not correct, a TopologyException is thrown with details of the first invalid location found. Interfaces INodableSegmentString An interface for classes which support adding nodes to a segment string. INoder Computes all intersections between segments in a set of ISegmentStrings. Intersections found are represented as SegmentNodes and added to the ISegmentStrings in which they occur. As a final step in the noding a new set of segment strings split at the nodes may be returned. ISegmentIntersector Processes possible intersections detected by a INoder. ISegmentSetMutualIntersector An intersector for the red-blue intersection problem. In this class of line arrangement problem, two disjoint sets of linestrings are intersected. Implementing classes must provide a way of supplying the base set of segment strings to test against (e.g. in the constructor, for straightforward thread-safety). In order to allow optimizing processing, the following condition is assumed to hold for each set: Implementations can take advantage of this fact to optimize processing (i.e. by avoiding testing for intersections between linestrings belonging to the same set). ISegmentString An interface for classes which represent a sequence of contiguous line segments. SegmentStrings can carry a context object, which is useful for preserving topological or parentage information. SegmentStringDissolver.ISegmentStringMerger A merging strategy which can be used to update the context data of ISegmentStrings which are merged during the dissolve process. Enums Octants Octants in the Cartesian plane. Octants are numbered as follows: \\2|1/ 3 \\|/ 0 ---+-- 4 /|\\ 7 /5|6\\ If line segments lie along a coordinate axis, the octant is the lower of the two possible values."
  },
  "api/NetTopologySuite.NtsGeometryServices.html": {
    "href": "api/NetTopologySuite.NtsGeometryServices.html",
    "title": "Class NtsGeometryServices | NetTopologySuite",
    "summary": "Class NtsGeometryServices A geometry service provider class Inheritance object NtsGeometryServices Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite Assembly: NetTopologySuite.dll Syntax public class NtsGeometryServices Remarks When overriding this class, you need to provide a public constructor with the following arguments: A factory to create coordinate sequences PrecisionModelA precision model intspatial reference id (srid) GeometryOverlayA class that bundles an overlay operation function set CoordinateEqualityComparerA class that performs checks Coordinates for equality. NtsGeometryServices(CoordinateSequenceFactory, PrecisionModel, int, GeometryOverlay, CoordinateEqualityComparer) Constructors | Edit this page View Source NtsGeometryServices() Creates an instance of this class, using the CoordinateArraySequenceFactory as default and a Floating precision model. No DefaultSRID is specified. The Legacy function set for overlay operations is being used. Declaration public NtsGeometryServices() | Edit this page View Source NtsGeometryServices(CoordinateSequenceFactory) Creates an instance of this class, using a Floating precision model as default. No DefaultSRID is specified. The default coordinate sequence factory is defined by coordinateSequenceFactory. The Legacy function set for overlay operations is being used. Declaration public NtsGeometryServices(CoordinateSequenceFactory coordinateSequenceFactory) Parameters Type Name Description CoordinateSequenceFactory coordinateSequenceFactory | Edit this page View Source NtsGeometryServices(CoordinateSequenceFactory, PrecisionModel, int) Creates an instance of this class, using the provided CoordinateSequenceFactory, PrecisionModel and spatial reference Id (srid). Declaration public NtsGeometryServices(CoordinateSequenceFactory coordinateSequenceFactory, PrecisionModel precisionModel, int srid) Parameters Type Name Description CoordinateSequenceFactory coordinateSequenceFactory The coordinate sequence factory to use. PrecisionModel precisionModel The precision model. int srid The default spatial reference ID | Edit this page View Source NtsGeometryServices(CoordinateSequenceFactory, PrecisionModel, int, GeometryOverlay, CoordinateEqualityComparer) Creates an instance of this class, using the provided CoordinateSequenceFactory, PrecisionModel, a spatial reference Id (srid) and a GeometryOverlay. Declaration public NtsGeometryServices(CoordinateSequenceFactory coordinateSequenceFactory, PrecisionModel precisionModel, int srid, GeometryOverlay geometryOverlay, CoordinateEqualityComparer coordinateEqualityComparer) Parameters Type Name Description CoordinateSequenceFactory coordinateSequenceFactory The coordinate sequence factory to use. PrecisionModel precisionModel The precision model. int srid The default spatial reference ID GeometryOverlay geometryOverlay The geometry overlay function set to use. CoordinateEqualityComparer coordinateEqualityComparer The equality comparer for coordinates | Edit this page View Source NtsGeometryServices(CoordinateSequenceFactory, PrecisionModel, int, GeometryOverlay, GeometryRelate, CoordinateEqualityComparer) Creates an instance of this class, using the provided CoordinateSequenceFactory, PrecisionModel, a spatial reference Id (srid) and a GeometryOverlay. Declaration public NtsGeometryServices(CoordinateSequenceFactory coordinateSequenceFactory, PrecisionModel precisionModel, int srid, GeometryOverlay geometryOverlay, GeometryRelate geometryRelate, CoordinateEqualityComparer coordinateEqualityComparer) Parameters Type Name Description CoordinateSequenceFactory coordinateSequenceFactory The coordinate sequence factory to use. PrecisionModel precisionModel The precision model. int srid The default spatial reference ID GeometryOverlay geometryOverlay The geometry overlay function set to use. GeometryRelate geometryRelate The geometry relate function set to use. CoordinateEqualityComparer coordinateEqualityComparer The equality comparer for coordinates | Edit this page View Source NtsGeometryServices(CoordinateSequenceFactory, PrecisionModel, int, GeometryOverlay, GeometryRelate, CoordinateEqualityComparer, ElevationModel) Creates an instance of this class, using the provided CoordinateSequenceFactory, PrecisionModel, a spatial reference Id (srid) and a GeometryOverlay. Declaration public NtsGeometryServices(CoordinateSequenceFactory coordinateSequenceFactory, PrecisionModel precisionModel, int srid, GeometryOverlay geometryOverlay, GeometryRelate geometryRelate, CoordinateEqualityComparer coordinateEqualityComparer, ElevationModel elevationModel) Parameters Type Name Description CoordinateSequenceFactory coordinateSequenceFactory The coordinate sequence factory to use. PrecisionModel precisionModel The precision model. int srid The default spatial reference ID GeometryOverlay geometryOverlay The geometry overlay function set to use. GeometryRelate geometryRelate The geometry relate function set to use. CoordinateEqualityComparer coordinateEqualityComparer The equality comparer for coordinates ElevationModel elevationModel The elevation model that is used as default. May be null | Edit this page View Source NtsGeometryServices(GeometryOverlay) Creates an instance of this class, using the CoordinateArraySequenceFactory as default and a Floating precision model. No DefaultSRID is specified Declaration public NtsGeometryServices(GeometryOverlay geometryOverlay) Parameters Type Name Description GeometryOverlay geometryOverlay The function set to perform overlay operations | Edit this page View Source NtsGeometryServices(GeometryOverlay, GeometryRelate) Creates an instance of this class, using the CoordinateArraySequenceFactory as default and a Floating precision model. No DefaultSRID is specified Declaration public NtsGeometryServices(GeometryOverlay geometryOverlay, GeometryRelate geometryRelate) Parameters Type Name Description GeometryOverlay geometryOverlay The function set to perform overlay operations GeometryRelate geometryRelate The geometry relate function set to use. | Edit this page View Source NtsGeometryServices(GeometryRelate) Creates an instance of this class, using the CoordinateArraySequenceFactory as default and a Floating precision model. No DefaultSRID is specified Declaration public NtsGeometryServices(GeometryRelate geometryRelate) Parameters Type Name Description GeometryRelate geometryRelate The geometry relate function set to use. | Edit this page View Source NtsGeometryServices(PrecisionModel) Creates an instance of this class, using the CoordinateArraySequenceFactory as default. No DefaultSRID is specified. The default precision model is defined by precisionModel. The Legacy function set for overlay operations is being used. Declaration public NtsGeometryServices(PrecisionModel precisionModel) Parameters Type Name Description PrecisionModel precisionModel | Edit this page View Source NtsGeometryServices(PrecisionModel, int) Creates an instance of this class, using the CoordinateArraySequenceFactory as default. A value of srid is assigned to DefaultSRID. The default precision model is defined by precisionModel. The Legacy function set for overlay operations is being used. Declaration public NtsGeometryServices(PrecisionModel precisionModel, int srid) Parameters Type Name Description PrecisionModel precisionModel int srid Properties | Edit this page View Source CoordinateEqualityComparer Gets an object that is used to test 2 coordinates for equality. Declaration public CoordinateEqualityComparer CoordinateEqualityComparer { get; } Property Value Type Description CoordinateEqualityComparer A coordinate equality tester object | Edit this page View Source DefaultCoordinateSequenceFactory Gets the default coordiate sequence factory to use Declaration public CoordinateSequenceFactory DefaultCoordinateSequenceFactory { get; } Property Value Type Description CoordinateSequenceFactory | Edit this page View Source DefaultElevationModel Gets the default elevation model Declaration public ElevationModel DefaultElevationModel { get; } Property Value Type Description ElevationModel | Edit this page View Source DefaultPrecisionModel Gets the default precision model Declaration public PrecisionModel DefaultPrecisionModel { get; } Property Value Type Description PrecisionModel | Edit this page View Source DefaultSRID Gets the default spatial reference id Declaration public int DefaultSRID { get; } Property Value Type Description int | Edit this page View Source GeometryOverlay Gets a value indicating the operations to use for geometry overlay. Declaration public GeometryOverlay GeometryOverlay { get; } Property Value Type Description GeometryOverlay A set of geometry overlay functions. | Edit this page View Source GeometryRelate Gets a value indicating the operations to use for geometry relation determination. Declaration public GeometryRelate GeometryRelate { get; } Property Value Type Description GeometryRelate A set of geometry relation functions. | Edit this page View Source Instance Gets or sets the default instance of NtsGeometryServices. Declaration public static NtsGeometryServices Instance { get; set; } Property Value Type Description NtsGeometryServices Exceptions Type Condition ArgumentNullException Thrown when trying to set the value to null. Methods | Edit this page View Source CreateGeometryFactory() Creates or retrieves a geometry factory using DefaultSRID, DefaultPrecisionModel and DefaultCoordinateSequenceFactory. Declaration public GeometryFactory CreateGeometryFactory() Returns Type Description GeometryFactory A geometry factory | Edit this page View Source CreateGeometryFactory(CoordinateSequenceFactory) Creates or retrieves a geometry factory using DefaultSRID, DefaultPrecisionModel and coordinateSequenceFactory. Declaration public GeometryFactory CreateGeometryFactory(CoordinateSequenceFactory coordinateSequenceFactory) Parameters Type Name Description CoordinateSequenceFactory coordinateSequenceFactory Returns Type Description GeometryFactory A geometry factory | Edit this page View Source CreateGeometryFactory(PrecisionModel) Creates or retrieves a geometry factory using DefaultSRID, precisionModel and DefaultCoordinateSequenceFactory. Declaration public GeometryFactory CreateGeometryFactory(PrecisionModel precisionModel) Parameters Type Name Description PrecisionModel precisionModel The precision model to use. Returns Type Description GeometryFactory A geometry factory | Edit this page View Source CreateGeometryFactory(PrecisionModel, ElevationModel, int, CoordinateSequenceFactory) Creates or retrieves a geometry factory using srid, precisionModel elevationModel and coordinateSequenceFactory. Declaration public GeometryFactory CreateGeometryFactory(PrecisionModel precisionModel, ElevationModel elevationModel, int srid, CoordinateSequenceFactory coordinateSequenceFactory) Parameters Type Name Description PrecisionModel precisionModel The precision model to use. ElevationModel elevationModel The elevation model to use. May be null int srid The spatial reference id. CoordinateSequenceFactory coordinateSequenceFactory Returns Type Description GeometryFactory A geometry factory | Edit this page View Source CreateGeometryFactory(PrecisionModel, int) Creates or retrieves a geometry factory using srid, precisionModel and DefaultCoordinateSequenceFactory. Declaration public GeometryFactory CreateGeometryFactory(PrecisionModel precisionModel, int srid) Parameters Type Name Description PrecisionModel precisionModel The precision model to use. int srid The spatial reference id. Returns Type Description GeometryFactory A geometry factory | Edit this page View Source CreateGeometryFactory(PrecisionModel, int, CoordinateSequenceFactory) Creates or retrieves a geometry factory using srid, precisionModel and coordinateSequenceFactory. Declaration public GeometryFactory CreateGeometryFactory(PrecisionModel precisionModel, int srid, CoordinateSequenceFactory coordinateSequenceFactory) Parameters Type Name Description PrecisionModel precisionModel The precision model to use. int srid The spatial reference id. CoordinateSequenceFactory coordinateSequenceFactory Returns Type Description GeometryFactory A geometry factory | Edit this page View Source CreateGeometryFactory(int) Creates or retrieves a geometry factory using srid, DefaultPrecisionModel and DefaultCoordinateSequenceFactory. Declaration public GeometryFactory CreateGeometryFactory(int srid) Parameters Type Name Description int srid Returns Type Description GeometryFactory A geometry factory | Edit this page View Source CreateGeometryFactoryCore(PrecisionModel, ElevationModel, int, CoordinateSequenceFactory) Creates a GeometryFactory based on the given parameters. Declaration protected virtual GeometryFactory CreateGeometryFactoryCore(PrecisionModel precisionModel, ElevationModel elevationModel, int srid, CoordinateSequenceFactory coordinateSequenceFactory) Parameters Type Name Description PrecisionModel precisionModel The value for PrecisionModel. ElevationModel elevationModel The value for ElevationModel. May be null int srid The value for SRID. CoordinateSequenceFactory coordinateSequenceFactory The value for CoordinateSequenceFactory. Returns Type Description GeometryFactory A GeometryFactory that has the given values. Remarks This method is expected to be safe to call from any number of threads at once. Implementations must make sure to use a constructor which is properly assigning GeometryOverlay to the factory. Although the result for a given set of parameters is cached, there is no guarantee that, once this method is called with some set of parameters, it will never be called again with an exactly equal set of parameters. When this does happen, an arbitrary result is chosen as the winner (not necessarily the first one to start or finish), and all other results are discarded. | Edit this page View Source CreateGeometryFactoryCore(PrecisionModel, int, CoordinateSequenceFactory) Creates a GeometryFactory based on the given parameters. Declaration protected virtual GeometryFactory CreateGeometryFactoryCore(PrecisionModel precisionModel, int srid, CoordinateSequenceFactory coordinateSequenceFactory) Parameters Type Name Description PrecisionModel precisionModel The value for PrecisionModel. int srid The value for SRID. CoordinateSequenceFactory coordinateSequenceFactory The value for CoordinateSequenceFactory. Returns Type Description GeometryFactory A GeometryFactory that has the given values. Remarks This method is expected to be safe to call from any number of threads at once. Implementations must make sure to use a constructor which is properly assigning GeometryOverlay to the factory. Although the result for a given set of parameters is cached, there is no guarantee that, once this method is called with some set of parameters, it will never be called again with an exactly equal set of parameters. When this does happen, an arbitrary result is chosen as the winner (not necessarily the first one to start or finish), and all other results are discarded. | Edit this page View Source CreatePrecisionModel(PrecisionModel) Creates a precision model based on given precision model. Declaration [Obsolete(\"Will be removed in a future version\")] public PrecisionModel CreatePrecisionModel(PrecisionModel precisionModel) Parameters Type Name Description PrecisionModel precisionModel Returns Type Description PrecisionModel The precision model | Edit this page View Source CreatePrecisionModel(PrecisionModels) Creates a precision model based on given precision model type Declaration [Obsolete(\"Will be removed in a future version\")] public PrecisionModel CreatePrecisionModel(PrecisionModels modelType) Parameters Type Name Description PrecisionModels modelType Returns Type Description PrecisionModel The precision model type | Edit this page View Source CreatePrecisionModel(double) Creates a precision model based on the given scale factor. Declaration [Obsolete(\"Will be removed in a future version\")] public PrecisionModel CreatePrecisionModel(double scale) Parameters Type Name Description double scale The scale factor Returns Type Description PrecisionModel The precision model."
  },
  "api/NetTopologySuite.Operation.BoundaryOp.html": {
    "href": "api/NetTopologySuite.Operation.BoundaryOp.html",
    "title": "Class BoundaryOp | NetTopologySuite",
    "summary": "Class BoundaryOp Computes the boundary of a Geometry. Allows specifying the IBoundaryNodeRule to be used. This operation will always return a Geometry of the appropriate dimension for the boundary (even if the input geometry is empty). The boundary of zero-dimensional geometries (Points) is always the empty GeometryCollection. Inheritance object BoundaryOp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation Assembly: NetTopologySuite.dll Syntax public class BoundaryOp Constructors | Edit this page View Source BoundaryOp(Geometry) Initializes a new instance of the BoundaryOp class for the given geometry. Declaration public BoundaryOp(Geometry geom) Parameters Type Name Description Geometry geom The input geometry. | Edit this page View Source BoundaryOp(Geometry, IBoundaryNodeRule) Initializes a new instance of the BoundaryOp class for the given geometry. Declaration public BoundaryOp(Geometry geom, IBoundaryNodeRule bnRule) Parameters Type Name Description Geometry geom The input geometry. IBoundaryNodeRule bnRule Tthe Boundary Node Rule to use. Methods | Edit this page View Source GetBoundary() Gets the computed boundary. Declaration public Geometry GetBoundary() Returns Type Description Geometry The boundary geometry. | Edit this page View Source GetBoundary(Geometry) Computes a geometry representing the boundary of a geometry. Declaration public static Geometry GetBoundary(Geometry g) Parameters Type Name Description Geometry g The input geometry. Returns Type Description Geometry The computed boundary. | Edit this page View Source GetBoundary(Geometry, IBoundaryNodeRule) Computes a geometry representing the boundary of a geometry, using an explicit IBoundaryNodeRule. Declaration public static Geometry GetBoundary(Geometry g, IBoundaryNodeRule bnRule) Parameters Type Name Description Geometry g The input geometry. IBoundaryNodeRule bnRule The Boundary Node Rule to use. Returns Type Description Geometry The computed boundary. | Edit this page View Source HasBoundary(Geometry, IBoundaryNodeRule) Tests if a geometry has a boundary (it is non-empty). The semantics are: Empty geometries do not have boundaries. Points do not have boundaries. For linear geometries the existence of the boundary is determined by the IBoundaryNodeRule. Non-empty polygons always have a boundary. Declaration public static bool HasBoundary(Geometry geom, IBoundaryNodeRule boundaryNodeRule) Parameters Type Name Description Geometry geom The geometry providing the boundary IBoundaryNodeRule boundaryNodeRule The Boundary Node Rule to use Returns Type Description bool true if the boundary exists"
  },
  "api/NetTopologySuite.Operation.Buffer.BufferCurveSetBuilder.html": {
    "href": "api/NetTopologySuite.Operation.Buffer.BufferCurveSetBuilder.html",
    "title": "Class BufferCurveSetBuilder | NetTopologySuite",
    "summary": "Class BufferCurveSetBuilder Creates all the raw offset curves for a buffer of a Geometry. Raw curves need to be noded together and polygonized to form the final buffer area. Inheritance object BufferCurveSetBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Buffer Assembly: NetTopologySuite.dll Syntax public class BufferCurveSetBuilder Constructors | Edit this page View Source BufferCurveSetBuilder(Geometry, double, PrecisionModel, ElevationModel, BufferParameters) Declaration public BufferCurveSetBuilder(Geometry inputGeom, double distance, PrecisionModel precisionModel, ElevationModel em, BufferParameters parameters) Parameters Type Name Description Geometry inputGeom The input geometry double distance The offset distance PrecisionModel precisionModel A precision model ElevationModel em An elevation model model. May be null BufferParameters parameters The buffer parameters | Edit this page View Source BufferCurveSetBuilder(Geometry, double, PrecisionModel, BufferParameters) Declaration public BufferCurveSetBuilder(Geometry inputGeom, double distance, PrecisionModel precisionModel, BufferParameters parameters) Parameters Type Name Description Geometry inputGeom The input geometry double distance The offset distance PrecisionModel precisionModel A precision model BufferParameters parameters The buffer parameters Properties | Edit this page View Source InvertOrientation Gets or sets a value indicating whether the offset curve is generated using the inverted orientation of input rings. This allows generating a buffer(0) polygon from the smaller lobes of self-crossing rings. Declaration public bool InvertOrientation { get; set; } Property Value Type Description bool Methods | Edit this page View Source GetCurves() Computes the set of raw offset curves for the buffer. Each offset curve has an attached {Label} indicating its left and right location. Declaration public IList<ISegmentString> GetCurves() Returns Type Description IList<ISegmentString> A Collection of SegmentStrings representing the raw buffer curves."
  },
  "api/NetTopologySuite.Operation.Buffer.BufferInputLineSimplifier.html": {
    "href": "api/NetTopologySuite.Operation.Buffer.BufferInputLineSimplifier.html",
    "title": "Class BufferInputLineSimplifier | NetTopologySuite",
    "summary": "Class BufferInputLineSimplifier Simplifies a buffer input line to remove concavities with shallow depth. Inheritance object BufferInputLineSimplifier Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Buffer Assembly: NetTopologySuite.dll Syntax public class BufferInputLineSimplifier Remarks The major benefit of doing this is to reduce the number of points and the complexity of shape which will be buffered. This improves performance and robustness. It also reduces the risk of gores created by the quantized fillet arcs (although this issue should be eliminated by the offset curve generation logic). A key aspect of the simplification is that it affects inside (concave or inward) corners only. Convex (outward) corners are preserved, since they are required to ensure that the generated buffer curve lies at the correct distance from the input geometry. Another important heuristic used is that the end segments of linear inputs are never simplified. This ensures that the client buffer code is able to generate end caps faithfully. Ring inputs can have end segments removed by simplification. No attempt is made to avoid self-intersections in the output. This is acceptable for use for generating a buffer offset curve, since the buffer algorithm is insensitive to invalid polygonal geometry. However, this means that this algorithm cannot be used as a general-purpose polygon simplification technique. Constructors | Edit this page View Source BufferInputLineSimplifier(Coordinate[]) Declaration public BufferInputLineSimplifier(Coordinate[] inputLine) Parameters Type Name Description Coordinate[] inputLine Methods | Edit this page View Source Simplify(Coordinate[], double) Simplify the input coordinate list. If the distance tolerance is positive, concavities on the LEFT side of the line are simplified. If the supplied distance tolerance is negative, concavities on the RIGHT side of the line are simplified. Declaration public static Coordinate[] Simplify(Coordinate[] inputLine, double distanceTol) Parameters Type Name Description Coordinate[] inputLine The coordinate list to simplify double distanceTol simplification distance tolerance to use Returns Type Description Coordinate[] The simplified coordinate list | Edit this page View Source Simplify(double) Simplify the input coordinate list. Declaration public Coordinate[] Simplify(double distanceTol) Parameters Type Name Description double distanceTol Simplification distance tolerance to use Returns Type Description Coordinate[] The simplified coordinates list Remarks If the distance tolerance is positive, concavities on the LEFT side of the line are simplified. If the supplied distance tolerance is negative, concavities on the RIGHT side of the line are simplified."
  },
  "api/NetTopologySuite.Operation.Buffer.BufferOp.html": {
    "href": "api/NetTopologySuite.Operation.Buffer.BufferOp.html",
    "title": "Class BufferOp | NetTopologySuite",
    "summary": "Class BufferOp Computes the buffer of a geometry, for both positive and negative buffer distances. Inheritance object BufferOp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Buffer Assembly: NetTopologySuite.dll Syntax public class BufferOp Remarks In GIS, the positive (or negative) buffer of a geometry is defined as the Minkowski sum (or difference) of the geometry with a circle of radius equal to the absolute value of the buffer distance. In the CAD/CAM world buffers are known as offset curves. In morphological analysis the operation of positive and negative buffering is referred to as erosion and dilation The buffer operation always returns a polygonal result. The negative or zero-distance buffer of lines and points is always an empty Polygon. Since true buffer curves may contain circular arcs, computed buffer polygons are only approximations to the true geometry. The user can control the accuracy of the approximation by specifying the number of linear segments used to approximate arcs. This is specified via QuadrantSegments or QuadrantSegments. The EndCapStyle of a linear buffer may be specified. The following end cap styles are supported: Round - the usual round end caps Flat - end caps are truncated flat at the line ends Square - end caps are squared off at the buffer distance beyond the line ends The JoinStyle of the corners in a buffer may be specified. The following join styles are supported: Round - the usual round join Mitre - corners are \"sharp\" (up to a MitreLimit distance limit}) Bevel - corners are beveled (clipped off) The buffer algorithm may perform simplification on the input to increase performance. The simplification is performed a way that always increases the buffer area (so that the simplified input covers the original input). The degree of simplification can be specified with SimplifyFactor, with a DefaultSimplifyFactor used otherwise. Note that if the buffer distance is zero then so is the computed simplify tolerance, no matter what the simplify factor. Buffer results are always valid geometry. Given this, computing a zero-width buffer of an invalid polygonal geometry is an effective way to \"validify\" the geometry. Note however that in the case of self-intersecting \"bow-tie\" geometries, only the largest enclosed area will be retained. Constructors | Edit this page View Source BufferOp(Geometry) Initializes a buffer computation for the given geometry Declaration public BufferOp(Geometry g) Parameters Type Name Description Geometry g the geometry to buffer | Edit this page View Source BufferOp(Geometry, BufferParameters) Initializes a buffer computation for the given geometry with the given set of parameters Declaration public BufferOp(Geometry g, BufferParameters bufParams) Parameters Type Name Description Geometry g the geometry to buffer BufferParameters bufParams the buffer parameters to use Properties | Edit this page View Source QuadrantSegments Gets or sets the number of line segments in a quarter-circle used to approximate angle fillets for round end caps and joins. Declaration public int QuadrantSegments { get; set; } Property Value Type Description int Methods | Edit this page View Source Buffer(Geometry, double) Computes the buffer of a geometry for a given buffer distance. Declaration public static Geometry Buffer(Geometry g, double distance) Parameters Type Name Description Geometry g the geometry to buffer double distance the buffer distance Returns Type Description Geometry the buffer of the input geometry | Edit this page View Source Buffer(Geometry, double, BufferParameters) Computes the buffer for a geometry for a given buffer distance and accuracy of approximation. Declaration public static Geometry Buffer(Geometry g, double distance, BufferParameters parameters) Parameters Type Name Description Geometry g the geometry to buffer double distance the buffer distance BufferParameters parameters the buffer parameters to use Returns Type Description Geometry the buffer of the input geometry | Edit this page View Source Buffer(Geometry, double, int) Computes the buffer for a geometry for a given buffer distance and accuracy of approximation. Declaration public static Geometry Buffer(Geometry g, double distance, int quadrantSegments) Parameters Type Name Description Geometry g the geometry to buffer double distance the buffer distance int quadrantSegments the number of segments used to approximate a quarter circle Returns Type Description Geometry the buffer of the input geometry | Edit this page View Source GetResultGeometry(double) Returns the buffer computed for a geometry for a given buffer distance. Declaration public Geometry GetResultGeometry(double distance) Parameters Type Name Description double distance the buffer distance Returns Type Description Geometry the buffer of the input geometry"
  },
  "api/NetTopologySuite.Operation.Buffer.BufferParameters.html": {
    "href": "api/NetTopologySuite.Operation.Buffer.BufferParameters.html",
    "title": "Class BufferParameters | NetTopologySuite",
    "summary": "Class BufferParameters A value class containing the parameters which specify how a buffer should be constructed. The parameters allow control over: Quadrant segments (accuracy of approximation for circular arcs) End Cap style Join style Mitre limit whether the buffer is single-sided Inheritance object BufferParameters Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Buffer Assembly: NetTopologySuite.dll Syntax public class BufferParameters Constructors | Edit this page View Source BufferParameters() Creates a default set of parameters Declaration public BufferParameters() | Edit this page View Source BufferParameters(int) Creates a set of parameters with the given quadrantSegments value. Declaration public BufferParameters(int quadrantSegments) Parameters Type Name Description int quadrantSegments The number of quadrant segments to use | Edit this page View Source BufferParameters(int, EndCapStyle) Creates a set of parameters with the given quadrantSegments and endCapStyle values. Declaration public BufferParameters(int quadrantSegments, EndCapStyle endCapStyle) Parameters Type Name Description int quadrantSegments the number of quadrant segments to use EndCapStyle endCapStyle the end cap style to use | Edit this page View Source BufferParameters(int, EndCapStyle, JoinStyle, double) Creates a set of parameters with the given parameter values. Declaration public BufferParameters(int quadrantSegments, EndCapStyle endCapStyle, JoinStyle joinStyle, double mitreLimit) Parameters Type Name Description int quadrantSegments the number of quadrant segments to use EndCapStyle endCapStyle the end cap style to use JoinStyle joinStyle the join style to use double mitreLimit the mitre limit to use Fields | Edit this page View Source DefaultJoinStyle The default number of facets into which to divide a fillet of 90 degrees. A value of 8 gives less than 2% max error in the buffer distance. For a max error of < 1%, use QS = 12. For a max error of < 0.1%, use QS = 18. Declaration public const JoinStyle DefaultJoinStyle = Round Field Value Type Description JoinStyle | Edit this page View Source DefaultMitreLimit The default mitre limit Allows fairly pointy mitres. Declaration public const double DefaultMitreLimit = 5 Field Value Type Description double | Edit this page View Source DefaultQuadrantSegments The default number of facets into which to divide a fillet of 90 degrees. A value of 8 gives less than 2% max error in the buffer distance. For a max error of < 1%, use QS = 12. For a max error of < 0.1%, use QS = 18. Declaration public const int DefaultQuadrantSegments = 8 Field Value Type Description int | Edit this page View Source DefaultSimplifyFactor The default simplify factor. Provides an accuracy of about 1%, which matches the accuracy of the DefaultQuadrantSegments parameter. Declaration public const double DefaultSimplifyFactor = 0.01 Field Value Type Description double Properties | Edit this page View Source EndCapStyle Gets or sets the end cap style of the generated buffer. Declaration public EndCapStyle EndCapStyle { get; set; } Property Value Type Description EndCapStyle Remarks The styles supported are Round, Flat, and Square. The default is Round. | Edit this page View Source IsSingleSided Gets or sets whether the computed buffer should be single-sided. A single-sided buffer is constructed on only one side of each input line. The side used is determined by the sign of the buffer distance: a positive distance indicates the left-hand side a negative distance indicates the right-hand side The single-sided buffer of point geometries is the same as the regular buffer. The End Cap Style for single-sided buffers is always ignored, and forced to the equivalent of Flat. Declaration public bool IsSingleSided { get; set; } Property Value Type Description bool | Edit this page View Source JoinStyle Gets/Sets the join style for outside (reflex) corners between line segments. Declaration public JoinStyle JoinStyle { get; set; } Property Value Type Description JoinStyle Remarks The styles supported are Round, Mitre and Bevel The default is Round | Edit this page View Source MitreLimit Sets the limit on the mitre ratio used for very sharp corners. Declaration public double MitreLimit { get; set; } Property Value Type Description double Remarks The mitre ratio is the ratio of the distance from the corner to the end of the mitred offset corner. When two line segments meet at a sharp angle, a miter join will extend far beyond the original geometry. (and in the extreme case will be infinitely far.) To prevent unreasonable geometry, the mitre limit allows controlling the maximum length of the join corner. Corners with a ratio which exceed the limit will be beveled. | Edit this page View Source QuadrantSegments Gets or sets the number of line segments in a quarter-circle used to approximate angle fillets in round endcaps and joins. The value should be at least 1. This determines the error in the approximation to the true buffer curve. The default value of 8 gives less than 2% error in the buffer distance. For an error of < 1%, use QS = 12. For an error of < 0.1%, use QS = 18. The error is always less than the buffer distance (in other words, the computed buffer curve is always inside the true curve). Declaration public int QuadrantSegments { get; set; } Property Value Type Description int | Edit this page View Source SimplifyFactor Factor used to determine the simplify distance tolerance for input simplification. Simplifying can increase the performance of computing buffers. Generally the simplify factor should be greater than 0. Values between 0.01 and .1 produce relatively good accuracy for the generate buffer. Larger values sacrifice accuracy in return for performance. Declaration public double SimplifyFactor { get; set; } Property Value Type Description double Methods | Edit this page View Source BufferDistanceError(int) Computes the maximum distance error due to a given level of approximation to a true arc. Declaration public static double BufferDistanceError(int quadSegs) Parameters Type Name Description int quadSegs The number of segments used to approximate a quarter-circle Returns Type Description double The error of approximation | Edit this page View Source Copy() Creates a copy Declaration public BufferParameters Copy() Returns Type Description BufferParameters"
  },
  "api/NetTopologySuite.Operation.Buffer.EndCapStyle.html": {
    "href": "api/NetTopologySuite.Operation.Buffer.EndCapStyle.html",
    "title": "Enum EndCapStyle | NetTopologySuite",
    "summary": "Enum EndCapStyle End cap style constants Namespace: NetTopologySuite.Operation.Buffer Assembly: NetTopologySuite.dll Syntax public enum EndCapStyle Fields Name Description Flat Specifies a flat line buffer end cap style. Round Specifies a round line buffer end cap style. Square Specifies a square line buffer end cap style."
  },
  "api/NetTopologySuite.Operation.Buffer.JoinStyle.html": {
    "href": "api/NetTopologySuite.Operation.Buffer.JoinStyle.html",
    "title": "Enum JoinStyle | NetTopologySuite",
    "summary": "Enum JoinStyle Join style constants Namespace: NetTopologySuite.Operation.Buffer Assembly: NetTopologySuite.dll Syntax public enum JoinStyle Fields Name Description Bevel Specifies a bevel join style. Mitre Specifies a mitre join style. Round Specifies a round join style."
  },
  "api/NetTopologySuite.Operation.Buffer.OffsetCurve.html": {
    "href": "api/NetTopologySuite.Operation.Buffer.OffsetCurve.html",
    "title": "Class OffsetCurve | NetTopologySuite",
    "summary": "Class OffsetCurve Computes an offset curve from a geometry. An offset curve is a linear geometry which is offset a given distance from the input. If the offset distance is positive the curve lies on the left side of the input; if it is negative the curve is on the right side. The curve(s) have the same direction as the input line(s). The result for a zero offset distance is a copy of the input linework. The offset curve is based on the boundary of the buffer for the geometry at the offset distance(see BufferOp. The normal mode of operation is to return the sections of the buffer boundarywhich lie on the raw offset curve (obtained via RawOffset(LineString, double). The offset curve will contain multiple sections if the input self-intersects or has close approaches.The computed sections are ordered along the raw offset curve. Sections are disjoint.They never self-intersect, but may be rings. For a LineString the offset curve is a linear geometry (LineString or MultiLineString). For a Point or MultiPoint the offset curve is an empty LineString. For a Polygon the offset curve is the boundary of the polygon buffer (which may be a MultiLineString). For a collection the output is a MultiLineString containing the offset curves of the elements. In \"joined\" mode (see {@link #setJoined(boolean)} the sections computed for each input line are joined into a single offset curve line. The joined curve may self-intersect. At larger offset distances the curve may contain \"flat-line\" artifacts in places where the input self-intersects. Offset curves support setting the number of quadrant segments, the join style, and the mitre limit(if applicable) via the BufferParameters. Inheritance object OffsetCurve Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Buffer Assembly: NetTopologySuite.dll Syntax public class OffsetCurve Constructors | Edit this page View Source OffsetCurve(Geometry, double) Creates a new instance for computing an offset curve for a geometry at a given distance. with default quadrant segments(DefaultQuadrantSegments and join style (DefaultJoinStyle). Declaration public OffsetCurve(Geometry geom, double distance) Parameters Type Name Description Geometry geom The geometry double distance The offset distance (positive for left, negative for right) | Edit this page View Source OffsetCurve(Geometry, double, BufferParameters) Creates a new instance for computing an offset curve for a geometry at a given distance. setting the quadrant segments, join style and mitre limit via BufferParameters. Declaration public OffsetCurve(Geometry geom, double distance, BufferParameters bufParams) Parameters Type Name Description Geometry geom The geometry double distance The offset distance (positive for left, negative for right) BufferParameters bufParams The buffer paramters to use Properties | Edit this page View Source Joined Gets or sets a value indicating if a single curve line for each input linear component is computed by joining curve sections in order along the raw offset curve. The default mode is to compute separate curve sections. Declaration public bool Joined { get; set; } Property Value Type Description bool Methods | Edit this page View Source GetCurve() Gets the computed offset curve. Declaration public Geometry GetCurve() Returns Type Description Geometry The offset curve geometry | Edit this page View Source GetCurve(Geometry, double) Computes the offset curve of a geometry at a given distance. Declaration public static Geometry GetCurve(Geometry geom, double distance) Parameters Type Name Description Geometry geom A geometry double distance the offset distance (positive for left, negative for right) Returns Type Description Geometry The offset curve | Edit this page View Source GetCurve(Geometry, double, int, JoinStyle, double) Computes the offset curve of a geometry at a given distance, with specified quadrant segments, join style and mitre limit. Declaration public static Geometry GetCurve(Geometry geom, double distance, int quadSegs = -1, JoinStyle joinStyle = JoinStyle.Round, double mitreLimit = -1) Parameters Type Name Description Geometry geom A geometry double distance The offset distance (positive for left, negative for right) int quadSegs The quadrant segments JoinStyle joinStyle The join style double mitreLimit The mitre limit Returns Type Description Geometry The offset curve | Edit this page View Source GetCurveJoined(Geometry, double) Computes the offset curve of a geometry at a given distance, joining curve sections into a single line for each input line. Declaration public static Geometry GetCurveJoined(Geometry geom, double distance) Parameters Type Name Description Geometry geom A geometry double distance the offset distance (positive for left, negative for right) Returns Type Description Geometry The joined offset curve | Edit this page View Source RawOffset(LineString, double) Gets the raw offset curve for a line at a given distance, with default buffer parameters. Declaration public static Coordinate[] RawOffset(LineString line, double distance) Parameters Type Name Description LineString line The LineString to offset double distance The offset distance (positive for left, negative for right) Returns Type Description Coordinate[] The raw offset line | Edit this page View Source RawOffset(LineString, double, BufferParameters) Gets the raw offset curve for a line at a given distance. The quadrant segments, join style and mitre limit can be specified via BufferParameters. The raw offset line may contain loops and other artifacts which are not present in the true offset curve. Declaration public static Coordinate[] RawOffset(LineString line, double distance, BufferParameters bufParams) Parameters Type Name Description LineString line The LineString to offset double distance The offset distance (positive for left, negative for right) BufferParameters bufParams The buffer parameters to use Returns Type Description Coordinate[] The raw offset curve points"
  },
  "api/NetTopologySuite.Operation.Buffer.OffsetCurveBuilder.html": {
    "href": "api/NetTopologySuite.Operation.Buffer.OffsetCurveBuilder.html",
    "title": "Class OffsetCurveBuilder | NetTopologySuite",
    "summary": "Class OffsetCurveBuilder Computes the raw offset curve for a single Geometry component (ring, line or point). A raw offset curve line is not noded - it may contain self-intersections (and usually will).g The final buffer polygon is computed by forming a topological graph of all the noded raw curves and tracing outside contours. The points in the raw curve are rounded to a given PrecisionModel. Note: this may not produce correct results if the input contains repeated or invalid points. Repeated points should be removed before calling. RemoveRepeatedOrInvalidPoints(Coordinate[]). Inheritance object OffsetCurveBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Buffer Assembly: NetTopologySuite.dll Syntax public class OffsetCurveBuilder Constructors | Edit this page View Source OffsetCurveBuilder(PrecisionModel, ElevationModel, BufferParameters) Declaration public OffsetCurveBuilder(PrecisionModel precisionModel, ElevationModel em, BufferParameters bufParams) Parameters Type Name Description PrecisionModel precisionModel ElevationModel em BufferParameters bufParams | Edit this page View Source OffsetCurveBuilder(PrecisionModel, BufferParameters) Declaration public OffsetCurveBuilder(PrecisionModel precisionModel, BufferParameters bufParams) Parameters Type Name Description PrecisionModel precisionModel BufferParameters bufParams Properties | Edit this page View Source BufferParameters Gets the buffer parameters being used to generate the curve. Declaration public BufferParameters BufferParameters { get; } Property Value Type Description BufferParameters Methods | Edit this page View Source GetLineCurve(Coordinate[], double) This method handles single points as well as LineStrings. LineStrings are assumed not to be closed (the function will not fail for closed lines, but will generate superfluous line caps). Declaration public Coordinate[] GetLineCurve(Coordinate[] inputPts, double distance) Parameters Type Name Description Coordinate[] inputPts The vertices of the line to offset double distance The offset distance Returns Type Description Coordinate[] A Coordinate array representing the curve or null if the curve is empty | Edit this page View Source GetOffsetCurve(Coordinate[], double) Declaration public Coordinate[] GetOffsetCurve(Coordinate[] inputPts, double distance) Parameters Type Name Description Coordinate[] inputPts double distance Returns Type Description Coordinate[] | Edit this page View Source GetRingCurve(Coordinate[], Position, double) This method handles the degenerate cases of single points and lines, as well as rings. Declaration public Coordinate[] GetRingCurve(Coordinate[] inputPts, Position side, double distance) Parameters Type Name Description Coordinate[] inputPts Position side double distance Returns Type Description Coordinate[] A Coordinate array representing the curve or null if the curve is empty | Edit this page View Source GetRingCurve(Coordinate[], Positions, double) This method handles the degenerate cases of single points and lines, as well as rings. Declaration [Obsolete(\"Use GetRingCurve(Coordinate[], Geometries.Position, double)\")] public Coordinate[] GetRingCurve(Coordinate[] inputPts, Positions side, double distance) Parameters Type Name Description Coordinate[] inputPts Positions side double distance Returns Type Description Coordinate[] A Coordinate array representing the curve or null if the curve is empty | Edit this page View Source IsLineOffsetEmpty(double) Tests whether the offset curve for line or point geometries at the given offset distance is empty (does not exist). This is the case if: the distance is zero the distance is negative, except for the case of singled-sided buffers Declaration public bool IsLineOffsetEmpty(double distance) Parameters Type Name Description double distance The offset curve distance Returns Type Description bool true if the offset curve is empty"
  },
  "api/NetTopologySuite.Operation.Buffer.OffsetCurveSetBuilder.html": {
    "href": "api/NetTopologySuite.Operation.Buffer.OffsetCurveSetBuilder.html",
    "title": "Class OffsetCurveSetBuilder | NetTopologySuite",
    "summary": "Class OffsetCurveSetBuilder Creates all the raw offset curves for a buffer of a Geometry. Raw curves need to be noded together and polygonized to form the final buffer area. Inheritance object OffsetCurveSetBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Buffer Assembly: NetTopologySuite.dll Syntax [Obsolete(\"Use BufferCurveSetBuilder\")] public class OffsetCurveSetBuilder Constructors | Edit this page View Source OffsetCurveSetBuilder(Geometry, double, OffsetCurveBuilder) Declaration public OffsetCurveSetBuilder(Geometry inputGeom, double distance, OffsetCurveBuilder curveBuilder) Parameters Type Name Description Geometry inputGeom double distance OffsetCurveBuilder curveBuilder Properties | Edit this page View Source InvertOrientation Gets or sets a value indicating whether the offset curve is generated using the inverted orientation of input rings. This allows generating a buffer(0) polygon from the smaller lobes of self-crossing rings. Declaration public bool InvertOrientation { get; set; } Property Value Type Description bool Methods | Edit this page View Source GetCurves() Computes the set of raw offset curves for the buffer. Each offset curve has an attached {Label} indicating its left and right location. Declaration public IList<ISegmentString> GetCurves() Returns Type Description IList<ISegmentString> A Collection of SegmentStrings representing the raw buffer curves."
  },
  "api/NetTopologySuite.Operation.Buffer.OffsetCurveVertexList.html": {
    "href": "api/NetTopologySuite.Operation.Buffer.OffsetCurveVertexList.html",
    "title": "Class OffsetCurveVertexList | NetTopologySuite",
    "summary": "Class OffsetCurveVertexList A list of the vertices in a constructed offset curve. Inheritance object OffsetCurveVertexList Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Operation.Buffer Assembly: NetTopologySuite.dll Syntax public class OffsetCurveVertexList Remarks Automatically removes close adjacent vertices. Constructors | Edit this page View Source OffsetCurveVertexList() Declaration public OffsetCurveVertexList() Properties | Edit this page View Source Coordinates Gets the Coordinates for the curve. Declaration public Coordinate[] Coordinates { get; } Property Value Type Description Coordinate[] | Edit this page View Source MinimumVertexDistance The distance below which two adjacent points on the curve are considered to be coincident. Declaration public double MinimumVertexDistance { get; set; } Property Value Type Description double Remarks This is chosen to be a small fraction of the offset distance. | Edit this page View Source PrecisionModel Gets/Sets the precision model to use when adding new points. Declaration public PrecisionModel PrecisionModel { get; set; } Property Value Type Description PrecisionModel Methods | Edit this page View Source AddPt(Coordinate) Function to add a point Declaration public void AddPt(Coordinate pt) Parameters Type Name Description Coordinate pt The point to add. Remarks The point is only added if IsDuplicate(Coordinate) evaluates to false. | Edit this page View Source CloseRing() Automatically closes the ring (if it not alread is). Declaration public void CloseRing() | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/NetTopologySuite.Operation.Buffer.OldOffsetCurveBuilder.html": {
    "href": "api/NetTopologySuite.Operation.Buffer.OldOffsetCurveBuilder.html",
    "title": "Class OldOffsetCurveBuilder | NetTopologySuite",
    "summary": "Class OldOffsetCurveBuilder Computes the raw offset curve for a single Geometry component (ring, line or point). Inheritance object OldOffsetCurveBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Buffer Assembly: NetTopologySuite.dll Syntax [Obsolete] public class OldOffsetCurveBuilder Remarks A raw offset curve line is not noded - it may contain self-intersections (and usually will). The final buffer polygon is computed by forming a topological graph of all the noded raw curves and tracing outside contours. The points in the raw curve are rounded to the required precision model. Constructors | Edit this page View Source OldOffsetCurveBuilder(PrecisionModel, BufferParameters) Declaration public OldOffsetCurveBuilder(PrecisionModel precisionModel, BufferParameters bufParams) Parameters Type Name Description PrecisionModel precisionModel BufferParameters bufParams Methods | Edit this page View Source GetLineCurve(Coordinate[], double) This method handles single points as well as lines. Lines are assumed to not be closed (the function will not fail for closed lines, but will generate superfluous line caps). Declaration public IList<Coordinate[]> GetLineCurve(Coordinate[] inputPts, double distance) Parameters Type Name Description Coordinate[] inputPts double distance Returns Type Description IList<Coordinate[]> a List of Coordinate[] | Edit this page View Source GetRingCurve(Coordinate[], Position, double) This method handles the degenerate cases of single points and lines, as well as rings. Declaration public IList<Coordinate[]> GetRingCurve(Coordinate[] inputPts, Position side, double distance) Parameters Type Name Description Coordinate[] inputPts Position side double distance Returns Type Description IList<Coordinate[]> a List of Coordinate[] | Edit this page View Source GetRingCurve(Coordinate[], Positions, double) This method handles the degenerate cases of single points and lines, as well as rings. Declaration [Obsolete(\"Use GetRingCurve(Coordinate[], Geometries.Position, double)\")] public IList<Coordinate[]> GetRingCurve(Coordinate[] inputPts, Positions side, double distance) Parameters Type Name Description Coordinate[] inputPts Positions side double distance Returns Type Description IList<Coordinate[]> a List of Coordinate[]"
  },
  "api/NetTopologySuite.Operation.Buffer.Validate.BufferCurveMaximumDistanceFinder.MaxMidpointDistanceFilter.html": {
    "href": "api/NetTopologySuite.Operation.Buffer.Validate.BufferCurveMaximumDistanceFinder.MaxMidpointDistanceFilter.html",
    "title": "Class BufferCurveMaximumDistanceFinder.MaxMidpointDistanceFilter | NetTopologySuite",
    "summary": "Class BufferCurveMaximumDistanceFinder.MaxMidpointDistanceFilter Inheritance object BufferCurveMaximumDistanceFinder.MaxMidpointDistanceFilter Implements ICoordinateSequenceFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Buffer.Validate Assembly: NetTopologySuite.dll Syntax public class BufferCurveMaximumDistanceFinder.MaxMidpointDistanceFilter : ICoordinateSequenceFilter Constructors | Edit this page View Source MaxMidpointDistanceFilter(Geometry) Declaration public MaxMidpointDistanceFilter(Geometry geom) Parameters Type Name Description Geometry geom Properties | Edit this page View Source Done Reports whether the application of this filter can be terminated. Declaration public bool Done { get; } Property Value Type Description bool Remarks Once this method returns true, it must continue to return true on every subsequent call. | Edit this page View Source GeometryChanged Reports whether the execution of this filter has modified the coordinates of the geometry. If so, GeometryChanged() will be executed after this filter has finished being executed. Declaration public bool GeometryChanged { get; } Property Value Type Description bool Remarks Most filters can simply return a constant value reflecting whether they are able to change the coordinates. | Edit this page View Source MaxPointDistance Declaration public PointPairDistance MaxPointDistance { get; } Property Value Type Description PointPairDistance Methods | Edit this page View Source Filter(CoordinateSequence, int) Performs an operation on a coordinate in a CoordinateSequence. Declaration public void Filter(CoordinateSequence seq, int index) Parameters Type Name Description CoordinateSequence seq the CoordinateSequence to which the filter is applied int index Implements ICoordinateSequenceFilter"
  },
  "api/NetTopologySuite.Operation.Buffer.Validate.BufferCurveMaximumDistanceFinder.MaxPointDistanceFilter.html": {
    "href": "api/NetTopologySuite.Operation.Buffer.Validate.BufferCurveMaximumDistanceFinder.MaxPointDistanceFilter.html",
    "title": "Class BufferCurveMaximumDistanceFinder.MaxPointDistanceFilter | NetTopologySuite",
    "summary": "Class BufferCurveMaximumDistanceFinder.MaxPointDistanceFilter Inheritance object BufferCurveMaximumDistanceFinder.MaxPointDistanceFilter Implements ICoordinateFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Buffer.Validate Assembly: NetTopologySuite.dll Syntax public class BufferCurveMaximumDistanceFinder.MaxPointDistanceFilter : ICoordinateFilter Constructors | Edit this page View Source MaxPointDistanceFilter(Geometry) Declaration public MaxPointDistanceFilter(Geometry geom) Parameters Type Name Description Geometry geom Properties | Edit this page View Source MaxPointDistance Declaration public PointPairDistance MaxPointDistance { get; } Property Value Type Description PointPairDistance Methods | Edit this page View Source Filter(Coordinate) Performs an operation with the provided coord. Note that there is no guarantee that the input coordinate is the actual object stored in the source geometry, so changes to the coordinate object may not be persistent. Declaration public void Filter(Coordinate pt) Parameters Type Name Description Coordinate pt Implements ICoordinateFilter"
  },
  "api/NetTopologySuite.Operation.Buffer.Validate.BufferCurveMaximumDistanceFinder.html": {
    "href": "api/NetTopologySuite.Operation.Buffer.Validate.BufferCurveMaximumDistanceFinder.html",
    "title": "Class BufferCurveMaximumDistanceFinder | NetTopologySuite",
    "summary": "Class BufferCurveMaximumDistanceFinder Finds the approximate maximum distance from a buffer curve to the originating geometry. Inheritance object BufferCurveMaximumDistanceFinder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Buffer.Validate Assembly: NetTopologySuite.dll Syntax public class BufferCurveMaximumDistanceFinder Remarks The approximate maximum distance is determined by testing all vertices in the buffer curve, as well as midpoints of the curve segments. Due to the way buffer curves are constructed, this should be a very close approximation. This is similar to the Discrete Oriented Hausdorff distance from the buffer curve to the input. Constructors | Edit this page View Source BufferCurveMaximumDistanceFinder(Geometry) Declaration public BufferCurveMaximumDistanceFinder(Geometry inputGeom) Parameters Type Name Description Geometry inputGeom Properties | Edit this page View Source DistancePoints Declaration public PointPairDistance DistancePoints { get; } Property Value Type Description PointPairDistance Methods | Edit this page View Source FindDistance(Geometry) Declaration public double FindDistance(Geometry bufferCurve) Parameters Type Name Description Geometry bufferCurve Returns Type Description double"
  },
  "api/NetTopologySuite.Operation.Buffer.Validate.BufferDistanceValidator.html": {
    "href": "api/NetTopologySuite.Operation.Buffer.Validate.BufferDistanceValidator.html",
    "title": "Class BufferDistanceValidator | NetTopologySuite",
    "summary": "Class BufferDistanceValidator Validates that a given buffer curve lies an appropriate distance from the input generating it. Inheritance object BufferDistanceValidator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Buffer.Validate Assembly: NetTopologySuite.dll Syntax public class BufferDistanceValidator Remarks Useful only for round buffers (cap and join). Can be used for either positive or negative distances. This is a heuristic test, and may return false positive results (I.e. it may fail to detect an invalid result.) It should never return a false negative result, however (I.e. it should never report a valid result as invalid.) Constructors | Edit this page View Source BufferDistanceValidator(Geometry, double, Geometry) Declaration public BufferDistanceValidator(Geometry input, double bufDistance, Geometry result) Parameters Type Name Description Geometry input double bufDistance Geometry result Fields | Edit this page View Source Verbose Declaration public static bool Verbose Field Value Type Description bool Properties | Edit this page View Source ErrorIndicator Gets a geometry which indicates the location and nature of a validation failure. The indicator is a line segment showing the location and size of the distance discrepancy. Declaration public Geometry ErrorIndicator { get; } Property Value Type Description Geometry A geometric error indicator or null, if no error was found | Edit this page View Source ErrorLocation Declaration public Coordinate ErrorLocation { get; } Property Value Type Description Coordinate | Edit this page View Source ErrorMessage Declaration public string ErrorMessage { get; } Property Value Type Description string Methods | Edit this page View Source IsValid() Declaration public bool IsValid() Returns Type Description bool"
  },
  "api/NetTopologySuite.Operation.Buffer.Validate.BufferResultValidator.html": {
    "href": "api/NetTopologySuite.Operation.Buffer.Validate.BufferResultValidator.html",
    "title": "Class BufferResultValidator | NetTopologySuite",
    "summary": "Class BufferResultValidator Validates that the result of a buffer operation is geometrically correct, within a computed tolerance. Inheritance object BufferResultValidator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Buffer.Validate Assembly: NetTopologySuite.dll Syntax public class BufferResultValidator Remarks This is a heuristic test, and may return false positive results (I.e. it may fail to detect an invalid result.) It should never return a false negative result, however (I.e. it should never report a valid result as invalid.) This test may be (much) more expensive than the original buffer computation. Constructors | Edit this page View Source BufferResultValidator(Geometry, double, Geometry) Declaration public BufferResultValidator(Geometry input, double distance, Geometry result) Parameters Type Name Description Geometry input double distance Geometry result Fields | Edit this page View Source Verbose Declaration public static bool Verbose Field Value Type Description bool Properties | Edit this page View Source ErrorIndicator Gets a geometry which indicates the location and nature of a validation failure. If the failure is due to the buffer curve being too far or too close to the input, the indicator is a line segment showing the location and size of the discrepancy. Declaration public Geometry ErrorIndicator { get; } Property Value Type Description Geometry A geometric error indicator or null, if no error was found | Edit this page View Source ErrorLocation Gets the error location Declaration public Coordinate ErrorLocation { get; } Property Value Type Description Coordinate | Edit this page View Source ErrorMessage Gets the error message Declaration public string ErrorMessage { get; } Property Value Type Description string Methods | Edit this page View Source IsValid() Declaration public bool IsValid() Returns Type Description bool | Edit this page View Source IsValid(Geometry, double, Geometry) Declaration public static bool IsValid(Geometry g, double distance, Geometry result) Parameters Type Name Description Geometry g double distance Geometry result Returns Type Description bool | Edit this page View Source IsValidMessage(Geometry, double, Geometry) Checks whether the geometry buffer is valid, and returns an error message if not. Declaration public static string IsValidMessage(Geometry g, double distance, Geometry result) Parameters Type Name Description Geometry g double distance Geometry result Returns Type Description string An appropriate error message or nullif the buffer is valid"
  },
  "api/NetTopologySuite.Operation.Buffer.Validate.DistanceToPointFinder.html": {
    "href": "api/NetTopologySuite.Operation.Buffer.Validate.DistanceToPointFinder.html",
    "title": "Class DistanceToPointFinder | NetTopologySuite",
    "summary": "Class DistanceToPointFinder Computes the Euclidean distance (L2 metric) from a Point to a Geometry. Also computes two points which are separated by the distance. Inheritance object DistanceToPointFinder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Buffer.Validate Assembly: NetTopologySuite.dll Syntax public static class DistanceToPointFinder Methods | Edit this page View Source ComputeDistance(Geometry, Coordinate, PointPairDistance) Declaration public static void ComputeDistance(Geometry geom, Coordinate pt, PointPairDistance ptDist) Parameters Type Name Description Geometry geom Coordinate pt PointPairDistance ptDist | Edit this page View Source ComputeDistance(LineSegment, Coordinate, PointPairDistance) Declaration public static void ComputeDistance(LineSegment segment, Coordinate pt, PointPairDistance ptDist) Parameters Type Name Description LineSegment segment Coordinate pt PointPairDistance ptDist | Edit this page View Source ComputeDistance(LineString, Coordinate, PointPairDistance) Declaration public static void ComputeDistance(LineString line, Coordinate pt, PointPairDistance ptDist) Parameters Type Name Description LineString line Coordinate pt PointPairDistance ptDist | Edit this page View Source ComputeDistance(Polygon, Coordinate, PointPairDistance) Declaration public static void ComputeDistance(Polygon poly, Coordinate pt, PointPairDistance ptDist) Parameters Type Name Description Polygon poly Coordinate pt PointPairDistance ptDist"
  },
  "api/NetTopologySuite.Operation.Buffer.Validate.PointPairDistance.html": {
    "href": "api/NetTopologySuite.Operation.Buffer.Validate.PointPairDistance.html",
    "title": "Class PointPairDistance | NetTopologySuite",
    "summary": "Class PointPairDistance Contains a pair of points and the distance between them. Provides methods to update with a new point pair with either maximum or minimum distance. Inheritance object PointPairDistance Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Buffer.Validate Assembly: NetTopologySuite.dll Syntax public class PointPairDistance Properties | Edit this page View Source Coordinates Declaration public Coordinate[] Coordinates { get; } Property Value Type Description Coordinate[] | Edit this page View Source Distance Declaration public double Distance { get; } Property Value Type Description double Methods | Edit this page View Source GetCoordinate(int) Declaration public Coordinate GetCoordinate(int i) Parameters Type Name Description int i Returns Type Description Coordinate | Edit this page View Source Initialize() Declaration public void Initialize() | Edit this page View Source Initialize(Coordinate, Coordinate) Declaration public void Initialize(Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p0 Coordinate p1 | Edit this page View Source SetMaximum(Coordinate, Coordinate) Declaration public void SetMaximum(Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p0 Coordinate p1 | Edit this page View Source SetMaximum(PointPairDistance) Declaration public void SetMaximum(PointPairDistance ptDist) Parameters Type Name Description PointPairDistance ptDist | Edit this page View Source SetMinimum(Coordinate, Coordinate) Declaration public void SetMinimum(Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p0 Coordinate p1 | Edit this page View Source SetMinimum(PointPairDistance) Declaration public void SetMinimum(PointPairDistance ptDist) Parameters Type Name Description PointPairDistance ptDist"
  },
  "api/NetTopologySuite.Operation.Buffer.Validate.html": {
    "href": "api/NetTopologySuite.Operation.Buffer.Validate.html",
    "title": "Namespace NetTopologySuite.Operation.Buffer.Validate | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Operation.Buffer.Validate Classes BufferCurveMaximumDistanceFinder Finds the approximate maximum distance from a buffer curve to the originating geometry. BufferCurveMaximumDistanceFinder.MaxMidpointDistanceFilter BufferCurveMaximumDistanceFinder.MaxPointDistanceFilter BufferDistanceValidator Validates that a given buffer curve lies an appropriate distance from the input generating it. BufferResultValidator Validates that the result of a buffer operation is geometrically correct, within a computed tolerance. DistanceToPointFinder Computes the Euclidean distance (L2 metric) from a Point to a Geometry. Also computes two points which are separated by the distance. PointPairDistance Contains a pair of points and the distance between them. Provides methods to update with a new point pair with either maximum or minimum distance."
  },
  "api/NetTopologySuite.Operation.Buffer.VariableBuffer.html": {
    "href": "api/NetTopologySuite.Operation.Buffer.VariableBuffer.html",
    "title": "Class VariableBuffer | NetTopologySuite",
    "summary": "Class VariableBuffer Creates a buffer polygon with a varying buffer distance at each vertex along a line. Vertex distances may be zero. Only single linestring is supported as input, since buffer widths generally need to be specified individually for each line. Inheritance object VariableBuffer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Buffer Assembly: NetTopologySuite.dll Syntax public class VariableBuffer Constructors | Edit this page View Source VariableBuffer(Geometry, double[]) Creates a generator for a variable-distance line buffer. Declaration public VariableBuffer(Geometry line, double[] distance) Parameters Type Name Description Geometry line The linestring to buffer double[] distance The buffer distance for each vertex of the line Methods | Edit this page View Source Buffer(Geometry, double, double) Creates a buffer polygon along a line with the buffer distance interpolated between a start distance and an end distance. Declaration public static Geometry Buffer(Geometry line, double startDistance, double endDistance) Parameters Type Name Description Geometry line The line to buffer double startDistance The buffer width at the start of the line double endDistance The buffer width at the end of the line Returns Type Description Geometry The variable-distance buffer polygon | Edit this page View Source Buffer(Geometry, double, double, double) Creates a buffer polygon along a line with the buffer distance interpolated between a start distance, a middle distance and an end distance. The middle distance is attained at the vertex at or just past the half-length of the line. For smooth buffering of a LinearRing (or the rings of a Polygon) the start distance and end distance should be equal. Declaration public static Geometry Buffer(Geometry line, double startDistance, double midDistance, double endDistance) Parameters Type Name Description Geometry line The line to buffer double startDistance The buffer width at the start of the line double midDistance The buffer width at the middle vertex of the line double endDistance The buffer width at the end of the line Returns Type Description Geometry The variable-distance buffer polygon | Edit this page View Source Buffer(Geometry, double[]) Creates a buffer polygon along a line with the distance specified at each vertex. Declaration public static Geometry Buffer(Geometry line, double[] distance) Parameters Type Name Description Geometry line The line to buffer double[] distance The buffer distance for each vertex of the line Returns Type Description Geometry The variable-width buffer polygon | Edit this page View Source GetResult() Computes the variable buffer polygon. Declaration public Geometry GetResult() Returns Type Description Geometry A buffer polygon"
  },
  "api/NetTopologySuite.Operation.Buffer.html": {
    "href": "api/NetTopologySuite.Operation.Buffer.html",
    "title": "Namespace NetTopologySuite.Operation.Buffer | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Operation.Buffer Provides classes for computing buffers of geometries Classes BufferCurveSetBuilder Creates all the raw offset curves for a buffer of a Geometry. Raw curves need to be noded together and polygonized to form the final buffer area. BufferInputLineSimplifier Simplifies a buffer input line to remove concavities with shallow depth. BufferOp Computes the buffer of a geometry, for both positive and negative buffer distances. BufferParameters A value class containing the parameters which specify how a buffer should be constructed. The parameters allow control over: Quadrant segments (accuracy of approximation for circular arcs) End Cap style Join style Mitre limit whether the buffer is single-sided OffsetCurve Computes an offset curve from a geometry. An offset curve is a linear geometry which is offset a given distance from the input. If the offset distance is positive the curve lies on the left side of the input; if it is negative the curve is on the right side. The curve(s) have the same direction as the input line(s). The result for a zero offset distance is a copy of the input linework. The offset curve is based on the boundary of the buffer for the geometry at the offset distance(see BufferOp. The normal mode of operation is to return the sections of the buffer boundarywhich lie on the raw offset curve (obtained via RawOffset(LineString, double). The offset curve will contain multiple sections if the input self-intersects or has close approaches.The computed sections are ordered along the raw offset curve. Sections are disjoint.They never self-intersect, but may be rings. For a LineString the offset curve is a linear geometry (LineString or MultiLineString). For a Point or MultiPoint the offset curve is an empty LineString. For a Polygon the offset curve is the boundary of the polygon buffer (which may be a MultiLineString). For a collection the output is a MultiLineString containing the offset curves of the elements. In \"joined\" mode (see {@link #setJoined(boolean)} the sections computed for each input line are joined into a single offset curve line. The joined curve may self-intersect. At larger offset distances the curve may contain \"flat-line\" artifacts in places where the input self-intersects. Offset curves support setting the number of quadrant segments, the join style, and the mitre limit(if applicable) via the BufferParameters. OffsetCurveBuilder Computes the raw offset curve for a single Geometry component (ring, line or point). A raw offset curve line is not noded - it may contain self-intersections (and usually will).g The final buffer polygon is computed by forming a topological graph of all the noded raw curves and tracing outside contours. The points in the raw curve are rounded to a given PrecisionModel. Note: this may not produce correct results if the input contains repeated or invalid points. Repeated points should be removed before calling. RemoveRepeatedOrInvalidPoints(Coordinate[]). OffsetCurveSetBuilder Creates all the raw offset curves for a buffer of a Geometry. Raw curves need to be noded together and polygonized to form the final buffer area. OffsetCurveVertexList A list of the vertices in a constructed offset curve. OldOffsetCurveBuilder Computes the raw offset curve for a single Geometry component (ring, line or point). VariableBuffer Creates a buffer polygon with a varying buffer distance at each vertex along a line. Vertex distances may be zero. Only single linestring is supported as input, since buffer widths generally need to be specified individually for each line. Enums EndCapStyle End cap style constants JoinStyle Join style constants"
  },
  "api/NetTopologySuite.Operation.Distance.ConnectedElementLocationFilter.html": {
    "href": "api/NetTopologySuite.Operation.Distance.ConnectedElementLocationFilter.html",
    "title": "Class ConnectedElementLocationFilter | NetTopologySuite",
    "summary": "Class ConnectedElementLocationFilter A ConnectedElementPointFilter extracts a single point from each connected element in a Geometry (e.g. a polygon, linestring or point) and returns them in a list. The elements of the list are GeometryLocations. Empty geometries do not provide a location item. Inheritance object ConnectedElementLocationFilter Implements IGeometryFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Distance Assembly: NetTopologySuite.dll Syntax public class ConnectedElementLocationFilter : IGeometryFilter Methods | Edit this page View Source Filter(Geometry) Declaration public void Filter(Geometry geom) Parameters Type Name Description Geometry geom | Edit this page View Source GetLocations(Geometry) Returns a list containing a point from each Polygon, LineString, and Point found inside the specified point. Thus, if the specified point is not a GeometryCollection, an empty list will be returned. The elements of the list are GeometryLocations. Declaration public static IList<GeometryLocation> GetLocations(Geometry geom) Parameters Type Name Description Geometry geom Returns Type Description IList<GeometryLocation> Implements IGeometryFilter"
  },
  "api/NetTopologySuite.Operation.Distance.ConnectedElementPointFilter.html": {
    "href": "api/NetTopologySuite.Operation.Distance.ConnectedElementPointFilter.html",
    "title": "Class ConnectedElementPointFilter | NetTopologySuite",
    "summary": "Class ConnectedElementPointFilter Extracts a single point from each connected element in a Geometry (e.g. a polygon, linestring or point) and returns them in a list Inheritance object ConnectedElementPointFilter Implements IGeometryFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Distance Assembly: NetTopologySuite.dll Syntax public class ConnectedElementPointFilter : IGeometryFilter Methods | Edit this page View Source Filter(Geometry) Declaration public void Filter(Geometry geom) Parameters Type Name Description Geometry geom | Edit this page View Source GetCoordinates(Geometry) Returns a list containing a Coordinate from each Polygon, LineString, and Point found inside the specified point. Thus, if the specified point is not a GeometryCollection, an empty list will be returned. Declaration public static IList<Coordinate> GetCoordinates(Geometry geom) Parameters Type Name Description Geometry geom Returns Type Description IList<Coordinate> Implements IGeometryFilter"
  },
  "api/NetTopologySuite.Operation.Distance.DistanceOp.html": {
    "href": "api/NetTopologySuite.Operation.Distance.DistanceOp.html",
    "title": "Class DistanceOp | NetTopologySuite",
    "summary": "Class DistanceOp Computes the distance and closest points between two Geometrys. The distance computation finds a pair of points in the input geometries which have minimum distance between them. These points may not be vertices of the geometries, but may lie in the interior of a line segment. In this case the coordinate computed is a close approximation to the exact point. Empty geometry collection components are ignored. The algorithms used are straightforward O(n^2) comparisons. This worst-case performance could be improved on by using Voronoi techniques. Inheritance object DistanceOp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Distance Assembly: NetTopologySuite.dll Syntax public class DistanceOp Constructors | Edit this page View Source DistanceOp(Geometry, Geometry) Constructs a DistanceOp that computes the distance and closest points between the two specified geometries. Declaration public DistanceOp(Geometry g0, Geometry g1) Parameters Type Name Description Geometry g0 A geometry Geometry g1 A geometry | Edit this page View Source DistanceOp(Geometry, Geometry, double) Constructs a DistanceOp that computes the distance and closest points between the two specified geometries. Declaration public DistanceOp(Geometry g0, Geometry g1, double terminateDistance) Parameters Type Name Description Geometry g0 A geometry Geometry g1 A geometry double terminateDistance The distance on which to terminate the search. Methods | Edit this page View Source Distance() Report the distance between the closest points on the input geometries. Declaration public double Distance() Returns Type Description double The distance between the geometries or 0 if either input geometry is empty. Exceptions Type Condition ApplicationException if either input geometry is null | Edit this page View Source Distance(Geometry, Geometry) Compute the distance between the closest points of two geometries. Declaration public static double Distance(Geometry g0, Geometry g1) Parameters Type Name Description Geometry g0 A Geometry. Geometry g1 Another Geometry. Returns Type Description double The distance between the geometries. | Edit this page View Source IsWithinDistance(Geometry, Geometry, double) Test whether two geometries lie within a given distance of each other. Declaration public static bool IsWithinDistance(Geometry g0, Geometry g1, double distance) Parameters Type Name Description Geometry g0 Geometry g1 double distance Returns Type Description bool | Edit this page View Source NearestLocations() Report the locations of the nearest points in the input geometries. The locations are presented in the same order as the input Geometries. Declaration public GeometryLocation[] NearestLocations() Returns Type Description GeometryLocation[] A pair of GeometryLocations for the nearest points. | Edit this page View Source NearestPoints() Report the coordinates of the nearest points in the input geometries. The points are presented in the same order as the input Geometries. Declaration public Coordinate[] NearestPoints() Returns Type Description Coordinate[] A pair of Coordinates of the nearest points. | Edit this page View Source NearestPoints(Geometry, Geometry) Compute the the closest points of two geometries. The points are presented in the same order as the input Geometries. Declaration public static Coordinate[] NearestPoints(Geometry g0, Geometry g1) Parameters Type Name Description Geometry g0 A Geometry. Geometry g1 Another Geometry. Returns Type Description Coordinate[] The closest points in the geometries."
  },
  "api/NetTopologySuite.Operation.Distance.FacetSequence.html": {
    "href": "api/NetTopologySuite.Operation.Distance.FacetSequence.html",
    "title": "Class FacetSequence | NetTopologySuite",
    "summary": "Class FacetSequence Represents a sequence of facets (points or line segments) of a Geometry specified by a subsequence of a CoordinateSequence. Inheritance object FacetSequence Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Operation.Distance Assembly: NetTopologySuite.dll Syntax public class FacetSequence Constructors | Edit this page View Source FacetSequence(CoordinateSequence, int) Creates a new sequence for a single point from a CoordinateSequence. Declaration public FacetSequence(CoordinateSequence pts, int index) Parameters Type Name Description CoordinateSequence pts The sequence containing the facet point. int index the index of the point | Edit this page View Source FacetSequence(CoordinateSequence, int, int) Creates a new sequence of facets based on a CoordinateSequence. Declaration public FacetSequence(CoordinateSequence pts, int start, int end) Parameters Type Name Description CoordinateSequence pts The sequence containing facet points. int start The index of the start point int end The index of the end point + 1 | Edit this page View Source FacetSequence(Geometry, CoordinateSequence, int, int) Creates a new sequence of facets based on a CoordinateSequence contained in the given Geometry. Declaration public FacetSequence(Geometry geom, CoordinateSequence pts, int start, int end) Parameters Type Name Description Geometry geom The geometry containing the facets. CoordinateSequence pts The sequence containing the facet points. int start The index of the start point. int end The index of the end point. Properties | Edit this page View Source Count Gets the number of coordinates in this facet sequence Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source Envelope Gets the envelope of this facet sequence Declaration public Envelope Envelope { get; } Property Value Type Description Envelope | Edit this page View Source IsPoint Tests if this facet sequence consists of only one point Declaration public bool IsPoint { get; } Property Value Type Description bool Methods | Edit this page View Source Distance(FacetSequence) Computes the distance between this and another FacetSequence. Declaration public double Distance(FacetSequence facetSeq) Parameters Type Name Description FacetSequence facetSeq The sequence to compute the distance to. Returns Type Description double The minimum distance between the sequences. | Edit this page View Source GetCoordinate(int) Gets the coordinate at the given index Declaration public Coordinate GetCoordinate(int index) Parameters Type Name Description int index The index Returns Type Description Coordinate The coordinate at the given index | Edit this page View Source NearestLocations(FacetSequence) Computes the locations of the nearest points between this sequence and another sequence. The locations are presented in the same order as the input sequences. Declaration public GeometryLocation[] NearestLocations(FacetSequence facetSeq) Parameters Type Name Description FacetSequence facetSeq Returns Type Description GeometryLocation[] A pair of GeometryLocations for the nearest points. | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/NetTopologySuite.Operation.Distance.FacetSequenceTreeBuilder.html": {
    "href": "api/NetTopologySuite.Operation.Distance.FacetSequenceTreeBuilder.html",
    "title": "Class FacetSequenceTreeBuilder | NetTopologySuite",
    "summary": "Class FacetSequenceTreeBuilder Utility class to build facet sequencs STRtrees- Inheritance object FacetSequenceTreeBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Distance Assembly: NetTopologySuite.dll Syntax public static class FacetSequenceTreeBuilder Methods | Edit this page View Source BuildSTRtree(Geometry) Declaration public static STRtree<FacetSequence> BuildSTRtree(Geometry g) Parameters Type Name Description Geometry g Returns Type Description STRtree<FacetSequence>"
  },
  "api/NetTopologySuite.Operation.Distance.GeometryLocation.html": {
    "href": "api/NetTopologySuite.Operation.Distance.GeometryLocation.html",
    "title": "Class GeometryLocation | NetTopologySuite",
    "summary": "Class GeometryLocation Represents the location of a point on a Geometry. Maintains both the actual point location (which may not be exact, if the point is not a vertex) as well as information about the component and segment index where the point occurs. Locations inside area Geometrys will not have an associated segment index, so in this case the segment index will have the sentinel value of InsideArea. Inheritance object GeometryLocation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Operation.Distance Assembly: NetTopologySuite.dll Syntax public class GeometryLocation Constructors | Edit this page View Source GeometryLocation(Geometry, Coordinate) Constructs a GeometryLocation specifying a point inside an area point. Declaration public GeometryLocation(Geometry component, Coordinate pt) Parameters Type Name Description Geometry component The component of the geometry containing the point Coordinate pt The coordinate of the location | Edit this page View Source GeometryLocation(Geometry, int, Coordinate) Constructs a GeometryLocation specifying a point on a point, as well as the segment that the point is on (or InsideArea if the point is not on a segment). Declaration public GeometryLocation(Geometry component, int segIndex, Coordinate pt) Parameters Type Name Description Geometry component The component of the geometry containing the point int segIndex The segment index of the location, or InsideArea Coordinate pt The coordinate of the location Fields | Edit this page View Source InsideArea A special value of segmentIndex used for locations inside area geometries. These locations are not located on a segment, and thus do not have an associated segment index. Declaration public const int InsideArea = -1 Field Value Type Description int Properties | Edit this page View Source Coordinate Returns the Coordinate of this location. Declaration public Coordinate Coordinate { get; } Property Value Type Description Coordinate | Edit this page View Source GeometryComponent Returns the geometry component on (or in) which this location occurs. Declaration public Geometry GeometryComponent { get; } Property Value Type Description Geometry | Edit this page View Source IsInsideArea Tests whether this location represents a point inside an area geometry. Declaration public bool IsInsideArea { get; } Property Value Type Description bool | Edit this page View Source SegmentIndex Returns the segment index for this location. If the location is inside an area, the index will have the value InsideArea. Declaration public int SegmentIndex { get; } Property Value Type Description int Methods | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/NetTopologySuite.Operation.Distance.IndexedFacetDistance.html": {
    "href": "api/NetTopologySuite.Operation.Distance.IndexedFacetDistance.html",
    "title": "Class IndexedFacetDistance | NetTopologySuite",
    "summary": "Class IndexedFacetDistance Computes the distance between the facets (segments and vertices) of two Geometrys using a Branch-and-Bound algorithm. The Branch-and-Bound algorithm operates over a traversal of R-trees built on the target and the query geometries. This approach provides the following benefits: Performance is dramatically improved due to the use of the R-tree index and the pruning due to the Branch-and-Bound approach The spatial index on the target geometry is cached which allow reuse in an repeated query situation. Using this technique is usually much more performant than using the brute-force Distance(Geometry) when one or both input geometries are large, or when evaluating many distance computations against a single geometry. Inheritance object IndexedFacetDistance Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Distance Assembly: NetTopologySuite.dll Syntax public class IndexedFacetDistance Remarks This class is thread-safe. Constructors | Edit this page View Source IndexedFacetDistance(Geometry) Creates a new distance-finding instance for a given target Geometry. Declaration public IndexedFacetDistance(Geometry g1) Parameters Type Name Description Geometry g1 A Geometry, which may be of any type. Remarks Distances will be computed to all facets of the input geometry. The facets of the geometry are the discrete segments and points contained in its components. In the case of ILineal and IPuntal inputs, this is equivalent to computing the conventional distance. In the case of IPolygonal inputs, this is equivalent to computing the distance to the polygon boundaries. Methods | Edit this page View Source Distance(Geometry) Computes the distance from the base geometry to the given geometry. Declaration public double Distance(Geometry g) Parameters Type Name Description Geometry g The geometry to compute the distance to. Returns Type Description double The computed distance | Edit this page View Source Distance(Geometry, Geometry) Computes the distance between facets of two geometries. Declaration public static double Distance(Geometry g1, Geometry g2) Parameters Type Name Description Geometry g1 A geometry Geometry g2 A geometry Returns Type Description double The distance between the two geometries Remarks For geometries with many segments or points, this can be faster than using a simple distance algorithm. | Edit this page View Source IsWithinDistance(Geometry, Geometry, double) Tests whether the facets of two geometries lie within a given distance. Declaration public static bool IsWithinDistance(Geometry g1, Geometry g2, double distance) Parameters Type Name Description Geometry g1 A geometry Geometry g2 A geometry double distance The distance limit Returns Type Description bool true if two facets lie with the given distance | Edit this page View Source IsWithinDistance(Geometry, double) Tests whether the base geometry lies within a specified distance of the given geometry. Declaration public bool IsWithinDistance(Geometry g, double maxDistance) Parameters Type Name Description Geometry g The geometry to test double maxDistance The maximum distance to test Returns Type Description bool true if the geometry lies with the specified distance | Edit this page View Source NearestLocations(Geometry) Computes the nearest locations on the base geometry and the given geometry. Declaration public GeometryLocation[] NearestLocations(Geometry g) Parameters Type Name Description Geometry g Ihe geometry to compute the nearest location to. Returns Type Description GeometryLocation[] The nearest locations. | Edit this page View Source NearestPoints(Geometry) Computes the nearest locations on the target geometry and the given geometry. Declaration public Coordinate[] NearestPoints(Geometry g) Parameters Type Name Description Geometry g Ihe geometry to compute the nearest point to. Returns Type Description Coordinate[] The nearest points. | Edit this page View Source NearestPoints(Geometry, Geometry) Computes the nearest points of the facets of two geometries. Declaration public static Coordinate[] NearestPoints(Geometry g1, Geometry g2) Parameters Type Name Description Geometry g1 A geometry Geometry g2 A geometry Returns Type Description Coordinate[] The nearest points on the facets of the geometries"
  },
  "api/NetTopologySuite.Operation.Distance.html": {
    "href": "api/NetTopologySuite.Operation.Distance.html",
    "title": "Namespace NetTopologySuite.Operation.Distance | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Operation.Distance Provides classes for computing the distance between geometries Classes ConnectedElementLocationFilter A ConnectedElementPointFilter extracts a single point from each connected element in a Geometry (e.g. a polygon, linestring or point) and returns them in a list. The elements of the list are GeometryLocations. Empty geometries do not provide a location item. ConnectedElementPointFilter Extracts a single point from each connected element in a Geometry (e.g. a polygon, linestring or point) and returns them in a list DistanceOp Computes the distance and closest points between two Geometrys. The distance computation finds a pair of points in the input geometries which have minimum distance between them. These points may not be vertices of the geometries, but may lie in the interior of a line segment. In this case the coordinate computed is a close approximation to the exact point. Empty geometry collection components are ignored. The algorithms used are straightforward O(n^2) comparisons. This worst-case performance could be improved on by using Voronoi techniques. FacetSequence Represents a sequence of facets (points or line segments) of a Geometry specified by a subsequence of a CoordinateSequence. FacetSequenceTreeBuilder Utility class to build facet sequencs STRtrees- GeometryLocation Represents the location of a point on a Geometry. Maintains both the actual point location (which may not be exact, if the point is not a vertex) as well as information about the component and segment index where the point occurs. Locations inside area Geometrys will not have an associated segment index, so in this case the segment index will have the sentinel value of InsideArea. IndexedFacetDistance Computes the distance between the facets (segments and vertices) of two Geometrys using a Branch-and-Bound algorithm. The Branch-and-Bound algorithm operates over a traversal of R-trees built on the target and the query geometries. This approach provides the following benefits: Performance is dramatically improved due to the use of the R-tree index and the pruning due to the Branch-and-Bound approach The spatial index on the target geometry is cached which allow reuse in an repeated query situation. Using this technique is usually much more performant than using the brute-force Distance(Geometry) when one or both input geometries are large, or when evaluating many distance computations against a single geometry."
  },
  "api/NetTopologySuite.Operation.Distance3D.AxisPlaneCoordinateSequence.html": {
    "href": "api/NetTopologySuite.Operation.Distance3D.AxisPlaneCoordinateSequence.html",
    "title": "Class AxisPlaneCoordinateSequence | NetTopologySuite",
    "summary": "Class AxisPlaneCoordinateSequence A CoordinateSequence wrapper which projects 3D coordinates into one of the three Cartesian axis planes, using the standard orthonormal projection (i.e. simply selecting the appropriate ordinates into the XY ordinates). The projected data is represented as 2D coordinates. Inheritance object CoordinateSequence AxisPlaneCoordinateSequence Inherited Members CoordinateSequence.Dimension CoordinateSequence.Measures CoordinateSequence.Spatial CoordinateSequence.Ordinates CoordinateSequence.HasZ CoordinateSequence.HasM CoordinateSequence.ZOrdinateIndex CoordinateSequence.MOrdinateIndex CoordinateSequence.SetX(int, double) CoordinateSequence.SetY(int, double) CoordinateSequence.SetZ(int, double) CoordinateSequence.SetM(int, double) CoordinateSequence.GetOrdinate(int, Ordinate) CoordinateSequence.First CoordinateSequence.Last CoordinateSequence.Count CoordinateSequence.SetOrdinate(int, Ordinate, double) CoordinateSequence.TryGetOrdinateIndex(Ordinate, out int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Distance3D Assembly: NetTopologySuite.dll Syntax public class AxisPlaneCoordinateSequence : CoordinateSequence Methods | Edit this page View Source Copy() Returns a deep copy of this collection. Declaration public override CoordinateSequence Copy() Returns Type Description CoordinateSequence A copy of the coordinate sequence containing copies of all points Overrides CoordinateSequence.Copy() | Edit this page View Source CreateCoordinate() Creates a coordinate for use in this sequence. Declaration public override Coordinate CreateCoordinate() Returns Type Description Coordinate A coordinate for use with this sequence Overrides CoordinateSequence.CreateCoordinate() Remarks The coordinate is created supporting the same number of Dimension and Measures as this sequence and is suitable for use with GetCoordinate(int, Coordinate). | Edit this page View Source ExpandEnvelope(Envelope) Expands the given Envelope to include the coordinates in the sequence. Allows implementing classes to optimize access to coordinate values. Declaration public override Envelope ExpandEnvelope(Envelope env) Parameters Type Name Description Envelope env The envelope to expand. Returns Type Description Envelope A reference to the expanded envelope. Overrides CoordinateSequence.ExpandEnvelope(Envelope) | Edit this page View Source GetCoordinate(int) Returns (possibly a copy of) the ith Coordinate in this collection. Whether or not the Coordinate returned is the actual underlying Coordinate or merely a copy depends on the implementation. Note that in the future the semantics of this method may change to guarantee that the Coordinate returned is always a copy. Callers are advised not to assume that they can modify a CoordinateSequence by modifying the Coordinate returned by this method. Declaration public override Coordinate GetCoordinate(int i) Parameters Type Name Description int i Returns Type Description Coordinate Overrides CoordinateSequence.GetCoordinate(int) | Edit this page View Source GetCoordinate(int, Coordinate) Copies the i'th coordinate in the sequence to the supplied Coordinate. At least the first two dimensions must be copied. Declaration public override void GetCoordinate(int index, Coordinate coord) Parameters Type Name Description int index The index of the coordinate to copy. Coordinate coord A Coordinate to receive the value. Overrides CoordinateSequence.GetCoordinate(int, Coordinate) | Edit this page View Source GetCoordinateCopy(int) Returns a copy of the i'th coordinate in this sequence. This method optimizes the situation where the caller is going to make a copy anyway - if the implementation has already created a new Coordinate object, no further copy is needed. Declaration public override Coordinate GetCoordinateCopy(int i) Parameters Type Name Description int i The index of the coordinate to retrieve. Returns Type Description Coordinate A copy of the i'th coordinate in the sequence Overrides CoordinateSequence.GetCoordinateCopy(int) | Edit this page View Source GetM(int) Returns ordinate M of the specified coordinate if available. Declaration public override double GetM(int index) Parameters Type Name Description int index Returns Type Description double The value of the M ordinate in the index'th coordinate, or NullOrdinate if not defined. Overrides CoordinateSequence.GetM(int) | Edit this page View Source GetOrdinate(int, int) Returns the ordinate of a coordinate in this sequence. Ordinate indices 0 and 1 are assumed to be X and Y. Ordinate indices greater than 1 have user-defined semantics (for instance, they may contain other dimensions or measure values as described by Dimension and Measures. Declaration public override double GetOrdinate(int index, int ordinateIndex) Parameters Type Name Description int index The coordinate index in the sequence. int ordinateIndex The ordinate index in the coordinate (in range [0, dimension-1]). Returns Type Description double The ordinate value, or NullOrdinate if the sequence does not provide values for ordinateIndex\"/> Overrides CoordinateSequence.GetOrdinate(int, int) Remarks If the sequence does not provide value for the required ordinate, the implementation must not throw an exception, it should return NullOrdinate. | Edit this page View Source GetX(int) Returns ordinate X (0) of the specified coordinate. Declaration public override double GetX(int index) Parameters Type Name Description int index Returns Type Description double The value of the X ordinate in the index'th coordinate. Overrides CoordinateSequence.GetX(int) | Edit this page View Source GetY(int) Returns ordinate Y (1) of the specified coordinate. Declaration public override double GetY(int index) Parameters Type Name Description int index Returns Type Description double The value of the Y ordinate in the index'th coordinate. Overrides CoordinateSequence.GetY(int) | Edit this page View Source GetZ(int) Returns ordinate Z of the specified coordinate if available. Declaration public override double GetZ(int index) Parameters Type Name Description int index Returns Type Description double The value of the Z ordinate in the index'th coordinate, or NullOrdinate if not defined. Overrides CoordinateSequence.GetZ(int) | Edit this page View Source ProjectToXY(CoordinateSequence) Creates a wrapper projecting to the XY plane. Declaration public static CoordinateSequence ProjectToXY(CoordinateSequence seq) Parameters Type Name Description CoordinateSequence seq The sequence to be projected Returns Type Description CoordinateSequence A sequence which projects coordinates | Edit this page View Source ProjectToXZ(CoordinateSequence) Creates a wrapper projecting to the XZ plane. Declaration public static CoordinateSequence ProjectToXZ(CoordinateSequence seq) Parameters Type Name Description CoordinateSequence seq The sequence to be projected Returns Type Description CoordinateSequence A sequence which projects coordinates | Edit this page View Source ProjectToYZ(CoordinateSequence) Creates a wrapper projecting to the YZ plane. Declaration public static CoordinateSequence ProjectToYZ(CoordinateSequence seq) Parameters Type Name Description CoordinateSequence seq The sequence to be projected Returns Type Description CoordinateSequence A sequence which projects coordinates | Edit this page View Source Reversed() Returns a reversed copy of this CoordinateSequence. Declaration public override CoordinateSequence Reversed() Returns Type Description CoordinateSequence A reversed copy of this CoordinateSequence. Overrides CoordinateSequence.Reversed() Exceptions Type Condition InvalidOperationException Thrown when Copy() returned null. | Edit this page View Source SetOrdinate(int, int, double) Sets the value for a given ordinate of a coordinate in this sequence. Declaration public override void SetOrdinate(int index, int ordinateIndex, double value) Parameters Type Name Description int index The coordinate index in the sequence. int ordinateIndex The ordinate index in the coordinate (in range [0, dimension-1]). double value The new ordinate value. Overrides CoordinateSequence.SetOrdinate(int, int, double) Remarks If the sequence can't store the ordinate value, the implementation must not throw an exception, it should simply ignore the call. | Edit this page View Source ToCoordinateArray() Returns (possibly copies of) the Coordinates in this collection. Whether or not the Coordinates returned are the actual underlying Coordinates or merely copies depends on the implementation. Note that if this implementation does not store its data as an array of Coordinates, this method will incur a performance penalty because the array needs to be built from scratch. Declaration public override Coordinate[] ToCoordinateArray() Returns Type Description Coordinate[] Overrides CoordinateSequence.ToCoordinateArray() Extension Methods CoordinateSequenceEx.GetHashCode(CoordinateSequence, int, Func<int, int>)"
  },
  "api/NetTopologySuite.Operation.Distance3D.Distance3DOp.html": {
    "href": "api/NetTopologySuite.Operation.Distance3D.Distance3DOp.html",
    "title": "Class Distance3DOp | NetTopologySuite",
    "summary": "Class Distance3DOp Find two points on two 3D Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this also provides the distance between the geometries). 3D geometries have vertex Z ordinates defined. 3D Polygons are assumed to lie in a single plane (which is enforced if not actually the case). 3D LineStrings and Points may have any configuration. The distance computation also finds a pair of points in the input geometries which have the minimum distance between them. If a point lies in the interior of a line segment, the coordinate computed is a close approximation to the exact point. The algorithms used are straightforward O(n^2) comparisons. This worst-case performance could be improved on by using Voronoi techniques or spatial indexes. Inheritance object Distance3DOp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Distance3D Assembly: NetTopologySuite.dll Syntax public class Distance3DOp Constructors | Edit this page View Source Distance3DOp(Geometry, Geometry) Constructs a DistanceOp that computes the distance and nearest points between the two specified geometries. Declaration public Distance3DOp(Geometry g0, Geometry g1) Parameters Type Name Description Geometry g0 A geometry Geometry g1 A geometry | Edit this page View Source Distance3DOp(Geometry, Geometry, double) Constructs a DistanceOp that computes the distance and nearest points between the two specified geometries. Declaration public Distance3DOp(Geometry g0, Geometry g1, double terminateDistance) Parameters Type Name Description Geometry g0 A geometry Geometry g1 A geometry double terminateDistance The distance on which to terminate the search Methods | Edit this page View Source Distance() Report the distance between the nearest points on the input geometries. Declaration public double Distance() Returns Type Description double The distance between the geometries or 0 if either input geometry is empty Exceptions Type Condition ArgumentException Thrown if either input geometry is null. | Edit this page View Source Distance(Geometry, Geometry) Compute the distance between the nearest points of two geometries. Declaration public static double Distance(Geometry g0, Geometry g1) Parameters Type Name Description Geometry g0 A geometry Geometry g1 A geometry Returns Type Description double The distance between the geometries | Edit this page View Source IsWithinDistance(Geometry, Geometry, double) Test whether two geometries lie within a given distance of each other. Declaration public static bool IsWithinDistance(Geometry g0, Geometry g1, double distance) Parameters Type Name Description Geometry g0 A geometry Geometry g1 A geometry double distance The distance to test Returns Type Description bool true if g0.distance(g1) <= distance | Edit this page View Source NearestLocations() Gets the locations of the nearest points in the input geometries. The locations are presented in the same order as the input Geometries. Declaration public GeometryLocation[] NearestLocations() Returns Type Description GeometryLocation[] A pair of GeometryLocations for the nearest points | Edit this page View Source NearestPoints() Report the coordinates of the nearest points in the input geometries. The points are presented in the same order as the input Geometries. Declaration public Coordinate[] NearestPoints() Returns Type Description Coordinate[] A pair of Coordinates of the nearest points | Edit this page View Source NearestPoints(Geometry, Geometry) Compute the the nearest points of two geometries. The points are presented in the same order as the input Geometries. Declaration public static Coordinate[] NearestPoints(Geometry g0, Geometry g1) Parameters Type Name Description Geometry g0 A geometry Geometry g1 A geometry Returns Type Description Coordinate[] The nearest points in the geometries"
  },
  "api/NetTopologySuite.Operation.Distance3D.PlanarPolygon3D.html": {
    "href": "api/NetTopologySuite.Operation.Distance3D.PlanarPolygon3D.html",
    "title": "Class PlanarPolygon3D | NetTopologySuite",
    "summary": "Class PlanarPolygon3D Models a polygon lying in a plane in 3-dimensional Cartesian space. The polygon representation is supplied by a Polygon, containing coordinates with XYZ ordinates. 3D polygons are assumed to lie in a single plane. The plane best fitting the polygon coordinates is computed and is represented by a Plane3D. Inheritance object PlanarPolygon3D Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Distance3D Assembly: NetTopologySuite.dll Syntax public class PlanarPolygon3D Constructors | Edit this page View Source PlanarPolygon3D(Polygon) Creates an instance of this class using the provided Polygon. Declaration public PlanarPolygon3D(Polygon poly) Parameters Type Name Description Polygon poly The polygon Properties | Edit this page View Source Plane Gets a value indicating the plane Declaration public Plane3D Plane { get; } Property Value Type Description Plane3D | Edit this page View Source Polygon Gets a value indicating the polygon Declaration public Polygon Polygon { get; } Property Value Type Description Polygon Methods | Edit this page View Source Intersects(Coordinate) Checks if intPt intersects with this PlanarPolygon3D. Declaration public bool Intersects(Coordinate intPt) Parameters Type Name Description Coordinate intPt The point to check Returns Type Description bool true if intPt intersects this PlanarPolygon3d. | Edit this page View Source Intersects(Coordinate, LineString) Checks if the point pt intersects with ring when projected to this instance's facing plane Declaration public bool Intersects(Coordinate pt, LineString ring) Parameters Type Name Description Coordinate pt A point LineString ring A ring Returns Type Description bool true if point and linestring intersect"
  },
  "api/NetTopologySuite.Operation.Distance3D.html": {
    "href": "api/NetTopologySuite.Operation.Distance3D.html",
    "title": "Namespace NetTopologySuite.Operation.Distance3D | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Operation.Distance3D Classes AxisPlaneCoordinateSequence A CoordinateSequence wrapper which projects 3D coordinates into one of the three Cartesian axis planes, using the standard orthonormal projection (i.e. simply selecting the appropriate ordinates into the XY ordinates). The projected data is represented as 2D coordinates. Distance3DOp Find two points on two 3D Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this also provides the distance between the geometries). 3D geometries have vertex Z ordinates defined. 3D Polygons are assumed to lie in a single plane (which is enforced if not actually the case). 3D LineStrings and Points may have any configuration. The distance computation also finds a pair of points in the input geometries which have the minimum distance between them. If a point lies in the interior of a line segment, the coordinate computed is a close approximation to the exact point. The algorithms used are straightforward O(n^2) comparisons. This worst-case performance could be improved on by using Voronoi techniques or spatial indexes. PlanarPolygon3D Models a polygon lying in a plane in 3-dimensional Cartesian space. The polygon representation is supplied by a Polygon, containing coordinates with XYZ ordinates. 3D polygons are assumed to lie in a single plane. The plane best fitting the polygon coordinates is computed and is represented by a Plane3D."
  },
  "api/NetTopologySuite.Operation.GeometryGraphOperation.html": {
    "href": "api/NetTopologySuite.Operation.GeometryGraphOperation.html",
    "title": "Class GeometryGraphOperation | NetTopologySuite",
    "summary": "Class GeometryGraphOperation The base class for operations that require GeometryGraphs. Inheritance object GeometryGraphOperation OverlayOp RelateOp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation Assembly: NetTopologySuite.dll Syntax public class GeometryGraphOperation Constructors | Edit this page View Source GeometryGraphOperation(Geometry) Declaration public GeometryGraphOperation(Geometry g0) Parameters Type Name Description Geometry g0 | Edit this page View Source GeometryGraphOperation(Geometry, Geometry) Declaration public GeometryGraphOperation(Geometry g0, Geometry g1) Parameters Type Name Description Geometry g0 Geometry g1 | Edit this page View Source GeometryGraphOperation(Geometry, Geometry, IBoundaryNodeRule) Declaration public GeometryGraphOperation(Geometry g0, Geometry g1, IBoundaryNodeRule boundaryNodeRule) Parameters Type Name Description Geometry g0 Geometry g1 IBoundaryNodeRule boundaryNodeRule Fields | Edit this page View Source arg The operation args into an array so they can be accessed by index. Declaration protected GeometryGraph[] arg Field Value Type Description GeometryGraph[] | Edit this page View Source resultPrecisionModel Declaration protected PrecisionModel resultPrecisionModel Field Value Type Description PrecisionModel Properties | Edit this page View Source ComputationPrecision Declaration protected PrecisionModel ComputationPrecision { get; set; } Property Value Type Description PrecisionModel | Edit this page View Source lineIntersector Declaration protected LineIntersector lineIntersector { get; set; } Property Value Type Description LineIntersector Methods | Edit this page View Source GetArgGeometry(int) Declaration public Geometry GetArgGeometry(int i) Parameters Type Name Description int i Returns Type Description Geometry"
  },
  "api/NetTopologySuite.Operation.IsSimpleOp.html": {
    "href": "api/NetTopologySuite.Operation.IsSimpleOp.html",
    "title": "Class IsSimpleOp | NetTopologySuite",
    "summary": "Class IsSimpleOp Tests whether a Geometry is simple. In general, the SFS specification of simplicity follows the rule: A Geometry is simple if and only if the only self-intersections are at boundary points. Inheritance object IsSimpleOp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation Assembly: NetTopologySuite.dll Syntax [Obsolete(\"Replaced by NetTopologySuite.Operation.Valid.IsSimpleOp\")] public class IsSimpleOp Remarks Simplicity is defined for each Geometry} subclass as follows: Valid IPolygonal geometries are simple by definition, so IsSimple trivially returns true. (Note: this means that IsSimple cannot be used to test for (invalid) self-intersections in Polygon s. In order to check if a Polygonal geometry has self-intersections, use IsValid). ILineal geometries are simple if and only if they do not self-intersect at interior points (i.e. points other than boundary points). This is equivalent to saying that no two linear components satisfy the SFS Touches(Geometry) predicate. Zero-dimensional (IPuntal) geometries are simple if and only if they have no repeated points. Empty Geometrys are always simple by definition. For ILineal geometries the evaluation of simplicity can be customized by supplying a IBoundaryNodeRule to define how boundary points are determined. The default is the SFS-standard BoundaryNodeRules.Mod2BoundaryNodeRule. Note that under the Mod-2 rule, closed LineString s (rings) will never satisfy the touches predicate at their endpoints, since these are interior points, not boundary points. If it is required to test whether a set of LineStrings touch only at their endpoints, use IsSimpleOp with EndpointBoundaryRule. For example, this can be used to validate that a set of lines form a topologically valid linear network. Constructors | Edit this page View Source IsSimpleOp(Geometry) Creates a simplicity checker using the default SFS Mod-2 Boundary Node Rule Declaration public IsSimpleOp(Geometry geom) Parameters Type Name Description Geometry geom The geometry to test | Edit this page View Source IsSimpleOp(Geometry, IBoundaryNodeRule) Creates a simplicity checker using a given IBoundaryNodeRule Declaration public IsSimpleOp(Geometry geom, IBoundaryNodeRule boundaryNodeRule) Parameters Type Name Description Geometry geom The geometry to test IBoundaryNodeRule boundaryNodeRule The rule to use Properties | Edit this page View Source NonSimpleLocation Gets a coordinate for the location where the geometry fails to be simple. (i.e. where it has a non-boundary self-intersection). IsSimple() must be called before this location is accessed Declaration public Coordinate NonSimpleLocation { get; } Property Value Type Description Coordinate a coordinate for the location of the non-boundary self-intersection or null if the geometry is simple Methods | Edit this page View Source IsSimple() Tests whether the geometry is simple. Declaration public bool IsSimple() Returns Type Description bool true if the geometry is simple"
  },
  "api/NetTopologySuite.Operation.Linemerge.EdgeString.html": {
    "href": "api/NetTopologySuite.Operation.Linemerge.EdgeString.html",
    "title": "Class EdgeString | NetTopologySuite",
    "summary": "Class EdgeString A sequence of LineMergeDirectedEdges forming one of the lines that will be output by the line-merging process. Inheritance object EdgeString Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Linemerge Assembly: NetTopologySuite.dll Syntax public class EdgeString Constructors | Edit this page View Source EdgeString(GeometryFactory) Constructs an EdgeString with the given factory used to convert this EdgeString to a LineString. Declaration public EdgeString(GeometryFactory factory) Parameters Type Name Description GeometryFactory factory Methods | Edit this page View Source Add(LineMergeDirectedEdge) Adds a directed edge which is known to form part of this line. Declaration public void Add(LineMergeDirectedEdge directedEdge) Parameters Type Name Description LineMergeDirectedEdge directedEdge | Edit this page View Source ToLineString() Converts this EdgeString into a LineString. Declaration public LineString ToLineString() Returns Type Description LineString"
  },
  "api/NetTopologySuite.Operation.Linemerge.LineMergeDirectedEdge.html": {
    "href": "api/NetTopologySuite.Operation.Linemerge.LineMergeDirectedEdge.html",
    "title": "Class LineMergeDirectedEdge | NetTopologySuite",
    "summary": "Class LineMergeDirectedEdge A com.vividsolutions.jts.planargraph.DirectedEdge of a LineMergeGraph. Inheritance object GraphComponent DirectedEdge LineMergeDirectedEdge Implements IComparable Inherited Members DirectedEdge.ToEdges(IList<DirectedEdge>) DirectedEdge.parentEdge DirectedEdge.from DirectedEdge.to DirectedEdge.p0 DirectedEdge.p1 DirectedEdge.Edge DirectedEdge.Quadrant DirectedEdge.QuadrantEx DirectedEdge.DirectionPt DirectedEdge.EdgeDirection DirectedEdge.FromNode DirectedEdge.ToNode DirectedEdge.Coordinate DirectedEdge.Angle DirectedEdge.Sym DirectedEdge.CompareTo(object) DirectedEdge.CompareDirection(DirectedEdge) DirectedEdge.Write(StreamWriter) DirectedEdge.IsRemoved DirectedEdge.ToString() GraphComponent.SetVisited(IEnumerator, bool) GraphComponent.SetMarked(IEnumerator, bool) GraphComponent.GetComponentWithVisitedState(IEnumerator, bool) GraphComponent.IsVisited GraphComponent.Visited GraphComponent.IsMarked GraphComponent.Marked GraphComponent.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Operation.Linemerge Assembly: NetTopologySuite.dll Syntax public class LineMergeDirectedEdge : DirectedEdge, IComparable Constructors | Edit this page View Source LineMergeDirectedEdge(Node, Node, Coordinate, bool) Constructs a LineMergeDirectedEdge connecting the from node to the to node. Declaration public LineMergeDirectedEdge(Node from, Node to, Coordinate directionPt, bool edgeDirection) Parameters Type Name Description Node from Node to Coordinate directionPt specifies this DirectedEdge's direction (given by an imaginary line from the from node to directionPt). bool edgeDirection whether this DirectedEdge's direction is the same as or opposite to that of the parent Edge (if any). Properties | Edit this page View Source Next Returns the directed edge that starts at this directed edge's end point, or null if there are zero or multiple directed edges starting there. Declaration public LineMergeDirectedEdge Next { get; } Property Value Type Description LineMergeDirectedEdge Implements IComparable"
  },
  "api/NetTopologySuite.Operation.Linemerge.LineMergeEdge.html": {
    "href": "api/NetTopologySuite.Operation.Linemerge.LineMergeEdge.html",
    "title": "Class LineMergeEdge | NetTopologySuite",
    "summary": "Class LineMergeEdge An edge of a LineMergeGraph. The marked field indicates whether this Edge has been logically deleted from the graph. Inheritance object GraphComponent Edge LineMergeEdge Inherited Members Edge.dirEdge Edge.SetDirectedEdges(DirectedEdge, DirectedEdge) Edge.GetDirEdge(int) Edge.GetDirEdge(Node) Edge.GetOppositeNode(Node) Edge.IsRemoved GraphComponent.SetVisited(IEnumerator, bool) GraphComponent.SetMarked(IEnumerator, bool) GraphComponent.GetComponentWithVisitedState(IEnumerator, bool) GraphComponent.IsVisited GraphComponent.Visited GraphComponent.IsMarked GraphComponent.Marked GraphComponent.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Linemerge Assembly: NetTopologySuite.dll Syntax public class LineMergeEdge : Edge Constructors | Edit this page View Source LineMergeEdge(LineString) Constructs a LineMergeEdge with vertices given by the specified LineString. Declaration public LineMergeEdge(LineString line) Parameters Type Name Description LineString line Properties | Edit this page View Source Line Returns the LineString specifying the vertices of this edge. Declaration public LineString Line { get; } Property Value Type Description LineString"
  },
  "api/NetTopologySuite.Operation.Linemerge.LineMergeGraph.html": {
    "href": "api/NetTopologySuite.Operation.Linemerge.LineMergeGraph.html",
    "title": "Class LineMergeGraph | NetTopologySuite",
    "summary": "Class LineMergeGraph A planar graph of edges that is analyzed to sew the edges together. The marked flag on Edges and Nodes indicates whether they have been logically deleted from the graph. Inheritance object PlanarGraph LineMergeGraph Inherited Members PlanarGraph.dirEdges PlanarGraph.nodeMap PlanarGraph.FindNode(Coordinate) PlanarGraph.Add(Node) PlanarGraph.Add(Edge) PlanarGraph.Add(DirectedEdge) PlanarGraph.GetNodeEnumerator() PlanarGraph.Nodes PlanarGraph.GetDirEdgeEnumerator() PlanarGraph.GetEdgeEnumerator() PlanarGraph.Edges PlanarGraph.Remove(Edge) PlanarGraph.Remove(DirectedEdge) PlanarGraph.Remove(Node) PlanarGraph.FindNodesOfDegree(int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Linemerge Assembly: NetTopologySuite.dll Syntax public class LineMergeGraph : PlanarGraph Methods | Edit this page View Source AddEdge(LineString) Adds an Edge, DirectedEdges, and Nodes for the given LineString representation of an edge. Declaration public void AddEdge(LineString lineString) Parameters Type Name Description LineString lineString"
  },
  "api/NetTopologySuite.Operation.Linemerge.LineMerger.html": {
    "href": "api/NetTopologySuite.Operation.Linemerge.LineMerger.html",
    "title": "Class LineMerger | NetTopologySuite",
    "summary": "Class LineMerger Sews together a set of fully noded LineStrings. Inheritance object LineMerger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Linemerge Assembly: NetTopologySuite.dll Syntax public class LineMerger Remarks Sewing stops at nodes of degree 1 or 3 or more -- the exception is an isolated loop, which only has degree-2 nodes, in which case a node is simply chosen as a starting point. The direction of each merged LineString will be that of the majority of the LineStrings from which it was derived. Any dimension of Geometry is handled -- the constituent linework is extracted to form the edges. The edges must be correctly noded; that is, they must only meet at their endpoints. The LineMerger will still run on incorrectly noded input but will not form polygons from incorrected noded edges. NOTE:once merging has been performed, no more Methods | Edit this page View Source Add(Geometry) Adds a Geometry to be processed. May be called multiple times. Any dimension of Geometry may be added; the constituent linework will be extracted. Declaration public void Add(Geometry geometry) Parameters Type Name Description Geometry geometry | Edit this page View Source Add(IEnumerable<Geometry>) Adds a collection of Geometries to be processed. May be called multiple times. Any dimension of Geometry may be added; the constituent linework will be extracted. Declaration public void Add(IEnumerable<Geometry> geometries) Parameters Type Name Description IEnumerable<Geometry> geometries | Edit this page View Source GetMergedLineStrings() Returns the LineStrings built by the merging process. Declaration public IList<Geometry> GetMergedLineStrings() Returns Type Description IList<Geometry>"
  },
  "api/NetTopologySuite.Operation.Linemerge.LineSequencer.html": {
    "href": "api/NetTopologySuite.Operation.Linemerge.LineSequencer.html",
    "title": "Class LineSequencer | NetTopologySuite",
    "summary": "Class LineSequencer Builds a sequence from a set of LineStrings, so that they are ordered end to end. A sequence is a complete non-repeating list of the linear components of the input. Each linestring is oriented so that identical endpoints are adjacent in the list. The input linestrings may form one or more connected sets. The input linestrings should be correctly noded, or the results may not be what is expected. The output of this method is a single MultiLineString, containing the ordered linestrings in the sequence. The sequencing employs the classic 'Eulerian path' graph algorithm. Since Eulerian paths are not uniquely determined, further rules are used to make the computed sequence preserve as much as possible of the input ordering. Within a connected subset of lines, the ordering rules are: - If there is degree-1 node which is the start node of an linestring, use that node as the start of the sequence. - If there is a degree-1 node which is the end node of an linestring, use that node as the end of the sequence. - If the sequence has no degree-1 nodes, use any node as the start Not all arrangements of lines can be sequenced. For a connected set of edges in a graph, Euler's Theorem states that there is a sequence containing each edge once if and only if there are no more than 2 nodes of odd degree. If it is not possible to find a sequence, the IsSequenceable() property will return false. Inheritance object LineSequencer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Linemerge Assembly: NetTopologySuite.dll Syntax public class LineSequencer Methods | Edit this page View Source Add(Geometry) Adds a Geometry to be sequenced. May be called multiple times. Any dimension of Geometry may be added; the constituent linework will be extracted. Declaration public void Add(Geometry geometry) Parameters Type Name Description Geometry geometry | Edit this page View Source Add(IEnumerable<Geometry>) Adds a IEnumerable<T> of Geometrys to be sequenced. May be called multiple times. Any dimension of Geometry may be added; the constituent linework will be extracted. Declaration public void Add(IEnumerable<Geometry> geometries) Parameters Type Name Description IEnumerable<Geometry> geometries A IEnumerable<T> of geometries to add. | Edit this page View Source GetSequencedLineStrings() Returns the LineString or MultiLineString built by the sequencing process, if one exists. Declaration public Geometry GetSequencedLineStrings() Returns Type Description Geometry The sequenced linestrings, or null if a valid sequence does not exist. | Edit this page View Source IsSequenceable() Tests whether the arrangement of linestrings has a valid sequence. Declaration public bool IsSequenceable() Returns Type Description bool true if a valid sequence exists. | Edit this page View Source IsSequenced(Geometry) Tests whether a Geometry is sequenced correctly. LineStrings are trivially sequenced. MultiLineStrings are checked for correct sequencing. Otherwise, IsSequenced is defined to be true for geometries that are not lineal. Declaration public static bool IsSequenced(Geometry geom) Parameters Type Name Description Geometry geom The Geometry to test. Returns Type Description bool true if the Geometry is sequenced or is not lineal."
  },
  "api/NetTopologySuite.Operation.Linemerge.html": {
    "href": "api/NetTopologySuite.Operation.Linemerge.html",
    "title": "Namespace NetTopologySuite.Operation.Linemerge | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Operation.Linemerge Classes EdgeString A sequence of LineMergeDirectedEdges forming one of the lines that will be output by the line-merging process. LineMergeDirectedEdge A com.vividsolutions.jts.planargraph.DirectedEdge of a LineMergeGraph. LineMergeEdge An edge of a LineMergeGraph. The marked field indicates whether this Edge has been logically deleted from the graph. LineMergeGraph A planar graph of edges that is analyzed to sew the edges together. The marked flag on Edges and Nodes indicates whether they have been logically deleted from the graph. LineMerger Sews together a set of fully noded LineStrings. LineSequencer Builds a sequence from a set of LineStrings, so that they are ordered end to end. A sequence is a complete non-repeating list of the linear components of the input. Each linestring is oriented so that identical endpoints are adjacent in the list. The input linestrings may form one or more connected sets. The input linestrings should be correctly noded, or the results may not be what is expected. The output of this method is a single MultiLineString, containing the ordered linestrings in the sequence. The sequencing employs the classic 'Eulerian path' graph algorithm. Since Eulerian paths are not uniquely determined, further rules are used to make the computed sequence preserve as much as possible of the input ordering. Within a connected subset of lines, the ordering rules are: - If there is degree-1 node which is the start node of an linestring, use that node as the start of the sequence. - If there is a degree-1 node which is the end node of an linestring, use that node as the end of the sequence. - If the sequence has no degree-1 nodes, use any node as the start Not all arrangements of lines can be sequenced. For a connected set of edges in a graph, Euler's Theorem states that there is a sequence containing each edge once if and only if there are no more than 2 nodes of odd degree. If it is not possible to find a sequence, the IsSequenceable() property will return false."
  },
  "api/NetTopologySuite.Operation.Overlay.EdgeSetNoder.html": {
    "href": "api/NetTopologySuite.Operation.Overlay.EdgeSetNoder.html",
    "title": "Class EdgeSetNoder | NetTopologySuite",
    "summary": "Class EdgeSetNoder Nodes a set of edges. Takes one or more sets of edges and constructs a new set of edges consisting of all the split edges created by noding the input edges together. Inheritance object EdgeSetNoder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Overlay Assembly: NetTopologySuite.dll Syntax public class EdgeSetNoder Constructors | Edit this page View Source EdgeSetNoder(LineIntersector) Declaration public EdgeSetNoder(LineIntersector li) Parameters Type Name Description LineIntersector li Properties | Edit this page View Source NodedEdges Declaration public IList<Edge> NodedEdges { get; } Property Value Type Description IList<Edge> Methods | Edit this page View Source AddEdges(IEnumerable<Edge>) Declaration public void AddEdges(IEnumerable<Edge> edges) Parameters Type Name Description IEnumerable<Edge> edges"
  },
  "api/NetTopologySuite.Operation.Overlay.LineBuilder.html": {
    "href": "api/NetTopologySuite.Operation.Overlay.LineBuilder.html",
    "title": "Class LineBuilder | NetTopologySuite",
    "summary": "Class LineBuilder Forms NTS LineStrings out of a the graph of DirectedEdges created by an OverlayOp. Inheritance object LineBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Overlay Assembly: NetTopologySuite.dll Syntax public class LineBuilder Constructors | Edit this page View Source LineBuilder(OverlayOp, GeometryFactory, PointLocator) Declaration public LineBuilder(OverlayOp op, GeometryFactory geometryFactory, PointLocator ptLocator) Parameters Type Name Description OverlayOp op GeometryFactory geometryFactory PointLocator ptLocator Methods | Edit this page View Source Build(SpatialFunction) Declaration public IList<Geometry> Build(SpatialFunction opCode) Parameters Type Name Description SpatialFunction opCode Returns Type Description IList<Geometry> A list of the LineStrings in the result of the specified overlay operation. | Edit this page View Source CollectBoundaryTouchEdge(DirectedEdge, SpatialFunction, IList<Edge>) Collect edges from Area inputs which should be in the result but which have not been included in a result area. This happens ONLY: during an intersection when the boundaries of two areas touch in a line segment OR as a result of a dimensional collapse. Declaration public void CollectBoundaryTouchEdge(DirectedEdge de, SpatialFunction opCode, IList<Edge> edges) Parameters Type Name Description DirectedEdge de SpatialFunction opCode IList<Edge> edges | Edit this page View Source CollectLineEdge(DirectedEdge, SpatialFunction, IList<Edge>) Declaration public void CollectLineEdge(DirectedEdge de, SpatialFunction opCode, IList<Edge> edges) Parameters Type Name Description DirectedEdge de SpatialFunction opCode IList<Edge> edges"
  },
  "api/NetTopologySuite.Operation.Overlay.MaximalEdgeRing.html": {
    "href": "api/NetTopologySuite.Operation.Overlay.MaximalEdgeRing.html",
    "title": "Class MaximalEdgeRing | NetTopologySuite",
    "summary": "Class MaximalEdgeRing A ring of edges which may contain nodes of degree > 2. A MaximalEdgeRing may represent two different spatial entities: a single polygon possibly containing inversions (if the ring is oriented CW) a single hole possibly containing exversions (if the ring is oriented CCW) If the MaximalEdgeRing represents a polygon, the interior of the polygon is strongly connected. These are the form of rings used to define polygons under some spatial data models. However, under the OGC SFS model, MinimalEdgeRings are required. A MaximalEdgeRing can be converted to a list of MinimalEdgeRings using the BuildMinimalRings() method. Inheritance object EdgeRing MaximalEdgeRing Inherited Members EdgeRing.startDe EdgeRing.GeometryFactory EdgeRing.IsIsolated EdgeRing.IsHole EdgeRing.GetCoordinate(int) EdgeRing.LinearRing EdgeRing.Label EdgeRing.IsShell EdgeRing.Shell EdgeRing.AddHole(EdgeRing) EdgeRing.ToPolygon(GeometryFactory) EdgeRing.ComputeRing() EdgeRing.Edges EdgeRing.ComputePoints(DirectedEdge) EdgeRing.MaxNodeDegree EdgeRing.SetInResult() EdgeRing.MergeLabel(Label) EdgeRing.MergeLabel(Label, int) EdgeRing.AddPoints(Edge, bool, bool) EdgeRing.ContainsPoint(Coordinate) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Overlay Assembly: NetTopologySuite.dll Syntax public class MaximalEdgeRing : EdgeRing Constructors | Edit this page View Source MaximalEdgeRing(DirectedEdge, GeometryFactory) Declaration public MaximalEdgeRing(DirectedEdge start, GeometryFactory geometryFactory) Parameters Type Name Description DirectedEdge start GeometryFactory geometryFactory Methods | Edit this page View Source BuildMinimalRings() Declaration public IList<EdgeRing> BuildMinimalRings() Returns Type Description IList<EdgeRing> | Edit this page View Source GetNext(DirectedEdge) Declaration public override DirectedEdge GetNext(DirectedEdge de) Parameters Type Name Description DirectedEdge de Returns Type Description DirectedEdge Overrides EdgeRing.GetNext(DirectedEdge) | Edit this page View Source LinkDirectedEdgesForMinimalEdgeRings() For all nodes in this EdgeRing, link the DirectedEdges at the node to form minimalEdgeRings Declaration public void LinkDirectedEdgesForMinimalEdgeRings() | Edit this page View Source SetEdgeRing(DirectedEdge, EdgeRing) Declaration public override void SetEdgeRing(DirectedEdge de, EdgeRing er) Parameters Type Name Description DirectedEdge de EdgeRing er Overrides EdgeRing.SetEdgeRing(DirectedEdge, EdgeRing)"
  },
  "api/NetTopologySuite.Operation.Overlay.MinimalEdgeRing.html": {
    "href": "api/NetTopologySuite.Operation.Overlay.MinimalEdgeRing.html",
    "title": "Class MinimalEdgeRing | NetTopologySuite",
    "summary": "Class MinimalEdgeRing A ring of edges with the property that no node has degree greater than 2. These are the form of rings required to represent polygons under the OGC SFS spatial data model. Inheritance object EdgeRing MinimalEdgeRing Inherited Members EdgeRing.startDe EdgeRing.GeometryFactory EdgeRing.IsIsolated EdgeRing.IsHole EdgeRing.GetCoordinate(int) EdgeRing.LinearRing EdgeRing.Label EdgeRing.IsShell EdgeRing.Shell EdgeRing.AddHole(EdgeRing) EdgeRing.ToPolygon(GeometryFactory) EdgeRing.ComputeRing() EdgeRing.Edges EdgeRing.ComputePoints(DirectedEdge) EdgeRing.MaxNodeDegree EdgeRing.SetInResult() EdgeRing.MergeLabel(Label) EdgeRing.MergeLabel(Label, int) EdgeRing.AddPoints(Edge, bool, bool) EdgeRing.ContainsPoint(Coordinate) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Overlay Assembly: NetTopologySuite.dll Syntax public class MinimalEdgeRing : EdgeRing Constructors | Edit this page View Source MinimalEdgeRing(DirectedEdge, GeometryFactory) Declaration public MinimalEdgeRing(DirectedEdge start, GeometryFactory geometryFactory) Parameters Type Name Description DirectedEdge start GeometryFactory geometryFactory Methods | Edit this page View Source GetNext(DirectedEdge) Declaration public override DirectedEdge GetNext(DirectedEdge de) Parameters Type Name Description DirectedEdge de Returns Type Description DirectedEdge Overrides EdgeRing.GetNext(DirectedEdge) | Edit this page View Source SetEdgeRing(DirectedEdge, EdgeRing) Declaration public override void SetEdgeRing(DirectedEdge de, EdgeRing er) Parameters Type Name Description DirectedEdge de EdgeRing er Overrides EdgeRing.SetEdgeRing(DirectedEdge, EdgeRing)"
  },
  "api/NetTopologySuite.Operation.Overlay.OverlayNodeFactory.html": {
    "href": "api/NetTopologySuite.Operation.Overlay.OverlayNodeFactory.html",
    "title": "Class OverlayNodeFactory | NetTopologySuite",
    "summary": "Class OverlayNodeFactory Creates nodes for use in the PlanarGraphs constructed during overlay operations. Inheritance object NodeFactory OverlayNodeFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Overlay Assembly: NetTopologySuite.dll Syntax public class OverlayNodeFactory : NodeFactory Methods | Edit this page View Source CreateNode(Coordinate) Declaration public override Node CreateNode(Coordinate coord) Parameters Type Name Description Coordinate coord Returns Type Description Node Overrides NodeFactory.CreateNode(Coordinate)"
  },
  "api/NetTopologySuite.Operation.Overlay.OverlayOp.html": {
    "href": "api/NetTopologySuite.Operation.Overlay.OverlayOp.html",
    "title": "Class OverlayOp | NetTopologySuite",
    "summary": "Class OverlayOp Computes the geometric overlay of two Geometrys. The overlay can be used to determine any bool combination of the geometries. Inheritance object GeometryGraphOperation OverlayOp Inherited Members GeometryGraphOperation.lineIntersector GeometryGraphOperation.resultPrecisionModel GeometryGraphOperation.arg GeometryGraphOperation.GetArgGeometry(int) GeometryGraphOperation.ComputationPrecision object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Overlay Assembly: NetTopologySuite.dll Syntax public class OverlayOp : GeometryGraphOperation Constructors | Edit this page View Source OverlayOp(Geometry, Geometry) Constructs an instance to compute a single overlay operation for the given geometries. Declaration public OverlayOp(Geometry g0, Geometry g1) Parameters Type Name Description Geometry g0 The first geometry argument Geometry g1 The second geometry argument Properties | Edit this page View Source Graph Gets the graph constructed to compute the overlay. Declaration public PlanarGraph Graph { get; } Property Value Type Description PlanarGraph | Edit this page View Source NodingValidatorDisabled Disable EdgeNodingValidator when an intersection is made (ComputeOverlay(SpatialFunction)), so performances are dramatically improved but failures are not managed. Declaration public static bool NodingValidatorDisabled { get; set; } Property Value Type Description bool Remarks Use ay your own risk! Methods | Edit this page View Source CreateEmptyResult(SpatialFunction, Geometry, Geometry, GeometryFactory) Creates an empty result geometry of the appropriate dimension, based on the given overlay operation and the dimensions of the inputs. The created geometry is always an atomic geometry, not a collection. The empty result is constructed using the following rules: Intersection - result has the dimension of the lowest input dimension Union - result has the dimension of the highest input dimension Difference - result has the dimension of the left-hand input SymDifference - result has the dimension of the highest input dimension (since symDifference is the union of the differences). Declaration public static Geometry CreateEmptyResult(SpatialFunction overlayOpCode, Geometry a, Geometry b, GeometryFactory geomFact) Parameters Type Name Description SpatialFunction overlayOpCode The overlay operation being performed Geometry a An input geometry Geometry b An input geometry GeometryFactory geomFact The geometry factory being used for the operation Returns Type Description Geometry An empty atomic geometry of the appropriate dimension | Edit this page View Source GetResultGeometry(SpatialFunction) Gets the result of the overlay for a given overlay operation. Note: this method can be called once only. Declaration public Geometry GetResultGeometry(SpatialFunction overlayOpCode) Parameters Type Name Description SpatialFunction overlayOpCode The code of the overlay operation to perform Returns Type Description Geometry The computed result geometry Exceptions Type Condition TopologyException Thrown if a robustness problem is encountered | Edit this page View Source InsertUniqueEdge(Edge) Insert an edge from one of the noded input graphs. Checks edges that are inserted to see if an identical edge already exists. If so, the edge is not inserted, but its label is merged with the existing edge. Declaration protected void InsertUniqueEdge(Edge e) Parameters Type Name Description Edge e The edge to insert | Edit this page View Source IsCoveredByA(Coordinate) Tests if an L edge should be included in the result or not. Declaration public bool IsCoveredByA(Coordinate coord) Parameters Type Name Description Coordinate coord The point coordinate Returns Type Description bool true if the coordinate point is covered by a result Area geometry. | Edit this page View Source IsCoveredByLA(Coordinate) Tests if a point node should be included in the result or not. Declaration public bool IsCoveredByLA(Coordinate coord) Parameters Type Name Description Coordinate coord The point coordinate Returns Type Description bool true if the coordinate point is covered by a result Line or Area geometry. | Edit this page View Source IsResultOfOp(Location, Location, SpatialFunction) Tests whether a point with given Locations relative to two geometries is contained in the result of overlaying the geometries using a given overlay operation. The method handles arguments of Null correctly Declaration public static bool IsResultOfOp(Location loc0, Location loc1, SpatialFunction overlayOpCode) Parameters Type Name Description Location loc0 the code for the location in the first geometry Location loc1 the code for the location in the second geometry SpatialFunction overlayOpCode the code for the overlay operation to test Returns Type Description bool true if the locations correspond to the overlayOpCode. | Edit this page View Source IsResultOfOp(Label, SpatialFunction) Tests whether a point with a given topological Label relative to two geometries is contained in the result of overlaying the geometries using a given overlay operation. The method handles arguments of Null correctly Declaration public static bool IsResultOfOp(Label label, SpatialFunction overlayOpCode) Parameters Type Name Description Label label The topological label of the point SpatialFunction overlayOpCode The code for the overlay operation to test Returns Type Description bool true if the label locations correspond to the overlayOpCode | Edit this page View Source Overlay(Geometry, Geometry, SpatialFunction) Computes an overlay operation for the given geometry arguments. Declaration public static Geometry Overlay(Geometry geom0, Geometry geom1, SpatialFunction opCode) Parameters Type Name Description Geometry geom0 The first geometry argument Geometry geom1 The second geometry argument SpatialFunction opCode The code for the desired overlay operation Returns Type Description Geometry The result of the overlay operation Exceptions Type Condition TopologyException Thrown if a robustness problem is encountered."
  },
  "api/NetTopologySuite.Operation.Overlay.PointBuilder.html": {
    "href": "api/NetTopologySuite.Operation.Overlay.PointBuilder.html",
    "title": "Class PointBuilder | NetTopologySuite",
    "summary": "Class PointBuilder Constructs Points from the nodes of an overlay graph. Inheritance object PointBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Overlay Assembly: NetTopologySuite.dll Syntax public class PointBuilder Constructors | Edit this page View Source PointBuilder(OverlayOp, GeometryFactory) Creates an instance of this class Declaration public PointBuilder(OverlayOp op, GeometryFactory geometryFactory) Parameters Type Name Description OverlayOp op The operation GeometryFactory geometryFactory The geometry factory Methods | Edit this page View Source Build(SpatialFunction) Computes the Point geometries which will appear in the result, given the specified overlay operation. Declaration public IList<Geometry> Build(SpatialFunction opCode) Parameters Type Name Description SpatialFunction opCode The spatial function Returns Type Description IList<Geometry> A list of the Points in the result."
  },
  "api/NetTopologySuite.Operation.Overlay.PolygonBuilder.html": {
    "href": "api/NetTopologySuite.Operation.Overlay.PolygonBuilder.html",
    "title": "Class PolygonBuilder | NetTopologySuite",
    "summary": "Class PolygonBuilder Forms Polygons out of a graph of {DirectedEdge}s. The edges to use are marked as being in the result Area. Inheritance object PolygonBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Overlay Assembly: NetTopologySuite.dll Syntax public class PolygonBuilder Constructors | Edit this page View Source PolygonBuilder(GeometryFactory) Declaration public PolygonBuilder(GeometryFactory geometryFactory) Parameters Type Name Description GeometryFactory geometryFactory Properties | Edit this page View Source Polygons Declaration public IList<Geometry> Polygons { get; } Property Value Type Description IList<Geometry> Methods | Edit this page View Source Add(PlanarGraph) Add a complete graph. The graph is assumed to contain one or more polygons, possibly with holes. Declaration public void Add(PlanarGraph graph) Parameters Type Name Description PlanarGraph graph | Edit this page View Source Add(IList<EdgeEnd>, IList<Node>) Add a set of edges and nodes, which form a graph. The graph is assumed to contain one or more polygons, possibly with holes. Declaration public void Add(IList<EdgeEnd> dirEdges, IList<Node> nodes) Parameters Type Name Description IList<EdgeEnd> dirEdges IList<Node> nodes"
  },
  "api/NetTopologySuite.Operation.Overlay.Snap.GeometrySnapper.html": {
    "href": "api/NetTopologySuite.Operation.Overlay.Snap.GeometrySnapper.html",
    "title": "Class GeometrySnapper | NetTopologySuite",
    "summary": "Class GeometrySnapper Snaps the vertices and segments of a Geometry to another Geometry's vertices. A snap distance tolerance is used to control where snapping is performed. Snapping one geometry to another can improve robustness for overlay operations by eliminating nearly-coincident edges (which cause problems during noding and intersection calculation). It can also be used to eliminate artifacts such as narrow slivers, spikes and gores. Too much snapping can result in invalid topology beging created, so the number and location of snapped vertices is decided using heuristics to determine when it is safe to snap. This can result in some potential snaps being omitted, however. Inheritance object GeometrySnapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Overlay.Snap Assembly: NetTopologySuite.dll Syntax public class GeometrySnapper Constructors | Edit this page View Source GeometrySnapper(Geometry) Creates a new snapper acting on the given geometry Declaration public GeometrySnapper(Geometry g) Parameters Type Name Description Geometry g the geometry to snap Methods | Edit this page View Source ComputeOverlaySnapTolerance(Geometry) Estimates the snap tolerance for a Geometry, taking into account its precision model. Declaration public static double ComputeOverlaySnapTolerance(Geometry g) Parameters Type Name Description Geometry g Returns Type Description double The estimated snap tolerance | Edit this page View Source ComputeOverlaySnapTolerance(Geometry, Geometry) Declaration public static double ComputeOverlaySnapTolerance(Geometry g0, Geometry g1) Parameters Type Name Description Geometry g0 Geometry g1 Returns Type Description double | Edit this page View Source ComputeSizeBasedSnapTolerance(Geometry) Declaration public static double ComputeSizeBasedSnapTolerance(Geometry g) Parameters Type Name Description Geometry g Returns Type Description double | Edit this page View Source Snap(Geometry, Geometry, double) Snaps two geometries together with a given tolerance. Declaration public static Geometry[] Snap(Geometry g0, Geometry g1, double snapTolerance) Parameters Type Name Description Geometry g0 Geometry g1 double snapTolerance Returns Type Description Geometry[] | Edit this page View Source SnapTo(Geometry, double) Snaps the vertices in the component LineStrings of the source geometry to the vertices of the given snap geometry. Declaration public Geometry SnapTo(Geometry g, double tolerance) Parameters Type Name Description Geometry g a geometry to snap the source to double tolerance Returns Type Description Geometry a new snapped Geometry | Edit this page View Source SnapToSelf(Geometry, double, bool) Snaps a geometry to itself. Allows optionally cleaning the result to ensure it is topologically valid (which fixes issues such as topology collapses in polygonal inputs). Snapping a geometry to itself can remove artifacts such as very narrow slivers, gores and spikes. Declaration public static Geometry SnapToSelf(Geometry geom, double snapTolerance, bool cleanResult) Parameters Type Name Description Geometry geom the geometry to snap double snapTolerance the snapping tolerance bool cleanResult whether the result should be made valid Returns Type Description Geometry a new snapped Geometry | Edit this page View Source SnapToSelf(double, bool) Declaration public Geometry SnapToSelf(double snapTolerance, bool cleanResult) Parameters Type Name Description double snapTolerance The snapping tolerance bool cleanResult Whether the result should be made valid Returns Type Description Geometry The geometry snapped to itself"
  },
  "api/NetTopologySuite.Operation.Overlay.Snap.LineStringSnapper.html": {
    "href": "api/NetTopologySuite.Operation.Overlay.Snap.LineStringSnapper.html",
    "title": "Class LineStringSnapper | NetTopologySuite",
    "summary": "Class LineStringSnapper Snaps the vertices and segments of a LineString to a set of target snap vertices. A snap distance tolerance is used to control where snapping is performed. The implementation handles empty geometry and empty snap vertex sets. Inheritance object LineStringSnapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Overlay.Snap Assembly: NetTopologySuite.dll Syntax public class LineStringSnapper Constructors | Edit this page View Source LineStringSnapper(Coordinate[], double) Creates a new snapper using the given points as source points to be snapped. Declaration public LineStringSnapper(Coordinate[] srcPts, double snapTolerance) Parameters Type Name Description Coordinate[] srcPts double snapTolerance | Edit this page View Source LineStringSnapper(LineString, double) Creates a new snapper using the points in the given LineString as target snap points. Declaration public LineStringSnapper(LineString srcLine, double snapTolerance) Parameters Type Name Description LineString srcLine A LineString to snap (may be empty) double snapTolerance the snap tolerance to use Properties | Edit this page View Source AllowSnappingToSourceVertices Declaration public bool AllowSnappingToSourceVertices { get; set; } Property Value Type Description bool Methods | Edit this page View Source SnapTo(Coordinate[]) Snaps the vertices and segments of the source LineString to the given set of snap points. Declaration public Coordinate[] SnapTo(Coordinate[] snapPts) Parameters Type Name Description Coordinate[] snapPts the vertices to snap to Returns Type Description Coordinate[] list of the snapped points"
  },
  "api/NetTopologySuite.Operation.Overlay.Snap.SnapIfNeededOverlayOp.html": {
    "href": "api/NetTopologySuite.Operation.Overlay.Snap.SnapIfNeededOverlayOp.html",
    "title": "Class SnapIfNeededOverlayOp | NetTopologySuite",
    "summary": "Class SnapIfNeededOverlayOp Performs an overlay operation using snapping and enhanced precision to improve the robustness of the result. This class only uses snapping if an error is detected when running the standard JTS overlay code. Errors detected include thrown exceptions (in particular, TopologyException) and invalid overlay computations. Inheritance object SnapIfNeededOverlayOp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Overlay.Snap Assembly: NetTopologySuite.dll Syntax public class SnapIfNeededOverlayOp Constructors | Edit this page View Source SnapIfNeededOverlayOp(Geometry, Geometry) Declaration public SnapIfNeededOverlayOp(Geometry g1, Geometry g2) Parameters Type Name Description Geometry g1 Geometry g2 Methods | Edit this page View Source Difference(Geometry, Geometry) Declaration public static Geometry Difference(Geometry g0, Geometry g1) Parameters Type Name Description Geometry g0 Geometry g1 Returns Type Description Geometry | Edit this page View Source GetResultGeometry(SpatialFunction) Declaration public Geometry GetResultGeometry(SpatialFunction opCode) Parameters Type Name Description SpatialFunction opCode Returns Type Description Geometry | Edit this page View Source Intersection(Geometry, Geometry) Declaration public static Geometry Intersection(Geometry g0, Geometry g1) Parameters Type Name Description Geometry g0 Geometry g1 Returns Type Description Geometry | Edit this page View Source Overlay(Geometry, Geometry, SpatialFunction) Declaration public static Geometry Overlay(Geometry g0, Geometry g1, SpatialFunction opCode) Parameters Type Name Description Geometry g0 Geometry g1 SpatialFunction opCode Returns Type Description Geometry | Edit this page View Source SymDifference(Geometry, Geometry) Declaration public static Geometry SymDifference(Geometry g0, Geometry g1) Parameters Type Name Description Geometry g0 Geometry g1 Returns Type Description Geometry | Edit this page View Source Union(Geometry, Geometry) Declaration public static Geometry Union(Geometry g0, Geometry g1) Parameters Type Name Description Geometry g0 Geometry g1 Returns Type Description Geometry"
  },
  "api/NetTopologySuite.Operation.Overlay.Snap.SnapOverlayOp.html": {
    "href": "api/NetTopologySuite.Operation.Overlay.Snap.SnapOverlayOp.html",
    "title": "Class SnapOverlayOp | NetTopologySuite",
    "summary": "Class SnapOverlayOp Performs an overlay operation using snapping and enhanced precision to improve the robustness of the result. This class always uses snapping. This is less performant than the standard JTS overlay code, and may even introduce errors which were not present in the original data. For this reason, this class should only be used if the standard overlay code fails to produce a correct result. Inheritance object SnapOverlayOp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Overlay.Snap Assembly: NetTopologySuite.dll Syntax public class SnapOverlayOp Constructors | Edit this page View Source SnapOverlayOp(Geometry, Geometry) Declaration public SnapOverlayOp(Geometry g1, Geometry g2) Parameters Type Name Description Geometry g1 Geometry g2 Methods | Edit this page View Source Difference(Geometry, Geometry) Declaration public static Geometry Difference(Geometry g0, Geometry g1) Parameters Type Name Description Geometry g0 Geometry g1 Returns Type Description Geometry | Edit this page View Source GetResultGeometry(SpatialFunction) Declaration public Geometry GetResultGeometry(SpatialFunction opCode) Parameters Type Name Description SpatialFunction opCode Returns Type Description Geometry | Edit this page View Source Intersection(Geometry, Geometry) Declaration public static Geometry Intersection(Geometry g0, Geometry g1) Parameters Type Name Description Geometry g0 Geometry g1 Returns Type Description Geometry | Edit this page View Source Overlay(Geometry, Geometry, SpatialFunction) Declaration public static Geometry Overlay(Geometry g0, Geometry g1, SpatialFunction opCode) Parameters Type Name Description Geometry g0 Geometry g1 SpatialFunction opCode Returns Type Description Geometry | Edit this page View Source SymDifference(Geometry, Geometry) Declaration public static Geometry SymDifference(Geometry g0, Geometry g1) Parameters Type Name Description Geometry g0 Geometry g1 Returns Type Description Geometry | Edit this page View Source Union(Geometry, Geometry) Declaration public static Geometry Union(Geometry g0, Geometry g1) Parameters Type Name Description Geometry g0 Geometry g1 Returns Type Description Geometry"
  },
  "api/NetTopologySuite.Operation.Overlay.Snap.html": {
    "href": "api/NetTopologySuite.Operation.Overlay.Snap.html",
    "title": "Namespace NetTopologySuite.Operation.Overlay.Snap | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Operation.Overlay.Snap Classes GeometrySnapper Snaps the vertices and segments of a Geometry to another Geometry's vertices. A snap distance tolerance is used to control where snapping is performed. Snapping one geometry to another can improve robustness for overlay operations by eliminating nearly-coincident edges (which cause problems during noding and intersection calculation). It can also be used to eliminate artifacts such as narrow slivers, spikes and gores. Too much snapping can result in invalid topology beging created, so the number and location of snapped vertices is decided using heuristics to determine when it is safe to snap. This can result in some potential snaps being omitted, however. LineStringSnapper Snaps the vertices and segments of a LineString to a set of target snap vertices. A snap distance tolerance is used to control where snapping is performed. The implementation handles empty geometry and empty snap vertex sets. SnapIfNeededOverlayOp Performs an overlay operation using snapping and enhanced precision to improve the robustness of the result. This class only uses snapping if an error is detected when running the standard JTS overlay code. Errors detected include thrown exceptions (in particular, TopologyException) and invalid overlay computations. SnapOverlayOp Performs an overlay operation using snapping and enhanced precision to improve the robustness of the result. This class always uses snapping. This is less performant than the standard JTS overlay code, and may even introduce errors which were not present in the original data. For this reason, this class should only be used if the standard overlay code fails to produce a correct result."
  },
  "api/NetTopologySuite.Operation.Overlay.SpatialFunction.html": {
    "href": "api/NetTopologySuite.Operation.Overlay.SpatialFunction.html",
    "title": "Enum SpatialFunction | NetTopologySuite",
    "summary": "Enum SpatialFunction The spatial functions supported by this class. These operations implement various bool combinations of the resultants of the overlay. Namespace: NetTopologySuite.Operation.Overlay Assembly: NetTopologySuite.dll Syntax public enum SpatialFunction Fields Name Description Difference The code for the Difference overlay operation Intersection The code for the Intersection overlay operation SymDifference The code for the Symmetric Difference overlay operation Union The code for the Union overlay operation"
  },
  "api/NetTopologySuite.Operation.Overlay.Validate.FuzzyPointLocator.html": {
    "href": "api/NetTopologySuite.Operation.Overlay.Validate.FuzzyPointLocator.html",
    "title": "Class FuzzyPointLocator | NetTopologySuite",
    "summary": "Class FuzzyPointLocator Finds the most likely Location of a point relative to the polygonal components of a geometry, using a tolerance value. Inheritance object FuzzyPointLocator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Overlay.Validate Assembly: NetTopologySuite.dll Syntax public class FuzzyPointLocator Remarks If a point is not clearly in the Interior or Exterior, it is considered to be on the Boundary. In other words, if the point is within the tolerance of the Boundary, it is considered to be on the Boundary; otherwise, whether it is Interior or Exterior is determined directly. Constructors | Edit this page View Source FuzzyPointLocator(Geometry, double) Declaration public FuzzyPointLocator(Geometry g, double boundaryDistanceTolerance) Parameters Type Name Description Geometry g double boundaryDistanceTolerance Methods | Edit this page View Source GetLocation(Coordinate) Declaration public Location GetLocation(Coordinate pt) Parameters Type Name Description Coordinate pt Returns Type Description Location"
  },
  "api/NetTopologySuite.Operation.Overlay.Validate.OffsetPointGenerator.html": {
    "href": "api/NetTopologySuite.Operation.Overlay.Validate.OffsetPointGenerator.html",
    "title": "Class OffsetPointGenerator | NetTopologySuite",
    "summary": "Class OffsetPointGenerator Generates points offset by a given distance from both sides of the midpoint of all segments in a Geometry. Inheritance object OffsetPointGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Overlay.Validate Assembly: NetTopologySuite.dll Syntax public class OffsetPointGenerator Remarks Can be used to generate probe points for determining whether a polygonal overlay result is incorrect. The input geometry may have any orientation for its rings, but SetSidesToGenerate(bool, bool) is only meaningful if the orientation is known. Constructors | Edit this page View Source OffsetPointGenerator(Geometry) Declaration public OffsetPointGenerator(Geometry g) Parameters Type Name Description Geometry g Methods | Edit this page View Source GetPoints(double) Gets the computed offset points. Declaration public List<Coordinate> GetPoints(double offsetDistance) Parameters Type Name Description double offsetDistance Returns Type Description List<Coordinate> | Edit this page View Source SetSidesToGenerate(bool, bool) Set the sides on which to generate offset points. Declaration public void SetSidesToGenerate(bool doLeft, bool doRight) Parameters Type Name Description bool doLeft bool doRight"
  },
  "api/NetTopologySuite.Operation.Overlay.Validate.OverlayResultValidator.html": {
    "href": "api/NetTopologySuite.Operation.Overlay.Validate.OverlayResultValidator.html",
    "title": "Class OverlayResultValidator | NetTopologySuite",
    "summary": "Class OverlayResultValidator Validates that the result of an overlay operation is geometrically correct within a determined tolerance. Uses fuzzy point location to find points which are definitely in either the interior or exterior of the result geometry, and compares these results with the expected ones. Inheritance object OverlayResultValidator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Overlay.Validate Assembly: NetTopologySuite.dll Syntax public class OverlayResultValidator Remarks This algorithm is only useful where the inputs are polygonal. This is a heuristic test, and may return false positive results (I.e. it may fail to detect an invalid result.) It should never return a false negative result, however (I.e. it should never report a valid result as invalid.) Constructors | Edit this page View Source OverlayResultValidator(Geometry, Geometry, Geometry) Declaration public OverlayResultValidator(Geometry a, Geometry b, Geometry result) Parameters Type Name Description Geometry a Geometry b Geometry result Properties | Edit this page View Source InvalidLocation Declaration public Coordinate InvalidLocation { get; } Property Value Type Description Coordinate Methods | Edit this page View Source IsValid(Geometry, Geometry, SpatialFunction, Geometry) Declaration public static bool IsValid(Geometry a, Geometry b, SpatialFunction overlayOp, Geometry result) Parameters Type Name Description Geometry a Geometry b SpatialFunction overlayOp Geometry result Returns Type Description bool | Edit this page View Source IsValid(SpatialFunction) Declaration public bool IsValid(SpatialFunction overlayOp) Parameters Type Name Description SpatialFunction overlayOp Returns Type Description bool"
  },
  "api/NetTopologySuite.Operation.Overlay.Validate.html": {
    "href": "api/NetTopologySuite.Operation.Overlay.Validate.html",
    "title": "Namespace NetTopologySuite.Operation.Overlay.Validate | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Operation.Overlay.Validate Classes FuzzyPointLocator Finds the most likely Location of a point relative to the polygonal components of a geometry, using a tolerance value. OffsetPointGenerator Generates points offset by a given distance from both sides of the midpoint of all segments in a Geometry. OverlayResultValidator Validates that the result of an overlay operation is geometrically correct within a determined tolerance. Uses fuzzy point location to find points which are definitely in either the interior or exterior of the result geometry, and compares these results with the expected ones."
  },
  "api/NetTopologySuite.Operation.Overlay.html": {
    "href": "api/NetTopologySuite.Operation.Overlay.html",
    "title": "Namespace NetTopologySuite.Operation.Overlay | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Operation.Overlay Contains classes that perform a topological overlay to compute boolean spatial functions. The Overlay Algorithm is used in spatial analysis methods for computing set-theoretic operations (boolean combinations) of input Geometries. The algorithm for computing the overlay uses the intersection operations supported by topology graphs. To compute an overlay it is necessary to explicitly compute the resultant graph formed by the computed intersections. The algorithm to compute a set-theoretic spatial analysis method has the following steps: Build topology graphs of the two input geometries. For each geometry all self-intersection nodes are computed and added to the graph. Compute nodes for all intersections between edges and nodes of the graphs. Compute the labeling for the computed nodes by merging the labels from the input graphs. Compute new edges between the compute intersection nodes. Label the edges appropriately. Build the resultant graph from the new nodes and edges. Compute the labeling for isolated components of the graph. Add the isolated components to the resultant graph. Compute the result of the boolean combination by selecting the node and edges with the appropriate labels. Polygonize areas and sew linear geometries together. Package Specification Java Topology Suite Technical Specifications OpenGIS Simple Features Specification for SQL Classes EdgeSetNoder Nodes a set of edges. Takes one or more sets of edges and constructs a new set of edges consisting of all the split edges created by noding the input edges together. LineBuilder Forms NTS LineStrings out of a the graph of DirectedEdges created by an OverlayOp. MaximalEdgeRing A ring of edges which may contain nodes of degree > 2. A MaximalEdgeRing may represent two different spatial entities: a single polygon possibly containing inversions (if the ring is oriented CW) a single hole possibly containing exversions (if the ring is oriented CCW) If the MaximalEdgeRing represents a polygon, the interior of the polygon is strongly connected. These are the form of rings used to define polygons under some spatial data models. However, under the OGC SFS model, MinimalEdgeRings are required. A MaximalEdgeRing can be converted to a list of MinimalEdgeRings using the BuildMinimalRings() method. MinimalEdgeRing A ring of edges with the property that no node has degree greater than 2. These are the form of rings required to represent polygons under the OGC SFS spatial data model. OverlayNodeFactory Creates nodes for use in the PlanarGraphs constructed during overlay operations. OverlayOp Computes the geometric overlay of two Geometrys. The overlay can be used to determine any bool combination of the geometries. PointBuilder Constructs Points from the nodes of an overlay graph. PolygonBuilder Forms Polygons out of a graph of {DirectedEdge}s. The edges to use are marked as being in the result Area. Enums SpatialFunction The spatial functions supported by this class. These operations implement various bool combinations of the resultants of the overlay."
  },
  "api/NetTopologySuite.Operation.OverlayNG.CoverageUnion.html": {
    "href": "api/NetTopologySuite.Operation.OverlayNG.CoverageUnion.html",
    "title": "Class CoverageUnion | NetTopologySuite",
    "summary": "Class CoverageUnion Unions a valid coverage of polygons or lines in an efficient way. A polygonal coverage is a collection of Polygons which satisfy the following conditions: Vector-cleanLine segments within the collection must either be identical or intersect only at endpoints. Non-overlappingNo two polygons may overlap. Equivalently, polygons must be interior-disjoint. A linear coverage is a collection of LineStrings which satisfies the Vector-clean condition. Note that this does not require the LineStrings to be fully noded - i.e. they may contain coincident linework. Coincident line segments are dissolved by the union. Currently linear output is not merged (this may be added in a future release.) No checking is done to determine whether the input is a valid coverage. This is because coverage validation involves segment intersection detection, which is much more expensive than the union phase. If the input is not a valid coverage then in some cases this will be detected during processing and a TopologyException is thrown. Otherwise, the computation will produce output, but it will be invalid. Unioning a valid coverage implies that no new vertices are created. This means that a precision model does not need to be specified. The precision of the vertices in the output geometry is not changed. Inheritance object CoverageUnion Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.OverlayNG Assembly: NetTopologySuite.dll Syntax public static class CoverageUnion Methods | Edit this page View Source Union(Geometry) Unions a valid polygonal coverage or linear network. Declaration public static Geometry Union(Geometry coverage) Parameters Type Name Description Geometry coverage A coverage of polygons or lines Returns Type Description Geometry The union of the coverage Exceptions Type Condition TopologyException Thrown in some cases if the coverage is invalid See Also BoundaryChainNoder SegmentExtractingNoder"
  },
  "api/NetTopologySuite.Operation.OverlayNG.LineLimiter.html": {
    "href": "api/NetTopologySuite.Operation.OverlayNG.LineLimiter.html",
    "title": "Class LineLimiter | NetTopologySuite",
    "summary": "Class LineLimiter Limits the segments in a list of segments to those which intersect an envelope. This creates zero or more sections of the input segment sequences, containing only line segments which intersect the limit envelope. Segments are not clipped, since that can move line segments enough to alter topology, and it happens in the overlay in any case. This can substantially reduce the number of vertices which need to be processed during overlay. This optimization is only applicable to Line geometries, since it does not maintain the closed topology of rings. Polygonal geometries are optimized using the RingClipper. Inheritance object LineLimiter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.OverlayNG Assembly: NetTopologySuite.dll Syntax public sealed class LineLimiter Constructors | Edit this page View Source LineLimiter(Envelope) Creates a new limiter for a given envelope. Declaration public LineLimiter(Envelope env) Parameters Type Name Description Envelope env The envelope to limit to Methods | Edit this page View Source Limit(IEnumerable<Coordinate>) Limits a list of segments. Declaration public List<Coordinate[]> Limit(IEnumerable<Coordinate> pts) Parameters Type Name Description IEnumerable<Coordinate> pts The segment sequence to limit Returns Type Description List<Coordinate[]> The sections which intersect the limit envelope See Also RingClipper"
  },
  "api/NetTopologySuite.Operation.OverlayNG.OverlayNG.html": {
    "href": "api/NetTopologySuite.Operation.OverlayNG.OverlayNG.html",
    "title": "Class OverlayNG | NetTopologySuite",
    "summary": "Class OverlayNG Computes the geometric overlay of two Geometrys, using an explicit precision model to allow robust computation. The overlay can be used to determine any of the following set-theoretic operations (boolean combinations) of the geometries: Intersectionall points which lie in both geometries Unionall points which lie in at least one geometry Differenceall points which lie in the first geometry but not the second SymDifferenceall points which lie in one geometry but not both Input geometries may have different dimension. Input collections must be homogeneous (all elements must have the same dimension). Inputs may be simple GeometryCollections. A GeometryCollection is simple if it can be flattened into a valid Multi-geometry; i.e.it is homogeneous and does not contain any overlapping Polygons. The precision model used for the computation can be supplied independent of the precision model of the input geometry. The main use for this is to allow using a fixed precision for geometry with a floating precision model. This does two things: ensures robust computation; and forces the output to be validly rounded to the precision model. For fixed precision models noding is performed using a SnapRoundingNoder. This provides robust computation(as long as precision is limited to around 13 decimal digits). For floating precision an MCIndexNoder is used. This is not fully robust, so can sometimes result in TopologyExceptions being thrown. For robust full-precision overlay see OverlayNGRobust. A custom INoder can be supplied. This allows using a more performant noding strategy in specific cases, for instance in CoverageUnion. Note: If a SnappingNoder is used it is best to specify a fairly small snap tolerance, since the intersection clipping optimization can interact with the snapping to alter the result. Optionally the overlay computation can process using strict mode (via StrictMode = true). In strict mode result semantics are: Lines and Points resulting from topology collapses are not included in the result Result geometry is homogeneous for the Intersection and Difference operations. Result geometry is homogeneous for the Union and SymDifference operations if the inputs have the same dimension Strict mode has the following benefits: Results are simpler Overlay operations are easily chainable without needing to remove lower-dimension elements The original JTS overlay semantics corresponds to non-strict mode. If a robustness error occurs, a TopologyException is thrown. These are usually caused by numerical rounding causing the noding output to not be fully noded. For robust computation with full-precision OverlayNGRobust can be used. Inheritance object OverlayNG Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.OverlayNG Assembly: NetTopologySuite.dll Syntax public sealed class OverlayNG Constructors | Edit this page View Source OverlayNG(Geometry, Geometry, PrecisionModel, ElevationModel, SpatialFunction) Creates an overlay operation on the given geometries, with a defined precision model. Declaration public OverlayNG(Geometry geom0, Geometry geom1, PrecisionModel pm, ElevationModel em, SpatialFunction opCode) Parameters Type Name Description Geometry geom0 The A operand geometry Geometry geom1 The B operand geometry (may be null) PrecisionModel pm The precision model to use ElevationModel em The elevation model to use. May be null SpatialFunction opCode The overlay opcode | Edit this page View Source OverlayNG(Geometry, Geometry, PrecisionModel, SpatialFunction) Creates an overlay operation on the given geometries, with a defined precision model. Declaration public OverlayNG(Geometry geom0, Geometry geom1, PrecisionModel pm, SpatialFunction opCode) Parameters Type Name Description Geometry geom0 The A operand geometry Geometry geom1 The B operand geometry (may be null) PrecisionModel pm The precision model to use SpatialFunction opCode The overlay opcode | Edit this page View Source OverlayNG(Geometry, Geometry, SpatialFunction) Creates an overlay operation on the given geometries using the precision model of the geometries. The noder is chosen according to the precision model specified. For Fixed a snap - rounding noder is used, and the computation is robust. For Floating a non - snapping noder is used, and this computation may not be robust. Declaration public OverlayNG(Geometry geom0, Geometry geom1, SpatialFunction opCode) Parameters Type Name Description Geometry geom0 The A operand geometry Geometry geom1 The B operand geometry (may be null) SpatialFunction opCode The overlay opcode Fields | Edit this page View Source DIFFERENCE The code for the Difference overlay operation. Declaration public const SpatialFunction DIFFERENCE = Difference Field Value Type Description SpatialFunction | Edit this page View Source INTERSECTION The code for the Intersection overlay operation. Declaration public const SpatialFunction INTERSECTION = Intersection Field Value Type Description SpatialFunction | Edit this page View Source SYMDIFFERENCE The code for the Symmetric Difference overlay operation. Declaration public const SpatialFunction SYMDIFFERENCE = SymDifference Field Value Type Description SpatialFunction | Edit this page View Source UNION The code for the Union overlay operation. Declaration public const SpatialFunction UNION = Union Field Value Type Description SpatialFunction Properties | Edit this page View Source AreaResultOnly Gets or sets whether the result can contain only Polygon components. This is used if it is known that the result must be an (possibly empty) area. Declaration public bool AreaResultOnly { get; set; } Property Value Type Description bool true if the result should contain only area components | Edit this page View Source Noder Declaration public INoder Noder { get; set; } Property Value Type Description INoder | Edit this page View Source Optimized Gets or sets a value indicating whether overlay processing optimizations are enabled. It may be useful to disable optimizations for testing purposes. Default is true (optimization enabled). Declaration public bool Optimized { get; set; } Property Value Type Description bool | Edit this page View Source OutputEdges Declaration public bool OutputEdges { get; set; } Property Value Type Description bool | Edit this page View Source OutputNodedEdges Declaration public bool OutputNodedEdges { get; set; } Property Value Type Description bool | Edit this page View Source OutputResultEdges Declaration public bool OutputResultEdges { get; set; } Property Value Type Description bool | Edit this page View Source StrictMode Gets or sets whether the overlay results are computed according to strict mode semantics. Lines resulting from topology collapse are not included Result geometry is homogeneous for the Intersection and Difference operations. Result geometry is homogeneous for the Union and SymDifference operations if the inputs have the same dimension Declaration public bool StrictMode { get; set; } Property Value Type Description bool Methods | Edit this page View Source GetResult() Gets the result of the overlay operation. e Declaration public Geometry GetResult() Returns Type Description Geometry The result of the overlay operation. Exceptions Type Condition ArgumentException Thrown, if the input is not supported (e.g. a mixed-dimension geometry) TopologyException Thrown, if a robustness error occurs | Edit this page View Source Overlay(Geometry, Geometry, SpatialFunction) Computes an overlay operation on the given geometry operands, using the precision model of the geometry. and an appropriate noder. The noder is chosen according to the precision model specified. For Fixed a snap-rounding noder is used, and the computation is robust. For Floating a non-snapping noder is used, and this computation may not be robust. If errors occur a TopologyException is thrown. Declaration public static Geometry Overlay(Geometry geom0, Geometry geom1, SpatialFunction opCode) Parameters Type Name Description Geometry geom0 The first geometry argument Geometry geom1 The second geometry argument SpatialFunction opCode The code for the desired overlay operation Returns Type Description Geometry The result of the overlay operation | Edit this page View Source Overlay(Geometry, Geometry, SpatialFunction, PrecisionModel) Computes an overlay operation for the given geometry operands, with the noding strategy determined by the precision model. Declaration public static Geometry Overlay(Geometry geom0, Geometry geom1, SpatialFunction opCode, PrecisionModel pm) Parameters Type Name Description Geometry geom0 The first geometry argument Geometry geom1 The second geometry argument SpatialFunction opCode The code for the desired overlay operation PrecisionModel pm The precision model to use Returns Type Description Geometry The result of the overlay operation | Edit this page View Source Overlay(Geometry, Geometry, SpatialFunction, PrecisionModel, INoder) Computes an overlay operation for the given geometry operands, using a supplied INoder. Declaration public static Geometry Overlay(Geometry geom0, Geometry geom1, SpatialFunction opCode, PrecisionModel pm, INoder noder) Parameters Type Name Description Geometry geom0 The first geometry argument Geometry geom1 The second geometry argument SpatialFunction opCode The code for the desired overlay operation PrecisionModel pm The precision model to use (which may be null if the noder does not use one) INoder noder The noder to use Returns Type Description Geometry The result of the overlay operation | Edit this page View Source Overlay(Geometry, Geometry, SpatialFunction, INoder) Computes an overlay operation on the given geometry operands, using a supplied INoder. Declaration public static Geometry Overlay(Geometry geom0, Geometry geom1, SpatialFunction opCode, INoder noder) Parameters Type Name Description Geometry geom0 The first geometry argument Geometry geom1 The second geometry argument SpatialFunction opCode The code for the desired overlay operation INoder noder The noder to use Returns Type Description Geometry The result of the overlay operation"
  },
  "api/NetTopologySuite.Operation.OverlayNG.OverlayNGRobust.html": {
    "href": "api/NetTopologySuite.Operation.OverlayNG.OverlayNGRobust.html",
    "title": "Class OverlayNGRobust | NetTopologySuite",
    "summary": "Class OverlayNGRobust Performs an overlay operation using OverlayNG, increasing robustness by using a series of increasingly robust (but slower) noding strategies. The noding strategies used are: A simple fast noder using Floating precision A SnappingNoder using an automatically-determined snap tolerance First snapping each geometry to itself, and then overlaying them wih a SnappingNoder The above two strategies are repeated with increasing snap tolerance, up to a limit Finally a SnapRoundingNoder is used with a automatically-determined scale factor. If all of the above heuristics fail to compute a valid overlay, the original TopologyException is thrown. In practice this should be extremely unlikely to occur. This algorithm relies on each overlay operation execution throwing a TopologyException if it is unable to compute the overlay correctly. Generally this occurs because the noding phase does not produce a valid noding. This requires the use of a ValidatingNoder in order to check the results of using a floating noder. Inheritance object OverlayNGRobust Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.OverlayNG Assembly: NetTopologySuite.dll Syntax public sealed class OverlayNGRobust Methods | Edit this page View Source Overlay(Geometry, Geometry, SpatialFunction) Overlay two geometries, using heuristics to ensure computation completes correctly. In practice the heuristics are observed to be fully correct. Declaration public static Geometry Overlay(Geometry geom0, Geometry geom1, SpatialFunction opCode) Parameters Type Name Description Geometry geom0 A geometry Geometry geom1 A geometry SpatialFunction opCode The overlay operation code Returns Type Description Geometry The overlay result geometry | Edit this page View Source OverlaySR(Geometry, Geometry, SpatialFunction) Attempt Overlay using Snap-Rounding with an automatically-determined scale factor. Declaration public static Geometry OverlaySR(Geometry geom0, Geometry geom1, SpatialFunction opCode) Parameters Type Name Description Geometry geom0 Geometry geom1 SpatialFunction opCode Returns Type Description Geometry the computed overlay result, or null if the overlay fails | Edit this page View Source Union(Geometry) Computes the unary union of a geometry using robust computation. Declaration public static Geometry Union(Geometry geom) Parameters Type Name Description Geometry geom The geometry to union Returns Type Description Geometry The union result | Edit this page View Source Union(IEnumerable<Geometry>) Computes the unary union of a collection of geometries using robust computation. Declaration public static Geometry Union(IEnumerable<Geometry> geoms) Parameters Type Name Description IEnumerable<Geometry> geoms An enumeration of geometries to union Returns Type Description Geometry The union result | Edit this page View Source Union(IEnumerable<Geometry>, GeometryFactory) Computes the unary union of a collection of geometries using robust computation. Declaration public static Geometry Union(IEnumerable<Geometry> geoms, GeometryFactory geomFact) Parameters Type Name Description IEnumerable<Geometry> geoms An enumeration of geometries to union GeometryFactory geomFact The geometry factory to use Returns Type Description Geometry The union of the geometries"
  },
  "api/NetTopologySuite.Operation.OverlayNG.PrecisionReducer.html": {
    "href": "api/NetTopologySuite.Operation.OverlayNG.PrecisionReducer.html",
    "title": "Class PrecisionReducer | NetTopologySuite",
    "summary": "Class PrecisionReducer Functions to reduce the precision of a geometry by rounding it to a given precision model. This class handles only polygonal and linear inputs. For full functionality GeometryPrecisionReducer. Inheritance object PrecisionReducer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.OverlayNG Assembly: NetTopologySuite.dll Syntax public static class PrecisionReducer Methods | Edit this page View Source ReducePrecision(Geometry, PrecisionModel) Reduces the precision of a geometry by rounding and snapping it to the supplied PrecisionModel. The input geometry must be polygonal or linear. The output is always a valid geometry. This implies that input components may be merged if they are closer than the grid precision. if merging is not desired, then the individual geometry components should be processed separately. The output is fully noded (i.e. coincident lines are merged and noded). This provides an effective way to node / snap-round a collection of LineStrings. Declaration public static Geometry ReducePrecision(Geometry geom, PrecisionModel pm) Parameters Type Name Description Geometry geom The geometry to reduce PrecisionModel pm The precision model to use Returns Type Description Geometry The precision-reduced geometry See Also GeometryPrecisionReducer"
  },
  "api/NetTopologySuite.Operation.OverlayNG.PrecisionUtility.html": {
    "href": "api/NetTopologySuite.Operation.OverlayNG.PrecisionUtility.html",
    "title": "Class PrecisionUtility | NetTopologySuite",
    "summary": "Class PrecisionUtility Functions for computing precision model scale factors that ensure robust geometry operations. In particular, these can be used to automatically determine appropriate scale factors for operations using limited-precision noding (such as OverlayNG). WARNING: the inherentScale and robustScale functions can be very slow, due to the method used to determine number of decimal places of a number. These are not recommended for production use. Inheritance object PrecisionUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.OverlayNG Assembly: NetTopologySuite.dll Syntax public static class PrecisionUtility Fields | Edit this page View Source MAX_ROBUST_DP_DIGITS A number of digits of precision which leaves some computational \"headroom\" to ensure robust evaluation of certain double-precision floating point geometric operations. This value should be less than the maximum decimal precision of double-precision values (16). Declaration public static int MAX_ROBUST_DP_DIGITS Field Value Type Description int Methods | Edit this page View Source InherentScale(Geometry) Computes the inherent scale of a geometry. The inherent scale is the scale factor for rounding which preserves all digits of precision (significant digits) present in the geometry ordinates. This is the maximum inherent scale of all ordinate values in the geometry. WARNING: this is very slow. Declaration public static double InherentScale(Geometry geom) Parameters Type Name Description Geometry geom A geometry Returns Type Description double The inherent scale factor in the geometry's ordinates | Edit this page View Source InherentScale(Geometry, Geometry) Computes the inherent scale of two geometries. The inherent scale is the scale factor for rounding which preserves all digits of precision (significant digits) present in the geometry ordinates. This is the maximum inherent scale of all ordinate values in the geometries. Declaration public static double InherentScale(Geometry a, Geometry b) Parameters Type Name Description Geometry a A geometry Geometry b A geomety (which may be null) Returns Type Description double The inherent scale factor in the geometries' ordinates | Edit this page View Source InherentScale(double) Computes the inherent scale of a number. The inherent scale is the scale factor for rounding which preserves all digits of precision (significant digits) present in the numeric value. In other words, it is the scale factor which does not change the numeric value when rounded: num = round( num, inherentScale(num) ) Declaration public static double InherentScale(double value) Parameters Type Name Description double value A number Returns Type Description double The inherent scale factor of the number | Edit this page View Source RobustPM(Geometry) Determines a precision model to use for robust overlay operations for one geometry. The precision scale factor is chosen to maximize output precision while avoiding round-off issues. NOTE: this is a heuristic determination, so is not guaranteed to eliminate precision issues. WARNING: this is very slow. Declaration public static PrecisionModel RobustPM(Geometry a) Parameters Type Name Description Geometry a A geometry Returns Type Description PrecisionModel A suitable precision model for overlay | Edit this page View Source RobustScale(Geometry) Determines a scale factor which maximizes the digits of precision and is safe to use for overlay operations. The robust scale is the minimum of the inherent scale and the safe scale factors. Declaration public static double RobustScale(Geometry a) Parameters Type Name Description Geometry a A geometry Returns Type Description double A scale factor for use in overlay operations | Edit this page View Source RobustScale(Geometry, Geometry) Determines a scale factor which maximizes the digits of precision and is safe to use for overlay operations. The robust scale is the minimum of the inherent scale and the safe scale factors. WARNING: this is very slow. Declaration public static double RobustScale(Geometry a, Geometry b) Parameters Type Name Description Geometry a A geometry Geometry b A geometry Returns Type Description double A scale factor for use in overlay operations | Edit this page View Source SafeScale(Geometry) Computes a safe scale factor for a geometry. A safe scale factor ensures that rounded number has no more than MAX_ROBUST_DP_DIGITS digits of precision. Declaration public static double SafeScale(Geometry geom) Parameters Type Name Description Geometry geom A geometry. Returns Type Description double A safe scale factor for the geometry ordinates | Edit this page View Source SafeScale(Geometry, Geometry) Computes a safe scale factor for two geometry. A safe scale factor ensures that rounded number has no more than MAX_ROBUST_DP_DIGITS digits of precision. Declaration public static double SafeScale(Geometry a, Geometry b) Parameters Type Name Description Geometry a A geometry. Geometry b A geometry (which may be null). Returns Type Description double A safe scale factor for the geometry ordinates | Edit this page View Source SafeScale(double) Computes a safe scale factor for a numeric value. A safe scale factor ensures that rounded number has no more than MAX_ROBUST_DP_DIGITS digits of precision. Declaration public static double SafeScale(double value) Parameters Type Name Description double value A numeric value. Returns Type Description double A safe scale factor for the value"
  },
  "api/NetTopologySuite.Operation.OverlayNG.RingClipper.html": {
    "href": "api/NetTopologySuite.Operation.OverlayNG.RingClipper.html",
    "title": "Class RingClipper | NetTopologySuite",
    "summary": "Class RingClipper Clips a ring of points to an rectangle. Uses a variant of Cohen-Sutherland clipping. In general the output is not topologically valid. In particular, the output may contain coincident non-noded line segments along the clip rectangle sides. However, the output is sufficiently well-structured that it can be used as input to the OverlayNG algorithm (which is able to process coincident linework due to the need to handle topology collapse under precision reduction). Because of the likelihood of creating extraneous line segments along the clipping rectangle sides, this class is not suitable for clipping linestrings. The clipping envelope should be generated using NetTopologySuite.Operation.OverlayNG.RobustClipEnvelopeComputer, to ensure that intersecting line segments are not perturbed by clipping. This is required to ensure that the overlay of the clipped geometry is robust and correct (i.e. the same as if clipping was not used). Inheritance object RingClipper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.OverlayNG Assembly: NetTopologySuite.dll Syntax public sealed class RingClipper Constructors | Edit this page View Source RingClipper(Envelope) Creates a new clipper for the given envelope. Declaration public RingClipper(Envelope clipEnv) Parameters Type Name Description Envelope clipEnv The clipping envelope Methods | Edit this page View Source Clip(Coordinate[]) Clips a list of points to the clipping rectangle box. Declaration public Coordinate[] Clip(Coordinate[] pts) Parameters Type Name Description Coordinate[] pts The points of the ring Returns Type Description Coordinate[] The points of the clipped ring See Also LineLimiter"
  },
  "api/NetTopologySuite.Operation.OverlayNG.UnaryUnionNG.html": {
    "href": "api/NetTopologySuite.Operation.OverlayNG.UnaryUnionNG.html",
    "title": "Class UnaryUnionNG | NetTopologySuite",
    "summary": "Class UnaryUnionNG Unions a collection of geometries in an efficient way, using OverlayNG to ensure robust computation. This class is most useful for performing UnaryUnion using a fixed-precision model. For unary union using floating precision, Union(Geometry) should be used. Inheritance object UnaryUnionNG Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.OverlayNG Assembly: NetTopologySuite.dll Syntax public static class UnaryUnionNG Methods | Edit this page View Source Union(Geometry, PrecisionModel) Unions a geometry (which is often a collection) using a given precision model. Declaration public static Geometry Union(Geometry geom, PrecisionModel pm) Parameters Type Name Description Geometry geom The geometry to union PrecisionModel pm The precision model to use Returns Type Description Geometry The union of the geometry See Also OverlayNGRobust | Edit this page View Source Union(IEnumerable<Geometry>, GeometryFactory, PrecisionModel) Unions a geometry (which is often a collection) using a given precision model. Declaration public static Geometry Union(IEnumerable<Geometry> geoms, GeometryFactory geomFact, PrecisionModel pm) Parameters Type Name Description IEnumerable<Geometry> geoms The geometries to union GeometryFactory geomFact The geometry factory to use PrecisionModel pm The precision model to use Returns Type Description Geometry The union of the geometries See Also OverlayNGRobust | Edit this page View Source Union(IEnumerable<Geometry>, PrecisionModel) Unions a geometry (which is often a collection) using a given precision model. Declaration public static Geometry Union(IEnumerable<Geometry> geoms, PrecisionModel pm) Parameters Type Name Description IEnumerable<Geometry> geoms The geometries to union PrecisionModel pm The precision model to use Returns Type Description Geometry The union of the geometries See Also OverlayNGRobust"
  },
  "api/NetTopologySuite.Operation.OverlayNG.html": {
    "href": "api/NetTopologySuite.Operation.OverlayNG.html",
    "title": "Namespace NetTopologySuite.Operation.OverlayNG | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Operation.OverlayNG Contains classes that perform vector overlay to compute boolean set-theoretic spatial functions. Overlay operations are used in spatial analysis for computing set-theoretic operations (boolean combinations) of input Geometry s. The OverlayNG class provides the standard Simple Features boolean set-theoretic overlay operations. These are: Intersection - all points which lie in both geometries Union - all points which lie in at least one geometry Difference - all points which lie in the first geometry but not the second Symmetric Difference - all points which lie in one geometry but not both These operations are supported for all combinations of the basic geometry types and their homogeneous collections. Additional operations include: UnaryUnion unions collections of geometries in an efficient way CoverageUnion provides enhanced performance for unioning valid polygonal and lineal coverages PrecisionReducer allows reducing the precision of a geometry in a topologically-valid way Semantics The requirements for overlay input are: Input geometries may have different dimension. Collections must be homogeneous (all elements must have the same dimension). In general, inputs must be valid geometries. However, polygonal inputs may contain the following two kinds of \"mild\" invalid topology: rings which self-touch at discrete points (sometimes called inverted shells and exverted holes). rings which touch along line segments (i.e. topology collapse). The semantics of overlay output are: Results are always valid geometries. In particular, result MultiPolygons are valid. Repeated vertices are removed Linear results include all nodes (endpoints) present in the input. In some cases more nodes will be present. (If merged lines are required see LineMerger.) Polygon edges which undergo topology collapse to lines (due to rounding or snapping) are included in the result. This means that all operations may produce a heterogeneous result. Usually this only occurs when using a fixed-precision model, but it can happen due to snapping performed to improve robustness. The intersection operation result includes all components of the intersection for geometries which intersect in components of the same and/or lower dimension. The difference operation produces a homogeneous result if no topology collapses are present. In this case the result dimension is equal to that of the left-hand operand. The union and symmetric difference operations may produce heterogeneous result if the inputs are of mixed dimension. Homogeneous results are output as Multi geometries. Heterogeneous results are output as a GeometryCollection containing a set of atomic geometries. (This provides backwards compatibility with the original NTS overlay implementation. However, it loses the information that the polygonal results have valid MultiPolygon topology.) Empty results are atomic EMPTY geometries of dimension appropriate to the operation. As far as possible, results preserve the order and direction of the inputs. For instance, a MultiLineString intersection with a Polygon will have resultants which are in the same order and have the same direction as the input lines (assuming the input lines are disjoint). If an input line is split into two or more parts, they are ordered in the direction of occurence along their parent line. Features Functionality Precision Model - operations are performed using a defined precision model (finite or floating) Robust Computation - provides fully robust computation when an appropriate noder is used Performance optimizations - including: Short-circuiting for disjoint input envelopes Reduction of input segment count via clipping / limiting to overlap envelope Optimizations can be disabled if required (e.g. for testing or performance evaluation) Pluggable Noding - allows using different noders to change characteristics of performance and accuracy Precision Reduction - in a topologically correct way. Implemented by unioning a single input with an empty geometry [Topology Correction / Conversion] - handles certain kinds of polygonal inputs which are invalid Fast Coverage Union - of valid polygonal and linear coverages Pluggable Noding The noding phase of overlay uses a INoder subclass. This is determine automatically based on the precision model of the input. Or it can be provided explicity, which allows changing characteristics of performance and robustness. Examples of relevant noders include: MCIndexNoder - a fast full-precision noder, which however may not produce a valid noding in some situations. Should be combined with a ValidatingNoder wrapper to detect noding failures. SnappingNoder - a robust full-precision noder SnapRoundingNoder - a noder which enforces a supplied fixed precision model by snapping vertices and intersections to a grid ValidatingNoder - a wrapper which can be used to verify the noding prior to topology building SegmentExtractingNoder - requires node-clean input, and provides very fast noding Topology Correction / Conversion As noted above, the overlay process can handle polygonal inputs which are invalid according to the OGC topology model in certain limited ways. These invalid conditions are: rings which self-touch at discrete points (sometimes called inverted shells and exverted holes). rings which touch along line segments (i.e. topology collapse). These invalidities are corrected during the overlay process. Some of these invalidities are considered as valid in other geometry models. By peforming a self-overlay these inputs can be converted into the JTS OGC topological model. Codebase Defines a simple, full-featured topology model, with clear semantics. The topology model incorporates handling topology collapse, which is essential for snapping and fixed-precision noding. Uses a simple topology graph data structure (based on the winged edge pattern). Uses a simpler topology graph data structure (based on winged edge pattern). Decouples noding and topology-build phases. This makes the code clearer, and makes it possible to allow supplying alternate implementations and semantics for each phase. All optimizations are implemented internally, so that clients do not have to add checks such as envelope overlap<./li> Algorithm For non-point inputs the overlay algorithm is: Check for empty input geometries, and return a result appropriate for the specified operation Extract linework and points from input geometries, with topology location information (If optimization enabled) Apply overlap envelope optimizations: For Intersection, check if the input envelopes are disjoint (using an envelope expansion adjustment to account for the precision grid). For Intersection and Difference, clip or limit the linework of the input geometries to the overlap envelope. If the optimized linework is empty, return an empty result of appropriate type. Node the linework. For full robustness snap-rounding noding is used. Other kinds of noder can be used as well (for instance, the full-precision noding algorithm as the original overlay code). Merge noded edges. Coincident edges from the two input geometries are merged, along with their topological labelling. Topology collapses are detected in this step, and are flagged in the labelling so they can be handled appropriately duing result polygon extraction Build a fully-labelled topology graph. This includes: Create a graph structure on the noded, merged edges Propagate topology locations around nodes in the graph Label edges that have incomplete topology locations. These occur when edges from an input geometry are isolated (disjoint from the edges of the other geometry in the graph). If result is empty return an empty geometry of appropriate type Generate the result geometry from the labelled graph: Build result polygons Mark edges which should be included in the result areas Link maximal rings together Convert maximal rings to minimal (valid) rings Determine nesting of holes Construct result polygons Build result linework Mark edges to be included in the result lines Construct node-to-node linework Build result points For intersection only, output point occur where the input touch at single points Collect result elements into the result geometry Package Specification OpenGIS Simple Features Specification for SQL Classes CoverageUnion Unions a valid coverage of polygons or lines in an efficient way. A polygonal coverage is a collection of Polygons which satisfy the following conditions: Vector-cleanLine segments within the collection must either be identical or intersect only at endpoints. Non-overlappingNo two polygons may overlap. Equivalently, polygons must be interior-disjoint. A linear coverage is a collection of LineStrings which satisfies the Vector-clean condition. Note that this does not require the LineStrings to be fully noded - i.e. they may contain coincident linework. Coincident line segments are dissolved by the union. Currently linear output is not merged (this may be added in a future release.) No checking is done to determine whether the input is a valid coverage. This is because coverage validation involves segment intersection detection, which is much more expensive than the union phase. If the input is not a valid coverage then in some cases this will be detected during processing and a TopologyException is thrown. Otherwise, the computation will produce output, but it will be invalid. Unioning a valid coverage implies that no new vertices are created. This means that a precision model does not need to be specified. The precision of the vertices in the output geometry is not changed. LineLimiter Limits the segments in a list of segments to those which intersect an envelope. This creates zero or more sections of the input segment sequences, containing only line segments which intersect the limit envelope. Segments are not clipped, since that can move line segments enough to alter topology, and it happens in the overlay in any case. This can substantially reduce the number of vertices which need to be processed during overlay. This optimization is only applicable to Line geometries, since it does not maintain the closed topology of rings. Polygonal geometries are optimized using the RingClipper. OverlayNG Computes the geometric overlay of two Geometrys, using an explicit precision model to allow robust computation. The overlay can be used to determine any of the following set-theoretic operations (boolean combinations) of the geometries: Intersectionall points which lie in both geometries Unionall points which lie in at least one geometry Differenceall points which lie in the first geometry but not the second SymDifferenceall points which lie in one geometry but not both Input geometries may have different dimension. Input collections must be homogeneous (all elements must have the same dimension). Inputs may be simple GeometryCollections. A GeometryCollection is simple if it can be flattened into a valid Multi-geometry; i.e.it is homogeneous and does not contain any overlapping Polygons. The precision model used for the computation can be supplied independent of the precision model of the input geometry. The main use for this is to allow using a fixed precision for geometry with a floating precision model. This does two things: ensures robust computation; and forces the output to be validly rounded to the precision model. For fixed precision models noding is performed using a SnapRoundingNoder. This provides robust computation(as long as precision is limited to around 13 decimal digits). For floating precision an MCIndexNoder is used. This is not fully robust, so can sometimes result in TopologyExceptions being thrown. For robust full-precision overlay see OverlayNGRobust. A custom INoder can be supplied. This allows using a more performant noding strategy in specific cases, for instance in CoverageUnion. Note: If a SnappingNoder is used it is best to specify a fairly small snap tolerance, since the intersection clipping optimization can interact with the snapping to alter the result. Optionally the overlay computation can process using strict mode (via StrictMode = true). In strict mode result semantics are: Lines and Points resulting from topology collapses are not included in the result Result geometry is homogeneous for the Intersection and Difference operations. Result geometry is homogeneous for the Union and SymDifference operations if the inputs have the same dimension Strict mode has the following benefits: Results are simpler Overlay operations are easily chainable without needing to remove lower-dimension elements The original JTS overlay semantics corresponds to non-strict mode. If a robustness error occurs, a TopologyException is thrown. These are usually caused by numerical rounding causing the noding output to not be fully noded. For robust computation with full-precision OverlayNGRobust can be used. OverlayNGRobust Performs an overlay operation using OverlayNG, increasing robustness by using a series of increasingly robust (but slower) noding strategies. The noding strategies used are: A simple fast noder using Floating precision A SnappingNoder using an automatically-determined snap tolerance First snapping each geometry to itself, and then overlaying them wih a SnappingNoder The above two strategies are repeated with increasing snap tolerance, up to a limit Finally a SnapRoundingNoder is used with a automatically-determined scale factor. If all of the above heuristics fail to compute a valid overlay, the original TopologyException is thrown. In practice this should be extremely unlikely to occur. This algorithm relies on each overlay operation execution throwing a TopologyException if it is unable to compute the overlay correctly. Generally this occurs because the noding phase does not produce a valid noding. This requires the use of a ValidatingNoder in order to check the results of using a floating noder. PrecisionReducer Functions to reduce the precision of a geometry by rounding it to a given precision model. This class handles only polygonal and linear inputs. For full functionality GeometryPrecisionReducer. PrecisionUtility Functions for computing precision model scale factors that ensure robust geometry operations. In particular, these can be used to automatically determine appropriate scale factors for operations using limited-precision noding (such as OverlayNG). WARNING: the inherentScale and robustScale functions can be very slow, due to the method used to determine number of decimal places of a number. These are not recommended for production use. RingClipper Clips a ring of points to an rectangle. Uses a variant of Cohen-Sutherland clipping. In general the output is not topologically valid. In particular, the output may contain coincident non-noded line segments along the clip rectangle sides. However, the output is sufficiently well-structured that it can be used as input to the OverlayNG algorithm (which is able to process coincident linework due to the need to handle topology collapse under precision reduction). Because of the likelihood of creating extraneous line segments along the clipping rectangle sides, this class is not suitable for clipping linestrings. The clipping envelope should be generated using NetTopologySuite.Operation.OverlayNG.RobustClipEnvelopeComputer, to ensure that intersecting line segments are not perturbed by clipping. This is required to ensure that the overlay of the clipped geometry is robust and correct (i.e. the same as if clipping was not used). UnaryUnionNG Unions a collection of geometries in an efficient way, using OverlayNG to ensure robust computation. This class is most useful for performing UnaryUnion using a fixed-precision model. For unary union using floating precision, Union(Geometry) should be used."
  },
  "api/NetTopologySuite.Operation.Polygonize.EdgeRing.EnvelopeAreaComparator.html": {
    "href": "api/NetTopologySuite.Operation.Polygonize.EdgeRing.EnvelopeAreaComparator.html",
    "title": "Class EdgeRing.EnvelopeAreaComparator | NetTopologySuite",
    "summary": "Class EdgeRing.EnvelopeAreaComparator Compares EdgeRings based on the area of their envelopes. Smaller envelopes sort before bigger ones. This effectively sorts EdgeRings in order of containment. Inheritance object EdgeRing.EnvelopeAreaComparator Implements IComparer<EdgeRing> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Polygonize Assembly: NetTopologySuite.dll Syntax public class EdgeRing.EnvelopeAreaComparator : IComparer<EdgeRing> Methods | Edit this page View Source Compare(EdgeRing, EdgeRing) Declaration public int Compare(EdgeRing r0, EdgeRing r1) Parameters Type Name Description EdgeRing r0 EdgeRing r1 Returns Type Description int Implements IComparer<T>"
  },
  "api/NetTopologySuite.Operation.Polygonize.EdgeRing.EnvelopeComparator.html": {
    "href": "api/NetTopologySuite.Operation.Polygonize.EdgeRing.EnvelopeComparator.html",
    "title": "Class EdgeRing.EnvelopeComparator | NetTopologySuite",
    "summary": "Class EdgeRing.EnvelopeComparator Compares EdgeRings based on their envelope, using the standard lexicographic ordering. This ordering is sufficient to make edge ring sorting deterministic. Inheritance object EdgeRing.EnvelopeComparator Implements IComparer<EdgeRing> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Polygonize Assembly: NetTopologySuite.dll Syntax public class EdgeRing.EnvelopeComparator : IComparer<EdgeRing> Methods | Edit this page View Source Compare(EdgeRing, EdgeRing) Declaration public int Compare(EdgeRing r0, EdgeRing r1) Parameters Type Name Description EdgeRing r0 EdgeRing r1 Returns Type Description int Implements IComparer<T>"
  },
  "api/NetTopologySuite.Operation.Polygonize.EdgeRing.html": {
    "href": "api/NetTopologySuite.Operation.Polygonize.EdgeRing.html",
    "title": "Class EdgeRing | NetTopologySuite",
    "summary": "Class EdgeRing Represents a ring of PolygonizeDirectedEdges which form a ring of a polygon. The ring may be either an outer shell or a hole. Inheritance object EdgeRing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Operation.Polygonize Assembly: NetTopologySuite.dll Syntax public class EdgeRing Constructors | Edit this page View Source EdgeRing(GeometryFactory) Declaration public EdgeRing(GeometryFactory factory) Parameters Type Name Description GeometryFactory factory Properties | Edit this page View Source Edges Declaration public IList<PolygonizeDirectedEdge> Edges { get; } Property Value Type Description IList<PolygonizeDirectedEdge> | Edit this page View Source HasShell Gets a value indicating whether this ring has a shell assigned to it. Declaration public bool HasShell { get; } Property Value Type Description bool | Edit this page View Source IsHole Tests whether this ring is a hole. Due to the way the edges in the polygonization graph are linked, a ring is a hole if it is oriented counter-clockwise. Declaration public bool IsHole { get; } Property Value Type Description bool true if this ring is a hole. | Edit this page View Source IsIncluded Declaration public bool IsIncluded { get; set; } Property Value Type Description bool | Edit this page View Source IsIncludedSet Declaration public bool IsIncludedSet { get; } Property Value Type Description bool | Edit this page View Source IsOuterHole Tests whether this ring is an outer hole. A hole is an outer hole if it is not contained by a shell. Declaration public bool IsOuterHole { get; } Property Value Type Description bool | Edit this page View Source IsOuterShell Tests whether this ring is an outer shell. Declaration public bool IsOuterShell { get; } Property Value Type Description bool | Edit this page View Source IsProcessed Gets or sets a value indicating whether this ring has been processed. Declaration public bool IsProcessed { get; set; } Property Value Type Description bool | Edit this page View Source IsValid Gets a value indicating if the LinearRing ring formed by this edge ring is topologically valid. Declaration public bool IsValid { get; } Property Value Type Description bool Remarks ComputeValid() must be called prior to accessing this property. | Edit this page View Source LineString Gets the coordinates for this ring as a LineString. Used to return the coordinates in this ring as a valid point, when it has been detected that the ring is topologically invalid. Declaration public LineString LineString { get; } Property Value Type Description LineString | Edit this page View Source OuterHole Gets the outer hole of a shell, if it has one. An outer hole is one that is not contained in any other shell. Each disjoint connected group of shells is surrounded by an outer hole. Declaration public EdgeRing OuterHole { get; } Property Value Type Description EdgeRing The outer hole edge ring, or null | Edit this page View Source Polygon Computes and returns the Polygon formed by this ring and any contained holes. Declaration public Polygon Polygon { get; } Property Value Type Description Polygon | Edit this page View Source Ring Returns this ring as a LinearRing, or null if an Exception occurs while creating it (such as a topology problem). Declaration public LinearRing Ring { get; } Property Value Type Description LinearRing | Edit this page View Source Shell Gets or sets a value indicating the containing shell ring of a ring that has been determined to be a hole. Declaration public EdgeRing Shell { get; } Property Value Type Description EdgeRing Methods | Edit this page View Source AddHole(LinearRing) Adds a hole to the polygon formed by this ring. Declaration public void AddHole(LinearRing hole) Parameters Type Name Description LinearRing hole The LinearRing forming the hole. | Edit this page View Source AddHole(EdgeRing) Adds a hole to the polygon formed by this ring. Declaration public void AddHole(EdgeRing holeER) Parameters Type Name Description EdgeRing holeER the LinearRing forming the hole. | Edit this page View Source Build(PolygonizeDirectedEdge) Declaration public void Build(PolygonizeDirectedEdge startDE) Parameters Type Name Description PolygonizeDirectedEdge startDE | Edit this page View Source ComputeHole() Computes whether this ring is a hole. Due to the way the edges in the polygonization graph are linked, a ring is a hole if it is oriented counter-clockwise. Declaration public void ComputeHole() | Edit this page View Source ComputeValid() Computes the validity of the ring. Must be called prior to calling IsValid. Declaration public void ComputeValid() | Edit this page View Source FindDirEdgesInRing(PolygonizeDirectedEdge) Traverses a ring of DirectedEdges, accumulating them into a list. This assumes that all dangling directed edges have been removed from the graph, so that there is always a next dirEdge. Declaration [Obsolete] public static List<DirectedEdge> FindDirEdgesInRing(PolygonizeDirectedEdge startDE) Parameters Type Name Description PolygonizeDirectedEdge startDE The DirectedEdge to start traversing at Returns Type Description List<DirectedEdge> A list of DirectedEdges that form a ring Remarks This function has a different return type than its counterpart in JTS. Use FindPolyDirEdgesInRing(PolygonizeDirectedEdge) instead. | Edit this page View Source FindEdgeRingContaining(EdgeRing, IList<EdgeRing>) Find the innermost enclosing shell EdgeRing containing the argument EdgeRing, if any. The innermost enclosing ring is the smallest enclosing ring. The algorithm used depends on the fact that: ring A contains ring B if envelope(ring A) contains envelope(ring B). This routine is only safe to use if the chosen point of the hole is known to be properly contained in a shell (which is guaranteed to be the case if the hole does not touch its shell). To improve performance of this function the caller should make the passed shellList as small as possible(e.g. by using a spatial index filter beforehand). Declaration public static EdgeRing FindEdgeRingContaining(EdgeRing testEr, IList<EdgeRing> erList) Parameters Type Name Description EdgeRing testEr IList<EdgeRing> erList Returns Type Description EdgeRing Containing EdgeRing or null if no containing EdgeRing is found. | Edit this page View Source FindPolyDirEdgesInRing(PolygonizeDirectedEdge) Traverses a ring of DirectedEdges, accumulating them into a list. This assumes that all dangling directed edges have been removed from the graph, so that there is always a next dirEdge. Declaration public static IList<PolygonizeDirectedEdge> FindPolyDirEdgesInRing(PolygonizeDirectedEdge startDE) Parameters Type Name Description PolygonizeDirectedEdge startDE The DirectedEdge to start traversing at Returns Type Description IList<PolygonizeDirectedEdge> A list of DirectedEdges that form a ring Remarks This function is called FindDirEdgesInRing in JTS. | Edit this page View Source IsInRing(Coordinate) Declaration [Obsolete(\"Will be removed in a future version\")] public bool IsInRing(Coordinate pt) Parameters Type Name Description Coordinate pt Returns Type Description bool | Edit this page View Source Locate(Coordinate) Declaration public Location Locate(Coordinate pt) Parameters Type Name Description Coordinate pt Returns Type Description Location | Edit this page View Source ToString() Gets a string representation of this object. Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/NetTopologySuite.Operation.Polygonize.HoleAssigner.html": {
    "href": "api/NetTopologySuite.Operation.Polygonize.HoleAssigner.html",
    "title": "Class HoleAssigner | NetTopologySuite",
    "summary": "Class HoleAssigner Assigns hole rings to shell rings during polygonization. Uses spatial indexing to improve performance of shell lookup. Inheritance object HoleAssigner Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Polygonize Assembly: NetTopologySuite.dll Syntax public class HoleAssigner Constructors | Edit this page View Source HoleAssigner(IEnumerable<EdgeRing>) Creates a new hole assigner. Declaration public HoleAssigner(IEnumerable<EdgeRing> shells) Parameters Type Name Description IEnumerable<EdgeRing> shells An enumeration of shell rings to assign holes to Methods | Edit this page View Source AssignHolesToShells(IEnumerable<EdgeRing>) Assigns holes to the shells. Declaration public void AssignHolesToShells(IEnumerable<EdgeRing> holes) Parameters Type Name Description IEnumerable<EdgeRing> holes An enumeration of holes to assign to shells | Edit this page View Source AssignHolesToShells(IEnumerable<EdgeRing>, IEnumerable<EdgeRing>) Assigns hole rings to shell rings. Declaration public static void AssignHolesToShells(IEnumerable<EdgeRing> holes, IEnumerable<EdgeRing> shells) Parameters Type Name Description IEnumerable<EdgeRing> holes An enumeration of hole rings to assign IEnumerable<EdgeRing> shells An enumeration of shell rings"
  },
  "api/NetTopologySuite.Operation.Polygonize.PolygonizeDirectedEdge.html": {
    "href": "api/NetTopologySuite.Operation.Polygonize.PolygonizeDirectedEdge.html",
    "title": "Class PolygonizeDirectedEdge | NetTopologySuite",
    "summary": "Class PolygonizeDirectedEdge A DirectedEdge of a PolygonizeGraph, which represents an edge of a polygon formed by the graph. May be logically deleted from the graph by setting the marked flag. Inheritance object GraphComponent DirectedEdge PolygonizeDirectedEdge Implements IComparable Inherited Members DirectedEdge.ToEdges(IList<DirectedEdge>) DirectedEdge.parentEdge DirectedEdge.from DirectedEdge.to DirectedEdge.p0 DirectedEdge.p1 DirectedEdge.Edge DirectedEdge.Quadrant DirectedEdge.QuadrantEx DirectedEdge.DirectionPt DirectedEdge.EdgeDirection DirectedEdge.FromNode DirectedEdge.ToNode DirectedEdge.Coordinate DirectedEdge.Angle DirectedEdge.Sym DirectedEdge.CompareTo(object) DirectedEdge.CompareDirection(DirectedEdge) DirectedEdge.Write(StreamWriter) DirectedEdge.IsRemoved DirectedEdge.ToString() GraphComponent.SetVisited(IEnumerator, bool) GraphComponent.SetMarked(IEnumerator, bool) GraphComponent.GetComponentWithVisitedState(IEnumerator, bool) GraphComponent.IsVisited GraphComponent.Visited GraphComponent.IsMarked GraphComponent.Marked GraphComponent.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Operation.Polygonize Assembly: NetTopologySuite.dll Syntax public class PolygonizeDirectedEdge : DirectedEdge, IComparable Constructors | Edit this page View Source PolygonizeDirectedEdge(Node, Node, Coordinate, bool) Constructs a directed edge connecting the from node to the to node. Declaration public PolygonizeDirectedEdge(Node from, Node to, Coordinate directionPt, bool edgeDirection) Parameters Type Name Description Node from Node to Coordinate directionPt Specifies this DirectedEdge's direction (given by an imaginary line from the from node to directionPt). bool edgeDirection Whether this DirectedEdge's direction is the same as or opposite to that of the parent Edge (if any). Properties | Edit this page View Source IsInRing Returns the ring of directed edges that this directed edge is a member of, or null if the ring has not been set. Declaration public bool IsInRing { get; } Property Value Type Description bool | Edit this page View Source Label Returns the identifier attached to this directed edge. Attaches an identifier to this directed edge. Declaration public long Label { get; set; } Property Value Type Description long | Edit this page View Source Next Returns the next directed edge in the EdgeRing that this directed edge is a member of. Sets the next directed edge in the EdgeRing that this directed edge is a member of. Declaration public PolygonizeDirectedEdge Next { get; set; } Property Value Type Description PolygonizeDirectedEdge | Edit this page View Source Ring Gets/Sets the ring of directed edges that this directed edge is a member of. Declaration public EdgeRing Ring { get; set; } Property Value Type Description EdgeRing Implements IComparable"
  },
  "api/NetTopologySuite.Operation.Polygonize.PolygonizeEdge.html": {
    "href": "api/NetTopologySuite.Operation.Polygonize.PolygonizeEdge.html",
    "title": "Class PolygonizeEdge | NetTopologySuite",
    "summary": "Class PolygonizeEdge An edge of a polygonization graph. Inheritance object GraphComponent Edge PolygonizeEdge Inherited Members Edge.dirEdge Edge.SetDirectedEdges(DirectedEdge, DirectedEdge) Edge.GetDirEdge(int) Edge.GetDirEdge(Node) Edge.GetOppositeNode(Node) Edge.IsRemoved GraphComponent.SetVisited(IEnumerator, bool) GraphComponent.SetMarked(IEnumerator, bool) GraphComponent.GetComponentWithVisitedState(IEnumerator, bool) GraphComponent.IsVisited GraphComponent.Visited GraphComponent.IsMarked GraphComponent.Marked GraphComponent.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Polygonize Assembly: NetTopologySuite.dll Syntax public class PolygonizeEdge : Edge Constructors | Edit this page View Source PolygonizeEdge(LineString) Declaration public PolygonizeEdge(LineString line) Parameters Type Name Description LineString line Properties | Edit this page View Source Line Declaration public LineString Line { get; } Property Value Type Description LineString"
  },
  "api/NetTopologySuite.Operation.Polygonize.PolygonizeGraph.html": {
    "href": "api/NetTopologySuite.Operation.Polygonize.PolygonizeGraph.html",
    "title": "Class PolygonizeGraph | NetTopologySuite",
    "summary": "Class PolygonizeGraph Represents a planar graph of edges that can be used to compute a polygonization, and implements the algorithms to compute the EdgeRings formed by the graph. The marked flag on DirectedEdges is used to indicate that a directed edge has be logically deleted from the graph. Inheritance object PlanarGraph PolygonizeGraph Inherited Members PlanarGraph.dirEdges PlanarGraph.nodeMap PlanarGraph.FindNode(Coordinate) PlanarGraph.Add(Node) PlanarGraph.Add(Edge) PlanarGraph.Add(DirectedEdge) PlanarGraph.GetNodeEnumerator() PlanarGraph.Nodes PlanarGraph.GetDirEdgeEnumerator() PlanarGraph.GetEdgeEnumerator() PlanarGraph.Edges PlanarGraph.Remove(Edge) PlanarGraph.Remove(DirectedEdge) PlanarGraph.Remove(Node) PlanarGraph.FindNodesOfDegree(int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Polygonize Assembly: NetTopologySuite.dll Syntax public class PolygonizeGraph : PlanarGraph Constructors | Edit this page View Source PolygonizeGraph(GeometryFactory) Create a new polygonization graph. Declaration public PolygonizeGraph(GeometryFactory factory) Parameters Type Name Description GeometryFactory factory Methods | Edit this page View Source AddEdge(LineString) Add a LineString forming an edge of the polygon graph. Declaration public void AddEdge(LineString line) Parameters Type Name Description LineString line The line to add. | Edit this page View Source ComputeDepthParity() Traverses the polygonized edge rings in the graph and computes the depth parity (odd or even) relative to the exterior of the graph. If the client has requested that the output be polygonally valid, only odd polygons will be constructed. Declaration [Obsolete] public void ComputeDepthParity() Exceptions Type Condition NotSupportedException | Edit this page View Source DeleteAllEdges(Node) Deletes all edges at a node. Declaration public static void DeleteAllEdges(Node node) Parameters Type Name Description Node node | Edit this page View Source DeleteCutEdges() Finds and removes all cut edges from the graph. Declaration public IList<LineString> DeleteCutEdges() Returns Type Description IList<LineString> A list of the LineStrings forming the removed cut edges. | Edit this page View Source DeleteDangles() Marks all edges from the graph which are \"dangles\". Dangles are which are incident on a node with degree 1. This process is recursive, since removing a dangling edge may result in another edge becoming a dangle. In order to handle large recursion depths efficiently, an explicit recursion stack is used. Declaration public ICollection<LineString> DeleteDangles() Returns Type Description ICollection<LineString> A List containing the LineStrings that formed dangles. | Edit this page View Source GetEdgeRings() Computes the minimal EdgeRings formed by the edges in this graph. Declaration public IList<EdgeRing> GetEdgeRings() Returns Type Description IList<EdgeRing> A list of the{EdgeRings found by the polygonization process."
  },
  "api/NetTopologySuite.Operation.Polygonize.Polygonizer.html": {
    "href": "api/NetTopologySuite.Operation.Polygonize.Polygonizer.html",
    "title": "Class Polygonizer | NetTopologySuite",
    "summary": "Class Polygonizer Polygonizes a set of Geometrys which contain linework that represents the edges of a planar graph. Inheritance object Polygonizer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Polygonize Assembly: NetTopologySuite.dll Syntax public class Polygonizer Remarks All types of Geometry are accepted as input; the constituent linework is extracted as the edges to be polygonized. The processed edges must be correctly noded; that is, they must only meet at their endpoints. Polygonization will accept incorrectly noded input but will not form polygons from non-noded edges, and reports them as errors. The Polygonizer reports the follow kinds of errors: The Polygonizer(bool) constructor allows extracting only polygons which form a valid polygonal result. The set of extracted polygons is guaranteed to be edge-disjoint. This is useful for situations where it is known that the input lines form a valid polygonal geometry (which may include holes or nested polygons). Constructors | Edit this page View Source Polygonizer() Creates a polygonizer that extracts all polygons. Declaration public Polygonizer() | Edit this page View Source Polygonizer(bool) Creates a polygonizer, specifying whether a valid polygonal geometry must be created. If the argument is true then areas may be discarded in order to ensure that the extracted geometry is a valid polygonal geometry. Declaration public Polygonizer(bool extractOnlyPolygonal) Parameters Type Name Description bool extractOnlyPolygonal true if a valid polygonal geometry should be extracted Fields | Edit this page View Source AllPolys The default polygonizer output behavior Declaration public const bool AllPolys = false Field Value Type Description bool Properties | Edit this page View Source IsCheckingRingsValid Allows disabling the valid ring checking, to optimize situations where invalid rings are not expected. Declaration public bool IsCheckingRingsValid { get; set; } Property Value Type Description bool Remarks The default is true Methods | Edit this page View Source Add(Geometry) Adds a Geometry to the linework to be polygonized. May be called multiple times. Any dimension of Geometry may be added; the constituent linework will be extracted and used Declaration public void Add(Geometry g) Parameters Type Name Description Geometry g A Geometry with linework to be polygonized. | Edit this page View Source Add(ICollection<Geometry>) Adds a collection of Geometrys to be polygonized. May be called multiple times. Any dimension of Geometry may be added; the constituent linework will be extracted and used. Declaration public void Add(ICollection<Geometry> geomList) Parameters Type Name Description ICollection<Geometry> geomList A list of Geometrys with linework to be polygonized. | Edit this page View Source GetCutEdges() Gets the list of cut edges found during polygonization. Declaration public ICollection<LineString> GetCutEdges() Returns Type Description ICollection<LineString> | Edit this page View Source GetDangles() Gets the list of dangling lines found during polygonization. Declaration public ICollection<LineString> GetDangles() Returns Type Description ICollection<LineString> | Edit this page View Source GetGeometry() Gets a geometry representing the polygons formed by the polygonization. If a valid polygonal geometry was extracted the result is a IPolygonal geometry. Declaration public Geometry GetGeometry() Returns Type Description Geometry A geometry containing the polygons | Edit this page View Source GetInvalidRingLines() Gets the list of lines forming invalid rings found during polygonization. Declaration public IList<Geometry> GetInvalidRingLines() Returns Type Description IList<Geometry> | Edit this page View Source GetPolygons() Gets the list of polygons formed by the polygonization. Declaration public ICollection<Geometry> GetPolygons() Returns Type Description ICollection<Geometry>"
  },
  "api/NetTopologySuite.Operation.Polygonize.html": {
    "href": "api/NetTopologySuite.Operation.Polygonize.html",
    "title": "Namespace NetTopologySuite.Operation.Polygonize | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Operation.Polygonize Contains classes to implement a polygonization algorithm. This package can be used to create polygons from fully noded linework. Classes EdgeRing Represents a ring of PolygonizeDirectedEdges which form a ring of a polygon. The ring may be either an outer shell or a hole. EdgeRing.EnvelopeAreaComparator Compares EdgeRings based on the area of their envelopes. Smaller envelopes sort before bigger ones. This effectively sorts EdgeRings in order of containment. EdgeRing.EnvelopeComparator Compares EdgeRings based on their envelope, using the standard lexicographic ordering. This ordering is sufficient to make edge ring sorting deterministic. HoleAssigner Assigns hole rings to shell rings during polygonization. Uses spatial indexing to improve performance of shell lookup. PolygonizeDirectedEdge A DirectedEdge of a PolygonizeGraph, which represents an edge of a polygon formed by the graph. May be logically deleted from the graph by setting the marked flag. PolygonizeEdge An edge of a polygonization graph. PolygonizeGraph Represents a planar graph of edges that can be used to compute a polygonization, and implements the algorithms to compute the EdgeRings formed by the graph. The marked flag on DirectedEdges is used to indicate that a directed edge has be logically deleted from the graph. Polygonizer Polygonizes a set of Geometrys which contain linework that represents the edges of a planar graph."
  },
  "api/NetTopologySuite.Operation.Predicate.RectangleContains.html": {
    "href": "api/NetTopologySuite.Operation.Predicate.RectangleContains.html",
    "title": "Class RectangleContains | NetTopologySuite",
    "summary": "Class RectangleContains Optimized implementation of spatial predicate \"contains\" for cases where the first Geometry is a rectangle. As a further optimization, this class can be used directly to test many geometries against a single rectangle. Inheritance object RectangleContains Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Predicate Assembly: NetTopologySuite.dll Syntax public class RectangleContains Constructors | Edit this page View Source RectangleContains(Polygon) Create a new contains computer for two geometries. Declaration public RectangleContains(Polygon rectangle) Parameters Type Name Description Polygon rectangle A rectangular geometry. Methods | Edit this page View Source Contains(Geometry) Declaration public bool Contains(Geometry geom) Parameters Type Name Description Geometry geom Returns Type Description bool | Edit this page View Source Contains(Polygon, Geometry) Declaration public static bool Contains(Polygon rectangle, Geometry b) Parameters Type Name Description Polygon rectangle Geometry b Returns Type Description bool"
  },
  "api/NetTopologySuite.Operation.Predicate.RectangleIntersects.html": {
    "href": "api/NetTopologySuite.Operation.Predicate.RectangleIntersects.html",
    "title": "Class RectangleIntersects | NetTopologySuite",
    "summary": "Class RectangleIntersects I Implementation of the Intersects spatial predicate optimized for the case where one Geometry is a rectangle. Inheritance object RectangleIntersects Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Predicate Assembly: NetTopologySuite.dll Syntax public class RectangleIntersects Remarks This class works for all input geometries, including GeometryCollections. As a further optimization, this class can be used in batch style to test many geometries against a single rectangle. Constructors | Edit this page View Source RectangleIntersects(Polygon) Create a new intersects computer for a rectangle. Declaration public RectangleIntersects(Polygon rectangle) Parameters Type Name Description Polygon rectangle A rectangular polygon. Fields | Edit this page View Source MaximumScanSegmentCount Crossover size at which brute-force intersection scanning is slower than indexed intersection detection. Must be determined empirically. Should err on the safe side by making value smaller rather than larger. Declaration public const int MaximumScanSegmentCount = 200 Field Value Type Description int Methods | Edit this page View Source Intersects(Geometry) Tests whether the given Geometry intersects the query rectangle. Declaration public bool Intersects(Geometry geom) Parameters Type Name Description Geometry geom The Geometry to test (may be of any type) Returns Type Description bool true if an intersection must occur or false if no conclusion about intersection can be made | Edit this page View Source Intersects(Polygon, Geometry) Tests whether a rectangle intersects a given geometry. Declaration public static bool Intersects(Polygon rectangle, Geometry b) Parameters Type Name Description Polygon rectangle A rectangular polygon Geometry b A geometry of any kind Returns Type Description bool true if the geometries intersect."
  },
  "api/NetTopologySuite.Operation.Predicate.SegmentIntersectionTester.html": {
    "href": "api/NetTopologySuite.Operation.Predicate.SegmentIntersectionTester.html",
    "title": "Class SegmentIntersectionTester | NetTopologySuite",
    "summary": "Class SegmentIntersectionTester Tests if any line segments in two sets of CoordinateSequences intersect. Optimized for use when at least one input is of small size. Short-circuited to return as soon an intersection is found. Inheritance object SegmentIntersectionTester Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Predicate Assembly: NetTopologySuite.dll Syntax public class SegmentIntersectionTester Methods | Edit this page View Source HasIntersection(CoordinateSequence, CoordinateSequence) Declaration public bool HasIntersection(CoordinateSequence seq0, CoordinateSequence seq1) Parameters Type Name Description CoordinateSequence seq0 CoordinateSequence seq1 Returns Type Description bool | Edit this page View Source HasIntersectionWithLineStrings(CoordinateSequence, ICollection<Geometry>) Declaration public bool HasIntersectionWithLineStrings(CoordinateSequence seq, ICollection<Geometry> lines) Parameters Type Name Description CoordinateSequence seq ICollection<Geometry> lines Returns Type Description bool"
  },
  "api/NetTopologySuite.Operation.Predicate.html": {
    "href": "api/NetTopologySuite.Operation.Predicate.html",
    "title": "Namespace NetTopologySuite.Operation.Predicate | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Operation.Predicate Classes RectangleContains Optimized implementation of spatial predicate \"contains\" for cases where the first Geometry is a rectangle. As a further optimization, this class can be used directly to test many geometries against a single rectangle. RectangleIntersects I Implementation of the Intersects spatial predicate optimized for the case where one Geometry is a rectangle. SegmentIntersectionTester Tests if any line segments in two sets of CoordinateSequences intersect. Optimized for use when at least one input is of small size. Short-circuited to return as soon an intersection is found."
  },
  "api/NetTopologySuite.Operation.Relate.EdgeEndBuilder.html": {
    "href": "api/NetTopologySuite.Operation.Relate.EdgeEndBuilder.html",
    "title": "Class EdgeEndBuilder | NetTopologySuite",
    "summary": "Class EdgeEndBuilder An EdgeEndBuilder creates EdgeEnds for all the \"split edges\" created by the intersections determined for an Edge. Computes the EdgeEnds which arise from a noded Edge. Inheritance object EdgeEndBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Relate Assembly: NetTopologySuite.dll Syntax public class EdgeEndBuilder Methods | Edit this page View Source ComputeEdgeEnds(Edge, IList<EdgeEnd>) Creates stub edges for all the intersections in this Edge (if any) and inserts them into the graph. Declaration public void ComputeEdgeEnds(Edge edge, IList<EdgeEnd> l) Parameters Type Name Description Edge edge IList<EdgeEnd> l | Edit this page View Source ComputeEdgeEnds(IEnumerable<Edge>) Declaration public IList<EdgeEnd> ComputeEdgeEnds(IEnumerable<Edge> edges) Parameters Type Name Description IEnumerable<Edge> edges Returns Type Description IList<EdgeEnd> | Edit this page View Source CreateEdgeEndForNext(Edge, IList<EdgeEnd>, EdgeIntersection, EdgeIntersection) Create a StubEdge for the edge after the intersection eiCurr. The next intersection is provided in case it is the endpoint for the stub edge. Otherwise, the next point from the parent edge will be the endpoint. eiCurr will always be an EdgeIntersection, but eiNext may be null. Declaration public void CreateEdgeEndForNext(Edge edge, IList<EdgeEnd> l, EdgeIntersection eiCurr, EdgeIntersection eiNext) Parameters Type Name Description Edge edge IList<EdgeEnd> l EdgeIntersection eiCurr EdgeIntersection eiNext | Edit this page View Source CreateEdgeEndForPrev(Edge, IList<EdgeEnd>, EdgeIntersection, EdgeIntersection) Create a EdgeStub for the edge before the intersection eiCurr. The previous intersection is provided in case it is the endpoint for the stub edge. Otherwise, the previous point from the parent edge will be the endpoint. eiCurr will always be an EdgeIntersection, but eiPrev may be null. Declaration public void CreateEdgeEndForPrev(Edge edge, IList<EdgeEnd> l, EdgeIntersection eiCurr, EdgeIntersection eiPrev) Parameters Type Name Description Edge edge IList<EdgeEnd> l EdgeIntersection eiCurr EdgeIntersection eiPrev"
  },
  "api/NetTopologySuite.Operation.Relate.EdgeEndBundle.html": {
    "href": "api/NetTopologySuite.Operation.Relate.EdgeEndBundle.html",
    "title": "Class EdgeEndBundle | NetTopologySuite",
    "summary": "Class EdgeEndBundle A collection of EdgeStubs which obey the following invariant: They originate at the same node and have the same direction. Contains all EdgeEnds which start at the same point and are parallel. Inheritance object EdgeEnd EdgeEndBundle Implements IComparable<EdgeEnd> Inherited Members EdgeEnd.Init(Coordinate, Coordinate) EdgeEnd.Edge EdgeEnd.Label EdgeEnd.Coordinate EdgeEnd.DirectedCoordinate EdgeEnd.Quadrant EdgeEnd.QuadrantEx EdgeEnd.Dx EdgeEnd.Dy EdgeEnd.Node EdgeEnd.CompareTo(EdgeEnd) EdgeEnd.CompareDirection(EdgeEnd) EdgeEnd.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Operation.Relate Assembly: NetTopologySuite.dll Syntax public class EdgeEndBundle : EdgeEnd, IComparable<EdgeEnd> Constructors | Edit this page View Source EdgeEndBundle(IBoundaryNodeRule, EdgeEnd) Declaration public EdgeEndBundle(IBoundaryNodeRule boundaryNodeRule, EdgeEnd e) Parameters Type Name Description IBoundaryNodeRule boundaryNodeRule EdgeEnd e | Edit this page View Source EdgeEndBundle(EdgeEnd) Declaration public EdgeEndBundle(EdgeEnd e) Parameters Type Name Description EdgeEnd e Properties | Edit this page View Source EdgeEnds Declaration public IList<EdgeEnd> EdgeEnds { get; } Property Value Type Description IList<EdgeEnd> Methods | Edit this page View Source ComputeLabel(IBoundaryNodeRule) This computes the overall edge label for the set of edges in this EdgeStubBundle. It essentially merges the ON and side labels for each edge. These labels must be compatible Declaration public override void ComputeLabel(IBoundaryNodeRule boundaryNodeRule) Parameters Type Name Description IBoundaryNodeRule boundaryNodeRule Overrides EdgeEnd.ComputeLabel(IBoundaryNodeRule) | Edit this page View Source GetEnumerator() Declaration public IEnumerator<EdgeEnd> GetEnumerator() Returns Type Description IEnumerator<EdgeEnd> | Edit this page View Source Insert(EdgeEnd) Declaration public void Insert(EdgeEnd e) Parameters Type Name Description EdgeEnd e | Edit this page View Source UpdateIM(IntersectionMatrix) Update the IM with the contribution for the computed label for the EdgeStubs. Declaration public void UpdateIM(IntersectionMatrix im) Parameters Type Name Description IntersectionMatrix im | Edit this page View Source Write(StreamWriter) Declaration public override void Write(StreamWriter outstream) Parameters Type Name Description StreamWriter outstream Overrides EdgeEnd.Write(StreamWriter) Implements IComparable<T>"
  },
  "api/NetTopologySuite.Operation.Relate.EdgeEndBundleStar.html": {
    "href": "api/NetTopologySuite.Operation.Relate.EdgeEndBundleStar.html",
    "title": "Class EdgeEndBundleStar | NetTopologySuite",
    "summary": "Class EdgeEndBundleStar An ordered list of EdgeEndBundles around a RelateNode. They are maintained in CCW order (starting with the positive x-axis) around the node for efficient lookup and topology building. Inheritance object EdgeEndStar EdgeEndBundleStar Inherited Members EdgeEndStar.edgeMap EdgeEndStar.edgeList EdgeEndStar.InsertEdgeEnd(EdgeEnd, EdgeEnd) EdgeEndStar.Coordinate EdgeEndStar.Degree EdgeEndStar.GetEnumerator() EdgeEndStar.Edges EdgeEndStar.GetNextCW(EdgeEnd) EdgeEndStar.ComputeLabelling(GeometryGraph[]) EdgeEndStar.IsAreaLabelsConsistent(GeometryGraph) EdgeEndStar.PropagateSideLabels(int) EdgeEndStar.FindIndex(EdgeEnd) EdgeEndStar.Write(StreamWriter) EdgeEndStar.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Operation.Relate Assembly: NetTopologySuite.dll Syntax public class EdgeEndBundleStar : EdgeEndStar Methods | Edit this page View Source Insert(EdgeEnd) Insert a EdgeEnd in order in the list. If there is an existing EdgeStubBundle which is parallel, the EdgeEnd is added to the bundle. Otherwise, a new EdgeEndBundle is created to contain the EdgeEnd. Declaration public override void Insert(EdgeEnd e) Parameters Type Name Description EdgeEnd e Overrides EdgeEndStar.Insert(EdgeEnd) | Edit this page View Source UpdateIM(IntersectionMatrix) Update the IM with the contribution for the EdgeStubs around the node. Declaration public void UpdateIM(IntersectionMatrix im) Parameters Type Name Description IntersectionMatrix im"
  },
  "api/NetTopologySuite.Operation.Relate.RelateComputer.html": {
    "href": "api/NetTopologySuite.Operation.Relate.RelateComputer.html",
    "title": "Class RelateComputer | NetTopologySuite",
    "summary": "Class RelateComputer Computes the topological relationship between two Geometries. RelateComputer does not need to build a complete graph structure to compute the IntersectionMatrix. The relationship between the geometries can be computed by simply examining the labelling of edges incident on each node. RelateComputer does not currently support arbitrary GeometryCollections. This is because GeometryCollections can contain overlapping Polygons. In order to correct compute relate on overlapping Polygons, they would first need to be noded and merged (if not explicitly, at least implicitly). Inheritance object RelateComputer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Relate Assembly: NetTopologySuite.dll Syntax public class RelateComputer Constructors | Edit this page View Source RelateComputer(ElevationModel, GeometryGraph[]) Declaration public RelateComputer(ElevationModel em, GeometryGraph[] arg) Parameters Type Name Description ElevationModel em GeometryGraph[] arg | Edit this page View Source RelateComputer(GeometryGraph[]) Declaration public RelateComputer(GeometryGraph[] arg) Parameters Type Name Description GeometryGraph[] arg Methods | Edit this page View Source ComputeIM() Declaration public IntersectionMatrix ComputeIM() Returns Type Description IntersectionMatrix"
  },
  "api/NetTopologySuite.Operation.Relate.RelateNode.html": {
    "href": "api/NetTopologySuite.Operation.Relate.RelateNode.html",
    "title": "Class RelateNode | NetTopologySuite",
    "summary": "Class RelateNode A RelateNode is a Node that maintains a list of EdgeStubs for the edges that are incident on it. Inheritance object GraphComponent Node RelateNode Inherited Members Node.Coordinate Node.Edges Node.IsIncidentEdgeInResult() Node.IsIsolated Node.Add(EdgeEnd) Node.MergeLabel(Node) Node.MergeLabel(Label) Node.SetLabel(int, Location) Node.SetLabelBoundary(int) Node.ComputeMergedLocation(Label, int) Node.Write(TextWriter) Node.ToString() GraphComponent.Label GraphComponent.InResult GraphComponent.IsInResult GraphComponent.Covered GraphComponent.IsCovered GraphComponent.IsCoveredSet GraphComponent.Visited GraphComponent.IsVisited GraphComponent.UpdateIM(IntersectionMatrix) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Operation.Relate Assembly: NetTopologySuite.dll Syntax public class RelateNode : Node Constructors | Edit this page View Source RelateNode(Coordinate, EdgeEndStar) Declaration public RelateNode(Coordinate coord, EdgeEndStar edges) Parameters Type Name Description Coordinate coord EdgeEndStar edges Methods | Edit this page View Source ComputeIM(IntersectionMatrix) Update the IM with the contribution for this component. A component only contributes if it has a labelling for both parent geometries. Declaration public override void ComputeIM(IntersectionMatrix im) Parameters Type Name Description IntersectionMatrix im Overrides Node.ComputeIM(IntersectionMatrix) | Edit this page View Source UpdateIMFromEdges(IntersectionMatrix) Update the IM with the contribution for the EdgeEnds incident on this node. Declaration public void UpdateIMFromEdges(IntersectionMatrix im) Parameters Type Name Description IntersectionMatrix im"
  },
  "api/NetTopologySuite.Operation.Relate.RelateNodeFactory.html": {
    "href": "api/NetTopologySuite.Operation.Relate.RelateNodeFactory.html",
    "title": "Class RelateNodeFactory | NetTopologySuite",
    "summary": "Class RelateNodeFactory Used by the NodeMap in a RelateNodeGraph to create RelateNodes. Inheritance object NodeFactory RelateNodeFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Relate Assembly: NetTopologySuite.dll Syntax public class RelateNodeFactory : NodeFactory Methods | Edit this page View Source CreateNode(Coordinate) Declaration public override Node CreateNode(Coordinate coord) Parameters Type Name Description Coordinate coord Returns Type Description Node Overrides NodeFactory.CreateNode(Coordinate)"
  },
  "api/NetTopologySuite.Operation.Relate.RelateNodeGraph.html": {
    "href": "api/NetTopologySuite.Operation.Relate.RelateNodeGraph.html",
    "title": "Class RelateNodeGraph | NetTopologySuite",
    "summary": "Class RelateNodeGraph Implements the simple graph of Nodes and EdgeEnd which is all that is required to determine topological relationships between Geometries. Also supports building a topological graph of a single Geometry, to allow verification of valid topology. It is not necessary to create a fully linked PlanarGraph to determine relationships, since it is sufficient to know how the Geometries interact locally around the nodes. In fact, this is not even feasible, since it is not possible to compute exact intersection points, and hence the topology around those nodes cannot be computed robustly. The only Nodes that are created are for improper intersections; that is, nodes which occur at existing vertices of the Geometries. Proper intersections (e.g. ones which occur between the interior of line segments) have their topology determined implicitly, without creating a Node object to represent them. Inheritance object RelateNodeGraph Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Relate Assembly: NetTopologySuite.dll Syntax public class RelateNodeGraph Methods | Edit this page View Source Build(GeometryGraph) Declaration public void Build(GeometryGraph geomGraph) Parameters Type Name Description GeometryGraph geomGraph | Edit this page View Source ComputeIntersectionNodes(GeometryGraph, int) Insert nodes for all intersections on the edges of a Geometry. Label the created nodes the same as the edge label if they do not already have a label. This allows nodes created by either self-intersections or mutual intersections to be labelled. Endpoint nodes will already be labelled from when they were inserted. Precondition: edge intersections have been computed. Declaration public void ComputeIntersectionNodes(GeometryGraph geomGraph, int argIndex) Parameters Type Name Description GeometryGraph geomGraph int argIndex | Edit this page View Source CopyNodesAndLabels(GeometryGraph, int) Copy all nodes from an arg point into this graph. The node label in the arg point overrides any previously computed label for that argIndex. (E.g. a node may be an intersection node with a computed label of Boundary, but in the original arg Geometry it is actually in the interior due to the Boundary Determination Rule). Declaration public void CopyNodesAndLabels(GeometryGraph geomGraph, int argIndex) Parameters Type Name Description GeometryGraph geomGraph int argIndex | Edit this page View Source GetNodeEnumerator() Declaration public IEnumerator<Node> GetNodeEnumerator() Returns Type Description IEnumerator<Node> | Edit this page View Source InsertEdgeEnds(IList<EdgeEnd>) Declaration public void InsertEdgeEnds(IList<EdgeEnd> ee) Parameters Type Name Description IList<EdgeEnd> ee"
  },
  "api/NetTopologySuite.Operation.Relate.RelateOp.html": {
    "href": "api/NetTopologySuite.Operation.Relate.RelateOp.html",
    "title": "Class RelateOp | NetTopologySuite",
    "summary": "Class RelateOp Implements the SFS relate() generalized spatial predicate on two Geometrys. The class supports specifying a custom IBoundaryNodeRule to be used during the relate computation. Inheritance object GeometryGraphOperation RelateOp Inherited Members GeometryGraphOperation.lineIntersector GeometryGraphOperation.resultPrecisionModel GeometryGraphOperation.arg GeometryGraphOperation.GetArgGeometry(int) GeometryGraphOperation.ComputationPrecision object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Relate Assembly: NetTopologySuite.dll Syntax public class RelateOp : GeometryGraphOperation Remarks If named spatial predicates are used on the result IntersectionMatrix of the RelateOp, the result may or not be affected by the choice of BoundaryNodeRule , depending on the exact nature of the pattern. For instance, IsIntersects() is insensitive to the choice of BoundaryNodeRule , whereas IsTouches(Dimension, Dimension) is affected by the rule chosen. Note: custom Boundary Node Rules do not (currently) affect the results of other Geometry methods (such as Boundary. The results of these methods may not be consistent with the relationship computed by a custom Boundary Node Rule. Constructors | Edit this page View Source RelateOp(Geometry, Geometry) Creates a new Relate operation, using the default (OGC SFS) Boundary Node Rule. Declaration public RelateOp(Geometry g0, Geometry g1) Parameters Type Name Description Geometry g0 a Geometry to relate Geometry g1 another Geometry to relate | Edit this page View Source RelateOp(Geometry, Geometry, IBoundaryNodeRule) Creates a new Relate operation, using the default (OGC SFS) Boundary Node Rule. Declaration public RelateOp(Geometry g0, Geometry g1, IBoundaryNodeRule boundaryNodeRule) Parameters Type Name Description Geometry g0 a Geometry to relate Geometry g1 another Geometry to relate IBoundaryNodeRule boundaryNodeRule The Boundary Node Rule to use Properties | Edit this page View Source IntersectionMatrix Gets the IntersectionMatrix for the spatial relationship between the input geometries. Declaration public IntersectionMatrix IntersectionMatrix { get; } Property Value Type Description IntersectionMatrix Methods | Edit this page View Source Relate(Geometry, Geometry) Computes the IntersectionMatrix for the spatial relationship between two Geometrys, using the default (OGC SFS) Boundary Node Rule Declaration public static IntersectionMatrix Relate(Geometry a, Geometry b) Parameters Type Name Description Geometry a A geometry to test Geometry b A geometry to test Returns Type Description IntersectionMatrix The IntersectionMatrix for the spatial relationship between the geometries | Edit this page View Source Relate(Geometry, Geometry, IBoundaryNodeRule) Computes the IntersectionMatrix for the spatial relationship between two Geometrys, using the specified Boundary Node Rule Declaration public static IntersectionMatrix Relate(Geometry a, Geometry b, IBoundaryNodeRule boundaryNodeRule) Parameters Type Name Description Geometry a A geometry to test Geometry b A geometry to test IBoundaryNodeRule boundaryNodeRule The Boundary Node Rule to use Returns Type Description IntersectionMatrix The IntersectionMatrix for the spatial relationship between the geometries"
  },
  "api/NetTopologySuite.Operation.Relate.html": {
    "href": "api/NetTopologySuite.Operation.Relate.html",
    "title": "Namespace NetTopologySuite.Operation.Relate | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Operation.Relate Contains classes to implement the computation of the spatial relationships of Geometrys. The relate algorithm computes the IntersectionMatrix describing the relationship of two Geometrys. The algorithm for computing relate uses the intersection operations supported by topology graphs. Although the relate result depends on the resultant graph formed by the computed intersections, there is no need to explicitly compute the entire graph. It is sufficient to compute the local structure of the graph at each intersection node. The algorithm to compute relate has the following steps: Build topology graphs of the two input geometries. For each geometry all self-intersection nodes are computed and added to the graph. Compute nodes for all intersections between edges and nodes of the graphs. Compute the labeling for the computed nodes by merging the labels from the input graphs. Compute the labeling for isolated components of the graph (see below) Compute the IntersectionMatrix from the labels on the nodes and edges. Labeling isolated components Isolated components are components (edges or nodes) of an input Geometry which do not contain any intersections with the other input Geometry. The topological relationship of these components to the other input Geometry must be computed in order to determine the complete labeling of the component. This can be done by testing whether the component lies in the interior or exterior of the other Geometry. If the other Geometry is 1-dimensional, the isolated component must lie in the exterior (since otherwise it would have an intersection with an edge of the Geometry). If the other Geometry is 2-dimensional, a Point-In-Polygon test can be used to determine whether the isolated component is in the interior or exterior. Package Specification Java Topology Suite Technical Specifications OpenGIS Simple Features Specification for SQL Classes EdgeEndBuilder An EdgeEndBuilder creates EdgeEnds for all the \"split edges\" created by the intersections determined for an Edge. Computes the EdgeEnds which arise from a noded Edge. EdgeEndBundle A collection of EdgeStubs which obey the following invariant: They originate at the same node and have the same direction. Contains all EdgeEnds which start at the same point and are parallel. EdgeEndBundleStar An ordered list of EdgeEndBundles around a RelateNode. They are maintained in CCW order (starting with the positive x-axis) around the node for efficient lookup and topology building. RelateComputer Computes the topological relationship between two Geometries. RelateComputer does not need to build a complete graph structure to compute the IntersectionMatrix. The relationship between the geometries can be computed by simply examining the labelling of edges incident on each node. RelateComputer does not currently support arbitrary GeometryCollections. This is because GeometryCollections can contain overlapping Polygons. In order to correct compute relate on overlapping Polygons, they would first need to be noded and merged (if not explicitly, at least implicitly). RelateNode A RelateNode is a Node that maintains a list of EdgeStubs for the edges that are incident on it. RelateNodeFactory Used by the NodeMap in a RelateNodeGraph to create RelateNodes. RelateNodeGraph Implements the simple graph of Nodes and EdgeEnd which is all that is required to determine topological relationships between Geometries. Also supports building a topological graph of a single Geometry, to allow verification of valid topology. It is not necessary to create a fully linked PlanarGraph to determine relationships, since it is sufficient to know how the Geometries interact locally around the nodes. In fact, this is not even feasible, since it is not possible to compute exact intersection points, and hence the topology around those nodes cannot be computed robustly. The only Nodes that are created are for improper intersections; that is, nodes which occur at existing vertices of the Geometries. Proper intersections (e.g. ones which occur between the interior of line segments) have their topology determined implicitly, without creating a Node object to represent them. RelateOp Implements the SFS relate() generalized spatial predicate on two Geometrys. The class supports specifying a custom IBoundaryNodeRule to be used during the relate computation."
  },
  "api/NetTopologySuite.Operation.RelateNG.IntersectionMatrixPattern.html": {
    "href": "api/NetTopologySuite.Operation.RelateNG.IntersectionMatrixPattern.html",
    "title": "Class IntersectionMatrixPattern | NetTopologySuite",
    "summary": "Class IntersectionMatrixPattern String constants for DE-9IM matrix patterns for topological relationships. These can be used with Evaluate(Geometry, string) and Relate(Geometry, Geometry, string). DE - 9IM Pattern Matching Matrix patterns are specified as a 9 - character string containing the pattern symbols for the DE-9IM 3x3 matrix entries, listed row - wise. The pattern symbols are: Code Description 0 topological interaction has dimension 0 1 topological interaction has dimension 1 2 topological interaction has dimension 2 F no topological interaction T topological interaction of any dimension * any topological interaction is allowed, including none Inheritance object IntersectionMatrixPattern Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.RelateNG Assembly: NetTopologySuite.dll Syntax public static class IntersectionMatrixPattern Fields | Edit this page View Source Adjacent A DE-9IM pattern to detect whether two polygonal geometries are adjacent along an edge, but do not overlap. Declaration public const string Adjacent = \"F***1****\" Field Value Type Description string | Edit this page View Source ContainsProperly A DE-9IM pattern to detect a geometry which properly contains another geometry (i.e. which lies entirely in the interior of the first geometry). Declaration public const string ContainsProperly = \"T**FF*FF*\" Field Value Type Description string | Edit this page View Source InteriorIntersects A DE-9IM pattern to detect if two geometries intersect in their interiors. This can be used to determine if a polygonal coverage contains any overlaps (although not whether they are correctly noded). Declaration public const string InteriorIntersects = \"T********\" Field Value Type Description string"
  },
  "api/NetTopologySuite.Operation.RelateNG.RelateNG.html": {
    "href": "api/NetTopologySuite.Operation.RelateNG.RelateNG.html",
    "title": "Class RelateNG | NetTopologySuite",
    "summary": "Class RelateNG Computes the value of topological predicates between two geometries based on the Dimensionally - Extended 9-Intersection Model(DE-9IM). Standard and custom topological predicates are provided by RelatePredicate. The RelateNG algorithm has the following capabilities: Efficient short-circuited evaluation of topological predicates (including matching custom DE-9IM matrix patterns) Optimized repeated evaluation of predicates against a single geometry via cached spatial indexes (AKA \"prepared mode\") Robust computation (only point-local topology is required, so invalid geometry topology does not cause failures) GeometryCollection inputs containing mixed types and overlapping polygons are supported, using union semantics. Zero - length LineStrings are treated as being topologically identical to Points. Support for IBoundaryNodeRules. See IntersectionMatrixPattern for a description of DE - 9IM patterns. If not specified, the standard BoundaryNodeRules.Mod2BoundaryNodeRule is used. RelateNG operates in 2D only; it ignores any Z ordinates. This implementation replaces RelateOp and IPreparedGeometry. FUTURE WORK Support for a distance tolerance to provide \"approximate\" predicate evaluation Inheritance object RelateNG Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.RelateNG Assembly: NetTopologySuite.dll Syntax public class RelateNG Methods | Edit this page View Source Evaluate(Geometry) Computes the DE-9IM matrix for the topological relationship to a geometry. Declaration public IntersectionMatrix Evaluate(Geometry b) Parameters Type Name Description Geometry b The B geometry Returns Type Description IntersectionMatrix the DE-9IM matrix | Edit this page View Source Evaluate(Geometry, TopologyPredicate) Tests whether the topological relationship to a geometry satisfies a topology predicate. Declaration public bool Evaluate(Geometry b, TopologyPredicate predicate) Parameters Type Name Description Geometry b The B geometry TopologyPredicate predicate The topological predicate Returns Type Description bool true if the predicate is satisfied | Edit this page View Source Evaluate(Geometry, string) Tests whether the topological relationship to a geometry matches a DE-9IM matrix pattern. Declaration public bool Evaluate(Geometry b, string imPattern) Parameters Type Name Description Geometry b The B geometry string imPattern Returns Type Description bool true if the geometry's topological relationship matches the DE-9IM pattern See Also IntersectionMatrixPattern | Edit this page View Source Prepare(Geometry) Creates a prepared RelateNG instance to optimize the evaluation of relationships against a single geometry. Declaration public static RelateNG Prepare(Geometry a) Parameters Type Name Description Geometry a The A input geometry Returns Type Description RelateNG A prepared instance | Edit this page View Source Prepare(Geometry, IBoundaryNodeRule) Creates a prepared RelateNG instance to optimize the computation of predicates against a single geometry, using a given IBoundaryNodeRule. Declaration public static RelateNG Prepare(Geometry a, IBoundaryNodeRule bnRule) Parameters Type Name Description Geometry a The A input geometry IBoundaryNodeRule bnRule The Boundary Node Rule to use Returns Type Description RelateNG A prepared instance | Edit this page View Source Relate(Geometry, Geometry) Computes the DE-9IM matrix for the topological relationship between two geometries. Declaration public static IntersectionMatrix Relate(Geometry a, Geometry b) Parameters Type Name Description Geometry a The A input geometry Geometry b The B input geometry Returns Type Description IntersectionMatrix The DE-9IM matrix for the topological relationship | Edit this page View Source Relate(Geometry, Geometry, IBoundaryNodeRule) Computes the DE-9IM matrix for the topological relationship between two geometries. Declaration public static IntersectionMatrix Relate(Geometry a, Geometry b, IBoundaryNodeRule bnRule) Parameters Type Name Description Geometry a The A input geometry Geometry b The B input geometry IBoundaryNodeRule bnRule The Boundary Node Rule to use Returns Type Description IntersectionMatrix The DE-9IM matrix for the topological relationship | Edit this page View Source Relate(Geometry, Geometry, TopologyPredicate) Tests whether the topological relationship between two geometries satisfies a topological predicate. Declaration public static bool Relate(Geometry a, Geometry b, TopologyPredicate pred) Parameters Type Name Description Geometry a The A input geometry Geometry b The B input geometry TopologyPredicate pred The topological predicate Returns Type Description bool true if the topological relationship is satisfied | Edit this page View Source Relate(Geometry, Geometry, TopologyPredicate, IBoundaryNodeRule) Tests whether the topological relationship between two geometries satisfies a topological predicate, using a given IBoundaryNodeRule. Declaration public static bool Relate(Geometry a, Geometry b, TopologyPredicate pred, IBoundaryNodeRule bnRule) Parameters Type Name Description Geometry a The A input geometry Geometry b The B input geometry TopologyPredicate pred The topological predicate IBoundaryNodeRule bnRule The Boundary Node Rule to use Returns Type Description bool true if the topological relationship is satisfied | Edit this page View Source Relate(Geometry, Geometry, string) Tests whether the topological relationship to a geometry matches a DE-9IM matrix pattern. Declaration public static bool Relate(Geometry a, Geometry b, string imPattern) Parameters Type Name Description Geometry a The A input geometry Geometry b The B input geometry string imPattern The DE-9IM pattern to match Returns Type Description bool true if the geometries relationship matches the DE-9IM pattern See Also IntersectionMatrixPattern See Also RelateOp IPreparedGeometry"
  },
  "api/NetTopologySuite.Operation.RelateNG.RelatePredicate.html": {
    "href": "api/NetTopologySuite.Operation.RelateNG.RelatePredicate.html",
    "title": "Class RelatePredicate | NetTopologySuite",
    "summary": "Class RelatePredicate Creates predicate instances for evaluating OGC-standard named topological relationships. Predicates can be evaluated for geometries using RelateNG. Inheritance object RelatePredicate Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.RelateNG Assembly: NetTopologySuite.dll Syntax public static class RelatePredicate Methods | Edit this page View Source Contains() Creates a predicate to determine whether a geometry contains another geometry. The Contains predicate has the following equivalent definitions: Every point of the other geometry is a point of this geometry, and the interiors of the two geometries have at least one point in common. The DE-9IM Intersection Matrix for the two geometries matches the pattern [T*****FF*] within(B, A) = true ( contains is the converse of Within()) An implication of the definition is that \"Geometries do not contain their boundary\". In other words, if a geometry A is a subset of the points in the boundary of a geometry B, B.contains(A) = false. (As a concrete example, take A to be a LineString which lies in the boundary of a Polygon B.) For a predicate with similar behavior but avoiding this subtle limitation, see Covers(). Declaration public static TopologyPredicate Contains() Returns Type Description TopologyPredicate The predicate instance See Also Within() | Edit this page View Source CoveredBy() Creates a predicate to determine whether a geometry is covered by another geometry. The CoveredBy predicate has the following equivalent definitions: Every point of this geometry is a point of the other geometry. The DE-9IM Intersection Matrix for the two geometries matches at least one of the following patterns: [T*F**F***] [*TF**F***] [**FT*F***] [**F*TF***] Covers(B, A) = true (CoveredBy is the converse of Covers()) If either geometry is empty, the value of this predicate is false. This predicate is similar to {@link #within}, but is more inclusive (i.e. returns true for more cases). Declaration public static TopologyPredicate CoveredBy() Returns Type Description TopologyPredicate The predicate instance See Also Covers() | Edit this page View Source Covers() Creates a predicate to determine whether a geometry covers another geometry. The Covers predicate has the following equivalent definitions: Every point of the other geometry is a point of this geometry. The DE-9IM Intersection Matrix for the two geometries matches at least one of the following patterns: [T*****FF*] [*T****FF*] [***T**FF*] [****T*FF*] CoveredBy(b, a) = true (Covers is the converse of CoveredBy()) If either geometry is empty, the value of this predicate is false. This predicate is similar to Contains(), but is more inclusive (i.e. returns true for more cases). In particular, unlike Contains it does not distinguish between points in the boundary and in the interior of geometries. For most cases, Covers should be used in preference to Contains. As an added benefit, Covers is more amenable to optimization, and hence should be more performant. Declaration public static TopologyPredicate Covers() Returns Type Description TopologyPredicate The predicate instance See Also CoveredBy() | Edit this page View Source Crosses() Creates a predicate to determine whether a geometry crosses another geometry. The Crosses predicate has the following equivalent definitions: The geometries have some but not all interior points in common. The DE-9IM Intersection Matrix for the two geometries matches one of the following patterns: [TT*****] (for P/L, P/A, and L/A cases) [TT] (for L/P, A/P, and A/L cases) [0*****] (for L/L cases) For the A/A and P/P cases this predicate returns false. The SFS defined this predicate only for P/L, P/A, L/L, and L/A cases. To make the relation symmetric NTS extends the definition to apply to L/P, A/P and A/L cases as well. Declaration public static TopologyPredicate Crosses() Returns Type Description TopologyPredicate The crosses predicate | Edit this page View Source Disjoint() Creates a predicate to determine whether two geometries are disjoint. The Disjoint predicate has the following equivalent definitions: The two geometries have no point in common The DE-9IM Intersection Matrix for the two geometries matches [FF*FF****] Intersects() = false (Disjoint is the inverse of Intersects) Declaration public static TopologyPredicate Disjoint() Returns Type Description TopologyPredicate The predicate instance See Also Intersects() | Edit this page View Source EqualsTopologically() Creates a predicate to determine whether two geometries are topologically equal. The Equals predicate has the following equivalent definitions: The two geometries have at least one point in common, and no point of either geometry lies in the exterior of the other geometry. The DE-9IM Intersection Matrix for the two geometries matches the pattern T*F**FFF* Declaration public static TopologyPredicate EqualsTopologically() Returns Type Description TopologyPredicate The predicate instance | Edit this page View Source Intersects() Creates a predicate to determine whether two geometries intersect. The Intersects predicate has the following equivalent definitions: The two geometries have at least one point in common The DE-9IM Intersection Matrix for the two geometries matches at least one of the patterns [T********] [*T*******] [***T*****] [****T****] Disjoint() = false (Intersects is the inverse of Disjoint) Declaration public static TopologyPredicate Intersects() Returns Type Description TopologyPredicate The predicate instance See Also Disjoint() | Edit this page View Source Matches(string) Creates a predicate that matches a DE-9IM matrix pattern. Declaration public static TopologyPredicate Matches(string imPattern) Parameters Type Name Description string imPattern The pattern to match Returns Type Description TopologyPredicate A predicate that matches the pattern See Also IntersectionMatrixPattern | Edit this page View Source Overlaps() Creates a predicate to determine whether a geometry overlaps another geometry. The Overlaps predicate has the following equivalent definitions: The geometries have at least one point each not shared by the other (or equivalently neither covers the other), they have the same dimension, and the intersection of the interiors of the two geometries has the same dimension as the geometries themselves. The DE-9IM Intersection Matrix for the two geometries matches [T*T***T**] (for P/P and A/A cases) or [1*T***T**] (for L/L cases) If the geometries are of different dimension this predicate returns false. This predicate is symmetric. Declaration public static TopologyPredicate Overlaps() Returns Type Description TopologyPredicate The predicate instance | Edit this page View Source Touches() Creates a predicate to determine whether a geometry touches another geometry. The Touches predicate has the following equivalent definitions: The geometries have at least one point in common, but their interiors do not intersect. The DE-9IM Intersection Matrix for the two geometries matches at least one of the following patterns [FT*******] [F**T*****] [F***T****] If both geometries have dimension 0, the predicate returns false, since points have only interiors. This predicate is symmetric. Declaration public static TopologyPredicate Touches() Returns Type Description TopologyPredicate The predicate instance | Edit this page View Source Within() Creates a predicate to determine whether a geometry is within another geometry. The Within predicate has the following equivalent definitions: Every point of this geometry is a point of the other geometry, and the interiors of the two geometries have at least one point in common. The DE-9IM Intersection Matrix for the two geometries matches [T*F**F***] contains(B, A) = true (Within is the converse of Contains()) An implication of the definition is that \"The boundary of a Geometry is not within the Geometry\". In other words, if a geometry A is a subset of the points in the boundary of a geometry B, within(B, A) = false (As a concrete example, take A to be a LineString which lies in the boundary of a Polygon B.) For a predicate with similar behavior but avoiding this subtle limitation, see CoveredBy(). Declaration public static TopologyPredicate Within() Returns Type Description TopologyPredicate The predicate instance See Also Contains() CoveredBy()"
  },
  "api/NetTopologySuite.Operation.RelateNG.TopologyPredicate.html": {
    "href": "api/NetTopologySuite.Operation.RelateNG.TopologyPredicate.html",
    "title": "Class TopologyPredicate | NetTopologySuite",
    "summary": "Class TopologyPredicate The API for strategy classes implementing spatial predicates based on the DE-9IM topology model. Predicate values for specific geometry pairs can be evaluated by RelateNG. Inheritance object TopologyPredicate Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.RelateNG Assembly: NetTopologySuite.dll Syntax public abstract class TopologyPredicate Constructors | Edit this page View Source TopologyPredicate(string) Creates an instance of this class Declaration protected TopologyPredicate(string name) Parameters Type Name Description string name The name of the predicate Properties | Edit this page View Source IsKnown Tests if the predicate value is known. Declaration public abstract bool IsKnown { get; } Property Value Type Description bool | Edit this page View Source Name Gets the name of the predicate Declaration public string Name { get; } Property Value Type Description string | Edit this page View Source Value Gets the current value of the predicate result. The value is only valid if IsKnown is true. Declaration public abstract bool Value { get; } Property Value Type Description bool Methods | Edit this page View Source Finish() Indicates that the value of the predicate can be finalized based on its current state. Declaration public abstract void Finish() | Edit this page View Source Init(Dimension, Dimension) Initializes the predicate for a specific geometric case. This may allow the predicate result to become known if it can be inferred from the dimensions. Declaration public virtual void Init(Dimension dimA, Dimension dimB) Parameters Type Name Description Dimension dimA The dimension of geometry A Dimension dimB The dimension of geometry B See Also Dimension | Edit this page View Source Init(Envelope, Envelope) Initializes the predicate for a specific geometric case. This may allow the predicate result to become known if it can be inferred from the envelopes. Declaration public virtual void Init(Envelope envA, Envelope envB) Parameters Type Name Description Envelope envA The envelope of geometry A Envelope envB The envelope of geometry B | Edit this page View Source RequireCovers(bool) Reports whether this predicate requires that the source cover the target. This is the case if IM[Ext(Src), Int(Tgt)] = F and IM[Ext(Src), Bdy(Tgt)] = F If true, this allows a fast result if the source envelope does not cover the target envelope. Declaration public virtual bool RequireCovers(bool isSourceA) Parameters Type Name Description bool isSourceA A flag indicating the source input geometry Returns Type Description bool true if the predicate requires checking whether the source covers the target | Edit this page View Source RequireExteriorCheck(bool) Reports whether this predicate requires checking if the source input intersects the Exterior of the target input. This is the case if: IM[Int(Src), Ext(Tgt)] >= 0 or IM[Bdy(Src), Ext(Tgt)] >= 0 If false, this may permit a faster result in some geometric situations. Declaration public virtual bool RequireExteriorCheck(bool isSourceA) Parameters Type Name Description bool isSourceA A flag indicating the source input geometry Returns Type Description bool true if the predicate requires checking whether the source intersects the target exterior | Edit this page View Source RequireInteraction() Reports whether this predicate requires interaction between the input geometries. This is the case if IM[I, I] >= 0 or IM[I, B] >= 0 or IM[B, I] >= 0 or IM[B, B] >= 0 This allows a fast result if the envelopes of the geometries are disjoint. Declaration public virtual bool RequireInteraction() Returns Type Description bool true if the geometries must interact | Edit this page View Source RequireSelfNoding() Reports whether this predicate requires self-noding for geometries which contain crossing edges (for example, LineStrings, or GeometryCollections containing lines or polygons which may self-intersect). Self-noding ensures that intersections are computed consistently in cases which contain self-crossings and mutual crossings. Most predicates require this, but it can be avoided for simple intersection detection (such as in Intersects() and Disjoint(). Avoiding self-noding improves performance for polygonal inputs. Declaration public virtual bool RequireSelfNoding() Returns Type Description bool | Edit this page View Source UpdateDimension(Location, Location, Dimension) Updates the entry in the DE-9IM intersection matrix for given {@link Location}s in the input geometries. If this method is called with a {@link Dimension} value which is less than the current value for the matrix entry, the implementing class should avoid changing the entry if this would cause information loss. Declaration public abstract void UpdateDimension(Location locA, Location locB, Dimension dimension) Parameters Type Name Description Location locA The location on the A axis of the matrix Location locB The location on the B axis of the matrix Dimension dimension The dimension value for the entry See Also Location Dimension"
  },
  "api/NetTopologySuite.Operation.RelateNG.TopologyPredicateTracer.html": {
    "href": "api/NetTopologySuite.Operation.RelateNG.TopologyPredicateTracer.html",
    "title": "Class TopologyPredicateTracer | NetTopologySuite",
    "summary": "Class TopologyPredicateTracer Traces the evaluation of a TopologyPredicate. Inheritance object TopologyPredicateTracer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.RelateNG Assembly: NetTopologySuite.dll Syntax public static class TopologyPredicateTracer Methods | Edit this page View Source Trace(TopologyPredicate) Creates a new predicate tracing the evaluation of a given predicate. Declaration public static TopologyPredicate Trace(TopologyPredicate pred) Parameters Type Name Description TopologyPredicate pred The predicate to trace Returns Type Description TopologyPredicate the traceable predicate | Edit this page View Source Trace(TopologyPredicate, TextWriter) Creates a new predicate tracing the evaluation of a given predicate. Declaration public static TopologyPredicate Trace(TopologyPredicate pred, TextWriter tw) Parameters Type Name Description TopologyPredicate pred The predicate to trace TextWriter tw A text writer Returns Type Description TopologyPredicate the traceable predicate"
  },
  "api/NetTopologySuite.Operation.RelateNG.html": {
    "href": "api/NetTopologySuite.Operation.RelateNG.html",
    "title": "Namespace NetTopologySuite.Operation.RelateNG | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Operation.RelateNG Provides classes to implement the RelateNG algorithm computes topological relationships of Geometrys. Topology is evaluated based on the Dimensionally-Extended 9-Intersection Model (DE-9IM). The RelateNG class supports computing the value of boolean topological predicates Standard OGC named predicates are provided by the RelatePredicate functions. Custom relationships can be specified via testing against DE-9IM matrix patterns (see IntersectionMatrixPattern for examples). The full DE-9IM IntersectionMatrix can also be computed. The algorithm has the following capabilities: Efficient short-circuited evaluation of topological predicates (including matching custom DE-9IM patterns) Optimized repeated evaluation of predicates against a single geometry via cached spatial indexes (AKA \"prepared mode\") Robust computation (since only point-local topology is required, so that invalid geometry topology cannot cause failures) Support for mixed-type and overlapping {@link GeometryCollection} inputs (using union semantics) Support for IBoundaryNodeRule RelateNG operates in 2D only; it ignores any Z ordinates. Optimized Short-Circuited Evaluation The RelateNG algorithm uses strategies to optimize the evaluation of topological predicates, including matching DE-9IM matrix patterns. These include fast tests of dimensions and envelopes, and short-circuited evaluation once the predicate value is known (either satisfied or failed) based on the value of matrix entries. Named predicates used explicit strategy code. DE-9IM matrix pattern matching are short-circuited where possible based on analysis of the pattern matrix entries. Spatial indexes are used to optimize topological computations (such as locating points in geometry elements, and analyzing the topological relationship between geometry edges). Execution Modes RelateNG provides two execution modes for evaluating predicates: Single-shot mode evaluates a predicate for a single case of two geometries. It is provided by the RelateNG static functions which take two input geometries. Prepared mode optimizes repeated evaluation of predicates against a fixed geometry. It is used by creating an instance of RelateNG on the required geometry with the Prepare functions, and then using the Evaluate methods. It provides much faster performance for repeated operations against a single geometry. Robustness RelateNG provides robust evaluation of topological relationships, up to the precision of double-precision computation. It computes topological relationships in the locality of discrete points, without constructing a full topology graph of the inputs. This means that invalid input geometries or numerical round-off do not cause exceptions (although they may return incorrect answers). However, it is necessary to node some inputs together (in particular, linear elements) in order to provide consistent evaluation of the topological structure. GeometryCollection Handling GeometryCollections may contain geometries of different dimensions, nested to any level. The element geometries may overlap in any combination. The OGC specification did not provide a definition for the topology of GeometryCollections, or how they behave under the DE-9IM model. RelateNG defines the topology for arbitrary collections of geometries using \"union semantics\". This is specified as: GeometryCollections are evaluated as if they were replaced by the topological union of their elements. The topological location at a point is equal to its location in the geometry of highest dimension which contains it. For example, a point located in the interior of a Polygon and the boundary of a LineString has location Interior. Zero-length LineString Handling Zero-length LineStrings are handled as topologically identical to a Point at the same coordinate. Package Specification OpenGIS Simple Features Specification for SQL Classes IntersectionMatrixPattern String constants for DE-9IM matrix patterns for topological relationships. These can be used with Evaluate(Geometry, string) and Relate(Geometry, Geometry, string). DE - 9IM Pattern Matching Matrix patterns are specified as a 9 - character string containing the pattern symbols for the DE-9IM 3x3 matrix entries, listed row - wise. The pattern symbols are: Code Description 0 topological interaction has dimension 0 1 topological interaction has dimension 1 2 topological interaction has dimension 2 F no topological interaction T topological interaction of any dimension * any topological interaction is allowed, including none RelateNG Computes the value of topological predicates between two geometries based on the Dimensionally - Extended 9-Intersection Model(DE-9IM). Standard and custom topological predicates are provided by RelatePredicate. The RelateNG algorithm has the following capabilities: Efficient short-circuited evaluation of topological predicates (including matching custom DE-9IM matrix patterns) Optimized repeated evaluation of predicates against a single geometry via cached spatial indexes (AKA \"prepared mode\") Robust computation (only point-local topology is required, so invalid geometry topology does not cause failures) GeometryCollection inputs containing mixed types and overlapping polygons are supported, using union semantics. Zero - length LineStrings are treated as being topologically identical to Points. Support for IBoundaryNodeRules. See IntersectionMatrixPattern for a description of DE - 9IM patterns. If not specified, the standard BoundaryNodeRules.Mod2BoundaryNodeRule is used. RelateNG operates in 2D only; it ignores any Z ordinates. This implementation replaces RelateOp and IPreparedGeometry. FUTURE WORK Support for a distance tolerance to provide \"approximate\" predicate evaluation RelatePredicate Creates predicate instances for evaluating OGC-standard named topological relationships. Predicates can be evaluated for geometries using RelateNG. TopologyPredicate The API for strategy classes implementing spatial predicates based on the DE-9IM topology model. Predicate values for specific geometry pairs can be evaluated by RelateNG. TopologyPredicateTracer Traces the evaluation of a TopologyPredicate."
  },
  "api/NetTopologySuite.Operation.Union.CascadedPolygonUnion.html": {
    "href": "api/NetTopologySuite.Operation.Union.CascadedPolygonUnion.html",
    "title": "Class CascadedPolygonUnion | NetTopologySuite",
    "summary": "Class CascadedPolygonUnion Provides an efficient method of unioning a collection of IPolygonal geometries. The geometries are indexed using a spatial index, and unioned recursively in index order. For geometries with a high degree of overlap, this has the effect of reducing the number of vertices early in the process, which increases speed and robustness. This algorithm is faster and more robust than the simple iterated approach of repeatedly unioning each polygon to a result geometry. Inheritance object CascadedPolygonUnion Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Union Assembly: NetTopologySuite.dll Syntax public class CascadedPolygonUnion Constructors | Edit this page View Source CascadedPolygonUnion(ICollection<Geometry>) Creates a new instance to union the given collection of Geometrys. Declaration public CascadedPolygonUnion(ICollection<Geometry> polys) Parameters Type Name Description ICollection<Geometry> polys A collection of IPolygonal Geometrys | Edit this page View Source CascadedPolygonUnion(ICollection<Geometry>, UnionStrategy) Creates a new instance to union the given collection of Geometrys. Declaration public CascadedPolygonUnion(ICollection<Geometry> polys, UnionStrategy unionStrategy) Parameters Type Name Description ICollection<Geometry> polys A collection of IPolygonal Geometrys UnionStrategy unionStrategy Methods | Edit this page View Source Union() Computes the union of the input geometries. Declaration public Geometry Union() Returns Type Description Geometry This method discards the input geometries as they are processed. In many input cases this reduces the memory retained as the operation proceeds. Optimal memory usage is achieved by disposing of the original input collection before calling this method. The union of the input geometries, or null if no input geometries were provided Exceptions Type Condition InvalidOperationException if this method is called more than once | Edit this page View Source Union(ICollection<Geometry>) Computes the union of a collection of Geometrys. Declaration public static Geometry Union(ICollection<Geometry> polys) Parameters Type Name Description ICollection<Geometry> polys A collection of IPolygonal Geometrys. Returns Type Description Geometry The union of the polys | Edit this page View Source Union(ICollection<Geometry>, UnionStrategy) Computes the union of a collection of Geometrys. Declaration public static Geometry Union(ICollection<Geometry> polys, UnionStrategy unionStrategy) Parameters Type Name Description ICollection<Geometry> polys A collection of IPolygonal Geometrys. UnionStrategy unionStrategy A strategy to perform the unioning. Returns Type Description Geometry The union of the polys See Also http://code.google.com/p/nettopologysuite/issues/detail?id=44"
  },
  "api/NetTopologySuite.Operation.Union.OverlapUnion.html": {
    "href": "api/NetTopologySuite.Operation.Union.OverlapUnion.html",
    "title": "Class OverlapUnion | NetTopologySuite",
    "summary": "Class OverlapUnion Unions MultiPolygons efficiently by using full topological union only for polygons which may overlap, and combining with the remaining polygons. Polygons which may overlap are those which intersect the common extent of the inputs. Polygons wholly outside this extent must be disjoint to the computed union. They can thus be simply combined with the union result, which is much more performant. (There is one caveat to this, which is discussed below). This situation is likely to occur during cascaded polygon union, since the partitioning of polygons is done heuristically and thus may group disjoint polygons which can lie far apart. It may also occur in real world data which contains many disjoint polygons (e.g. polygons representing parcels on different street blocks). Inheritance object OverlapUnion Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Union Assembly: NetTopologySuite.dll Syntax [Obsolete(\"Due to impairing performance\")] public class OverlapUnion Remarks Algorithm The overlap region is determined as the common envelope of intersection. The input polygons are partitioned into two sets: OverlappingPolygons which intersect the overlap region, and thus potentially overlap each other DisjointPolygons which are disjoint from (lie wholly outside) the overlap region The Overlapping set is fully unioned, and then combined with the Disjoint set. Performing a simple combine works because the disjoint polygons do not interact with each other(since the inputs are valid MultiPolygons). They also do not interact with the Overlapping polygons, since they are outside their envelope. Discussion In general the Overlapping set of polygons will extend beyond the overlap envelope. This means that the union result will extend beyond the overlap region. There is a small chance that the topological union of the overlap region will shift the result linework enough that the result geometry intersects one of the Disjoint geometries. This situation is detected and if it occurs is remedied by falling back to performing a full union of the original inputs. Detection is done by a fairly efficient comparison of edge segments which extend beyond the overlap region. If any segments have changed then there is a risk of introduced intersections, and full union is performed. This situation has not been observed in JTS using floating precision, but it could happen due to snapping. It has been observed in other APIs(e.g.GEOS) due to more aggressive snapping. It is more likely to happen if a Snap - Rounding overlay is used. NOTE: Test has shown that using this heuristic impairs performance. Constructors | Edit this page View Source OverlapUnion(Geometry, Geometry) Creates a new instance for unioning the given geometries. Declaration public OverlapUnion(Geometry g0, Geometry g1) Parameters Type Name Description Geometry g0 A geometry to union Geometry g1 A geometry to union | Edit this page View Source OverlapUnion(Geometry, Geometry, UnionStrategy) Creates a new instance for unioning the given geometries. Declaration public OverlapUnion(Geometry g0, Geometry g1, UnionStrategy unionFun) Parameters Type Name Description Geometry g0 A geometry to union Geometry g1 A geometry to union UnionStrategy unionFun Function to union two geometries Methods | Edit this page View Source Union() Union a pair of geometries, using the more performant overlap union algorithm if possible. Declaration public Geometry Union() Returns Type Description Geometry The union of the inputs | Edit this page View Source Union(Geometry, Geometry) Union a pair of geometries, using the more performant overlap union algorithm if possible. Declaration public static Geometry Union(Geometry g0, Geometry g1) Parameters Type Name Description Geometry g0 A geometry to union Geometry g1 A geometry to union Returns Type Description Geometry The union of the inputs | Edit this page View Source Union(Geometry, Geometry, UnionStrategy) Union a pair of geometries, using the more performant overlap union algorithm if possible. Declaration public static Geometry Union(Geometry g0, Geometry g1, UnionStrategy unionFun) Parameters Type Name Description Geometry g0 A geometry to union Geometry g1 A geometry to union UnionStrategy unionFun Function to union two geometries Returns Type Description Geometry The union of the inputs"
  },
  "api/NetTopologySuite.Operation.Union.PointGeometryUnion.html": {
    "href": "api/NetTopologySuite.Operation.Union.PointGeometryUnion.html",
    "title": "Class PointGeometryUnion | NetTopologySuite",
    "summary": "Class PointGeometryUnion Inheritance object PointGeometryUnion Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Union Assembly: NetTopologySuite.dll Syntax public class PointGeometryUnion Constructors | Edit this page View Source PointGeometryUnion(IPuntal, Geometry) Declaration public PointGeometryUnion(IPuntal pointGeom, Geometry otherGeom) Parameters Type Name Description IPuntal pointGeom Geometry otherGeom Methods | Edit this page View Source Union() Declaration public Geometry Union() Returns Type Description Geometry | Edit this page View Source Union(IPuntal, Geometry) Computes the union of a Point geometry with another arbitrary Geometry. Does not copy any component geometries. Declaration public static Geometry Union(IPuntal pointGeom, Geometry otherGeom) Parameters Type Name Description IPuntal pointGeom Geometry otherGeom Returns Type Description Geometry"
  },
  "api/NetTopologySuite.Operation.Union.UnaryUnionOp.html": {
    "href": "api/NetTopologySuite.Operation.Union.UnaryUnionOp.html",
    "title": "Class UnaryUnionOp | NetTopologySuite",
    "summary": "Class UnaryUnionOp Unions a Collection of Geometrys or a single Geometry (which may be a GeometryCollection) together. Inheritance object UnaryUnionOp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Union Assembly: NetTopologySuite.dll Syntax public class UnaryUnionOp Remarks By using this special-purpose operation over a collection of geometries it is possible to take advantage of various optimizations to improve performance. Heterogeneous GeometryCollections are fully supported. The result obeys the following contract: Unioning a set of Polygons has the effect of merging the areas (i.e. the same effect as iteratively unioning all individual polygons together). Unioning a set of LineStrings has the effect of fully noding and dissolving the input linework. In this context \"fully noded\" means that there will be an endpoint or node in the result for every endpoint or line segment crossing in the input. \"Dissolved\" means that any duplicate (e.g. coincident) line segments or portions of line segments will be reduced to a single line segment in the output. This is consistent with the semantics of the Union(Geometry) operation. If merged linework is required, the LineMerger class can be used. Unioning a set of Points has the effect of merging all identical points (producing a set with no duplicates). UnaryUnion always operates on the individual components of MultiGeometries. So it is possible to use it to \"clean\" invalid self-intersecting MultiPolygons (although the polygon components must all still be individually valid.) Constructors | Edit this page View Source UnaryUnionOp(Geometry) Constructs a unary union operation for a Geometry (which may be a GeometryCollection). Declaration public UnaryUnionOp(Geometry geom) Parameters Type Name Description Geometry geom A geometry to union | Edit this page View Source UnaryUnionOp(IEnumerable<Geometry>) Constructs a unary union operation for an enumeration of Geometrys, using the GeometryFactory of the input geometries. Declaration public UnaryUnionOp(IEnumerable<Geometry> geoms) Parameters Type Name Description IEnumerable<Geometry> geoms An enumeration of geometries | Edit this page View Source UnaryUnionOp(IEnumerable<Geometry>, GeometryFactory) Constructs a unary union operation for an enumeration of Geometrys. If no input geometries were provided but a GeometryFactory was provided, Declaration public UnaryUnionOp(IEnumerable<Geometry> geoms, GeometryFactory geomFact) Parameters Type Name Description IEnumerable<Geometry> geoms An enumeration of geometries GeometryFactory geomFact The geometry factory to use if the enumeration is empty Properties | Edit this page View Source UnionStrategy Declaration public UnionStrategy UnionStrategy { get; set; } Property Value Type Description UnionStrategy Remarks Named setter named setUnionFun[ction] in JTS Methods | Edit this page View Source Union() Gets the union of the input geometries. The result of empty input is determined as follows: Declaration public Geometry Union() Returns Type Description Geometry A Geometry containing the union, or an empty atomic geometry, or an empty GEOMETRYCOLLECTION, ornull if no GeometryFactory was provided | Edit this page View Source Union(Geometry) Constructs a unary union operation for a Geometry (which may be a GeometryCollection). Declaration public static Geometry Union(Geometry geom) Parameters Type Name Description Geometry geom A geometry to union Returns Type Description Geometry The union of the elements of the geometry or an empty GEOMETRYCOLLECTION | Edit this page View Source Union(IEnumerable<Geometry>) Computes the geometric union of a IEnumerable<T> Declaration public static Geometry Union(IEnumerable<Geometry> geoms) Parameters Type Name Description IEnumerable<Geometry> geoms A collection of geometries Returns Type Description Geometry The union of the geometries, or null if the input is empty | Edit this page View Source Union(IEnumerable<Geometry>, GeometryFactory) Computes the geometric union of a IEnumerable<T> If no input geometries were provided but a GeometryFactory was provided, an empty GeometryCollection is returned. Declaration public static Geometry Union(IEnumerable<Geometry> geoms, GeometryFactory geomFact) Parameters Type Name Description IEnumerable<Geometry> geoms A collection of geometries GeometryFactory geomFact The geometry factory to use if the collection is empty Returns Type Description Geometry The union of the geometries or an empty GEOMETRYCOLLECTION"
  },
  "api/NetTopologySuite.Operation.Union.UnionInteracting.html": {
    "href": "api/NetTopologySuite.Operation.Union.UnionInteracting.html",
    "title": "Class UnionInteracting | NetTopologySuite",
    "summary": "Class UnionInteracting Experimental code to union MultiPolygons with processing limited to the elements which actually interact. Inheritance object UnionInteracting Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Union Assembly: NetTopologySuite.dll Syntax public class UnionInteracting Remarks Not currently used, since it doesn't seem to offer much of a performance advantage. Constructors | Edit this page View Source UnionInteracting(Geometry, Geometry) Declaration public UnionInteracting(Geometry g0, Geometry g1) Parameters Type Name Description Geometry g0 Geometry g1 Methods | Edit this page View Source Union() Declaration public Geometry Union() Returns Type Description Geometry | Edit this page View Source Union(Geometry, Geometry) Declaration public static Geometry Union(Geometry g0, Geometry g1) Parameters Type Name Description Geometry g0 Geometry g1 Returns Type Description Geometry"
  },
  "api/NetTopologySuite.Operation.Union.UnionStrategy.html": {
    "href": "api/NetTopologySuite.Operation.Union.UnionStrategy.html",
    "title": "Class UnionStrategy | NetTopologySuite",
    "summary": "Class UnionStrategy An strategy class that allows UnaryUnion to adapt to different kinds of overlay algorithms. Inheritance object UnionStrategy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Union Assembly: NetTopologySuite.dll Syntax public sealed class UnionStrategy"
  },
  "api/NetTopologySuite.Operation.Union.html": {
    "href": "api/NetTopologySuite.Operation.Union.html",
    "title": "Namespace NetTopologySuite.Operation.Union | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Operation.Union Classes CascadedPolygonUnion Provides an efficient method of unioning a collection of IPolygonal geometries. The geometries are indexed using a spatial index, and unioned recursively in index order. For geometries with a high degree of overlap, this has the effect of reducing the number of vertices early in the process, which increases speed and robustness. This algorithm is faster and more robust than the simple iterated approach of repeatedly unioning each polygon to a result geometry. OverlapUnion Unions MultiPolygons efficiently by using full topological union only for polygons which may overlap, and combining with the remaining polygons. Polygons which may overlap are those which intersect the common extent of the inputs. Polygons wholly outside this extent must be disjoint to the computed union. They can thus be simply combined with the union result, which is much more performant. (There is one caveat to this, which is discussed below). This situation is likely to occur during cascaded polygon union, since the partitioning of polygons is done heuristically and thus may group disjoint polygons which can lie far apart. It may also occur in real world data which contains many disjoint polygons (e.g. polygons representing parcels on different street blocks). PointGeometryUnion UnaryUnionOp Unions a Collection of Geometrys or a single Geometry (which may be a GeometryCollection) together. UnionInteracting Experimental code to union MultiPolygons with processing limited to the elements which actually interact. UnionStrategy An strategy class that allows UnaryUnion to adapt to different kinds of overlay algorithms."
  },
  "api/NetTopologySuite.Operation.Valid.ConnectedInteriorTester.html": {
    "href": "api/NetTopologySuite.Operation.Valid.ConnectedInteriorTester.html",
    "title": "Class ConnectedInteriorTester | NetTopologySuite",
    "summary": "Class ConnectedInteriorTester This class tests that the interior of an area Geometry (Polygon or MultiPolygon) is connected. An area Geometry is invalid if the interior is disconnected. This can happen if: a shell self-intersects, one or more holes form a connected chain touching a shell at two different points, one or more holes form a ring around a subset of the interior. If a disconnected situation is found the location of the problem is recorded. Inheritance object ConnectedInteriorTester Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Valid Assembly: NetTopologySuite.dll Syntax [Obsolete] public class ConnectedInteriorTester Constructors | Edit this page View Source ConnectedInteriorTester(GeometryGraph) Declaration public ConnectedInteriorTester(GeometryGraph geomGraph) Parameters Type Name Description GeometryGraph geomGraph Properties | Edit this page View Source Coordinate Declaration public Coordinate Coordinate { get; } Property Value Type Description Coordinate Methods | Edit this page View Source FindDifferentPoint(Coordinate[], Coordinate) Declaration public static Coordinate FindDifferentPoint(Coordinate[] coord, Coordinate pt) Parameters Type Name Description Coordinate[] coord Coordinate pt Returns Type Description Coordinate | Edit this page View Source IsInteriorsConnected() Declaration public bool IsInteriorsConnected() Returns Type Description bool | Edit this page View Source VisitLinkedDirectedEdges(DirectedEdge) Declaration protected void VisitLinkedDirectedEdges(DirectedEdge start) Parameters Type Name Description DirectedEdge start"
  },
  "api/NetTopologySuite.Operation.Valid.ConsistentAreaTester.html": {
    "href": "api/NetTopologySuite.Operation.Valid.ConsistentAreaTester.html",
    "title": "Class ConsistentAreaTester | NetTopologySuite",
    "summary": "Class ConsistentAreaTester Checks that a GeometryGraph representing an area (a Polygon or MultiPolygon ) is consistent with the SFS semantics for area geometries. Checks include: Testing for rings which self-intersect (both properly and at nodes). Testing for duplicate rings. If an inconsistency if found the location of the problem is recorded. Inheritance object ConsistentAreaTester Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Valid Assembly: NetTopologySuite.dll Syntax [Obsolete] public class ConsistentAreaTester Constructors | Edit this page View Source ConsistentAreaTester(GeometryGraph) Declaration public ConsistentAreaTester(GeometryGraph geomGraph) Parameters Type Name Description GeometryGraph geomGraph Properties | Edit this page View Source HasDuplicateRings Checks for two duplicate rings in an area. Duplicate rings are rings that are topologically equal (that is, which have the same sequence of points up to point order). If the area is topologically consistent (determined by calling the isNodeConsistentArea, duplicate rings can be found by checking for EdgeBundles which contain more than one EdgeEnd. (This is because topologically consistent areas cannot have two rings sharing the same line segment, unless the rings are equal). The start point of one of the equal rings will be placed in invalidPoint. Returns true if this area Geometry is topologically consistent but has two duplicate rings. Declaration public bool HasDuplicateRings { get; } Property Value Type Description bool | Edit this page View Source InvalidPoint Returns the intersection point, or null if none was found. Declaration public Coordinate InvalidPoint { get; } Property Value Type Description Coordinate | Edit this page View Source IsNodeConsistentArea Declaration public bool IsNodeConsistentArea { get; } Property Value Type Description bool"
  },
  "api/NetTopologySuite.Operation.Valid.IndexedNestedRingTester.html": {
    "href": "api/NetTopologySuite.Operation.Valid.IndexedNestedRingTester.html",
    "title": "Class IndexedNestedRingTester | NetTopologySuite",
    "summary": "Class IndexedNestedRingTester Tests whether any of a set of LinearRings are nested inside another ring in the set, using a spatial index to speed up the comparisons. Inheritance object IndexedNestedRingTester Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Valid Assembly: NetTopologySuite.dll Syntax [Obsolete] public class IndexedNestedRingTester Constructors | Edit this page View Source IndexedNestedRingTester(GeometryGraph) Declaration public IndexedNestedRingTester(GeometryGraph graph) Parameters Type Name Description GeometryGraph graph Properties | Edit this page View Source NestedPoint Declaration public Coordinate NestedPoint { get; } Property Value Type Description Coordinate Methods | Edit this page View Source Add(LinearRing) Declaration public void Add(LinearRing ring) Parameters Type Name Description LinearRing ring | Edit this page View Source IsNonNested() Declaration public bool IsNonNested() Returns Type Description bool"
  },
  "api/NetTopologySuite.Operation.Valid.IsSimpleOp.html": {
    "href": "api/NetTopologySuite.Operation.Valid.IsSimpleOp.html",
    "title": "Class IsSimpleOp | NetTopologySuite",
    "summary": "Class IsSimpleOp Tests whether a Geometry is simple as defined by the OGC SFS specification. Simplicity is defined for each Geometry type as follows: Pointgeometries are simple. MultiPointgeometries are simple if every point is unique LineStringgeometries are simple if they do not self-intersect at interior points (i.e.points other than the endpoints). Closed linestrings which intersect only at their endpoints are simple (i.e. valid LinearRingss. MultiLineStringgeometries are simple if their elements are simple and they intersect only at points which are boundary points of both elements. (The notion of boundary points can be user-specified - see below). Polygonalgeometries have no definition of simplicity. The IsSimple code checks if all polygon rings are simple. (Note: this means that IsSimple cannot be used to test for all self-intersections in Polygon s. In order to check if a IPolygonal geometry has self-intersections, use IsValid. GeometryCollectiongeometries are simple if all their elements are simple. Empty geometries are simple For ILineal geometries the evaluation of simplicity can be customized by supplying a IBoundaryNodeRule to define how boundary points are determined. The default is the SFS-standard Mod2BoundaryRule. Note that under the Mod-2 rule, closed LineString s (rings) have no boundary. This means that an intersection at the endpoints of two closed LineStrings makes the geometry non-simple. This means that an intersection at their endpoints makes the geometry non-simple. If it is required to test whether a set of LineStrings touch only at their endpoints, use EndpointBoundaryRule. For example, this can be used to validate that a collection of lines form a topologically valid linear network. By default this class finds a single non-simple location. To find all non-simple locations, set FindAllLocations before calling IsSimple(), and retrieve the locations via NonSimpleLocations. This can be used to find all intersection points in a linear network. Inheritance object IsSimpleOp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Valid Assembly: NetTopologySuite.dll Syntax public class IsSimpleOp Constructors | Edit this page View Source IsSimpleOp(Geometry) Creates a simplicity checker using the default SFS Mod-2 Boundary Node Rule Declaration public IsSimpleOp(Geometry geom) Parameters Type Name Description Geometry geom The geometry to test | Edit this page View Source IsSimpleOp(Geometry, IBoundaryNodeRule) Creates a simplicity checker using a given IBoundaryNodeRule Declaration public IsSimpleOp(Geometry geom, IBoundaryNodeRule boundaryNodeRule) Parameters Type Name Description Geometry geom The geometry to test IBoundaryNodeRule boundaryNodeRule The boundary node rule to use Properties | Edit this page View Source FindAllLocations Gets or sets a value indicating if all non-simple points should be reported. Declaration public bool FindAllLocations { get; set; } Property Value Type Description bool | Edit this page View Source NonSimpleLocation Gets the coordinate for an location where the geometry fails to be simple (i.e. where it has a non-boundary self-intersection). Declaration public Coordinate NonSimpleLocation { get; } Property Value Type Description Coordinate A Coordinate for the location of the non-boundary self-intersection or null if the geometry is simple | Edit this page View Source NonSimpleLocations Gets all non-simple intersection locations. Declaration public IList<Coordinate> NonSimpleLocations { get; } Property Value Type Description IList<Coordinate> A list of the Coordinates of non-simple locations. Methods | Edit this page View Source GetNonSimpleLocation(Geometry) Gets a non-simple location in a geometry, if any. Declaration public static Coordinate GetNonSimpleLocation(Geometry geom) Parameters Type Name Description Geometry geom The input geometry Returns Type Description Coordinate A non-simple location, or null if the geometry is simple | Edit this page View Source IsSimple() Tests whether the geometry is simple. Declaration public bool IsSimple() Returns Type Description bool true if the geometry is simple. | Edit this page View Source IsSimple(Geometry) Tests whether a geometry is simple. Declaration public static bool IsSimple(Geometry geom) Parameters Type Name Description Geometry geom The input geometry Returns Type Description bool true if the geometry is simple See Also IBoundaryNodeRule IsEmpty"
  },
  "api/NetTopologySuite.Operation.Valid.IsValidOp.html": {
    "href": "api/NetTopologySuite.Operation.Valid.IsValidOp.html",
    "title": "Class IsValidOp | NetTopologySuite",
    "summary": "Class IsValidOp Implements the algorithms required to compute the IsValid method for Geometrys. See the documentation for the various geometry types for a specification of validity. Inheritance object IsValidOp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Valid Assembly: NetTopologySuite.dll Syntax public class IsValidOp Constructors | Edit this page View Source IsValidOp(Geometry) Creates a new validator for a geometry Declaration public IsValidOp(Geometry inputGeometry) Parameters Type Name Description Geometry inputGeometry The geometry to validate Properties | Edit this page View Source IsSelfTouchingRingFormingHoleValid Gets/Sets whether polygons using Self-Touching Rings to form holes are reported as valid. If this flag is set, the following Self-Touching conditions are treated as being valid: - The shell ring self-touches to create a hole touching the shell. - A hole ring self-touches to create two holes touching at a point. The default (following the OGC SFS standard) is that this condition is not valid (false). This does not affect whether Self-Touching Rings disconnecting the polygon interior are considered valid (these are considered to be invalid under the SFS, and many other spatial models as well). This includes \"bow-tie\" shells, which self-touch at a single point causing the interior to be disconnected, and \"C-shaped\" holes which self-touch at a single point causing an island to be formed. Declaration [Obsolete(\"Use SelfTouchingRingFormingHoleValid\")] public bool IsSelfTouchingRingFormingHoleValid { get; set; } Property Value Type Description bool States whether geometry with this condition is valid. | Edit this page View Source IsValid Tests the validity of the input geometry. Declaration public bool IsValid { get; } Property Value Type Description bool true if the geometry is valid. | Edit this page View Source SelfTouchingRingFormingHoleValid Gets or sets a value indicating whether polygons using Self-Touching Rings to form holes are reported as valid. If this flag is set, the following Self-Touching conditions are treated as being valid: the shell ring self-touches to create a hole touching the shell a hole ring self-touches to create two holes touching at a point The default (following the OGC SFS standard) is that this condition is not valid (false). Self-Touching Rings which disconnect the the polygon interior are still considered to be invalid (these are invalid under the SFS, and many other spatial models as well). This includes: exverted (\"bow-tie\") shells which self-touch at a single point inverted shells with the inversion touching the shell at another point exverted holes with exversion touching the hole at another point inverted (\"C-shaped\") holes which self-touch at a single point causing an island to be formed inverted shells or exverted holes which form part of a chain of touching rings (which disconnect the interior) Declaration public bool SelfTouchingRingFormingHoleValid { get; set; } Property Value Type Description bool | Edit this page View Source ValidationError Gets a value indicating the validity of the geometry If not valid, returns the validation error for the geometry, or null if the geometry is valid. Declaration public TopologyValidationError ValidationError { get; } Property Value Type Description TopologyValidationError The validation error, if the geometry is invalid or null if the geometry is valid Methods | Edit this page View Source CheckValid(Geometry) Tests whether a Geometry is valid. Declaration public static bool CheckValid(Geometry geom) Parameters Type Name Description Geometry geom The geometry to test Returns Type Description bool true if the geometry is valid Remarks In JTS this function is called IsValid | Edit this page View Source FindPointNotNode(Coordinate[], LinearRing, GeometryGraph) Find a point from the list of testCoords that is NOT a node in the edge for the list of searchCoords. Declaration [Obsolete] public static Coordinate FindPointNotNode(Coordinate[] testCoords, LinearRing searchRing, GeometryGraph graph) Parameters Type Name Description Coordinate[] testCoords LinearRing searchRing GeometryGraph graph Returns Type Description Coordinate The point found, or null if none found. | Edit this page View Source IsValidCoordinate(Coordinate) Checks whether a coordinate is valid for processing. Coordinates are valid if their x and y ordinates are in the range of the floating point representation. Declaration [Obsolete(\"Use Coordinate.IsValid\")] public static bool IsValidCoordinate(Coordinate coord) Parameters Type Name Description Coordinate coord The coordinate to validate Returns Type Description bool true if the coordinate is valid"
  },
  "api/NetTopologySuite.Operation.Valid.RepeatedPointTester.html": {
    "href": "api/NetTopologySuite.Operation.Valid.RepeatedPointTester.html",
    "title": "Class RepeatedPointTester | NetTopologySuite",
    "summary": "Class RepeatedPointTester Implements the appropriate checks for repeated points (consecutive identical coordinates) as defined in the NTS spec. Inheritance object RepeatedPointTester Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Operation.Valid Assembly: NetTopologySuite.dll Syntax public class RepeatedPointTester Properties | Edit this page View Source Coordinate Gets a value indicating the location of the repeated point Declaration public Coordinate Coordinate { get; } Property Value Type Description Coordinate Methods | Edit this page View Source HasRepeatedPoint(CoordinateSequence) Checks if an array of Coordinates has a repeated point Declaration public bool HasRepeatedPoint(CoordinateSequence sequence) Parameters Type Name Description CoordinateSequence sequence A coordinate sequence Returns Type Description bool true if sequence has a repeated point, otherwise false | Edit this page View Source HasRepeatedPoint(Coordinate[]) Checks if an array of Coordinates has a repeated point Declaration public bool HasRepeatedPoint(Coordinate[] coord) Parameters Type Name Description Coordinate[] coord An array of coordinates Returns Type Description bool true if coord has a repeated point, otherwise false | Edit this page View Source HasRepeatedPoint(Geometry) Checks if a geometry has a repeated point Declaration public bool HasRepeatedPoint(Geometry g) Parameters Type Name Description Geometry g The geometry to test Returns Type Description bool true if the geometry has a repeated point, otherwise false"
  },
  "api/NetTopologySuite.Operation.Valid.TopologyValidationError.html": {
    "href": "api/NetTopologySuite.Operation.Valid.TopologyValidationError.html",
    "title": "Class TopologyValidationError | NetTopologySuite",
    "summary": "Class TopologyValidationError Contains information about the nature and location of a Geometry validation error. Inheritance object TopologyValidationError Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Operation.Valid Assembly: NetTopologySuite.dll Syntax public class TopologyValidationError Constructors | Edit this page View Source TopologyValidationError(TopologyValidationErrors) Declaration public TopologyValidationError(TopologyValidationErrors errorType) Parameters Type Name Description TopologyValidationErrors errorType | Edit this page View Source TopologyValidationError(TopologyValidationErrors, Coordinate) Declaration public TopologyValidationError(TopologyValidationErrors errorType, Coordinate pt) Parameters Type Name Description TopologyValidationErrors errorType Coordinate pt Properties | Edit this page View Source Coordinate Declaration public Coordinate Coordinate { get; } Property Value Type Description Coordinate | Edit this page View Source ErrorType Declaration public TopologyValidationErrors ErrorType { get; } Property Value Type Description TopologyValidationErrors | Edit this page View Source Message Declaration public string Message { get; } Property Value Type Description string Methods | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/NetTopologySuite.Operation.Valid.TopologyValidationErrors.html": {
    "href": "api/NetTopologySuite.Operation.Valid.TopologyValidationErrors.html",
    "title": "Enum TopologyValidationErrors | NetTopologySuite",
    "summary": "Enum TopologyValidationErrors Contains information about the nature and location of a Geometry validation error. Namespace: NetTopologySuite.Operation.Valid Assembly: NetTopologySuite.dll Syntax public enum TopologyValidationErrors Fields Name Description DisconnectedInteriors Indicates that the interior of a polygon is disjoint (often caused by set of contiguous holes splitting the polygon into two parts). DuplicateRings Indicates that a polygonal geometry contains two rings which are identical. HoleOutsideShell Indicates that a hole of a polygon lies partially or completely in the exterior of the shell. InvalidCoordinate Indicates that the X or Y ordinate of a Coordinate is not a valid numeric value (e.g. NaN). NestedHoles Indicates that a hole lies in the interior of another hole in the same polygon. NestedShells Indicates that a polygon component of a MultiPolygon lies inside another polygonal component. NoInvalidIntersection RingNotClosed Indicates that a ring is not correctly closed (the first and the last coordinate are different). RingSelfIntersection Indicates that a ring self-intersects. SelfIntersection Indicates that two rings of a polygonal geometry intersect. TooFewPoints Indicates that either: A LineString contains a single point. A LinearRing contains 2 or 3 points."
  },
  "api/NetTopologySuite.Operation.Valid.html": {
    "href": "api/NetTopologySuite.Operation.Valid.html",
    "title": "Namespace NetTopologySuite.Operation.Valid | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Operation.Valid Classes for testing the validity and simplicity of geometries, as defined in the OGC Simple Features specification. Classes ConnectedInteriorTester This class tests that the interior of an area Geometry (Polygon or MultiPolygon) is connected. An area Geometry is invalid if the interior is disconnected. This can happen if: a shell self-intersects, one or more holes form a connected chain touching a shell at two different points, one or more holes form a ring around a subset of the interior. If a disconnected situation is found the location of the problem is recorded. ConsistentAreaTester Checks that a GeometryGraph representing an area (a Polygon or MultiPolygon ) is consistent with the SFS semantics for area geometries. Checks include: Testing for rings which self-intersect (both properly and at nodes). Testing for duplicate rings. If an inconsistency if found the location of the problem is recorded. IndexedNestedRingTester Tests whether any of a set of LinearRings are nested inside another ring in the set, using a spatial index to speed up the comparisons. IsSimpleOp Tests whether a Geometry is simple as defined by the OGC SFS specification. Simplicity is defined for each Geometry type as follows: Pointgeometries are simple. MultiPointgeometries are simple if every point is unique LineStringgeometries are simple if they do not self-intersect at interior points (i.e.points other than the endpoints). Closed linestrings which intersect only at their endpoints are simple (i.e. valid LinearRingss. MultiLineStringgeometries are simple if their elements are simple and they intersect only at points which are boundary points of both elements. (The notion of boundary points can be user-specified - see below). Polygonalgeometries have no definition of simplicity. The IsSimple code checks if all polygon rings are simple. (Note: this means that IsSimple cannot be used to test for all self-intersections in Polygon s. In order to check if a IPolygonal geometry has self-intersections, use IsValid. GeometryCollectiongeometries are simple if all their elements are simple. Empty geometries are simple For ILineal geometries the evaluation of simplicity can be customized by supplying a IBoundaryNodeRule to define how boundary points are determined. The default is the SFS-standard Mod2BoundaryRule. Note that under the Mod-2 rule, closed LineString s (rings) have no boundary. This means that an intersection at the endpoints of two closed LineStrings makes the geometry non-simple. This means that an intersection at their endpoints makes the geometry non-simple. If it is required to test whether a set of LineStrings touch only at their endpoints, use EndpointBoundaryRule. For example, this can be used to validate that a collection of lines form a topologically valid linear network. By default this class finds a single non-simple location. To find all non-simple locations, set FindAllLocations before calling IsSimple(), and retrieve the locations via NonSimpleLocations. This can be used to find all intersection points in a linear network. IsValidOp Implements the algorithms required to compute the IsValid method for Geometrys. See the documentation for the various geometry types for a specification of validity. RepeatedPointTester Implements the appropriate checks for repeated points (consecutive identical coordinates) as defined in the NTS spec. TopologyValidationError Contains information about the nature and location of a Geometry validation error. Enums TopologyValidationErrors Contains information about the nature and location of a Geometry validation error."
  },
  "api/NetTopologySuite.Operation.html": {
    "href": "api/NetTopologySuite.Operation.html",
    "title": "Namespace NetTopologySuite.Operation | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Operation Provides classes for implementing operations on geometries Classes BoundaryOp Computes the boundary of a Geometry. Allows specifying the IBoundaryNodeRule to be used. This operation will always return a Geometry of the appropriate dimension for the boundary (even if the input geometry is empty). The boundary of zero-dimensional geometries (Points) is always the empty GeometryCollection. GeometryGraphOperation The base class for operations that require GeometryGraphs. IsSimpleOp Tests whether a Geometry is simple. In general, the SFS specification of simplicity follows the rule: A Geometry is simple if and only if the only self-intersections are at boundary points."
  },
  "api/NetTopologySuite.Planargraph.Algorithm.ConnectedSubgraphFinder.html": {
    "href": "api/NetTopologySuite.Planargraph.Algorithm.ConnectedSubgraphFinder.html",
    "title": "Class ConnectedSubgraphFinder | NetTopologySuite",
    "summary": "Class ConnectedSubgraphFinder Finds all connected Subgraphs of a PlanarGraph. Inheritance object ConnectedSubgraphFinder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Planargraph.Algorithm Assembly: NetTopologySuite.dll Syntax public class ConnectedSubgraphFinder Constructors | Edit this page View Source ConnectedSubgraphFinder(PlanarGraph) Initializes a new instance of the ConnectedSubgraphFinder class. Declaration public ConnectedSubgraphFinder(PlanarGraph graph) Parameters Type Name Description PlanarGraph graph The PlanarGraph. Methods | Edit this page View Source GetConnectedSubgraphs() Declaration public IList<Subgraph> GetConnectedSubgraphs() Returns Type Description IList<Subgraph>"
  },
  "api/NetTopologySuite.Planargraph.Algorithm.html": {
    "href": "api/NetTopologySuite.Planargraph.Algorithm.html",
    "title": "Namespace NetTopologySuite.Planargraph.Algorithm | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Planargraph.Algorithm Classes ConnectedSubgraphFinder Finds all connected Subgraphs of a PlanarGraph."
  },
  "api/NetTopologySuite.Planargraph.DirectedEdge.html": {
    "href": "api/NetTopologySuite.Planargraph.DirectedEdge.html",
    "title": "Class DirectedEdge | NetTopologySuite",
    "summary": "Class DirectedEdge Represents a directed edge in a PlanarGraph. A DirectedEdge may or may not have a reference to a parent Edge (some applications of planar graphs may not require explicit Edge objects to be created). Usually a client using a PlanarGraph will subclass DirectedEdge to add its own application-specific data and methods. Inheritance object GraphComponent DirectedEdge LineMergeDirectedEdge PolygonizeDirectedEdge Implements IComparable Inherited Members GraphComponent.SetVisited(IEnumerator, bool) GraphComponent.SetMarked(IEnumerator, bool) GraphComponent.GetComponentWithVisitedState(IEnumerator, bool) GraphComponent.IsVisited GraphComponent.Visited GraphComponent.IsMarked GraphComponent.Marked GraphComponent.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Planargraph Assembly: NetTopologySuite.dll Syntax public class DirectedEdge : GraphComponent, IComparable Constructors | Edit this page View Source DirectedEdge(Node, Node, Coordinate, bool) Constructs a DirectedEdge connecting the from node to the to node. Declaration public DirectedEdge(Node from, Node to, Coordinate directionPt, bool edgeDirection) Parameters Type Name Description Node from Node to Coordinate directionPt Specifies this DirectedEdge's direction (given by an imaginary line from the from node to directionPt). bool edgeDirection Whether this DirectedEdge's direction is the same as or opposite to that of the parent Edge (if any). Fields | Edit this page View Source from Declaration protected Node from Field Value Type Description Node | Edit this page View Source p0 Declaration protected Coordinate p0 Field Value Type Description Coordinate | Edit this page View Source p1 Declaration protected Coordinate p1 Field Value Type Description Coordinate | Edit this page View Source parentEdge Declaration protected Edge parentEdge Field Value Type Description Edge | Edit this page View Source to Declaration protected Node to Field Value Type Description Node Properties | Edit this page View Source Angle Returns the angle that the start of this DirectedEdge makes with the positive x-axis, in radians. Declaration public double Angle { get; } Property Value Type Description double | Edit this page View Source Coordinate Returns the coordinate of the from-node. Declaration public Coordinate Coordinate { get; } Property Value Type Description Coordinate | Edit this page View Source DirectionPt Returns a point to which an imaginary line is drawn from the from-node to specify this DirectedEdge's orientation. Declaration public Coordinate DirectionPt { get; } Property Value Type Description Coordinate | Edit this page View Source Edge Returns this DirectedEdge's parent Edge, or null if it has none. Associates this DirectedEdge with an Edge (possibly null, indicating no associated Edge). Declaration public Edge Edge { get; set; } Property Value Type Description Edge | Edit this page View Source EdgeDirection Returns whether the direction of the parent Edge (if any) is the same as that of this Directed Edge. Declaration public bool EdgeDirection { get; protected set; } Property Value Type Description bool | Edit this page View Source FromNode Returns the node from which this DirectedEdge leaves. Declaration public Node FromNode { get; } Property Value Type Description Node | Edit this page View Source IsRemoved Tests whether this component has been removed from its containing graph. Declaration public override bool IsRemoved { get; } Property Value Type Description bool Overrides GraphComponent.IsRemoved | Edit this page View Source Quadrant Returns 0, 1, 2, or 3, indicating the quadrant in which this DirectedEdge's orientation lies. Declaration [Obsolete(\"Use QuadrantValue\")] public int Quadrant { get; } Property Value Type Description int | Edit this page View Source QuadrantEx Returns 0, 1, 2, or 3, indicating the quadrant in which this DirectedEdge's orientation lies. Declaration public Quadrant QuadrantEx { get; } Property Value Type Description Quadrant | Edit this page View Source Sym Returns the symmetric DirectedEdge -- the other DirectedEdge associated with this DirectedEdge's parent Edge. Sets this DirectedEdge's symmetric DirectedEdge, which runs in the opposite direction. Declaration public DirectedEdge Sym { get; set; } Property Value Type Description DirectedEdge | Edit this page View Source ToNode Returns the node to which this DirectedEdge goes. Declaration public Node ToNode { get; } Property Value Type Description Node Methods | Edit this page View Source CompareDirection(DirectedEdge) Returns 1 if this DirectedEdge has a greater angle with the positive x-axis than b\", 0 if the DirectedEdges are collinear, and -1 otherwise. Using the obvious algorithm of simply computing the angle is not robust, since the angle calculation is susceptible to round off. A robust algorithm is: first compare the quadrants. If the quadrants are different, it it trivial to determine which vector is \"greater\". if the vectors lie in the same quadrant, the robust RobustCGAlgorithms.ComputeOrientation(Coordinate, Coordinate, Coordinate) function can be used to decide the relative orientation of the vectors. Declaration public int CompareDirection(DirectedEdge e) Parameters Type Name Description DirectedEdge e Returns Type Description int | Edit this page View Source CompareTo(object) Returns 1 if this DirectedEdge has a greater angle with the positive x-axis than b\", 0 if the DirectedEdges are collinear, and -1 otherwise. Using the obvious algorithm of simply computing the angle is not robust, since the angle calculation is susceptible to round off. A robust algorithm is: first compare the quadrants. If the quadrants are different, it it trivial to determine which vector is \"greater\". if the vectors lie in the same quadrant, the robust RobustCGAlgorithms.ComputeOrientation(Coordinate, Coordinate, Coordinate) function can be used to decide the relative orientation of the vectors. Declaration public int CompareTo(object obj) Parameters Type Name Description object obj Returns Type Description int | Edit this page View Source ToEdges(IList<DirectedEdge>) Returns a List containing the parent Edge (possibly null) for each of the given DirectedEdges. Declaration public static IList<Edge> ToEdges(IList<DirectedEdge> dirEdges) Parameters Type Name Description IList<DirectedEdge> dirEdges Returns Type Description IList<Edge> | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() | Edit this page View Source Write(StreamWriter) Writes a detailed string representation of this DirectedEdge to the given PrintStream. Declaration public void Write(StreamWriter outstream) Parameters Type Name Description StreamWriter outstream Implements IComparable"
  },
  "api/NetTopologySuite.Planargraph.DirectedEdgeStar.html": {
    "href": "api/NetTopologySuite.Planargraph.DirectedEdgeStar.html",
    "title": "Class DirectedEdgeStar | NetTopologySuite",
    "summary": "Class DirectedEdgeStar A sorted collection of DirectedEdges which leave a Node in a PlanarGraph. Inheritance object DirectedEdgeStar Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Planargraph Assembly: NetTopologySuite.dll Syntax public class DirectedEdgeStar Properties | Edit this page View Source Coordinate Returns the coordinate for the node at which this star is based. Declaration public Coordinate Coordinate { get; } Property Value Type Description Coordinate | Edit this page View Source Degree Returns the number of edges around the Node associated with this DirectedEdgeStar. Declaration public int Degree { get; } Property Value Type Description int | Edit this page View Source Edges Returns the DirectedEdges, in ascending order by angle with the positive x-axis. Declaration public IList<DirectedEdge> Edges { get; } Property Value Type Description IList<DirectedEdge> Methods | Edit this page View Source Add(DirectedEdge) Adds a new member to this DirectedEdgeStar. Declaration public void Add(DirectedEdge de) Parameters Type Name Description DirectedEdge de | Edit this page View Source GetEnumerator() Returns an Iterator over the DirectedEdges, in ascending order by angle with the positive x-axis. Declaration public IEnumerator<DirectedEdge> GetEnumerator() Returns Type Description IEnumerator<DirectedEdge> | Edit this page View Source GetIndex(DirectedEdge) Returns the zero-based index of the given DirectedEdge, after sorting in ascending order by angle with the positive x-axis. Declaration public int GetIndex(DirectedEdge dirEdge) Parameters Type Name Description DirectedEdge dirEdge Returns Type Description int | Edit this page View Source GetIndex(Edge) Returns the zero-based index of the given Edge, after sorting in ascending order by angle with the positive x-axis. Declaration public int GetIndex(Edge edge) Parameters Type Name Description Edge edge Returns Type Description int | Edit this page View Source GetIndex(int) Returns the remainder when i is divided by the number of edges in this DirectedEdgeStar. Declaration public int GetIndex(int i) Parameters Type Name Description int i Returns Type Description int | Edit this page View Source GetNextCWEdge(DirectedEdge) Returns the DirectedEdge on the right-hand (CW) side of the given DirectedEdge (which must be a member of this DirectedEdgeStar). Declaration public DirectedEdge GetNextCWEdge(DirectedEdge dirEdge) Parameters Type Name Description DirectedEdge dirEdge Returns Type Description DirectedEdge | Edit this page View Source GetNextEdge(DirectedEdge) Returns the DirectedEdge on the left-hand side of the given DirectedEdge (which must be a member of this DirectedEdgeStar). Declaration public DirectedEdge GetNextEdge(DirectedEdge dirEdge) Parameters Type Name Description DirectedEdge dirEdge Returns Type Description DirectedEdge | Edit this page View Source Remove(DirectedEdge) Drops a member of this DirectedEdgeStar. Declaration public void Remove(DirectedEdge de) Parameters Type Name Description DirectedEdge de"
  },
  "api/NetTopologySuite.Planargraph.Edge.html": {
    "href": "api/NetTopologySuite.Planargraph.Edge.html",
    "title": "Class Edge | NetTopologySuite",
    "summary": "Class Edge Represents an undirected edge of a {PlanarGraph}. An undirected edge in fact simply acts as a central point of reference for two opposite DirectedEdges. Usually a client using a PlanarGraph will subclass Edge to add its own application-specific data and methods. Inheritance object GraphComponent Edge LineMergeEdge PolygonizeEdge Inherited Members GraphComponent.SetVisited(IEnumerator, bool) GraphComponent.SetMarked(IEnumerator, bool) GraphComponent.GetComponentWithVisitedState(IEnumerator, bool) GraphComponent.IsVisited GraphComponent.Visited GraphComponent.IsMarked GraphComponent.Marked GraphComponent.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Planargraph Assembly: NetTopologySuite.dll Syntax public class Edge : GraphComponent Constructors | Edit this page View Source Edge() Constructs an Edge whose DirectedEdges are not yet set. Be sure to call SetDirectedEdges(DirectedEdge, DirectedEdge). Declaration public Edge() | Edit this page View Source Edge(DirectedEdge, DirectedEdge) Constructs an Edge initialized with the given DirectedEdges, and for each DirectedEdge: sets the Edge, sets the symmetric DirectedEdge, and adds this Edge to its from-Node. Declaration public Edge(DirectedEdge de0, DirectedEdge de1) Parameters Type Name Description DirectedEdge de0 DirectedEdge de1 Fields | Edit this page View Source dirEdge The two DirectedEdges associated with this Edge. Declaration protected DirectedEdge[] dirEdge Field Value Type Description DirectedEdge[] Properties | Edit this page View Source IsRemoved Tests whether this component has been removed from its containing graph. Declaration public override bool IsRemoved { get; } Property Value Type Description bool Overrides GraphComponent.IsRemoved Methods | Edit this page View Source GetDirEdge(Node) Returns the DirectedEdge that starts from the given node, or null if the node is not one of the two nodes associated with this Edge. Declaration public DirectedEdge GetDirEdge(Node fromNode) Parameters Type Name Description Node fromNode Returns Type Description DirectedEdge | Edit this page View Source GetDirEdge(int) Returns one of the DirectedEdges associated with this Edge. Declaration public DirectedEdge GetDirEdge(int i) Parameters Type Name Description int i 0 or 1. Returns Type Description DirectedEdge | Edit this page View Source GetOppositeNode(Node) If node is one of the two nodes associated with this Edge, returns the other node; otherwise returns null. Declaration public Node GetOppositeNode(Node node) Parameters Type Name Description Node node Returns Type Description Node | Edit this page View Source SetDirectedEdges(DirectedEdge, DirectedEdge) Initializes this Edge's two DirectedEdges, and for each DirectedEdge: sets the Edge, sets the symmetric DirectedEdge, and adds this Edge to its from-Node. Declaration public void SetDirectedEdges(DirectedEdge de0, DirectedEdge de1) Parameters Type Name Description DirectedEdge de0 DirectedEdge de1"
  },
  "api/NetTopologySuite.Planargraph.GraphComponent.html": {
    "href": "api/NetTopologySuite.Planargraph.GraphComponent.html",
    "title": "Class GraphComponent | NetTopologySuite",
    "summary": "Class GraphComponent The base class for all graph component classes. Maintains flags of use in generic graph algorithms. Provides two flags: marked - typically this is used to indicate a state that persists for the course of the graph's lifetime. For instance, it can be used to indicate that a component has been logically deleted from the graph. visited - this is used to indicate that a component has been processed or visited by an single graph algorithm. For instance, a breadth-first traversal of the graph might use this to indicate that a node has already been traversed. The visited flag may be set and cleared many times during the lifetime of a graph. Inheritance object GraphComponent DirectedEdge Edge Node Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Planargraph Assembly: NetTopologySuite.dll Syntax public abstract class GraphComponent Properties | Edit this page View Source Data Gets or sets user defined data for this component Declaration public object Data { get; set; } Property Value Type Description object | Edit this page View Source IsMarked Tests if a component has been marked at some point during the processing involving this graph. Declaration public bool IsMarked { get; } Property Value Type Description bool | Edit this page View Source IsRemoved Tests whether this component has been removed from its containing graph. Declaration public abstract bool IsRemoved { get; } Property Value Type Description bool | Edit this page View Source IsVisited Tests if a component has been visited during the course of a graph algorithm. Declaration public bool IsVisited { get; } Property Value Type Description bool | Edit this page View Source Marked Gets/Sets the marked flag for this component. Declaration public bool Marked { get; set; } Property Value Type Description bool | Edit this page View Source Visited Gets/Sets the visited flag for this component. Declaration public bool Visited { get; set; } Property Value Type Description bool Methods | Edit this page View Source GetComponentWithVisitedState(IEnumerator, bool) Finds the first GraphComponent in a IEnumerator set which has the specified Visited state. Declaration public static GraphComponent GetComponentWithVisitedState(IEnumerator i, bool visitedState) Parameters Type Name Description IEnumerator i A IEnumerator to scan. bool visitedState The Visited state to test. Returns Type Description GraphComponent The first GraphComponent found, or null if none found. | Edit this page View Source SetMarked(IEnumerator, bool) Sets the Marked state for all GraphComponents in an IEnumerator. Declaration public static void SetMarked(IEnumerator i, bool marked) Parameters Type Name Description IEnumerator i A IEnumerator to scan. bool marked The state to set the Marked flag to. | Edit this page View Source SetVisited(IEnumerator, bool) Sets the Visited state for all GraphComponents in an IEnumerator. Declaration public static void SetVisited(IEnumerator i, bool visited) Parameters Type Name Description IEnumerator i A IEnumerator to scan. bool visited The state to set the Visited flag to."
  },
  "api/NetTopologySuite.Planargraph.Node.html": {
    "href": "api/NetTopologySuite.Planargraph.Node.html",
    "title": "Class Node | NetTopologySuite",
    "summary": "Class Node A node in a PlanarGraph is a location where 0 or more Edges meet. A node is connected to each of its incident Edges via an outgoing DirectedEdge. Some clients using a PlanarGraph may want to subclass Node to add their own application-specific data and methods. Inheritance object GraphComponent Node Inherited Members GraphComponent.SetVisited(IEnumerator, bool) GraphComponent.SetMarked(IEnumerator, bool) GraphComponent.GetComponentWithVisitedState(IEnumerator, bool) GraphComponent.IsVisited GraphComponent.Visited GraphComponent.IsMarked GraphComponent.Marked GraphComponent.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Planargraph Assembly: NetTopologySuite.dll Syntax public class Node : GraphComponent Constructors | Edit this page View Source Node(Coordinate) Constructs a Node with the given location. Declaration public Node(Coordinate pt) Parameters Type Name Description Coordinate pt | Edit this page View Source Node(Coordinate, DirectedEdgeStar) Constructs a Node with the given location and collection of outgoing DirectedEdges. Declaration public Node(Coordinate pt, DirectedEdgeStar deStar) Parameters Type Name Description Coordinate pt DirectedEdgeStar deStar Fields | Edit this page View Source deStar The collection of DirectedEdges that leave this Node. Declaration protected DirectedEdgeStar deStar Field Value Type Description DirectedEdgeStar | Edit this page View Source pt The location of this Node. Declaration protected Coordinate pt Field Value Type Description Coordinate Properties | Edit this page View Source Coordinate Returns the location of this Node. Declaration public Coordinate Coordinate { get; } Property Value Type Description Coordinate | Edit this page View Source Degree Returns the number of edges around this Node. Declaration public int Degree { get; } Property Value Type Description int | Edit this page View Source IsRemoved Tests whether this component has been removed from its containing graph. Declaration public override bool IsRemoved { get; } Property Value Type Description bool Overrides GraphComponent.IsRemoved | Edit this page View Source OutEdges Returns the collection of DirectedEdges that leave this Node. Declaration public DirectedEdgeStar OutEdges { get; } Property Value Type Description DirectedEdgeStar Methods | Edit this page View Source AddOutEdge(DirectedEdge) Adds an outgoing DirectedEdge to this Node. Declaration public void AddOutEdge(DirectedEdge de) Parameters Type Name Description DirectedEdge de | Edit this page View Source GetEdgesBetween(Node, Node) Returns all Edges that connect the two nodes (which are assumed to be different). Declaration public static IList<DirectedEdge> GetEdgesBetween(Node node0, Node node1) Parameters Type Name Description Node node0 Node node1 Returns Type Description IList<DirectedEdge> | Edit this page View Source GetIndex(Edge) Returns the zero-based index of the given Edge, after sorting in ascending order by angle with the positive x-axis. Declaration public int GetIndex(Edge edge) Parameters Type Name Description Edge edge Returns Type Description int | Edit this page View Source Remove(DirectedEdge) Removes a DirectedEdge incident on this node. Does not change the state of the directed edge. Declaration public void Remove(DirectedEdge de) Parameters Type Name Description DirectedEdge de | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/NetTopologySuite.Planargraph.NodeMap.html": {
    "href": "api/NetTopologySuite.Planargraph.NodeMap.html",
    "title": "Class NodeMap | NetTopologySuite",
    "summary": "Class NodeMap A map of nodes, indexed by the coordinate of the node. Inheritance object NodeMap Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Planargraph Assembly: NetTopologySuite.dll Syntax public class NodeMap Properties | Edit this page View Source Count Returns the number of Nodes in this NodeMap. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source Values Returns the Nodes in this NodeMap, sorted in ascending order by angle with the positive x-axis. Declaration public ICollection<Node> Values { get; } Property Value Type Description ICollection<Node> Methods | Edit this page View Source Add(Node) Adds a node to the map, replacing any that is already at that location. Declaration public Node Add(Node n) Parameters Type Name Description Node n Returns Type Description Node The added node. | Edit this page View Source Find(Coordinate) Returns the Node at the given location, or null if no Node was there. Declaration public Node Find(Coordinate coord) Parameters Type Name Description Coordinate coord Returns Type Description Node | Edit this page View Source GetEnumerator() Returns an Iterator over the Nodes in this NodeMap, sorted in ascending order by angle with the positive x-axis. Declaration public IEnumerator<Node> GetEnumerator() Returns Type Description IEnumerator<Node> | Edit this page View Source Remove(Coordinate) Removes the Node at the given location, and returns it (or null if no Node was there). Declaration public Node Remove(Coordinate pt) Parameters Type Name Description Coordinate pt Returns Type Description Node"
  },
  "api/NetTopologySuite.Planargraph.PlanarGraph.html": {
    "href": "api/NetTopologySuite.Planargraph.PlanarGraph.html",
    "title": "Class PlanarGraph | NetTopologySuite",
    "summary": "Class PlanarGraph Represents a directed graph which is embeddable in a planar surface. This class and the other classes in this package serve as a framework for building planar graphs for specific algorithms. This class must be subclassed to expose appropriate methods to construct the graph. This allows controlling the types of graph components ({DirectedEdge}s, Edges and Nodes) which can be added to the graph. An application which uses the graph framework will almost always provide subclasses for one or more graph components, which hold application-specific data and graph algorithms. Inheritance object PlanarGraph LineMergeGraph PolygonizeGraph Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Planargraph Assembly: NetTopologySuite.dll Syntax public abstract class PlanarGraph Fields | Edit this page View Source dirEdges Declaration protected IList<DirectedEdge> dirEdges Field Value Type Description IList<DirectedEdge> | Edit this page View Source nodeMap Declaration protected NodeMap nodeMap Field Value Type Description NodeMap Properties | Edit this page View Source Edges Returns the Edges that have been added to this PlanarGraph. Declaration public IList<Edge> Edges { get; protected set; } Property Value Type Description IList<Edge> | Edit this page View Source Nodes Returns the Nodes in this PlanarGraph. Declaration public ICollection<Node> Nodes { get; } Property Value Type Description ICollection<Node> Methods | Edit this page View Source Add(DirectedEdge) Adds the Edge to this PlanarGraph; only subclasses can add DirectedEdges, to ensure the edges added are of the right class. Declaration protected void Add(DirectedEdge dirEdge) Parameters Type Name Description DirectedEdge dirEdge | Edit this page View Source Add(Edge) Adds the Edge and its DirectedEdges with this PlanarGraph. Assumes that the Edge has already been created with its associated DirectEdges. Only subclasses can add Edges, to ensure the edges added are of the right class. Declaration protected void Add(Edge edge) Parameters Type Name Description Edge edge | Edit this page View Source Add(Node) Adds a node to the map, replacing any that is already at that location. Only subclasses can add Nodes, to ensure Nodes are of the right type. Declaration protected void Add(Node node) Parameters Type Name Description Node node | Edit this page View Source FindNode(Coordinate) Returns the Node at the given pt, or null if no Node was there. Declaration public Node FindNode(Coordinate pt) Parameters Type Name Description Coordinate pt The location Returns Type Description Node The node found or null if this graph contains no node at the location | Edit this page View Source FindNodesOfDegree(int) Returns all Nodes with the given number of Edges around it. Declaration public IList<Node> FindNodesOfDegree(int degree) Parameters Type Name Description int degree Returns Type Description IList<Node> | Edit this page View Source GetDirEdgeEnumerator() Returns an Iterator over the DirectedEdges in this PlanarGraph, in the order in which they were added. Declaration public IEnumerator<DirectedEdge> GetDirEdgeEnumerator() Returns Type Description IEnumerator<DirectedEdge> | Edit this page View Source GetEdgeEnumerator() Returns an Iterator over the Edges in this PlanarGraph, in the order in which they were added. Declaration public IEnumerator<Edge> GetEdgeEnumerator() Returns Type Description IEnumerator<Edge> | Edit this page View Source GetNodeEnumerator() Returns an IEnumerator over the Nodes in this PlanarGraph. Declaration public IEnumerator<Node> GetNodeEnumerator() Returns Type Description IEnumerator<Node> | Edit this page View Source Remove(DirectedEdge) Removes a DirectedEdge from its from-Node and from this PlanarGraph. Declaration public void Remove(DirectedEdge de) Parameters Type Name Description DirectedEdge de Remarks This method does not remove the Nodes associated with the DirectedEdge, even if the removal of the DirectedEdge reduces the degree of a Node to zero. | Edit this page View Source Remove(Edge) Removes an Edge and its associated DirectedEdges from their from-Nodes and from this PlanarGraph. Note: This method does not remove the Nodes associated with the Edge, even if the removal of the Edge reduces the degree of a Node to zero. Declaration public void Remove(Edge edge) Parameters Type Name Description Edge edge | Edit this page View Source Remove(Node) Removes a node from the graph, along with any associated DirectedEdges and Edges. Declaration public void Remove(Node node) Parameters Type Name Description Node node"
  },
  "api/NetTopologySuite.Planargraph.Subgraph.html": {
    "href": "api/NetTopologySuite.Planargraph.Subgraph.html",
    "title": "Class Subgraph | NetTopologySuite",
    "summary": "Class Subgraph A subgraph of a PlanarGraph. A subgraph may contain any subset of Edges from the parent graph. It will also automatically contain all DirectedEdges and Nodes associated with those edges. No new objects are created when edges are added - all associated components must already exist in the parent graph. Inheritance object Subgraph Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Planargraph Assembly: NetTopologySuite.dll Syntax public class Subgraph Constructors | Edit this page View Source Subgraph(PlanarGraph) Creates a new subgraph of the given PlanarGraph. Declaration public Subgraph(PlanarGraph parentGraph) Parameters Type Name Description PlanarGraph parentGraph Fields | Edit this page View Source dirEdges Declaration protected IList<DirectedEdge> dirEdges Field Value Type Description IList<DirectedEdge> | Edit this page View Source edges Declaration protected HashSet<Edge> edges Field Value Type Description HashSet<Edge> | Edit this page View Source nodeMap Declaration protected NodeMap nodeMap Field Value Type Description NodeMap | Edit this page View Source parentGraph Declaration protected PlanarGraph parentGraph Field Value Type Description PlanarGraph Methods | Edit this page View Source Add(Edge) Adds an Edge to the subgraph. The associated DirectedEdges and Nodes are also added. Declaration public void Add(Edge e) Parameters Type Name Description Edge e The Edge to add. | Edit this page View Source Contains(Edge) Tests whether an Edge is contained in this subgraph. Declaration public bool Contains(Edge e) Parameters Type Name Description Edge e The Edge to test. Returns Type Description bool true if the Edge is contained in this subgraph. | Edit this page View Source GetDirEdgeEnumerator() Returns an IEnumerator<T> over the DirectedEdges in this graph, in the order in which they were added. Declaration public IEnumerator<DirectedEdge> GetDirEdgeEnumerator() Returns Type Description IEnumerator<DirectedEdge> | Edit this page View Source GetEdgeEnumerator() Returns an IEnumerator<T> over the Edges in this graph, in the order in which they were added. Declaration public IEnumerator<Edge> GetEdgeEnumerator() Returns Type Description IEnumerator<Edge> | Edit this page View Source GetNodeEnumerator() Returns an IEnumerator<T> over the Nodes in this graph. Declaration public IEnumerator<Node> GetNodeEnumerator() Returns Type Description IEnumerator<Node> | Edit this page View Source GetParent() Gets the PlanarGraph which this subgraph is part of. Declaration public PlanarGraph GetParent() Returns Type Description PlanarGraph"
  },
  "api/NetTopologySuite.Planargraph.html": {
    "href": "api/NetTopologySuite.Planargraph.html",
    "title": "Namespace NetTopologySuite.Planargraph | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Planargraph Contains classes to implement a planar graph data structure. Classes DirectedEdge Represents a directed edge in a PlanarGraph. A DirectedEdge may or may not have a reference to a parent Edge (some applications of planar graphs may not require explicit Edge objects to be created). Usually a client using a PlanarGraph will subclass DirectedEdge to add its own application-specific data and methods. DirectedEdgeStar A sorted collection of DirectedEdges which leave a Node in a PlanarGraph. Edge Represents an undirected edge of a {PlanarGraph}. An undirected edge in fact simply acts as a central point of reference for two opposite DirectedEdges. Usually a client using a PlanarGraph will subclass Edge to add its own application-specific data and methods. GraphComponent The base class for all graph component classes. Maintains flags of use in generic graph algorithms. Provides two flags: marked - typically this is used to indicate a state that persists for the course of the graph's lifetime. For instance, it can be used to indicate that a component has been logically deleted from the graph. visited - this is used to indicate that a component has been processed or visited by an single graph algorithm. For instance, a breadth-first traversal of the graph might use this to indicate that a node has already been traversed. The visited flag may be set and cleared many times during the lifetime of a graph. Node A node in a PlanarGraph is a location where 0 or more Edges meet. A node is connected to each of its incident Edges via an outgoing DirectedEdge. Some clients using a PlanarGraph may want to subclass Node to add their own application-specific data and methods. NodeMap A map of nodes, indexed by the coordinate of the node. PlanarGraph Represents a directed graph which is embeddable in a planar surface. This class and the other classes in this package serve as a framework for building planar graphs for specific algorithms. This class must be subclassed to expose appropriate methods to construct the graph. This allows controlling the types of graph components ({DirectedEdge}s, Edges and Nodes) which can be added to the graph. An application which uses the graph framework will almost always provide subclasses for one or more graph components, which hold application-specific data and graph algorithms. Subgraph A subgraph of a PlanarGraph. A subgraph may contain any subset of Edges from the parent graph. It will also automatically contain all DirectedEdges and Nodes associated with those edges. No new objects are created when edges are added - all associated components must already exist in the parent graph."
  },
  "api/NetTopologySuite.Precision.CommonBits.html": {
    "href": "api/NetTopologySuite.Precision.CommonBits.html",
    "title": "Class CommonBits | NetTopologySuite",
    "summary": "Class CommonBits Determines the maximum number of common most-significant bits in the mantissa of one or numbers. Can be used to compute the double-precision number which is represented by the common bits. If there are no common bits, the number computed is 0.0. Inheritance object CommonBits Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Precision Assembly: NetTopologySuite.dll Syntax public class CommonBits Properties | Edit this page View Source Common Declaration public double Common { get; } Property Value Type Description double Methods | Edit this page View Source Add(double) Declaration public void Add(double num) Parameters Type Name Description double num | Edit this page View Source GetBit(long, int) Extracts the i'th bit of a bitstring. Declaration public static int GetBit(long bits, int i) Parameters Type Name Description long bits The bitstring to extract from. int i The bit to extract. Returns Type Description int The value of the extracted bit. | Edit this page View Source NumCommonMostSigMantissaBits(long, long) This computes the number of common most-significant bits in the mantissas of two double-precision numbers. It does not count the hidden bit, which is always 1. It does not determine whether the numbers have the same exponent - if they do not, the value computed by this function is meaningless. Declaration public static int NumCommonMostSigMantissaBits(long num1, long num2) Parameters Type Name Description long num1 long num2 Returns Type Description int The number of common most-significant mantissa bits. | Edit this page View Source SignExpBits(long) Computes the bit pattern for the sign and exponent of a double-precision number. Declaration public static long SignExpBits(long num) Parameters Type Name Description long num Returns Type Description long The bit pattern for the sign and exponent. | Edit this page View Source ToString(long) A representation of the Double bits formatted for easy readability Declaration public string ToString(long bits) Parameters Type Name Description long bits Returns Type Description string | Edit this page View Source ZeroLowerBits(long, int) Zeroes the lower n bits of a bitstring. Declaration public static long ZeroLowerBits(long bits, int nBits) Parameters Type Name Description long bits The bitstring to alter. int nBits the number of bits to zero. Returns Type Description long The zeroed bitstring."
  },
  "api/NetTopologySuite.Precision.CommonBitsOp.html": {
    "href": "api/NetTopologySuite.Precision.CommonBitsOp.html",
    "title": "Class CommonBitsOp | NetTopologySuite",
    "summary": "Class CommonBitsOp Provides versions of Geometry spatial functions which use common bit removal to reduce the likelihood of robustness problems. In the current implementation no rounding is performed on the reshifted result point, which means that it is possible that the returned Geometry is invalid. Client classes should check the validity of the returned result themselves. Inheritance object CommonBitsOp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Precision Assembly: NetTopologySuite.dll Syntax public class CommonBitsOp Constructors | Edit this page View Source CommonBitsOp() Creates a new instance of class, which reshifts result Geometrys. Declaration public CommonBitsOp() | Edit this page View Source CommonBitsOp(bool) Creates a new instance of class, specifying whether the result Geometrys should be reshifted. Declaration public CommonBitsOp(bool returnToOriginalPrecision) Parameters Type Name Description bool returnToOriginalPrecision Methods | Edit this page View Source Buffer(Geometry, double) Computes the buffer a point, using enhanced precision. Declaration public Geometry Buffer(Geometry geom0, double distance) Parameters Type Name Description Geometry geom0 The Geometry to buffer. double distance The buffer distance. Returns Type Description Geometry The Geometry representing the buffer of the input Geometry. | Edit this page View Source Difference(Geometry, Geometry) Computes the set-theoretic difference of two Geometrys, using enhanced precision. Declaration public Geometry Difference(Geometry geom0, Geometry geom1) Parameters Type Name Description Geometry geom0 The first Geometry. Geometry geom1 The second Geometry, to be subtracted from the first. Returns Type Description Geometry The Geometry representing the set-theoretic difference of the input Geometries. | Edit this page View Source Intersection(Geometry, Geometry) Computes the set-theoretic intersection of two Geometrys, using enhanced precision. Declaration public Geometry Intersection(Geometry geom0, Geometry geom1) Parameters Type Name Description Geometry geom0 The first Geometry. Geometry geom1 The second Geometry. Returns Type Description Geometry The Geometry representing the set-theoretic intersection of the input Geometries. | Edit this page View Source SymDifference(Geometry, Geometry) Computes the set-theoretic symmetric difference of two geometries, using enhanced precision. Declaration public Geometry SymDifference(Geometry geom0, Geometry geom1) Parameters Type Name Description Geometry geom0 The first Geometry. Geometry geom1 The second Geometry. Returns Type Description Geometry The Geometry representing the set-theoretic symmetric difference of the input Geometries. | Edit this page View Source Union(Geometry, Geometry) Computes the set-theoretic union of two Geometrys, using enhanced precision. Declaration public Geometry Union(Geometry geom0, Geometry geom1) Parameters Type Name Description Geometry geom0 The first Geometry. Geometry geom1 The second Geometry. Returns Type Description Geometry The Geometry representing the set-theoretic union of the input Geometries."
  },
  "api/NetTopologySuite.Precision.CommonBitsRemover.CommonCoordinateFilter.html": {
    "href": "api/NetTopologySuite.Precision.CommonBitsRemover.CommonCoordinateFilter.html",
    "title": "Class CommonBitsRemover.CommonCoordinateFilter | NetTopologySuite",
    "summary": "Class CommonBitsRemover.CommonCoordinateFilter Inheritance object CommonBitsRemover.CommonCoordinateFilter Implements ICoordinateFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Precision Assembly: NetTopologySuite.dll Syntax public class CommonBitsRemover.CommonCoordinateFilter : ICoordinateFilter Properties | Edit this page View Source CommonCoordinate Declaration public Coordinate CommonCoordinate { get; } Property Value Type Description Coordinate Methods | Edit this page View Source Filter(Coordinate) Declaration public void Filter(Coordinate coord) Parameters Type Name Description Coordinate coord Implements ICoordinateFilter"
  },
  "api/NetTopologySuite.Precision.CommonBitsRemover.html": {
    "href": "api/NetTopologySuite.Precision.CommonBitsRemover.html",
    "title": "Class CommonBitsRemover | NetTopologySuite",
    "summary": "Class CommonBitsRemover Removes common most-significant mantissa bits from one or more Geometrys. The CommonBitsRemover \"scavenges\" precision which is \"wasted\" by a large displacement of the geometry from the origin. For example, if a small geometry is displaced from the origin by a large distance, the displacement increases the significant figures in the coordinates, but does not affect the relative topology of the geometry. Thus the geometry can be translated back to the origin without affecting its topology. In order to compute the translation without affecting the full precision of the coordinate values, the translation is performed at the bit level by removing the common leading mantissa bits. If the geometry envelope already contains the origin, the translation procedure cannot be applied. In this case, the common bits value is computed as zero. If the geometry crosses the Y axis but not the X axis (and mutatis mutandum), the common bits for Y are zero, but the common bits for X are non-zero. Inheritance object CommonBitsRemover Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Precision Assembly: NetTopologySuite.dll Syntax public class CommonBitsRemover Properties | Edit this page View Source CommonCoordinate The common bits of the Coordinates in the supplied Geometries. Declaration public Coordinate CommonCoordinate { get; } Property Value Type Description Coordinate Methods | Edit this page View Source Add(Geometry) Add a point to the set of geometries whose common bits are being computed. After this method has executed the common coordinate reflects the common bits of all added geometries. Declaration public void Add(Geometry geom) Parameters Type Name Description Geometry geom A Geometry to test for common bits. | Edit this page View Source AddCommonBits(Geometry) Adds the common coordinate bits back into a Geometry. The coordinates of the Geometry are changed. Declaration public void AddCommonBits(Geometry geom) Parameters Type Name Description Geometry geom The Geometry to which to add the common coordinate bits. | Edit this page View Source RemoveCommonBits(Geometry) Removes the common coordinate bits from a Geometry. The coordinates of the Geometry are changed. Declaration public Geometry RemoveCommonBits(Geometry geom) Parameters Type Name Description Geometry geom The Geometry from which to remove the common coordinate bits. Returns Type Description Geometry The shifted Geometry."
  },
  "api/NetTopologySuite.Precision.CoordinatePrecisionReducerFilter.html": {
    "href": "api/NetTopologySuite.Precision.CoordinatePrecisionReducerFilter.html",
    "title": "Class CoordinatePrecisionReducerFilter | NetTopologySuite",
    "summary": "Class CoordinatePrecisionReducerFilter Reduces the precision of the Coordinates in a CoordinateSequence to match the supplied PrecisionModel. Inheritance object CoordinatePrecisionReducerFilter Implements ICoordinateSequenceFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Precision Assembly: NetTopologySuite.dll Syntax public class CoordinatePrecisionReducerFilter : ICoordinateSequenceFilter Remarks Uses MakePrecise(double). The input is modified in-place, so it should be cloned beforehand if the original should not be modified. Constructors | Edit this page View Source CoordinatePrecisionReducerFilter(PrecisionModel) Creates a new precision reducer filter. Declaration public CoordinatePrecisionReducerFilter(PrecisionModel precModel) Parameters Type Name Description PrecisionModel precModel The PrecisionModel to use Properties | Edit this page View Source Done Always runs over all geometry components. Declaration public bool Done { get; } Property Value Type Description bool | Edit this page View Source GeometryChanged Always reports that the geometry has changed Declaration public bool GeometryChanged { get; } Property Value Type Description bool Methods | Edit this page View Source Filter(CoordinateSequence, int) Rounds the Coordinates in the sequence to match the PrecisionModel Declaration public void Filter(CoordinateSequence seq, int i) Parameters Type Name Description CoordinateSequence seq int i Implements ICoordinateSequenceFilter"
  },
  "api/NetTopologySuite.Precision.EnhancedPrecisionOp.html": {
    "href": "api/NetTopologySuite.Precision.EnhancedPrecisionOp.html",
    "title": "Class EnhancedPrecisionOp | NetTopologySuite",
    "summary": "Class EnhancedPrecisionOp Provides versions of Geometry spatial functions which use enhanced precision techniques to reduce the likelihood of robustness problems. Inheritance object EnhancedPrecisionOp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Precision Assembly: NetTopologySuite.dll Syntax public class EnhancedPrecisionOp Methods | Edit this page View Source Difference(Geometry, Geometry) Computes the set-theoretic difference of two Geometrys, using enhanced precision. Declaration public static Geometry Difference(Geometry geom0, Geometry geom1) Parameters Type Name Description Geometry geom0 The first Geometry. Geometry geom1 The second Geometry. Returns Type Description Geometry The Geometry representing the set-theoretic difference of the input Geometries. | Edit this page View Source Intersection(Geometry, Geometry) Computes the set-theoretic intersection of two Geometrys, using enhanced precision. Declaration public static Geometry Intersection(Geometry geom0, Geometry geom1) Parameters Type Name Description Geometry geom0 The first Geometry. Geometry geom1 The second Geometry. Returns Type Description Geometry The Geometry representing the set-theoretic intersection of the input Geometries. | Edit this page View Source SymDifference(Geometry, Geometry) Computes the set-theoretic symmetric difference of two Geometrys, using enhanced precision. Declaration public static Geometry SymDifference(Geometry geom0, Geometry geom1) Parameters Type Name Description Geometry geom0 The first Geometry. Geometry geom1 The second Geometry. Returns Type Description Geometry The Geometry representing the set-theoretic symmetric difference of the input Geometries. | Edit this page View Source Union(Geometry, Geometry) Computes the set-theoretic union of two Geometrys, using enhanced precision. Declaration public static Geometry Union(Geometry geom0, Geometry geom1) Parameters Type Name Description Geometry geom0 The first Geometry. Geometry geom1 The second Geometry. Returns Type Description Geometry The Geometry representing the set-theoretic union of the input Geometries."
  },
  "api/NetTopologySuite.Precision.GeometryPrecisionReducer.html": {
    "href": "api/NetTopologySuite.Precision.GeometryPrecisionReducer.html",
    "title": "Class GeometryPrecisionReducer | NetTopologySuite",
    "summary": "Class GeometryPrecisionReducer Reduces the precision of a Geometry according to the supplied PrecisionModel, ensuring that the result is valid (unless specified otherwise). By default the geometry precision model is not changed. This can be overridden by using ChangePrecisionModel. Topological Precision Reduction The default mode of operation ensures the reduced result is topologically valid (i.e. IsValid is true). To ensure this polygonal geometry is reduced in a topologically valid fashion (technically, by using snap-rounding). Note that this may change polygonal geometry structure (e.g.two polygons separated by a distance below the specified precision will be merged into a single polygon). Duplicate vertices are removed. This mode is invoked by the static method Reduce(Geometry, PrecisionModel). Normally, collapsed linear components(e.g.lines collapsing to a point) are not included in the result. This behavior can be changed by setting RemoveCollapsedComponents to false, or by using the static method ReduceKeepCollapsed(Geometry, PrecisionModel). In general input must be valid geometry, or an ArgumentException will be thrown. However if the invalidity is \"mild\" or very small then it may be eliminated by precision reduction. Pointwise Precision Reduction Alternatively, geometry can be reduced pointwise by using {@link #setPointwise(boolean)}. Linear and point geometry are always reduced pointwise(i.e.without further change to topology or structure), since this does not change validity. Invalid inputs are allowed. Duplicate vertices are preserved. Collapsed components are always included in the result. The result geometry may be invalid. This mode is invoked by the static method ReducePointwise(Geometry, PrecisionModel). Inheritance object GeometryPrecisionReducer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Precision Assembly: NetTopologySuite.dll Syntax public class GeometryPrecisionReducer Constructors | Edit this page View Source GeometryPrecisionReducer(PrecisionModel) Declaration public GeometryPrecisionReducer(PrecisionModel pm) Parameters Type Name Description PrecisionModel pm Properties | Edit this page View Source ChangePrecisionModel Gets or sets whether the PrecisionModel of the new reduced Geometry will be changed to be the PrecisionModel supplied to specify the precision reduction. The default is to not change the precision model Declaration public bool ChangePrecisionModel { get; set; } Property Value Type Description bool | Edit this page View Source Pointwise Gets or sets whether the precision reduction will be done in pointwise fashion only. Pointwise precision reduction reduces the precision of the individual coordinates only, but does not attempt to recreate valid topology. This is only relevant for geometries containing polygonal components. Declaration public bool Pointwise { get; set; } Property Value Type Description bool | Edit this page View Source RemoveCollapsedComponents Gets or sets whether the reduction will result in collapsed components being removed completely, or simply being collapsed to an (invalid) Geometry of the same type. The default is to remove collapsed components. Declaration public bool RemoveCollapsedComponents { get; set; } Property Value Type Description bool Methods | Edit this page View Source Reduce(Geometry) Reduces the precision of a geometry, according to the specified strategy of this reducer. Declaration public Geometry Reduce(Geometry geom) Parameters Type Name Description Geometry geom The geometry to reduce Returns Type Description Geometry The precision-reduced geometry Exceptions Type Condition ArgumentException if the reduction fails due to input geometry is invalid. | Edit this page View Source Reduce(Geometry, PrecisionModel) Reduces precision of a geometry, ensuring output geometry is valid. Collapsed linear and polygonal components are removed. The geometry precision model is not changed. Invalid input geometry may cause an error, unless the invalidity is below the scale of the precision reduction. Declaration public static Geometry Reduce(Geometry g, PrecisionModel precModel) Parameters Type Name Description Geometry g The geometry to reduce PrecisionModel precModel The precision model to use Returns Type Description Geometry The reduced geometry Exceptions Type Condition ArgumentException Thrwon if the reduction fails due to invalid input geometry | Edit this page View Source ReduceKeepCollapsed(Geometry, PrecisionModel) Reduces precision of a geometry, ensuring output polygonal geometry is valid, and preserving collapsed linear elements. The geometry precision model is not changed. Invalid input geometry may cause an error, unless the invalidity is below the scale of the precision reduction. Declaration public static Geometry ReduceKeepCollapsed(Geometry geom, PrecisionModel pm) Parameters Type Name Description Geometry geom PrecisionModel pm Returns Type Description Geometry The reduced geometry Exceptions Type Condition ArgumentException Thrwon if the reduction fails due to invalid input geometry | Edit this page View Source ReducePointwise(Geometry, PrecisionModel) Reduce precision of a geometry in a pointwise way. All input geometry elements are preserved in the output, including invalid polygons and collapsed polygons and linestrings. The output may not be valid, due to collapse or self-intersection. The geometry precision model is not changed. Invalid input geometry is allowed. Declaration public static Geometry ReducePointwise(Geometry g, PrecisionModel precModel) Parameters Type Name Description Geometry g The geometry to reduce PrecisionModel precModel The precision model to use Returns Type Description Geometry The reduced geometry"
  },
  "api/NetTopologySuite.Precision.MinimumClearance.html": {
    "href": "api/NetTopologySuite.Precision.MinimumClearance.html",
    "title": "Class MinimumClearance | NetTopologySuite",
    "summary": "Class MinimumClearance Computes the Minimum Clearance of a Geometry. The Minimum Clearance is a measure of what magnitude of perturbation of the vertices of a geometry can be tolerated before the geometry becomes topologically invalid. The smaller the Minimum Clearance distance, the less vertex perturbation the geometry can tolerate before becoming invalid. Inheritance object MinimumClearance Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Precision Assembly: NetTopologySuite.dll Syntax public class MinimumClearance Remarks The concept was introduced by Thompson and Van Oosterom [TV06], based on earlier work by Milenkovic [Mi88]. The Minimum Clearance of a geometry G is defined to be the value r such that \"the movement of all points by a distance of r in any direction will guarantee to leave the geometry valid\" [TV06]. An equivalent constructive definition [Mi88] is that r is the largest value such: No two distinct vertices of G are closer than r. No vertex of G is closer than r to an edge of G of which the vertex is not an endpoint The following image shows an example of the Minimum Clearance of a simple polygon. If G has only a single vertex (i.e. is a Point), the value of the minimum clearance is MaxValue. If G is a IPuntal or ILineal geometry, then in fact no amount of perturbation will render the geometry invalid. In this case a Minimum Clearance is still computed based on the vertex and segment distances according to the constructive definition. It is possible for no Minimum Clearance to exist. For instance, a MultiPoint with all members identical has no Minimum Clearance (i.e. no amount of perturbation will cause the member points to become non-identical). Empty geometries also have no such distance. The lack of a meaningful MinimumClearance distance is detected and suitable values are returned by GetDistance() and GetLine(). The computation of Minimum Clearance utilizes the NearestNeighbour(IItemDistance<Envelope, TItem>) method to provide good performance even for large inputs. An interesting note is that for the case of MultiPoints, the computed Minimum Clearance line effectively determines the Nearest Neighbours in the collection. References [Mi88] Milenkovic, V. J., Verifiable implementations of geometric algorithms using finite precision arithmetic. in Artificial Intelligence, 377-401. 1988 [TV06] Thompson, Rod and van Oosterom, Peter, Interchange of Spatial Data-Inhibiting Factors, Agile 2006, Visegrad, Hungary. 2006 Constructors | Edit this page View Source MinimumClearance(Geometry) Creates an object to compute the Minimum Clearance for the given Geometry Declaration public MinimumClearance(Geometry geom) Parameters Type Name Description Geometry geom The input geometry Methods | Edit this page View Source GetDistance() Gets the Minimum Clearance distance. If no distance exists (e.g. in the case of two identical points) MaxValue is returned. Declaration public double GetDistance() Returns Type Description double The value of the minimum clearance distance or MaxValue if no Minimum Clearance distance exists | Edit this page View Source GetDistance(Geometry) Computes the Minimum Clearance distance for the given Geometry. Declaration public static double GetDistance(Geometry g) Parameters Type Name Description Geometry g The input geometry Returns Type Description double The minimum clearance | Edit this page View Source GetLine() Gets a LineString containing two points which are at the Minimum Clearance distance. If no distance could be found (e.g. in the case of two identical points) LINESTRING EMPTY is returned. Declaration public LineString GetLine() Returns Type Description LineString The value of the minimum clearance distance, or LINESTRING EMPTY if no minimum clearance distance exists. | Edit this page View Source GetLine(Geometry) Gets a LineString containing two points which are at the Minimum Clearance distance for the given Geometry. Declaration public static Geometry GetLine(Geometry g) Parameters Type Name Description Geometry g The input geometry Returns Type Description Geometry The value of the minimum clearance distance or LINESTRING EMPTY if no minimum clearance distance exists."
  },
  "api/NetTopologySuite.Precision.PrecisionReducerCoordinateOperation.html": {
    "href": "api/NetTopologySuite.Precision.PrecisionReducerCoordinateOperation.html",
    "title": "Class PrecisionReducerCoordinateOperation | NetTopologySuite",
    "summary": "Class PrecisionReducerCoordinateOperation Inheritance object GeometryEditor.CoordinateOperation PrecisionReducerCoordinateOperation Implements GeometryEditor.IGeometryEditorOperation Inherited Members GeometryEditor.CoordinateOperation.Edit(Geometry, GeometryFactory) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Precision Assembly: NetTopologySuite.dll Syntax public class PrecisionReducerCoordinateOperation : GeometryEditor.CoordinateOperation, GeometryEditor.IGeometryEditorOperation Constructors | Edit this page View Source PrecisionReducerCoordinateOperation(PrecisionModel, bool) Declaration public PrecisionReducerCoordinateOperation(PrecisionModel targetPrecModel, bool removeCollapsed) Parameters Type Name Description PrecisionModel targetPrecModel bool removeCollapsed Methods | Edit this page View Source Edit(Coordinate[], Geometry) Edits the array of Coordinates from a Geometry. Declaration public override Coordinate[] Edit(Coordinate[] coordinates, Geometry geom) Parameters Type Name Description Coordinate[] coordinates The coordinate array to operate on. Geometry geom Returns Type Description Coordinate[] An edited coordinate array (which may be the same as the input). Overrides GeometryEditor.CoordinateOperation.Edit(Coordinate[], Geometry) Implements GeometryEditor.IGeometryEditorOperation"
  },
  "api/NetTopologySuite.Precision.SimpleMinimumClearance.html": {
    "href": "api/NetTopologySuite.Precision.SimpleMinimumClearance.html",
    "title": "Class SimpleMinimumClearance | NetTopologySuite",
    "summary": "Class SimpleMinimumClearance Computes the minimum clearance of a geometry or set of geometries. The Minimum Clearance is a measure of what magnitude of perturbation of its vertices can be tolerated by a geometry before it becomes topologically invalid. This class uses an inefficient O(N^2) scan. It is primarily for testing purposes. Inheritance object SimpleMinimumClearance Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Precision Assembly: NetTopologySuite.dll Syntax public class SimpleMinimumClearance Constructors | Edit this page View Source SimpleMinimumClearance(Geometry) Declaration public SimpleMinimumClearance(Geometry geom) Parameters Type Name Description Geometry geom Methods | Edit this page View Source GetDistance() Declaration public double GetDistance() Returns Type Description double | Edit this page View Source GetDistance(Geometry) Declaration public static double GetDistance(Geometry g) Parameters Type Name Description Geometry g Returns Type Description double | Edit this page View Source GetLine() Declaration public LineString GetLine() Returns Type Description LineString | Edit this page View Source GetLine(Geometry) Declaration public static Geometry GetLine(Geometry g) Parameters Type Name Description Geometry g Returns Type Description Geometry See Also MinimumClearance"
  },
  "api/NetTopologySuite.Precision.html": {
    "href": "api/NetTopologySuite.Precision.html",
    "title": "Namespace NetTopologySuite.Precision | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Precision Provides classes for analyzing and manipulating the precision of Geometries. Classes CommonBits Determines the maximum number of common most-significant bits in the mantissa of one or numbers. Can be used to compute the double-precision number which is represented by the common bits. If there are no common bits, the number computed is 0.0. CommonBitsOp Provides versions of Geometry spatial functions which use common bit removal to reduce the likelihood of robustness problems. In the current implementation no rounding is performed on the reshifted result point, which means that it is possible that the returned Geometry is invalid. Client classes should check the validity of the returned result themselves. CommonBitsRemover Removes common most-significant mantissa bits from one or more Geometrys. The CommonBitsRemover \"scavenges\" precision which is \"wasted\" by a large displacement of the geometry from the origin. For example, if a small geometry is displaced from the origin by a large distance, the displacement increases the significant figures in the coordinates, but does not affect the relative topology of the geometry. Thus the geometry can be translated back to the origin without affecting its topology. In order to compute the translation without affecting the full precision of the coordinate values, the translation is performed at the bit level by removing the common leading mantissa bits. If the geometry envelope already contains the origin, the translation procedure cannot be applied. In this case, the common bits value is computed as zero. If the geometry crosses the Y axis but not the X axis (and mutatis mutandum), the common bits for Y are zero, but the common bits for X are non-zero. CommonBitsRemover.CommonCoordinateFilter CoordinatePrecisionReducerFilter Reduces the precision of the Coordinates in a CoordinateSequence to match the supplied PrecisionModel. EnhancedPrecisionOp Provides versions of Geometry spatial functions which use enhanced precision techniques to reduce the likelihood of robustness problems. GeometryPrecisionReducer Reduces the precision of a Geometry according to the supplied PrecisionModel, ensuring that the result is valid (unless specified otherwise). By default the geometry precision model is not changed. This can be overridden by using ChangePrecisionModel. Topological Precision Reduction The default mode of operation ensures the reduced result is topologically valid (i.e. IsValid is true). To ensure this polygonal geometry is reduced in a topologically valid fashion (technically, by using snap-rounding). Note that this may change polygonal geometry structure (e.g.two polygons separated by a distance below the specified precision will be merged into a single polygon). Duplicate vertices are removed. This mode is invoked by the static method Reduce(Geometry, PrecisionModel). Normally, collapsed linear components(e.g.lines collapsing to a point) are not included in the result. This behavior can be changed by setting RemoveCollapsedComponents to false, or by using the static method ReduceKeepCollapsed(Geometry, PrecisionModel). In general input must be valid geometry, or an ArgumentException will be thrown. However if the invalidity is \"mild\" or very small then it may be eliminated by precision reduction. Pointwise Precision Reduction Alternatively, geometry can be reduced pointwise by using {@link #setPointwise(boolean)}. Linear and point geometry are always reduced pointwise(i.e.without further change to topology or structure), since this does not change validity. Invalid inputs are allowed. Duplicate vertices are preserved. Collapsed components are always included in the result. The result geometry may be invalid. This mode is invoked by the static method ReducePointwise(Geometry, PrecisionModel). MinimumClearance Computes the Minimum Clearance of a Geometry. The Minimum Clearance is a measure of what magnitude of perturbation of the vertices of a geometry can be tolerated before the geometry becomes topologically invalid. The smaller the Minimum Clearance distance, the less vertex perturbation the geometry can tolerate before becoming invalid. PrecisionReducerCoordinateOperation SimpleMinimumClearance Computes the minimum clearance of a geometry or set of geometries. The Minimum Clearance is a measure of what magnitude of perturbation of its vertices can be tolerated by a geometry before it becomes topologically invalid. This class uses an inefficient O(N^2) scan. It is primarily for testing purposes."
  },
  "api/NetTopologySuite.Shape.CubicBezierCurve.html": {
    "href": "api/NetTopologySuite.Shape.CubicBezierCurve.html",
    "title": "Class CubicBezierCurve | NetTopologySuite",
    "summary": "Class CubicBezierCurve Creates a curved geometry by replacing the segments of the input with Cubic Bezier Curves. Inheritance object CubicBezierCurve Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Shape Assembly: NetTopologySuite.dll Syntax public class CubicBezierCurve Remarks The Bezier control points are determined from the segments of the geometry and the alpha control parameter controlling curvedness, and the optional skew parameter controlling the shape of the curve at vertices. The Bezier Curves are created to be C2-continuous (smooth) at each input vertex. Alternatively, the Bezier control points can be supplied explicitly. The result is not guaranteed to be valid, since large alpha values may cause self-intersections. Methods | Edit this page View Source Create(Geometry, Geometry) Creates a geometry of linearized Cubic Bezier Curves defined by the segments of the input and a list (or lists) of control points. Declaration public static Geometry Create(Geometry geom, Geometry controlPoints) Parameters Type Name Description Geometry geom The geometry defining the curve Geometry controlPoints A geometry containing the control point elements. Returns Type Description Geometry The linearized curved geometry Remarks Typically the control point geometry is a LineString or MultiLineString containing an element for each line or ring in the input geometry. The list of control points for each linear element must contain two vertices for each segment (and thus 2 * npts - 2 ). | Edit this page View Source Create(Geometry, double) Creates a geometry of linearized Cubic Bezier Curves defined by the segments of the input and a parameter controlling how curved the result should be. Declaration public static Geometry Create(Geometry geom, double alpha) Parameters Type Name Description Geometry geom The geometry defining the curve double alpha A curvedness parameter (0 is linear, 1 is round, >1 is increasingly curved) Returns Type Description Geometry The linearized curved geometry | Edit this page View Source Create(Geometry, double, double) Creates a geometry of linearized Cubic Bezier Curves defined by the segments of the inputand a parameter controlling how curved the result should be, with a skew factor affecting the curve shape at each vertex. Declaration public static Geometry Create(Geometry geom, double alpha, double skew) Parameters Type Name Description Geometry geom The geometry defining the curve double alpha The curvedness parameter (0 is linear, 1 is round, >1 is increasingly curved) double skew The skew parameter (0 is none, positive skews towards longer side, negative towards shorter Returns Type Description Geometry The linearized curved geometry | Edit this page View Source GetResult() Gets the computed Bezier curve geometry Declaration public Geometry GetResult() Returns Type Description Geometry The curved geometry"
  },
  "api/NetTopologySuite.Shape.Fractal.HilbertCode.html": {
    "href": "api/NetTopologySuite.Shape.Fractal.HilbertCode.html",
    "title": "Class HilbertCode | NetTopologySuite",
    "summary": "Class HilbertCode Encodes points as the index along finite planar Hilbert curves. The planar Hilbert Curve is a continuous space-filling curve. In the limit the Hilbert curve has infinitely many vertices and fills the space of the unit square. A sequence of finite approximations to the infinite Hilbert curve is defined by the level number. The finite Hilbert curve at level n Hₙ contains 2ⁿ⁺¹ points. Each finite Hilbert curve defines an ordering of the points in the 2-dimensional range square containing the curve. Curves fills the range square of side 2ˡᵉᵛᵉˡ. Curve points have ordinates in the range [0, 2ˡᵉᵛᵉˡ - 1]. The index of a point along a Hilbert curve is called the Hilbert code. The code for a given point is specific to the level chosen. This implementation represents codes using 32-bit integers. This allows levels 0 to 16 to be handled. The class supports encoding points in the range of a given level curve and decoding the point for a given code value. The Hilbert order has the property that it tends to preserve locality. This means that codes which are near in value will have spatially proximate points. The converse is not always true - the delta between codes for nearby points is not always small. But the average delta is small enough that the Hilbert order is an effective way of linearizing space to support range queries. Inheritance object HilbertCode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Shape.Fractal Assembly: NetTopologySuite.dll Syntax public static class HilbertCode Fields | Edit this page View Source MaxLevel The maximum curve level that can be represented. Declaration public static readonly int MaxLevel Field Value Type Description int Methods | Edit this page View Source Decode(int, int) Computes the point on a Hilbert curve of given level for a given code index. The point ordinates will lie in the range [0, 2ˡᵉᵛᵉˡ - 1]. Declaration public static Coordinate Decode(int level, int index) Parameters Type Name Description int level The Hilbert curve level. int index The index of the point on the curve. Returns Type Description Coordinate The point on the Hilbert curve. | Edit this page View Source Encode(int, int, int) Encodes a point (x,y) in the range of the the Hilbert curve at a given level as the index of the point along the curve. The index will lie in the range [0, 2ˡᵉᵛᵉˡ⁺¹]. Declaration public static int Encode(int level, int x, int y) Parameters Type Name Description int level The level of the Hilbert curve. int x The x ordinate of the point. int y The y ordinate of the point. Returns Type Description int The index of the point along the Hilbert curve. | Edit this page View Source Level(int) The level of the finite Hilbert curve which contains at least the given number of points. Declaration public static int Level(int numPoints) Parameters Type Name Description int numPoints The number of points required. Returns Type Description int The level of the curve. | Edit this page View Source MaxOrdinate(int) The maximum ordinate value for points in the curve for the given level. The maximum ordinate is 2ˡᵉᵛᵉˡ - 1. Declaration public static int MaxOrdinate(int level) Parameters Type Name Description int level The level of the curve. Returns Type Description int The maximum ordinate value. | Edit this page View Source Size(int) The number of points in the curve for the given level. The number of points is 2²ˡᵉᵛᵉˡ. Declaration public static int Size(int level) Parameters Type Name Description int level The level of the curve Returns Type Description int The number of points. See Also HilbertCurveBuilder MortonCode"
  },
  "api/NetTopologySuite.Shape.Fractal.HilbertCurveBuilder.html": {
    "href": "api/NetTopologySuite.Shape.Fractal.HilbertCurveBuilder.html",
    "title": "Class HilbertCurveBuilder | NetTopologySuite",
    "summary": "Class HilbertCurveBuilder Generates a LineString representing the Hilbert Curve at a given level. Inheritance object GeometricShapeBuilder HilbertCurveBuilder Inherited Members GeometricShapeBuilder.GeomFactory GeometricShapeBuilder.Extent GeometricShapeBuilder.Centre GeometricShapeBuilder.Diameter GeometricShapeBuilder.Radius GeometricShapeBuilder.GetSquareBaseLine() GeometricShapeBuilder.GetSquareExtent() GeometricShapeBuilder.NumPoints GeometricShapeBuilder.CreateCoord(double, double) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Shape.Fractal Assembly: NetTopologySuite.dll Syntax public class HilbertCurveBuilder : GeometricShapeBuilder Constructors | Edit this page View Source HilbertCurveBuilder(GeometryFactory) Initializes a new instance of the HilbertCurveBuilder class using the provided GeometryFactory. Declaration public HilbertCurveBuilder(GeometryFactory geomFactory) Parameters Type Name Description GeometryFactory geomFactory The geometry factory to use. Properties | Edit this page View Source Level Gets or sets the level of curve to generate. The level must be in the range [0 - 16]. This determines the number of points in the generated curve. Declaration public int Level { get; set; } Property Value Type Description int Methods | Edit this page View Source GetGeometry() Declaration public override Geometry GetGeometry() Returns Type Description Geometry Overrides GeometricShapeBuilder.GetGeometry()"
  },
  "api/NetTopologySuite.Shape.Fractal.KochSnowflakeBuilder.html": {
    "href": "api/NetTopologySuite.Shape.Fractal.KochSnowflakeBuilder.html",
    "title": "Class KochSnowflakeBuilder | NetTopologySuite",
    "summary": "Class KochSnowflakeBuilder Inheritance object GeometricShapeBuilder KochSnowflakeBuilder Inherited Members GeometricShapeBuilder.GeomFactory GeometricShapeBuilder.Extent GeometricShapeBuilder.Centre GeometricShapeBuilder.Diameter GeometricShapeBuilder.Radius GeometricShapeBuilder.GetSquareBaseLine() GeometricShapeBuilder.GetSquareExtent() GeometricShapeBuilder.NumPoints GeometricShapeBuilder.CreateCoord(double, double) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Shape.Fractal Assembly: NetTopologySuite.dll Syntax public class KochSnowflakeBuilder : GeometricShapeBuilder Constructors | Edit this page View Source KochSnowflakeBuilder(GeometryFactory) Declaration public KochSnowflakeBuilder(GeometryFactory geomFactory) Parameters Type Name Description GeometryFactory geomFactory Methods | Edit this page View Source GetGeometry() Declaration public override Geometry GetGeometry() Returns Type Description Geometry Overrides GeometricShapeBuilder.GetGeometry()"
  },
  "api/NetTopologySuite.Shape.Fractal.MortonCode.html": {
    "href": "api/NetTopologySuite.Shape.Fractal.MortonCode.html",
    "title": "Class MortonCode | NetTopologySuite",
    "summary": "Class MortonCode Encodes points as the index along the planar Morton (Z-order) curve. The planar Morton (Z-order) curve is a continuous space-filling curve. The Morton curve defines an ordering of the points in the positive quadrant of the plane. The index of a point along the Morton curve is called the Morton code. A sequence of subsets of the Morton curve can be defined by a level number. Each level subset occupies a square range. The curve at level n Mₙ contains 2ⁿ⁺¹ points. It fills the range square of side 2ˡᵉᵛᵉˡ. Curve points have ordinates in the range [0, 2ˡᵉᵛᵉˡ - 1]. The code for a given point is identical at all levels. The level simply determines the number of points in the curve subset and the size of the range square. This implementation represents codes using 32-bit integers. This allows levels 0 to 16 to be handled. The class supports encoding points and decoding the point for a given code value. The Morton order has the property that it tends to preserve locality. This means that codes which are near in value will have spatially proximate points. The converse is not always true - the delta between codes for nearby points is not always small. But the average delta is small enough that the Morton order is an effective way of linearizing space to support range queries. Inheritance object MortonCode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Shape.Fractal Assembly: NetTopologySuite.dll Syntax public static class MortonCode Fields | Edit this page View Source MaxLevel The maximum curve level that can be represented. Declaration public static readonly int MaxLevel Field Value Type Description int Methods | Edit this page View Source Decode(int) Computes the point on the Morton curve for a given index. Declaration public static Coordinate Decode(int index) Parameters Type Name Description int index The index of the point on the curve. Returns Type Description Coordinate The point on the curve. | Edit this page View Source Encode(int, int) Computes the index of the point (x,y) in the Morton curve ordering. Declaration public static int Encode(int x, int y) Parameters Type Name Description int x The x ordinate of the point. int y The y ordinate of the point. Returns Type Description int The index of the point along the Morton curve. | Edit this page View Source Level(int) The level of the finite Morton curve which contains at least the given number of points. Declaration public static int Level(int numPoints) Parameters Type Name Description int numPoints The number of points required. Returns Type Description int The level of the curve. | Edit this page View Source MaxOrdinate(int) The maximum ordinate value for points in the curve for the given level. The maximum ordinate is 2ˡᵉᵛᵉˡ - 1. Declaration public static int MaxOrdinate(int level) Parameters Type Name Description int level The level of the curve. Returns Type Description int The maximum ordinate value. | Edit this page View Source Size(int) The number of points in the curve for the given level. The number of points is 2²ˡᵉᵛᵉˡ. Declaration public static int Size(int level) Parameters Type Name Description int level The level of the curve Returns Type Description int The number of points. See Also MortonCurveBuilder HilbertCode"
  },
  "api/NetTopologySuite.Shape.Fractal.MortonCurveBuilder.html": {
    "href": "api/NetTopologySuite.Shape.Fractal.MortonCurveBuilder.html",
    "title": "Class MortonCurveBuilder | NetTopologySuite",
    "summary": "Class MortonCurveBuilder Generates a LineString representing the Morton Curve at a given level. Inheritance object GeometricShapeBuilder MortonCurveBuilder Inherited Members GeometricShapeBuilder.GeomFactory GeometricShapeBuilder.Extent GeometricShapeBuilder.Centre GeometricShapeBuilder.Diameter GeometricShapeBuilder.Radius GeometricShapeBuilder.GetSquareBaseLine() GeometricShapeBuilder.GetSquareExtent() GeometricShapeBuilder.NumPoints GeometricShapeBuilder.CreateCoord(double, double) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Shape.Fractal Assembly: NetTopologySuite.dll Syntax public class MortonCurveBuilder : GeometricShapeBuilder Constructors | Edit this page View Source MortonCurveBuilder(GeometryFactory) Initializes a new instance of the MortonCurveBuilder class using the provided GeometryFactory. Declaration public MortonCurveBuilder(GeometryFactory geomFactory) Parameters Type Name Description GeometryFactory geomFactory The geometry factory to use. Properties | Edit this page View Source Level Gets or sets the level of curve to generate. The level must be in the range [0 - 16]. Declaration public int Level { get; set; } Property Value Type Description int Methods | Edit this page View Source GetGeometry() Declaration public override Geometry GetGeometry() Returns Type Description Geometry Overrides GeometricShapeBuilder.GetGeometry()"
  },
  "api/NetTopologySuite.Shape.Fractal.SierpinskiCarpetBuilder.html": {
    "href": "api/NetTopologySuite.Shape.Fractal.SierpinskiCarpetBuilder.html",
    "title": "Class SierpinskiCarpetBuilder | NetTopologySuite",
    "summary": "Class SierpinskiCarpetBuilder Inheritance object GeometricShapeBuilder SierpinskiCarpetBuilder Inherited Members GeometricShapeBuilder.GeomFactory GeometricShapeBuilder.Extent GeometricShapeBuilder.Centre GeometricShapeBuilder.Diameter GeometricShapeBuilder.Radius GeometricShapeBuilder.GetSquareBaseLine() GeometricShapeBuilder.GetSquareExtent() GeometricShapeBuilder.NumPoints GeometricShapeBuilder.CreateCoord(double, double) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Shape.Fractal Assembly: NetTopologySuite.dll Syntax public class SierpinskiCarpetBuilder : GeometricShapeBuilder Constructors | Edit this page View Source SierpinskiCarpetBuilder(GeometryFactory) Declaration public SierpinskiCarpetBuilder(GeometryFactory geomFactory) Parameters Type Name Description GeometryFactory geomFactory Methods | Edit this page View Source GetGeometry() Declaration public override Geometry GetGeometry() Returns Type Description Geometry Overrides GeometricShapeBuilder.GetGeometry()"
  },
  "api/NetTopologySuite.Shape.Fractal.html": {
    "href": "api/NetTopologySuite.Shape.Fractal.html",
    "title": "Namespace NetTopologySuite.Shape.Fractal | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Shape.Fractal Classes HilbertCode Encodes points as the index along finite planar Hilbert curves. The planar Hilbert Curve is a continuous space-filling curve. In the limit the Hilbert curve has infinitely many vertices and fills the space of the unit square. A sequence of finite approximations to the infinite Hilbert curve is defined by the level number. The finite Hilbert curve at level n Hₙ contains 2ⁿ⁺¹ points. Each finite Hilbert curve defines an ordering of the points in the 2-dimensional range square containing the curve. Curves fills the range square of side 2ˡᵉᵛᵉˡ. Curve points have ordinates in the range [0, 2ˡᵉᵛᵉˡ - 1]. The index of a point along a Hilbert curve is called the Hilbert code. The code for a given point is specific to the level chosen. This implementation represents codes using 32-bit integers. This allows levels 0 to 16 to be handled. The class supports encoding points in the range of a given level curve and decoding the point for a given code value. The Hilbert order has the property that it tends to preserve locality. This means that codes which are near in value will have spatially proximate points. The converse is not always true - the delta between codes for nearby points is not always small. But the average delta is small enough that the Hilbert order is an effective way of linearizing space to support range queries. HilbertCurveBuilder Generates a LineString representing the Hilbert Curve at a given level. KochSnowflakeBuilder MortonCode Encodes points as the index along the planar Morton (Z-order) curve. The planar Morton (Z-order) curve is a continuous space-filling curve. The Morton curve defines an ordering of the points in the positive quadrant of the plane. The index of a point along the Morton curve is called the Morton code. A sequence of subsets of the Morton curve can be defined by a level number. Each level subset occupies a square range. The curve at level n Mₙ contains 2ⁿ⁺¹ points. It fills the range square of side 2ˡᵉᵛᵉˡ. Curve points have ordinates in the range [0, 2ˡᵉᵛᵉˡ - 1]. The code for a given point is identical at all levels. The level simply determines the number of points in the curve subset and the size of the range square. This implementation represents codes using 32-bit integers. This allows levels 0 to 16 to be handled. The class supports encoding points and decoding the point for a given code value. The Morton order has the property that it tends to preserve locality. This means that codes which are near in value will have spatially proximate points. The converse is not always true - the delta between codes for nearby points is not always small. But the average delta is small enough that the Morton order is an effective way of linearizing space to support range queries. MortonCurveBuilder Generates a LineString representing the Morton Curve at a given level. SierpinskiCarpetBuilder"
  },
  "api/NetTopologySuite.Shape.GeometricShapeBuilder.html": {
    "href": "api/NetTopologySuite.Shape.GeometricShapeBuilder.html",
    "title": "Class GeometricShapeBuilder | NetTopologySuite",
    "summary": "Class GeometricShapeBuilder Inheritance object GeometricShapeBuilder HilbertCurveBuilder KochSnowflakeBuilder MortonCurveBuilder SierpinskiCarpetBuilder RandomPointsBuilder RandomPointsInGridBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Shape Assembly: NetTopologySuite.dll Syntax public abstract class GeometricShapeBuilder Constructors | Edit this page View Source GeometricShapeBuilder(GeometryFactory) Declaration protected GeometricShapeBuilder(GeometryFactory geomFactory) Parameters Type Name Description GeometryFactory geomFactory Fields | Edit this page View Source GeomFactory Declaration protected GeometryFactory GeomFactory Field Value Type Description GeometryFactory Properties | Edit this page View Source Centre Declaration public Coordinate Centre { get; } Property Value Type Description Coordinate | Edit this page View Source Diameter Declaration public double Diameter { get; } Property Value Type Description double | Edit this page View Source Extent Declaration public Envelope Extent { get; set; } Property Value Type Description Envelope | Edit this page View Source NumPoints Gets or sets the total number of points in the created Geometry. The created geometry will have no more than this number of points, unless more are needed to create a valid geometry. Declaration public int NumPoints { get; set; } Property Value Type Description int | Edit this page View Source Radius Declaration public double Radius { get; } Property Value Type Description double Methods | Edit this page View Source CreateCoord(double, double) Declaration protected Coordinate CreateCoord(double x, double y) Parameters Type Name Description double x double y Returns Type Description Coordinate | Edit this page View Source GetGeometry() Declaration public abstract Geometry GetGeometry() Returns Type Description Geometry | Edit this page View Source GetSquareBaseLine() Declaration public LineSegment GetSquareBaseLine() Returns Type Description LineSegment | Edit this page View Source GetSquareExtent() Declaration public Envelope GetSquareExtent() Returns Type Description Envelope"
  },
  "api/NetTopologySuite.Shape.Random.RandomPointsBuilder.html": {
    "href": "api/NetTopologySuite.Shape.Random.RandomPointsBuilder.html",
    "title": "Class RandomPointsBuilder | NetTopologySuite",
    "summary": "Class RandomPointsBuilder Creates random point sets contained in a region defined by either a rectangular or a polygonal extent. Inheritance object GeometricShapeBuilder RandomPointsBuilder Inherited Members GeometricShapeBuilder.GeomFactory GeometricShapeBuilder.Extent GeometricShapeBuilder.Centre GeometricShapeBuilder.Diameter GeometricShapeBuilder.Radius GeometricShapeBuilder.GetSquareBaseLine() GeometricShapeBuilder.GetSquareExtent() GeometricShapeBuilder.NumPoints GeometricShapeBuilder.CreateCoord(double, double) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Shape.Random Assembly: NetTopologySuite.dll Syntax public class RandomPointsBuilder : GeometricShapeBuilder Constructors | Edit this page View Source RandomPointsBuilder() Create a shape factory which will create shapes using the default GeometryFactory. Declaration public RandomPointsBuilder() | Edit this page View Source RandomPointsBuilder(GeometryFactory) Create a shape factory which will create shapes using the given GeometryFactory Declaration public RandomPointsBuilder(GeometryFactory geomFact) Parameters Type Name Description GeometryFactory geomFact The factory to use Fields | Edit this page View Source Rnd Declaration protected static readonly Random Rnd Field Value Type Description Random Methods | Edit this page View Source CreateRandomCoord(Envelope) Declaration protected Coordinate CreateRandomCoord(Envelope env) Parameters Type Name Description Envelope env Returns Type Description Coordinate | Edit this page View Source GetGeometry() Declaration public override Geometry GetGeometry() Returns Type Description Geometry Overrides GeometricShapeBuilder.GetGeometry() | Edit this page View Source IsInExtent(Coordinate) Declaration protected bool IsInExtent(Coordinate p) Parameters Type Name Description Coordinate p Returns Type Description bool | Edit this page View Source SetExtent(Geometry) Sets a polygonal mask. Declaration public void SetExtent(Geometry mask) Parameters Type Name Description Geometry mask Exceptions Type Condition ArgumentException if the mask is not polygonal"
  },
  "api/NetTopologySuite.Shape.Random.RandomPointsInGridBuilder.html": {
    "href": "api/NetTopologySuite.Shape.Random.RandomPointsInGridBuilder.html",
    "title": "Class RandomPointsInGridBuilder | NetTopologySuite",
    "summary": "Class RandomPointsInGridBuilder Creates random point sets where the points are constrained to lie in the cells of a grid. Inheritance object GeometricShapeBuilder RandomPointsInGridBuilder Inherited Members GeometricShapeBuilder.GeomFactory GeometricShapeBuilder.Extent GeometricShapeBuilder.Centre GeometricShapeBuilder.Diameter GeometricShapeBuilder.Radius GeometricShapeBuilder.GetSquareBaseLine() GeometricShapeBuilder.GetSquareExtent() GeometricShapeBuilder.NumPoints GeometricShapeBuilder.CreateCoord(double, double) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Shape.Random Assembly: NetTopologySuite.dll Syntax public class RandomPointsInGridBuilder : GeometricShapeBuilder Constructors | Edit this page View Source RandomPointsInGridBuilder() Create a builder which will create shapes using the default GeometryFactory. Declaration public RandomPointsInGridBuilder() | Edit this page View Source RandomPointsInGridBuilder(GeometryFactory) Create a builder which will create shapes using the given GeometryFactory. Declaration public RandomPointsInGridBuilder(GeometryFactory geomFact) Parameters Type Name Description GeometryFactory geomFact The factory to use Fields | Edit this page View Source Rnd Declaration protected static readonly Random Rnd Field Value Type Description Random Properties | Edit this page View Source ConstrainedToCircle Gets or sets whether generated points are constrained to lie within a circle contained within each grid cell. This provides greater separation between points in adjacent cells. The default is to not be constrained to a circle. Declaration public bool ConstrainedToCircle { get; set; } Property Value Type Description bool | Edit this page View Source GutterFraction Gets or sets the fraction of the grid cell side which will be treated as a gutter, in which no points will be created. The provided value is clamped to the range [0.0, 1.0]. Declaration public double GutterFraction { get; set; } Property Value Type Description double Methods | Edit this page View Source GetGeometry() Gets the MultiPoint containing the generated point Declaration public override Geometry GetGeometry() Returns Type Description Geometry A MultiPoint Overrides GeometricShapeBuilder.GetGeometry()"
  },
  "api/NetTopologySuite.Shape.Random.html": {
    "href": "api/NetTopologySuite.Shape.Random.html",
    "title": "Namespace NetTopologySuite.Shape.Random | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Shape.Random Classes RandomPointsBuilder Creates random point sets contained in a region defined by either a rectangular or a polygonal extent. RandomPointsInGridBuilder Creates random point sets where the points are constrained to lie in the cells of a grid."
  },
  "api/NetTopologySuite.Shape.html": {
    "href": "api/NetTopologySuite.Shape.html",
    "title": "Namespace NetTopologySuite.Shape | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Shape Classes CubicBezierCurve Creates a curved geometry by replacing the segments of the input with Cubic Bezier Curves. GeometricShapeBuilder"
  },
  "api/NetTopologySuite.Simplify.ComponentJumpChecker.html": {
    "href": "api/NetTopologySuite.Simplify.ComponentJumpChecker.html",
    "title": "Class ComponentJumpChecker | NetTopologySuite",
    "summary": "Class ComponentJumpChecker Checks if simplifying (flattening) line sections or segments would cause them to \"jump\" over other components in the geometry. Inheritance object ComponentJumpChecker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Simplify Assembly: NetTopologySuite.dll Syntax public sealed class ComponentJumpChecker Methods | Edit this page View Source HasJump(TaggedLineString, LineSegment, LineSegment, LineSegment) Checks if two consecutive segments jumps a component if flattened. The segments are assumed to be consecutive. (so the seg1.P1 = seg2.P0). The flattening segment must be the segment between seg1.P0 and seg2.P1. Declaration public bool HasJump(TaggedLineString line, LineSegment seg1, LineSegment seg2, LineSegment seg) Parameters Type Name Description TaggedLineString line The line containing the section being flattened LineSegment seg1 The first replaced segment LineSegment seg2 The next replaced segment LineSegment seg The flattening segment Returns Type Description bool true if the flattened segment jumps a component | Edit this page View Source HasJump(TaggedLineString, int, int, LineSegment) Checks if a line section jumps a component if flattened. Declaration public bool HasJump(TaggedLineString line, int start, int end, LineSegment seg) Parameters Type Name Description TaggedLineString line The line containing the section being flattened int start Start index of the section int end End index of the section LineSegment seg The flattening segment Returns Type Description bool true if the flattened section jumps a component Remarks Assumes start <= end"
  },
  "api/NetTopologySuite.Simplify.DouglasPeuckerLineSimplifier.html": {
    "href": "api/NetTopologySuite.Simplify.DouglasPeuckerLineSimplifier.html",
    "title": "Class DouglasPeuckerLineSimplifier | NetTopologySuite",
    "summary": "Class DouglasPeuckerLineSimplifier Simplifies a line (sequence of points) using the standard Douglas-Peucker algorithm. Inheritance object DouglasPeuckerLineSimplifier Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Simplify Assembly: NetTopologySuite.dll Syntax public class DouglasPeuckerLineSimplifier Constructors | Edit this page View Source DouglasPeuckerLineSimplifier(Coordinate[]) Creates an instance of this class using the provided pts array of coordinates Declaration public DouglasPeuckerLineSimplifier(Coordinate[] pts) Parameters Type Name Description Coordinate[] pts An array of coordinates Properties | Edit this page View Source DistanceTolerance The distance tolerance for the simplification. Declaration public double DistanceTolerance { get; set; } Property Value Type Description double | Edit this page View Source PreserveEndpoint Gets a flag indicating if the endpoint should be preserved Declaration public bool PreserveEndpoint { get; } Property Value Type Description bool Methods | Edit this page View Source Simplify() Declaration public Coordinate[] Simplify() Returns Type Description Coordinate[] | Edit this page View Source Simplify(Coordinate[], double) Simplifies a series of Coordinates. The series' endpoints are preserved. Declaration public static Coordinate[] Simplify(Coordinate[] pts, double distanceTolerance) Parameters Type Name Description Coordinate[] pts The series of Coordinates to simplify double distanceTolerance A simplification tolerance distance Returns Type Description Coordinate[] The simplified series of Coordinates | Edit this page View Source Simplify(Coordinate[], double, bool) Simplifies a series of Coordinates. Declaration public static Coordinate[] Simplify(Coordinate[] pts, double distanceTolerance, bool isPreserveEndpoint) Parameters Type Name Description Coordinate[] pts The series of Coordinates to simplify double distanceTolerance A simplification tolerance distance bool isPreserveEndpoint A flag indicating if the endpoint should be preserved Returns Type Description Coordinate[]"
  },
  "api/NetTopologySuite.Simplify.DouglasPeuckerSimplifier.html": {
    "href": "api/NetTopologySuite.Simplify.DouglasPeuckerSimplifier.html",
    "title": "Class DouglasPeuckerSimplifier | NetTopologySuite",
    "summary": "Class DouglasPeuckerSimplifier Simplifies a Geometry using the Douglas-Peucker algorithm. Inheritance object DouglasPeuckerSimplifier Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Simplify Assembly: NetTopologySuite.dll Syntax public class DouglasPeuckerSimplifier Remarks Ensures that any polygonal geometries returned are valid. Simple lines are not guaranteed to remain simple after simplification. All geometry types are handled. Empty and point geometries are returned unchanged. Empty geometry components are deleted. Note that in general D-P does not preserve topology - e.g. polygons can be split, collapse to lines or disappear holes can be created or disappear, and lines can cross. To simplify point while preserving topology use TopologySafeSimplifier. (However, using D-P is significantly faster). KNOWN BUGS: In some cases the approach used to clean invalid simplified polygons can distort the output geometry severely. Constructors | Edit this page View Source DouglasPeuckerSimplifier(Geometry) Creates a simplifier for a given geometry. Declaration public DouglasPeuckerSimplifier(Geometry inputGeom) Parameters Type Name Description Geometry inputGeom The geometry to simplify. Properties | Edit this page View Source DistanceTolerance The distance tolerance for the simplification. Declaration public double DistanceTolerance { get; set; } Property Value Type Description double Remarks All vertices in the simplified geometry will be within this distance of the original geometry. The tolerance value must be non-negative. | Edit this page View Source EnsureValidTopology Controls whether simplified polygons will be \"fixed\" to have valid topology. Declaration public bool EnsureValidTopology { get; set; } Property Value Type Description bool Remarks The caller may choose to disable this because: valid topology is not required fixing topology is a relative expensive operation in some pathological cases the topology fixing operation may either fail or run for too long The default is to fix polygon topology. Methods | Edit this page View Source GetResultGeometry() Gets the simplified geometry. Declaration public Geometry GetResultGeometry() Returns Type Description Geometry The simplified geometry. | Edit this page View Source Simplify(Geometry, double) Simplifies a geometry using a given tolerance. Declaration public static Geometry Simplify(Geometry geom, double distanceTolerance) Parameters Type Name Description Geometry geom The geometry to simplify. double distanceTolerance The tolerance to use. Returns Type Description Geometry A simplified version of the geometry. See Also TopologyPreservingSimplifier"
  },
  "api/NetTopologySuite.Simplify.LineSegmentIndex.html": {
    "href": "api/NetTopologySuite.Simplify.LineSegmentIndex.html",
    "title": "Class LineSegmentIndex | NetTopologySuite",
    "summary": "Class LineSegmentIndex An index of LineSegments. Inheritance object LineSegmentIndex Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Simplify Assembly: NetTopologySuite.dll Syntax public class LineSegmentIndex Methods | Edit this page View Source Add(LineSegment) Declaration public void Add(LineSegment seg) Parameters Type Name Description LineSegment seg | Edit this page View Source Add(TaggedLineString) Declaration public void Add(TaggedLineString line) Parameters Type Name Description TaggedLineString line | Edit this page View Source Query(LineSegment) Declaration public IList<LineSegment> Query(LineSegment querySeg) Parameters Type Name Description LineSegment querySeg Returns Type Description IList<LineSegment> | Edit this page View Source Remove(LineSegment) Declaration public void Remove(LineSegment seg) Parameters Type Name Description LineSegment seg"
  },
  "api/NetTopologySuite.Simplify.LineSegmentVisitor.html": {
    "href": "api/NetTopologySuite.Simplify.LineSegmentVisitor.html",
    "title": "Class LineSegmentVisitor | NetTopologySuite",
    "summary": "Class LineSegmentVisitor ItemVisitor subclass to reduce volume of query results. Inheritance object LineSegmentVisitor Implements IItemVisitor<LineSegment> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Simplify Assembly: NetTopologySuite.dll Syntax public class LineSegmentVisitor : IItemVisitor<LineSegment> Constructors | Edit this page View Source LineSegmentVisitor(LineSegment) Declaration public LineSegmentVisitor(LineSegment querySeg) Parameters Type Name Description LineSegment querySeg Properties | Edit this page View Source Items Declaration public IList<LineSegment> Items { get; } Property Value Type Description IList<LineSegment> Methods | Edit this page View Source VisitItem(LineSegment) Declaration public void VisitItem(LineSegment item) Parameters Type Name Description LineSegment item Implements IItemVisitor<T>"
  },
  "api/NetTopologySuite.Simplify.OldVWLineSimplifier.html": {
    "href": "api/NetTopologySuite.Simplify.OldVWLineSimplifier.html",
    "title": "Class OldVWLineSimplifier | NetTopologySuite",
    "summary": "Class OldVWLineSimplifier Simplifies a linestring (sequence of points) using the Visvalingam-Whyatt algorithm. The Visvalingam-Whyatt algorithm simplifies geometry by removing vertices while trying to minimize the area changed. Inheritance object OldVWLineSimplifier Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Simplify Assembly: NetTopologySuite.dll Syntax public class OldVWLineSimplifier Constructors | Edit this page View Source OldVWLineSimplifier(Coordinate[], double) Declaration public OldVWLineSimplifier(Coordinate[] pts, double distanceTolerance) Parameters Type Name Description Coordinate[] pts double distanceTolerance Methods | Edit this page View Source Simplify() Declaration public Coordinate[] Simplify() Returns Type Description Coordinate[] | Edit this page View Source Simplify(Coordinate[], double) Declaration public static Coordinate[] Simplify(Coordinate[] pts, double distanceTolerance) Parameters Type Name Description Coordinate[] pts double distanceTolerance Returns Type Description Coordinate[]"
  },
  "api/NetTopologySuite.Simplify.PolygonHullSimplifier.html": {
    "href": "api/NetTopologySuite.Simplify.PolygonHullSimplifier.html",
    "title": "Class PolygonHullSimplifier | NetTopologySuite",
    "summary": "Class PolygonHullSimplifier Computes topology-preserving simplified hulls of polygonal geometry. Both outer and inner hulls can be computed. Outer hulls contain the input geometry and are larger in area. Inner hulls are contained by the input geometry and are smaller in area. In both the hull vertices are a subset of the input vertices. The hull construction attempts to minimize the area difference with the input geometry. Hulls are generally concave if the input is. Computed hulls are topology-preserving: they do not contain any self-intersections or overlaps, so the result polygonal geometry is valid. Polygons with holes and MultiPolygons are supported. The result has the same geometric type and structure as the input. The number of vertices in the computed hull is determined by a target parameter. Two parameters are supported: Vertex Number fractionthe fraction of the input vertices retained in the result. Value 1 produces the original geometry. Smaller values produce less concave results. For outer hulls, value 0 produces the convex hull (with triangles for any holes). For inner hulls, value 0 produces a triangle (if no holes are present). Area Delta ratio the ratio of the change in area to the input area.Value 0 produces the original geometry. Larger values produce less concave results. The algorithm ensures that the result does not cause the target parameter to be exceeded. This allows computing outer or inner hulls with a small area delta ratio as an effective way of removing narrow gores and spikes. Inheritance object PolygonHullSimplifier Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Simplify Assembly: NetTopologySuite.dll Syntax public class PolygonHullSimplifier Constructors | Edit this page View Source PolygonHullSimplifier(Geometry, bool) Creates a new instance to compute a simplified hull of a polygonal geometry. An outer or inner hull is computed depending on the value of isOuter. Declaration public PolygonHullSimplifier(Geometry inputGeom, bool isOuter) Parameters Type Name Description Geometry inputGeom The polygonal geometry to process bool isOuter Indicates whether to compute an outer or inner hull Properties | Edit this page View Source AreaDeltaRatio Gets or sets a value indicating the target maximum ratio of the change in area of the result to the input area. The value must be 0 or greater. Declaration public double AreaDeltaRatio { get; set; } Property Value Type Description double | Edit this page View Source VertexNumFraction Gets or sets a value indicating the target fraction of input vertices which are retained in the result. The value should be in the range [0,1]. Declaration public double VertexNumFraction { get; set; } Property Value Type Description double Methods | Edit this page View Source GetResult() Gets the result polygonal hull geometry. Declaration public Geometry GetResult() Returns Type Description Geometry The polygonal geometry for the hull | Edit this page View Source Hull(Geometry, bool, double) Computes topology-preserving simplified hull of a polygonal geometry, with hull shape determined by a target parameter specifying the fraction of the input vertices retained in the result. Larger values compute less concave results. A value of 1 produces the convex hull; a value of 0 produces the original geometry. Either outer or inner hulls can be computed. Declaration public static Geometry Hull(Geometry geom, bool isOuter, double vertexNumFraction) Parameters Type Name Description Geometry geom The polygonal geometry to process bool isOuter A flag indicating whether to compute an outer or inner hull double vertexNumFraction The target fraction of number of input vertices in result Returns Type Description Geometry The hull geometry | Edit this page View Source HullByAreaDelta(Geometry, bool, double) Computes a boundary-respecting hull of a polygonal geometry, with hull shape determined by a target parameter specifying the ratio of maximum difference in area to original area. Larger values compute less concave results. A value of 0 produces the original geometry. Either outer or inner hulls can be computed. Declaration public static Geometry HullByAreaDelta(Geometry geom, bool isOuter, double areaDeltaRatio) Parameters Type Name Description Geometry geom The polygonal geometry to process bool isOuter A flag indicating whether to compute an outer or inner hull double areaDeltaRatio The target ratio of area difference to original area Returns Type Description Geometry The hull geometry"
  },
  "api/NetTopologySuite.Simplify.TaggedLineSegment.html": {
    "href": "api/NetTopologySuite.Simplify.TaggedLineSegment.html",
    "title": "Class TaggedLineSegment | NetTopologySuite",
    "summary": "Class TaggedLineSegment A LineSegment which is tagged with its location in a Geometry. Used to index the segments in a point and recover the segment locations from the index. Inheritance object LineSegment TaggedLineSegment Implements IComparable<LineSegment> Inherited Members LineSegment.P1 LineSegment.P0 LineSegment.GetCoordinate(int) LineSegment.SetCoordinates(LineSegment) LineSegment.SetCoordinates(Coordinate, Coordinate) LineSegment.MinX LineSegment.MaxX LineSegment.MinY LineSegment.MaxY LineSegment.Length LineSegment.IsHorizontal LineSegment.IsVertical LineSegment.OrientationIndex(LineSegment) LineSegment.OrientationIndex(Coordinate) LineSegment.Reverse() LineSegment.Normalize() LineSegment.Angle LineSegment.MidPoint LineSegment.ComputeMidPoint(Coordinate, Coordinate) LineSegment.Distance(LineSegment) LineSegment.Distance(Coordinate) LineSegment.DistancePerpendicular(Coordinate) LineSegment.DistancePerpendicularOriented(Coordinate) LineSegment.PointAlong(double) LineSegment.PointAlongOffset(double, double) LineSegment.ProjectionFactor(Coordinate) LineSegment.SegmentFraction(Coordinate) LineSegment.Project(Coordinate) LineSegment.Project(LineSegment) LineSegment.Offset(double) LineSegment.ClosestPoint(Coordinate) LineSegment.ClosestPoints(LineSegment) LineSegment.ClosestPoints(LineSegment, ElevationModel) LineSegment.Reflect(Coordinate) LineSegment.Intersection(LineSegment) LineSegment.Intersection(LineSegment, ElevationModel) LineSegment.LineIntersection(LineSegment) LineSegment.ToGeometry(GeometryFactory) LineSegment.Equals(object) LineSegment.CompareTo(LineSegment) LineSegment.EqualsTopologically(LineSegment) LineSegment.ToString() LineSegment.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Simplify Assembly: NetTopologySuite.dll Syntax public class TaggedLineSegment : LineSegment, IComparable<LineSegment> Constructors | Edit this page View Source TaggedLineSegment(Coordinate, Coordinate) Declaration public TaggedLineSegment(Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p0 Coordinate p1 | Edit this page View Source TaggedLineSegment(Coordinate, Coordinate, Geometry, int) Declaration public TaggedLineSegment(Coordinate p0, Coordinate p1, Geometry parent, int index) Parameters Type Name Description Coordinate p0 Coordinate p1 Geometry parent int index Properties | Edit this page View Source Index Declaration public int Index { get; } Property Value Type Description int | Edit this page View Source Parent Declaration public Geometry Parent { get; } Property Value Type Description Geometry Implements IComparable<T>"
  },
  "api/NetTopologySuite.Simplify.TaggedLineString.html": {
    "href": "api/NetTopologySuite.Simplify.TaggedLineString.html",
    "title": "Class TaggedLineString | NetTopologySuite",
    "summary": "Class TaggedLineString Represents a LineString which can be modified to a simplified shape. This class provides an attribute which specifies the minimum allowable length for the modified result. Inheritance object TaggedLineString Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Simplify Assembly: NetTopologySuite.dll Syntax public class TaggedLineString Constructors | Edit this page View Source TaggedLineString(LineString) Creates an instance of this class using the provided parentLine. The MinimumSize is set to 2 and PreserveEndpoint is true. Declaration [Obsolete] public TaggedLineString(LineString parentLine) Parameters Type Name Description LineString parentLine The LineString that is to be simplified. | Edit this page View Source TaggedLineString(LineString, int) Creates an instance of this class using the provided parentLine and minimumSize values. The value for IsRing is LineString.IsRing Declaration [Obsolete] public TaggedLineString(LineString parentLine, int minimumSize) Parameters Type Name Description LineString parentLine The LineString that is to be simplified. int minimumSize The number of vertices to must be kept. | Edit this page View Source TaggedLineString(LineString, int, bool) Creates an instance of this class using the provided parentLine and minimumSize values. Declaration public TaggedLineString(LineString parentLine, int minimumSize, bool isRing) Parameters Type Name Description LineString parentLine The LineString that is to be simplified. int minimumSize The number of vertices to must be kept. bool isRing A flag indicating if the parentLine forms a ring Properties | Edit this page View Source Count Gets a value indicating the number of points of the Parent line. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source IsRing Gets a value indicating if the endpoints are to be preserved. Declaration public bool IsRing { get; } Property Value Type Description bool | Edit this page View Source MinimumSize Declaration public int MinimumSize { get; } Property Value Type Description int | Edit this page View Source Parent Declaration public LineString Parent { get; } Property Value Type Description LineString | Edit this page View Source ParentCoordinates Declaration public Coordinate[] ParentCoordinates { get; } Property Value Type Description Coordinate[] | Edit this page View Source ResultCoordinates Declaration public Coordinate[] ResultCoordinates { get; } Property Value Type Description Coordinate[] | Edit this page View Source ResultSize Declaration public int ResultSize { get; } Property Value Type Description int | Edit this page View Source Segments Declaration public TaggedLineSegment[] Segments { get; } Property Value Type Description TaggedLineSegment[] Methods | Edit this page View Source AddToResult(LineSegment) Add a simplified segment to the result. This assumes simplified segments are computed in the order they occur in the line. Declaration public void AddToResult(LineSegment seg) Parameters Type Name Description LineSegment seg The result segment to add. | Edit this page View Source AsLineString() Declaration public LineString AsLineString() Returns Type Description LineString | Edit this page View Source AsLinearRing() Declaration public LinearRing AsLinearRing() Returns Type Description LinearRing | Edit this page View Source GetComponentPoint() Gets a Coordinate of the Parent line. Declaration public Coordinate GetComponentPoint() Returns Type Description Coordinate A Coordinate of the Parent line. | Edit this page View Source GetCoordinate(int) Gets the i'th Coordinate of Parent line. Declaration public Coordinate GetCoordinate(int i) Parameters Type Name Description int i The index of the coordinate to get Returns Type Description Coordinate The i'th Coordinate of Parent line. | Edit this page View Source GetResultSegment(int) Gets a segment of the result list. Negative indexes can be used to retrieve from the end of the list. Declaration public LineSegment GetResultSegment(int i) Parameters Type Name Description int i The segment index to retrieve Returns Type Description LineSegment The result segment | Edit this page View Source GetSegment(int) Declaration public TaggedLineSegment GetSegment(int i) Parameters Type Name Description int i Returns Type Description TaggedLineSegment"
  },
  "api/NetTopologySuite.Simplify.TaggedLineStringSimplifier.html": {
    "href": "api/NetTopologySuite.Simplify.TaggedLineStringSimplifier.html",
    "title": "Class TaggedLineStringSimplifier | NetTopologySuite",
    "summary": "Class TaggedLineStringSimplifier Simplifies a TaggedLineString, preserving topology (in the sense that no new intersections are introduced). Uses the recursive Douglas-Peucker algorithm. Inheritance object TaggedLineStringSimplifier Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Simplify Assembly: NetTopologySuite.dll Syntax public class TaggedLineStringSimplifier Constructors | Edit this page View Source TaggedLineStringSimplifier(LineSegmentIndex, LineSegmentIndex) Declaration [Obsolete(\"Using this constructor will not work and it will be removed in a future version.\", true)] public TaggedLineStringSimplifier(LineSegmentIndex inputIndex, LineSegmentIndex outputIndex) Parameters Type Name Description LineSegmentIndex inputIndex LineSegmentIndex outputIndex | Edit this page View Source TaggedLineStringSimplifier(LineSegmentIndex, LineSegmentIndex, ComponentJumpChecker) Declaration public TaggedLineStringSimplifier(LineSegmentIndex inputIndex, LineSegmentIndex outputIndex, ComponentJumpChecker crossChecker) Parameters Type Name Description LineSegmentIndex inputIndex LineSegmentIndex outputIndex ComponentJumpChecker crossChecker Properties | Edit this page View Source DistanceTolerance Sets the distance tolerance for the simplification. All vertices in the simplified geometry will be within this distance of the original geometry. Declaration [Obsolete] public double DistanceTolerance { get; set; } Property Value Type Description double Methods | Edit this page View Source Simplify(TaggedLineString) Simplifies the given TaggedLineString using the distance tolerance specified. Declaration [Obsolete(\"Will be removed in a future version. Use overload with distanceTolerance parameter.\")] public void Simplify(TaggedLineString line) Parameters Type Name Description TaggedLineString line The linestring to simplify. | Edit this page View Source Simplify(TaggedLineString, double) Simplifies the given TaggedLineString using the distance tolerance specified. Declaration public void Simplify(TaggedLineString line, double distanceTolerance) Parameters Type Name Description TaggedLineString line The linestring to simplify. double distanceTolerance The simplification distance tolerance"
  },
  "api/NetTopologySuite.Simplify.TaggedLinesSimplifier.html": {
    "href": "api/NetTopologySuite.Simplify.TaggedLinesSimplifier.html",
    "title": "Class TaggedLinesSimplifier | NetTopologySuite",
    "summary": "Class TaggedLinesSimplifier Simplifies a collection of TaggedLineStrings, preserving topology (in the sense that no new intersections are introduced). This class is essentially just a container for the common indexes used by TaggedLineStringSimplifier. Inheritance object TaggedLinesSimplifier Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Simplify Assembly: NetTopologySuite.dll Syntax public class TaggedLinesSimplifier Properties | Edit this page View Source DistanceTolerance Gets or sets the distance tolerance for the simplification. Points closer than this tolerance to a simplified segment may be removed. Declaration public double DistanceTolerance { get; set; } Property Value Type Description double Methods | Edit this page View Source Simplify(ICollection<TaggedLineString>) Simplifies a collection of TaggedLineStrings. Declaration public void Simplify(ICollection<TaggedLineString> taggedLines) Parameters Type Name Description ICollection<TaggedLineString> taggedLines The collection of lines to simplify."
  },
  "api/NetTopologySuite.Simplify.TopologyPreservingSimplifier.html": {
    "href": "api/NetTopologySuite.Simplify.TopologyPreservingSimplifier.html",
    "title": "Class TopologyPreservingSimplifier | NetTopologySuite",
    "summary": "Class TopologyPreservingSimplifier Simplifies a point and ensures that the result is a valid point having the same dimension and number of components as the input, and with the components having the same topological relationship. If the input is a polygonal geometry (Polygon or MultiPolygon): The result has the same number of shells and holes as the input, with the same topological structure The result rings touch at no more than the number of touching points in the input (although they may touch at fewer points). The key implication of this statement is that if the input is topologically valid, so is the simplified output. For linear geometries, if the input does not contain any intersecting line segments, this property will be preserved in the output. For polygonal geometries and LinearRings the endpoint will ring endpoint will be simplified. For LineStrings the endpoints will be unchanged. For all geometry types, the result will contain enough vertices to ensure validity. For polygons and closed linear geometries, the result will have at least 4 vertices; for open LineStrings the result will have at least 2 vertices. All geometry types are handled. Empty and point geometries are returned unchanged. Empty geometry components are deleted. The simplification uses a maximum-distance difference algorithm similar to the Douglas-Peucker algorithm. Inheritance object TopologyPreservingSimplifier Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Simplify Assembly: NetTopologySuite.dll Syntax public class TopologyPreservingSimplifier Constructors | Edit this page View Source TopologyPreservingSimplifier(Geometry) Creates an instance of this class for the provided inputGeom geometry Declaration public TopologyPreservingSimplifier(Geometry inputGeom) Parameters Type Name Description Geometry inputGeom The geometry to simplify Properties | Edit this page View Source DistanceTolerance Gets or sets the distance tolerance for the simplification. Points closer than this tolerance to a simplified segment may be removed. Declaration public double DistanceTolerance { get; set; } Property Value Type Description double Methods | Edit this page View Source GetResultGeometry() Declaration public Geometry GetResultGeometry() Returns Type Description Geometry | Edit this page View Source Simplify(Geometry, double) Declaration public static Geometry Simplify(Geometry geom, double distanceTolerance) Parameters Type Name Description Geometry geom double distanceTolerance Returns Type Description Geometry See Also DouglasPeuckerSimplifier"
  },
  "api/NetTopologySuite.Simplify.VWLineSimplifier.html": {
    "href": "api/NetTopologySuite.Simplify.VWLineSimplifier.html",
    "title": "Class VWLineSimplifier | NetTopologySuite",
    "summary": "Class VWLineSimplifier Simplifies a linestring (sequence of points) using the Visvalingam-Whyatt algorithm. The Visvalingam-Whyatt algorithm simplifies geometry by removing vertices while trying to minimize the area changed. Inheritance object VWLineSimplifier Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Simplify Assembly: NetTopologySuite.dll Syntax public class VWLineSimplifier Constructors | Edit this page View Source VWLineSimplifier(Coordinate[], double) Declaration public VWLineSimplifier(Coordinate[] pts, double distanceTolerance) Parameters Type Name Description Coordinate[] pts double distanceTolerance Methods | Edit this page View Source Simplify() Declaration public Coordinate[] Simplify() Returns Type Description Coordinate[] | Edit this page View Source Simplify(Coordinate[], double) Declaration public static Coordinate[] Simplify(Coordinate[] pts, double distanceTolerance) Parameters Type Name Description Coordinate[] pts double distanceTolerance Returns Type Description Coordinate[]"
  },
  "api/NetTopologySuite.Simplify.VWSimplifier.html": {
    "href": "api/NetTopologySuite.Simplify.VWSimplifier.html",
    "title": "Class VWSimplifier | NetTopologySuite",
    "summary": "Class VWSimplifier Simplifies a Geometry using the Visvalingam-Whyatt area-based algorithm. Ensures that any polygonal geometries returned are valid. Simple lines are not guaranteed to remain simple after simplification. All geometry types are handled. Empty and point geometries are returned unchanged. Empty geometry components are deleted. The simplification tolerance is specified as a distance. This is converted to an area tolerance by squaring it. Known Bugs * Not yet optimized for performance. * Does not simplify the endpoint of rings. To Do * Allow specifying desired number of vertices in the output. Inheritance object VWSimplifier Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Simplify Assembly: NetTopologySuite.dll Syntax public class VWSimplifier Remarks Note that in general this algorithm does not preserve topology - e.g. polygons can be split, collapse to lines or disappear holes can be created or disappear, and lines can cross. Constructors | Edit this page View Source VWSimplifier(Geometry) Creates a simplifier for a given Geometry. Declaration public VWSimplifier(Geometry inputGeom) Parameters Type Name Description Geometry inputGeom The Geometry to simplify. Properties | Edit this page View Source DistanceTolerance Sets the distance tolerance for the simplification. All vertices in the simplified Geometry will be within this distance of the original geometry. The tolerance value must be non-negative. Declaration public double DistanceTolerance { get; set; } Property Value Type Description double | Edit this page View Source IsEnsureValidTopology Controls whether simplified polygons will be \"fixed\" to have valid topology. The caller may choose to disable this because: valid topology is not required. fixing topology is a relative expensive operation. in some pathological cases the topology fixing operation may either fail or run for too long. Declaration public bool IsEnsureValidTopology { get; set; } Property Value Type Description bool Remarks The default is to fix polygon topology. Methods | Edit this page View Source GetResultGeometry() Gets the simplified Geometry. Declaration public Geometry GetResultGeometry() Returns Type Description Geometry The simplified Geometry. | Edit this page View Source Simplify(Geometry, double) Simplifies a Geometry using a given tolerance. Declaration public static Geometry Simplify(Geometry geom, double distanceTolerance) Parameters Type Name Description Geometry geom The Geometry to simplify. double distanceTolerance The tolerance to use. Returns Type Description Geometry A simplified version of the Geometry."
  },
  "api/NetTopologySuite.Simplify.html": {
    "href": "api/NetTopologySuite.Simplify.html",
    "title": "Namespace NetTopologySuite.Simplify | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Simplify Classes which implement algorithms for simplifying or generalizing geometries. Classes ComponentJumpChecker Checks if simplifying (flattening) line sections or segments would cause them to \"jump\" over other components in the geometry. DouglasPeuckerLineSimplifier Simplifies a line (sequence of points) using the standard Douglas-Peucker algorithm. DouglasPeuckerSimplifier Simplifies a Geometry using the Douglas-Peucker algorithm. LineSegmentIndex An index of LineSegments. LineSegmentVisitor ItemVisitor subclass to reduce volume of query results. OldVWLineSimplifier Simplifies a linestring (sequence of points) using the Visvalingam-Whyatt algorithm. The Visvalingam-Whyatt algorithm simplifies geometry by removing vertices while trying to minimize the area changed. PolygonHullSimplifier Computes topology-preserving simplified hulls of polygonal geometry. Both outer and inner hulls can be computed. Outer hulls contain the input geometry and are larger in area. Inner hulls are contained by the input geometry and are smaller in area. In both the hull vertices are a subset of the input vertices. The hull construction attempts to minimize the area difference with the input geometry. Hulls are generally concave if the input is. Computed hulls are topology-preserving: they do not contain any self-intersections or overlaps, so the result polygonal geometry is valid. Polygons with holes and MultiPolygons are supported. The result has the same geometric type and structure as the input. The number of vertices in the computed hull is determined by a target parameter. Two parameters are supported: Vertex Number fractionthe fraction of the input vertices retained in the result. Value 1 produces the original geometry. Smaller values produce less concave results. For outer hulls, value 0 produces the convex hull (with triangles for any holes). For inner hulls, value 0 produces a triangle (if no holes are present). Area Delta ratio the ratio of the change in area to the input area.Value 0 produces the original geometry. Larger values produce less concave results. The algorithm ensures that the result does not cause the target parameter to be exceeded. This allows computing outer or inner hulls with a small area delta ratio as an effective way of removing narrow gores and spikes. TaggedLineSegment A LineSegment which is tagged with its location in a Geometry. Used to index the segments in a point and recover the segment locations from the index. TaggedLineString Represents a LineString which can be modified to a simplified shape. This class provides an attribute which specifies the minimum allowable length for the modified result. TaggedLineStringSimplifier Simplifies a TaggedLineString, preserving topology (in the sense that no new intersections are introduced). Uses the recursive Douglas-Peucker algorithm. TaggedLinesSimplifier Simplifies a collection of TaggedLineStrings, preserving topology (in the sense that no new intersections are introduced). This class is essentially just a container for the common indexes used by TaggedLineStringSimplifier. TopologyPreservingSimplifier Simplifies a point and ensures that the result is a valid point having the same dimension and number of components as the input, and with the components having the same topological relationship. If the input is a polygonal geometry (Polygon or MultiPolygon): The result has the same number of shells and holes as the input, with the same topological structure The result rings touch at no more than the number of touching points in the input (although they may touch at fewer points). The key implication of this statement is that if the input is topologically valid, so is the simplified output. For linear geometries, if the input does not contain any intersecting line segments, this property will be preserved in the output. For polygonal geometries and LinearRings the endpoint will ring endpoint will be simplified. For LineStrings the endpoints will be unchanged. For all geometry types, the result will contain enough vertices to ensure validity. For polygons and closed linear geometries, the result will have at least 4 vertices; for open LineStrings the result will have at least 2 vertices. All geometry types are handled. Empty and point geometries are returned unchanged. Empty geometry components are deleted. The simplification uses a maximum-distance difference algorithm similar to the Douglas-Peucker algorithm. VWLineSimplifier Simplifies a linestring (sequence of points) using the Visvalingam-Whyatt algorithm. The Visvalingam-Whyatt algorithm simplifies geometry by removing vertices while trying to minimize the area changed. VWSimplifier Simplifies a Geometry using the Visvalingam-Whyatt area-based algorithm. Ensures that any polygonal geometries returned are valid. Simple lines are not guaranteed to remain simple after simplification. All geometry types are handled. Empty and point geometries are returned unchanged. Empty geometry components are deleted. The simplification tolerance is specified as a distance. This is converted to an area tolerance by squaring it. Known Bugs * Not yet optimized for performance. * Does not simplify the endpoint of rings. To Do * Allow specifying desired number of vertices in the output."
  },
  "api/NetTopologySuite.Triangulate.ConformingDelaunayTriangulationBuilder.html": {
    "href": "api/NetTopologySuite.Triangulate.ConformingDelaunayTriangulationBuilder.html",
    "title": "Class ConformingDelaunayTriangulationBuilder | NetTopologySuite",
    "summary": "Class ConformingDelaunayTriangulationBuilder A utility class which creates Conforming Delaunay Triangulations from collections of points and linear constraints, and extract the resulting triangulation edges or triangles as geometries. Inheritance object ConformingDelaunayTriangulationBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Triangulate Assembly: NetTopologySuite.dll Syntax public class ConformingDelaunayTriangulationBuilder Properties | Edit this page View Source Constraints Sets the linear constraints to be conformed to. All linear components in the input will be used as constraints. The constraint vertices do not have to be disjoint from the site vertices. The constraints must not contain duplicate segments (up to orientation). Declaration public Geometry Constraints { set; } Property Value Type Description Geometry | Edit this page View Source Tolerance Sets the snapping tolerance which will be used to improved the robustness of the triangulation computation. A tolerance of 0.0 specifies that no snapping will take place. Declaration public double Tolerance { get; set; } Property Value Type Description double Methods | Edit this page View Source GetEdges(GeometryFactory) Gets the edges of the computed triangulation as a MultiLineString. Declaration public MultiLineString GetEdges(GeometryFactory geomFact) Parameters Type Name Description GeometryFactory geomFact The geometry factory to use to create the output Returns Type Description MultiLineString the edges of the triangulation | Edit this page View Source GetSubdivision() Gets the QuadEdgeSubdivision which models the computed triangulation. Declaration public QuadEdgeSubdivision GetSubdivision() Returns Type Description QuadEdgeSubdivision The subdivision containing the triangulation | Edit this page View Source GetTriangles(GeometryFactory) Gets the faces of the computed triangulation as a GeometryCollection of NetTopologySuite.Triangulate.Polygon. Declaration public GeometryCollection GetTriangles(GeometryFactory geomFact) Parameters Type Name Description GeometryFactory geomFact the geometry factory to use to create the output Returns Type Description GeometryCollection the faces of the triangulation | Edit this page View Source SetSites(Geometry) Sets the sites (point or vertices) which will be triangulated. All vertices of the given geometry will be used as sites. The site vertices do not have to contain the constraint vertices as well; any site vertices which are identical to a constraint vertex will be removed from the site vertex set. Declaration public void SetSites(Geometry sites) Parameters Type Name Description Geometry sites Remarks The geometry from which the sites will be extracted."
  },
  "api/NetTopologySuite.Triangulate.ConformingDelaunayTriangulator.html": {
    "href": "api/NetTopologySuite.Triangulate.ConformingDelaunayTriangulator.html",
    "title": "Class ConformingDelaunayTriangulator | NetTopologySuite",
    "summary": "Class ConformingDelaunayTriangulator Computes a Conforming Delaunay Triangulation over a set of sites and a set of linear constraints. Inheritance object ConformingDelaunayTriangulator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Triangulate Assembly: NetTopologySuite.dll Syntax public class ConformingDelaunayTriangulator Remarks A conforming Delaunay triangulation is a true Delaunay triangulation. In it each constraint segment is present as a union of one or more triangulation edges. Constraint segments may be subdivided into two or more triangulation edges by the insertion of additional sites. The additional sites are called Steiner points, and are necessary to allow the segments to be faithfully reflected in the triangulation while maintaining the Delaunay property. Another way of stating this is that in a conforming Delaunay triangulation every constraint segment will be the union of a subset of the triangulation edges (up to tolerance). A Conforming Delaunay triangulation is distinct from a Constrained Delaunay triangulation. A Constrained Delaunay triangulation is not necessarily fully Delaunay, and it contains the constraint segments exactly as edges of the triangulation. A typical usage pattern for the triangulator is: ConformingDelaunayTriangulator cdt = new ConformingDelaunayTriangulator(sites, tolerance); // optional cdt.SplitPointFinder = splitPointFinder; cdt.VertexFactory = vertexFactory; cdt.SetConstraints(segments, new List<Vertex>(vertexMap.Values)); cdt.FormInitialDelaunay(); cdt.EnforceConstraints(); subdiv = cdt.Subdivision; Constructors | Edit this page View Source ConformingDelaunayTriangulator(IEnumerable<Vertex>, double) Creates a Conforming Delaunay Triangulation based on the given unconstrained initial vertices. The initial vertex set should not contain any vertices which appear in the constraint set. Declaration public ConformingDelaunayTriangulator(IEnumerable<Vertex> initialVertices, double tolerance) Parameters Type Name Description IEnumerable<Vertex> initialVertices a collection of ConstraintVertex double tolerance the distance tolerance below which points are considered identical Properties | Edit this page View Source ConstraintSegments Gets the Segments which represent the constraints. Declaration public ICollection<Segment> ConstraintSegments { get; } Property Value Type Description ICollection<Segment> | Edit this page View Source ConvexHull Gets the convex hull of all the sites in the triangulation, including constraint vertices. Only valid after the constraints have been enforced. Declaration public Geometry ConvexHull { get; } Property Value Type Description Geometry Remarks the convex hull of the sites | Edit this page View Source InitialVertices Gets the sites (vertices) used to initialize the triangulation. Declaration public IList<Vertex> InitialVertices { get; } Property Value Type Description IList<Vertex> | Edit this page View Source KDT Gets the KdTree<T> which contains the vertices of the triangulation. Declaration public KdTree<Vertex> KDT { get; } Property Value Type Description KdTree<Vertex> | Edit this page View Source SplitPointFinder Gets or sets the IConstraintSplitPointFinder to be used during constraint enforcement. Different splitting strategies may be appropriate for special situations. Declaration public IConstraintSplitPointFinder SplitPointFinder { get; set; } Property Value Type Description IConstraintSplitPointFinder Remarks the ConstraintSplitPointFinder to be used | Edit this page View Source Subdivision Gets the QuadEdgeSubdivision which represents the triangulation. Declaration public QuadEdgeSubdivision Subdivision { get; } Property Value Type Description QuadEdgeSubdivision | Edit this page View Source Tolerance Gets the tolerance value used to construct the triangulation. Declaration public double Tolerance { get; } Property Value Type Description double Remarks a tolerance value | Edit this page View Source VertexFactory Gets and sets the ConstraintVertexFactory used to create new constraint vertices at split points. Declaration public ConstraintVertexFactory VertexFactory { get; set; } Property Value Type Description ConstraintVertexFactory Remarks Allows the setting of a custom ConstraintVertexFactory to be used to allow vertices carrying extra information to be created. Methods | Edit this page View Source EnforceConstraints() Enforces the supplied constraints into the triangulation. Declaration public void EnforceConstraints() Exceptions Type Condition ConstraintEnforcementException if the constraints cannot be enforced | Edit this page View Source FormInitialDelaunay() Computes the Delaunay triangulation of the initial sites. Declaration public void FormInitialDelaunay() | Edit this page View Source InsertSite(Coordinate) Inserts a site into the triangulation, maintaining the conformal Delaunay property. This can be used to further refine the triangulation if required (e.g. to approximate the medial axis of the constraints, or to improve the grading of the triangulation). Declaration public void InsertSite(Coordinate p) Parameters Type Name Description Coordinate p the location of the site to insert | Edit this page View Source SetConstraints(IList<Segment>, IList<Vertex>) Sets the constraints to be conformed to by the computed triangulation. The constraints must not contain duplicate segments (up to orientation). The unique set of vertices (as ConstraintVertexes) forming the constraints must also be supplied. Supplying it explicitly allows the ConstraintVertexes to be initialized appropriately (e.g. with external data), and avoids re-computing the unique set if it is already available. Declaration public void SetConstraints(IList<Segment> segments, IList<Vertex> segVertices) Parameters Type Name Description IList<Segment> segments list of the constraint Segments IList<Vertex> segVertices the set of unique ConstraintVertexes referenced by the segments"
  },
  "api/NetTopologySuite.Triangulate.ConstraintEnforcementException.html": {
    "href": "api/NetTopologySuite.Triangulate.ConstraintEnforcementException.html",
    "title": "Class ConstraintEnforcementException | NetTopologySuite",
    "summary": "Class ConstraintEnforcementException Indicates a failure during constraint enforcement. Inheritance object Exception ConstraintEnforcementException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Triangulate Assembly: NetTopologySuite.dll Syntax public class ConstraintEnforcementException : Exception, ISerializable Constructors | Edit this page View Source ConstraintEnforcementException(string) Creates a new instance with a given message. Declaration public ConstraintEnforcementException(string msg) Parameters Type Name Description string msg a string | Edit this page View Source ConstraintEnforcementException(string, Coordinate) Creates a new instance with a given message and approximate location. Declaration public ConstraintEnforcementException(string msg, Coordinate pt) Parameters Type Name Description string msg a string Coordinate pt the location of the error Properties | Edit this page View Source Coordinate Gets the approximate location of this error. Declaration public Coordinate Coordinate { get; } Property Value Type Description Coordinate Remarks a location Implements ISerializable"
  },
  "api/NetTopologySuite.Triangulate.ConstraintVertex.html": {
    "href": "api/NetTopologySuite.Triangulate.ConstraintVertex.html",
    "title": "Class ConstraintVertex | NetTopologySuite",
    "summary": "Class ConstraintVertex A vertex in a Constrained Delaunay Triangulation. The vertex may or may not lie on a constraint. If it does it may carry extra information about the original constraint. Inheritance object Vertex ConstraintVertex Implements IEquatable<Vertex> Inherited Members Vertex.X Vertex.Y Vertex.Z Vertex.Coordinate Vertex.ToString() Vertex.Equals(Vertex) Vertex.Equals(Vertex, double) Vertex.Classify(Vertex, Vertex) Vertex.IsInCircle(Vertex, Vertex, Vertex) Vertex.CircumRadiusRatio(Vertex, Vertex) Vertex.MidPoint(Vertex) Vertex.CircleCenter(Vertex, Vertex) Vertex.InterpolateZValue(Vertex, Vertex, Vertex) Vertex.InterpolateZ(Coordinate, Coordinate, Coordinate, Coordinate) Vertex.InterpolateZ(Coordinate, Coordinate, Coordinate) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Triangulate Assembly: NetTopologySuite.dll Syntax public class ConstraintVertex : Vertex, IEquatable<Vertex> Constructors | Edit this page View Source ConstraintVertex(Coordinate) Creates a new constraint vertex Declaration public ConstraintVertex(Coordinate p) Parameters Type Name Description Coordinate p the location of the vertex Properties | Edit this page View Source Constraint Gets or sets the external constraint object Declaration public object Constraint { get; set; } Property Value Type Description object Remarks object which carries information about the constraint this vertex lies on | Edit this page View Source IsOnConstraint Gets or sets whether this vertex lies on a constraint. Declaration public bool IsOnConstraint { get; set; } Property Value Type Description bool Remarks true if the vertex lies on a constraint Methods | Edit this page View Source Merge(ConstraintVertex) Merges the constraint data in the vertex other into this vertex. This method is called when an inserted vertex is very close to an existing vertex in the triangulation. Declaration protected void Merge(ConstraintVertex other) Parameters Type Name Description ConstraintVertex other the constraint vertex to merge Implements IEquatable<T>"
  },
  "api/NetTopologySuite.Triangulate.ConstraintVertexFactory.html": {
    "href": "api/NetTopologySuite.Triangulate.ConstraintVertexFactory.html",
    "title": "Interface ConstraintVertexFactory | NetTopologySuite",
    "summary": "Interface ConstraintVertexFactory An interface for factories which create a ConstraintVertex Namespace: NetTopologySuite.Triangulate Assembly: NetTopologySuite.dll Syntax public interface ConstraintVertexFactory Methods | Edit this page View Source CreateVertex(Coordinate, Segment) Declaration ConstraintVertex CreateVertex(Coordinate p, Segment constraintSeg) Parameters Type Name Description Coordinate p Segment constraintSeg Returns Type Description ConstraintVertex"
  },
  "api/NetTopologySuite.Triangulate.DelaunayTriangulationBuilder.html": {
    "href": "api/NetTopologySuite.Triangulate.DelaunayTriangulationBuilder.html",
    "title": "Class DelaunayTriangulationBuilder | NetTopologySuite",
    "summary": "Class DelaunayTriangulationBuilder A utility class which creates Delaunay Triangulations from collections of points and extract the resulting triangulation edges or triangles as geometries. Inheritance object DelaunayTriangulationBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Triangulate Assembly: NetTopologySuite.dll Syntax public class DelaunayTriangulationBuilder Properties | Edit this page View Source Tolerance Sets the snapping tolerance which will be used to improved the robustness of the triangulation computation. A tolerance of 0.0 specifies that no snapping will take place. Declaration public double Tolerance { set; } Property Value Type Description double Methods | Edit this page View Source Envelope(ICollection<Coordinate>) Computes the Envelope(ICollection<Coordinate>) of a collection of Coordinates. Declaration public static Envelope Envelope(ICollection<Coordinate> coords) Parameters Type Name Description ICollection<Coordinate> coords a List of Coordinates Returns Type Description Envelope the envelope of the set of coordinates | Edit this page View Source ExtractUniqueCoordinates(Geometry) Extracts the unique Coordinates from the given Geometry. Declaration public static CoordinateList ExtractUniqueCoordinates(Geometry geom) Parameters Type Name Description Geometry geom the geometry to extract from Returns Type Description CoordinateList a List of the unique Coordinates | Edit this page View Source GetEdges(GeometryFactory) Gets the edges of the computed triangulation as a MultiLineString. Declaration public MultiLineString GetEdges(GeometryFactory geomFact) Parameters Type Name Description GeometryFactory geomFact the geometry factory to use to create the output Returns Type Description MultiLineString the edges of the triangulation | Edit this page View Source GetSubdivision() Gets the QuadEdgeSubdivision which models the computed triangulation. Declaration public QuadEdgeSubdivision GetSubdivision() Returns Type Description QuadEdgeSubdivision the subdivision containing the triangulation | Edit this page View Source GetTriangles(GeometryFactory) Gets the faces of the computed triangulation as a GeometryCollection of NetTopologySuite.Triangulate.Polygon. Declaration public GeometryCollection GetTriangles(GeometryFactory geomFact) Parameters Type Name Description GeometryFactory geomFact the geometry factory to use to create the output Returns Type Description GeometryCollection the faces of the triangulation | Edit this page View Source SetSites(Geometry) Sets the sites (vertices) which will be triangulated. All vertices of the given geometry will be used as sites. Declaration public void SetSites(Geometry geom) Parameters Type Name Description Geometry geom the geometry from which the sites will be extracted. | Edit this page View Source SetSites(ICollection<Coordinate>) Sets the sites (vertices) which will be triangulated from a collection of Coordinates. Declaration public void SetSites(ICollection<Coordinate> coords) Parameters Type Name Description ICollection<Coordinate> coords a collection of Coordinates. | Edit this page View Source ToVertices(ICollection<Coordinate>) Converts all Coordinates in a collection to Vertexes. Declaration public static IList<Vertex> ToVertices(ICollection<Coordinate> coords) Parameters Type Name Description ICollection<Coordinate> coords the coordinates to convert Returns Type Description IList<Vertex> a List of Vertex objects | Edit this page View Source Unique(Coordinate[]) Declaration public static CoordinateList Unique(Coordinate[] coords) Parameters Type Name Description Coordinate[] coords Returns Type Description CoordinateList"
  },
  "api/NetTopologySuite.Triangulate.IConstraintSplitPointFinder.html": {
    "href": "api/NetTopologySuite.Triangulate.IConstraintSplitPointFinder.html",
    "title": "Interface IConstraintSplitPointFinder | NetTopologySuite",
    "summary": "Interface IConstraintSplitPointFinder An interface for strategies for determining the location of split points on constraint segments. The location of split points has a large effect on the performance and robustness of enforcing a constrained Delaunay triangulation. Poorly chosen split points can cause repeated splitting, especially at narrow constraint angles, since the split point will end up encroaching on the segment containing the original encroaching point. With detailed knowledge of the geometry of the constraints, it is sometimes possible to choose better locations for splitting. Namespace: NetTopologySuite.Triangulate Assembly: NetTopologySuite.dll Syntax public interface IConstraintSplitPointFinder Methods | Edit this page View Source FindSplitPoint(Segment, Coordinate) Finds a point at which to split an encroached segment to allow the original segment to appear as edges in a constrained Delaunay triangulation. Declaration Coordinate FindSplitPoint(Segment seg, Coordinate encroachPt) Parameters Type Name Description Segment seg the encroached segment Coordinate encroachPt the encroaching point Returns Type Description Coordinate the point at which to split the encroached segment"
  },
  "api/NetTopologySuite.Triangulate.IncrementalDelaunayTriangulator.html": {
    "href": "api/NetTopologySuite.Triangulate.IncrementalDelaunayTriangulator.html",
    "title": "Class IncrementalDelaunayTriangulator | NetTopologySuite",
    "summary": "Class IncrementalDelaunayTriangulator Computes a Delaunay Triangulation of a set of Vertexes, using an incremental insertion algorithm. Inheritance object IncrementalDelaunayTriangulator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Triangulate Assembly: NetTopologySuite.dll Syntax public class IncrementalDelaunayTriangulator Constructors | Edit this page View Source IncrementalDelaunayTriangulator(QuadEdgeSubdivision) Creates a new triangulator using the given QuadEdgeSubdivision. The triangulator uses the tolerance of the supplied subdivision. Declaration public IncrementalDelaunayTriangulator(QuadEdgeSubdivision subdiv) Parameters Type Name Description QuadEdgeSubdivision subdiv a subdivision in which to build the TIN Properties | Edit this page View Source ForceConvex Gets or sets whether the triangulation is forced to have a convex boundary. Because of the use of a finite-size frame, this condition requires special logic to enforce.The default is true, since this is a requirement for some uses of Delaunay Triangulations (such as Concave Hull generation). However, forcing the triangulation boundary to be convex may cause the overall frame triangulation to be non-Delaunay.This can cause a problem for Voronoi generation, so the logic can be disabled via this method. Declaration public bool ForceConvex { get; set; } Property Value Type Description bool Methods | Edit this page View Source InsertSite(Vertex) Inserts a new point into a subdivision representing a Delaunay triangulation, and fixes the affected edges so that the result is still a Delaunay triangulation. Declaration public QuadEdge InsertSite(Vertex v) Parameters Type Name Description Vertex v Returns Type Description QuadEdge a quadedge containing the inserted vertex | Edit this page View Source InsertSites(ICollection<Vertex>) Inserts all sites in a collection. The inserted vertices MUST be unique up to the provided tolerance value. (i.e. no two vertices should be closer than the provided tolerance value). They do not have to be rounded to the tolerance grid, however. Declaration public void InsertSites(ICollection<Vertex> vertices) Parameters Type Name Description ICollection<Vertex> vertices a Collection of Vertex Exceptions Type Condition LocateFailureException if the location algorithm fails to converge in a reasonable number of iterations"
  },
  "api/NetTopologySuite.Triangulate.MidpointSplitPointFinder.html": {
    "href": "api/NetTopologySuite.Triangulate.MidpointSplitPointFinder.html",
    "title": "Class MidpointSplitPointFinder | NetTopologySuite",
    "summary": "Class MidpointSplitPointFinder A simple split point finder which returns the midpoint of the split segment. This is a default strategy only. Usually a more sophisticated strategy is required to prevent repeated splitting. Other points which could be used are: The projection of the encroaching point on the segment A point on the segment which will produce two segments which will not be further encroached The point on the segment which is the same distance from an endpoint as the encroaching point Inheritance object MidpointSplitPointFinder Implements IConstraintSplitPointFinder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Triangulate Assembly: NetTopologySuite.dll Syntax public class MidpointSplitPointFinder : IConstraintSplitPointFinder Methods | Edit this page View Source FindSplitPoint(Segment, Coordinate) Gets the midpoint of the split segment Declaration public Coordinate FindSplitPoint(Segment seg, Coordinate encroachPt) Parameters Type Name Description Segment seg Coordinate encroachPt Returns Type Description Coordinate Implements IConstraintSplitPointFinder"
  },
  "api/NetTopologySuite.Triangulate.NonEncroachingSplitPointFinder.html": {
    "href": "api/NetTopologySuite.Triangulate.NonEncroachingSplitPointFinder.html",
    "title": "Class NonEncroachingSplitPointFinder | NetTopologySuite",
    "summary": "Class NonEncroachingSplitPointFinder A strategy for finding constraint split points which attempts to maximise the length of the split segments while preventing further encroachment. (This is not always possible for narrow angles). Inheritance object NonEncroachingSplitPointFinder Implements IConstraintSplitPointFinder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Triangulate Assembly: NetTopologySuite.dll Syntax public class NonEncroachingSplitPointFinder : IConstraintSplitPointFinder Methods | Edit this page View Source FindSplitPoint(Segment, Coordinate) A basic strategy for finding split points when nothing extra is known about the geometry of the situation. Declaration public Coordinate FindSplitPoint(Segment seg, Coordinate encroachPt) Parameters Type Name Description Segment seg the encroached segment Coordinate encroachPt the encroaching point Returns Type Description Coordinate the point at which to split the encroached segment | Edit this page View Source ProjectedSplitPoint(Segment, Coordinate) Computes a split point which is the projection of the encroaching point on the segment Declaration public static Coordinate ProjectedSplitPoint(Segment seg, Coordinate encroachPt) Parameters Type Name Description Segment seg The segment Coordinate encroachPt The enchroaching point Returns Type Description Coordinate A split point on the segment Implements IConstraintSplitPointFinder"
  },
  "api/NetTopologySuite.Triangulate.Polygon.ConstrainedDelaunayTriangulator.html": {
    "href": "api/NetTopologySuite.Triangulate.Polygon.ConstrainedDelaunayTriangulator.html",
    "title": "Class ConstrainedDelaunayTriangulator | NetTopologySuite",
    "summary": "Class ConstrainedDelaunayTriangulator Computes the Constrained Delaunay Triangulation of polygons. The Constrained Delaunay Triangulation of a polygon is a set of triangles covering the polygon, with the maximum total interior angle over all possible triangulations. It provides the \"best quality\" triangulation of the polygon. Holes are supported. Inheritance object ConstrainedDelaunayTriangulator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Triangulate.Polygon Assembly: NetTopologySuite.dll Syntax public class ConstrainedDelaunayTriangulator Constructors | Edit this page View Source ConstrainedDelaunayTriangulator(Geometry) Constructs a new Constrained Delaunay triangulator. Declaration public ConstrainedDelaunayTriangulator(Geometry inputGeom) Parameters Type Name Description Geometry inputGeom The input geometry Methods | Edit this page View Source GetResult() Gets the triangulation as a GeometryCollection of triangular NetTopologySuite.Triangulate.Polygons. Declaration public Geometry GetResult() Returns Type Description Geometry A collection of the result triangle polygons | Edit this page View Source GetTriangles() Gets the triangulation as a list of Tris. Declaration public IList<Tri> GetTriangles() Returns Type Description IList<Tri> The list of Tris in the triangulation | Edit this page View Source Triangulate(Geometry) Computes the Constrained Delaunay Triangulation of each polygon element in a geometry. Declaration public static Geometry Triangulate(Geometry geom) Parameters Type Name Description Geometry geom The input geometry Returns Type Description Geometry A GeometryCollection of the computed triangle polygons"
  },
  "api/NetTopologySuite.Triangulate.Polygon.PolygonHoleJoiner.html": {
    "href": "api/NetTopologySuite.Triangulate.Polygon.PolygonHoleJoiner.html",
    "title": "Class PolygonHoleJoiner | NetTopologySuite",
    "summary": "Class PolygonHoleJoiner Transforms a polygon with holes into a single self-touching (invalid) ring by joining holes to the exterior shell or to another hole with out-and-back line segments. The holes are added in order of their envelopes (leftmost/lowest first). As the result shell develops, a hole may be added to what was originally another hole. There is no attempt to optimize the quality of the join lines. In particular, holes may be joined by lines longer than is optimal. However, holes which touch the shell or other holes are joined at the touch point. The class does not require the input polygon to have normal orientation (shell CW and rings CCW). The output ring is always CW. Inheritance object PolygonHoleJoiner Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Triangulate.Polygon Assembly: NetTopologySuite.dll Syntax public class PolygonHoleJoiner Constructors | Edit this page View Source PolygonHoleJoiner(Polygon) Creates a new hole joiner. Declaration public PolygonHoleJoiner(Polygon polygon) Parameters Type Name Description Polygon polygon The polygon to join Methods | Edit this page View Source Compute() Computes the joined ring Declaration public Coordinate[] Compute() Returns Type Description Coordinate[] The points in the joined ring | Edit this page View Source Join(Polygon) Joins the shell and holes of a polygon and returns the result as sequence of Coordinates. Declaration public static Coordinate[] Join(Polygon polygon) Parameters Type Name Description Polygon polygon The polygon to join Returns Type Description Coordinate[] The result coordinates | Edit this page View Source JoinAsPolygon(Polygon) Joins the shell and holes of a polygon and returns the result as an (invalid) Polygon. Declaration public static Polygon JoinAsPolygon(Polygon polygon) Parameters Type Name Description Polygon polygon The polygon to join Returns Type Description Polygon The result polygon"
  },
  "api/NetTopologySuite.Triangulate.Polygon.PolygonTriangulator.html": {
    "href": "api/NetTopologySuite.Triangulate.Polygon.PolygonTriangulator.html",
    "title": "Class PolygonTriangulator | NetTopologySuite",
    "summary": "Class PolygonTriangulator Computes a triangulation of each polygon in a {@link Geometry}. A polygon triangulation is a non-overlapping set of triangles which cover the polygon and have the same vertices as the polygon. The priority is on performance rather than triangulation quality, so that the output may contain many narrow triangles. Holes are handled by joining them to the shell to form a (self-touching) polygon shell with no holes. Although invalid, this can be triangulated effectively. For better-quality triangulation use ConstrainedDelaunayTriangulator. Inheritance object PolygonTriangulator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Triangulate.Polygon Assembly: NetTopologySuite.dll Syntax public class PolygonTriangulator Constructors | Edit this page View Source PolygonTriangulator(Geometry) Constructs a new triangulator. Declaration public PolygonTriangulator(Geometry inputGeom) Parameters Type Name Description Geometry inputGeom The input geometry Methods | Edit this page View Source GetResult() Gets the triangulation as a GeometryCollection of triangular Polygons. Declaration public Geometry GetResult() Returns Type Description Geometry A collection of the result triangle polygons | Edit this page View Source GetTriangles() Gets the triangulation as a list of Tris. Declaration public List<Tri> GetTriangles() Returns Type Description List<Tri> The list of Tris in the triangulation | Edit this page View Source Triangulate(Geometry) Computes a triangulation of each polygon in a geometry. Declaration public static Geometry Triangulate(Geometry geom) Parameters Type Name Description Geometry geom A geometry containing polygons Returns Type Description Geometry A GeometryCollection containing the polygons See Also ConstrainedDelaunayTriangulator"
  },
  "api/NetTopologySuite.Triangulate.Polygon.html": {
    "href": "api/NetTopologySuite.Triangulate.Polygon.html",
    "title": "Namespace NetTopologySuite.Triangulate.Polygon | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Triangulate.Polygon Classes for triangulating polygons. ConstrainedDelaunayTriangulator can be used to provide high-quality near-Delaunay triangulations of polygonal geometry. The PolygonTriangulator produces lower-quality but faster triangulations. Classes ConstrainedDelaunayTriangulator Computes the Constrained Delaunay Triangulation of polygons. The Constrained Delaunay Triangulation of a polygon is a set of triangles covering the polygon, with the maximum total interior angle over all possible triangulations. It provides the \"best quality\" triangulation of the polygon. Holes are supported. PolygonHoleJoiner Transforms a polygon with holes into a single self-touching (invalid) ring by joining holes to the exterior shell or to another hole with out-and-back line segments. The holes are added in order of their envelopes (leftmost/lowest first). As the result shell develops, a hole may be added to what was originally another hole. There is no attempt to optimize the quality of the join lines. In particular, holes may be joined by lines longer than is optimal. However, holes which touch the shell or other holes are joined at the touch point. The class does not require the input polygon to have normal orientation (shell CW and rings CCW). The output ring is always CW. PolygonTriangulator Computes a triangulation of each polygon in a {@link Geometry}. A polygon triangulation is a non-overlapping set of triangles which cover the polygon and have the same vertices as the polygon. The priority is on performance rather than triangulation quality, so that the output may contain many narrow triangles. Holes are handled by joining them to the shell to form a (self-touching) polygon shell with no holes. Although invalid, this can be triangulated effectively. For better-quality triangulation use ConstrainedDelaunayTriangulator."
  },
  "api/NetTopologySuite.Triangulate.QuadEdge.EdgeConnectedTriangleTraversal.html": {
    "href": "api/NetTopologySuite.Triangulate.QuadEdge.EdgeConnectedTriangleTraversal.html",
    "title": "Class EdgeConnectedTriangleTraversal | NetTopologySuite",
    "summary": "Class EdgeConnectedTriangleTraversal A framework to visit sets of edge-connected QuadEdgeTriangles in breadth-first order Inheritance object EdgeConnectedTriangleTraversal Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Triangulate.QuadEdge Assembly: NetTopologySuite.dll Syntax public class EdgeConnectedTriangleTraversal Methods | Edit this page View Source Init(QuadEdgeTriangle) Declaration public void Init(QuadEdgeTriangle tri) Parameters Type Name Description QuadEdgeTriangle tri | Edit this page View Source Init(IEnumerable<QuadEdgeTriangle>) Called to initialize the traversal queue with a given set of QuadEdgeTriangles Declaration public void Init(IEnumerable<QuadEdgeTriangle> tris) Parameters Type Name Description IEnumerable<QuadEdgeTriangle> tris a collection of QuadEdgeTriangle | Edit this page View Source VisitAll(ITraversalVisitor) Subclasses call this method to perform the visiting process. Declaration public void VisitAll(ITraversalVisitor visitor) Parameters Type Name Description ITraversalVisitor visitor"
  },
  "api/NetTopologySuite.Triangulate.QuadEdge.IQuadEdgeLocator.html": {
    "href": "api/NetTopologySuite.Triangulate.QuadEdge.IQuadEdgeLocator.html",
    "title": "Interface IQuadEdgeLocator | NetTopologySuite",
    "summary": "Interface IQuadEdgeLocator An interface for classes which locate an edge in a QuadEdgeSubdivision which either contains a given Vertex V or is an edge of a triangle which contains V. Implementors may utilized different strategies for optimizing locating containing edges/triangles. Namespace: NetTopologySuite.Triangulate.QuadEdge Assembly: NetTopologySuite.dll Syntax public interface IQuadEdgeLocator Methods | Edit this page View Source Locate(Vertex) Declaration QuadEdge Locate(Vertex v) Parameters Type Name Description Vertex v Returns Type Description QuadEdge"
  },
  "api/NetTopologySuite.Triangulate.QuadEdge.ITraversalVisitor.html": {
    "href": "api/NetTopologySuite.Triangulate.QuadEdge.ITraversalVisitor.html",
    "title": "Interface ITraversalVisitor | NetTopologySuite",
    "summary": "Interface ITraversalVisitor Interface for classes which process triangles visited during traversals of a QuadEdgeSubdivision Namespace: NetTopologySuite.Triangulate.QuadEdge Assembly: NetTopologySuite.dll Syntax public interface ITraversalVisitor Methods | Edit this page View Source Visit(QuadEdgeTriangle, int, QuadEdgeTriangle) Visits a triangle during a traversal of a QuadEdgeSubdivision. An implementation of this method may perform processing on the current triangle. It must also decide whether a neighbouring triangle should be added to the queue so its neighbours are visited. Often it will perform processing on the neighbour triangle as well, in order to mark it as processed (visited) and/or to determine if it should be visited. Note that choosing not to visit the neighbouring triangle is the terminating condition for many traversal algorithms. In particular, if the neighbour triangle has already been visited, it should not be visited again. Declaration bool Visit(QuadEdgeTriangle currTri, int edgeIndex, QuadEdgeTriangle neighbTri) Parameters Type Name Description QuadEdgeTriangle currTri the current triangle being processed int edgeIndex the index of the edge in the current triangle being traversed QuadEdgeTriangle neighbTri a neighbouring triangle next in line to visit Returns Type Description bool true if the neighbour triangle should be visited"
  },
  "api/NetTopologySuite.Triangulate.QuadEdge.ITriangleVisitor.html": {
    "href": "api/NetTopologySuite.Triangulate.QuadEdge.ITriangleVisitor.html",
    "title": "Interface ITriangleVisitor | NetTopologySuite",
    "summary": "Interface ITriangleVisitor An interface for algorithms which process the triangles in a QuadEdgeSubdivision. Namespace: NetTopologySuite.Triangulate.QuadEdge Assembly: NetTopologySuite.dll Syntax public interface ITriangleVisitor Methods | Edit this page View Source Visit(QuadEdge[]) Visits the QuadEdges of a triangle. Declaration void Visit(QuadEdge[] triEdges) Parameters Type Name Description QuadEdge[] triEdges an array of the 3 quad edges in a triangle (in CCW order)"
  },
  "api/NetTopologySuite.Triangulate.QuadEdge.LastFoundQuadEdgeLocator.html": {
    "href": "api/NetTopologySuite.Triangulate.QuadEdge.LastFoundQuadEdgeLocator.html",
    "title": "Class LastFoundQuadEdgeLocator | NetTopologySuite",
    "summary": "Class LastFoundQuadEdgeLocator Locates QuadEdges in a QuadEdgeSubdivision, optimizing the search by starting in the locality of the last edge found. Inheritance object LastFoundQuadEdgeLocator Implements IQuadEdgeLocator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Triangulate.QuadEdge Assembly: NetTopologySuite.dll Syntax public class LastFoundQuadEdgeLocator : IQuadEdgeLocator Constructors | Edit this page View Source LastFoundQuadEdgeLocator(QuadEdgeSubdivision) Declaration public LastFoundQuadEdgeLocator(QuadEdgeSubdivision subdiv) Parameters Type Name Description QuadEdgeSubdivision subdiv Methods | Edit this page View Source Locate(Vertex) Locates an edge e, such that either v is on e, or e is an edge of a triangle containing v. The search starts from the last located edge and proceeds on the general direction of v. Declaration public QuadEdge Locate(Vertex v) Parameters Type Name Description Vertex v Returns Type Description QuadEdge Implements IQuadEdgeLocator"
  },
  "api/NetTopologySuite.Triangulate.QuadEdge.LocateFailureException.html": {
    "href": "api/NetTopologySuite.Triangulate.QuadEdge.LocateFailureException.html",
    "title": "Class LocateFailureException | NetTopologySuite",
    "summary": "Class LocateFailureException Inheritance object Exception LocateFailureException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Triangulate.QuadEdge Assembly: NetTopologySuite.dll Syntax public class LocateFailureException : Exception, ISerializable Constructors | Edit this page View Source LocateFailureException(LineSegment) Declaration public LocateFailureException(LineSegment seg) Parameters Type Name Description LineSegment seg | Edit this page View Source LocateFailureException(string) Declaration public LocateFailureException(string msg) Parameters Type Name Description string msg | Edit this page View Source LocateFailureException(string, LineSegment) Declaration public LocateFailureException(string msg, LineSegment seg) Parameters Type Name Description string msg LineSegment seg Properties | Edit this page View Source Segment Declaration public LineSegment Segment { get; } Property Value Type Description LineSegment Implements ISerializable"
  },
  "api/NetTopologySuite.Triangulate.QuadEdge.QuadEdge.html": {
    "href": "api/NetTopologySuite.Triangulate.QuadEdge.QuadEdge.html",
    "title": "Class QuadEdge | NetTopologySuite",
    "summary": "Class QuadEdge A class that represents the edge data structure which implements the quadedge algebra. The quadedge algebra was described in a well-known paper by Guibas and Stolfi, \"Primitives for the manipulation of general subdivisions and the computation of Voronoi diagrams\", ACM Transactions on Graphics, 4(2), 1985, 75-123. Each edge object is part of a quartet of 4 edges, linked via their Rot references. Any edge in the group may be accessed using a series of Rot operations. Quadedges in a subdivision are linked together via their Next references. The linkage between the quadedge quartets determines the topology of the subdivision. The edge class does not contain separate information for vertices or faces; a vertex is implicitly defined as a ring of edges (created using the Next field). Inheritance object QuadEdge Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Triangulate.QuadEdge Assembly: NetTopologySuite.dll Syntax public class QuadEdge Properties | Edit this page View Source DNext Gets the next CCW edge around (into) the destination of this edge. Declaration public QuadEdge DNext { get; } Property Value Type Description QuadEdge Remarks Get the next destination edge. | Edit this page View Source DPrev Gets the next CW edge around (into) the destination of this edge. Declaration public QuadEdge DPrev { get; } Property Value Type Description QuadEdge Remarks Get the previous destination edge. | Edit this page View Source Data Gets or sets the external data value for this edge. Declaration public object Data { get; set; } Property Value Type Description object Remarks an object containing external data | Edit this page View Source Dest Gets or sets the vertex for the edge's destination Declaration public Vertex Dest { get; } Property Value Type Description Vertex Remarks Gets the destination vertex | Edit this page View Source InvRot Gets the dual of this edge, directed from its left to its right. Declaration public QuadEdge InvRot { get; } Property Value Type Description QuadEdge Remarks Gets the inverse rotated edge. | Edit this page View Source IsLive Tests whether this edge has been deleted. Declaration public bool IsLive { get; } Property Value Type Description bool true if this edge has not been deleted. | Edit this page View Source LNext Gets the CCW edge around the left face following this edge. Declaration public QuadEdge LNext { get; } Property Value Type Description QuadEdge Remarks Gets the next left face edge. | Edit this page View Source LPrev Gets the CCW edge around the left face before this edge. Declaration public QuadEdge LPrev { get; } Property Value Type Description QuadEdge Remarks Get the previous left face edge. | Edit this page View Source Length Gets the length of the geometry of this quadedge. Declaration public double Length { get; } Property Value Type Description double Remarks Gets the length of the quadedge | Edit this page View Source ONext Gets the next CCW edge around the origin of this edge. Declaration public QuadEdge ONext { get; } Property Value Type Description QuadEdge Remarks Gets the next linked edge. | Edit this page View Source OPrev Gets the next CW edge around (from) the origin of this edge. Declaration public QuadEdge OPrev { get; } Property Value Type Description QuadEdge Remarks Gets the previous edge. | Edit this page View Source Orig Gets or sets the vertex for the edge's origin Declaration public Vertex Orig { get; } Property Value Type Description Vertex Remarks Gets the origin vertex | Edit this page View Source RNext Gets the edge around the right face ccw following this edge. Declaration public QuadEdge RNext { get; } Property Value Type Description QuadEdge Remarks Gets the next right face edge. | Edit this page View Source RPrev Gets the edge around the right face ccw before this edge. Declaration public QuadEdge RPrev { get; } Property Value Type Description QuadEdge Remarks Gets the previous right face edge. | Edit this page View Source Rot Gets the dual of this edge, directed from its right to its left. Declaration public QuadEdge Rot { get; } Property Value Type Description QuadEdge Remarks Gets or Sets the rotated edge | Edit this page View Source Sym Gets the edge from the destination to the origin of this edge. Declaration public QuadEdge Sym { get; } Property Value Type Description QuadEdge Remarks Gets the sym of the edge. Methods | Edit this page View Source Connect(QuadEdge, QuadEdge) Creates a new QuadEdge connecting the destination of a to the origin of b, in such a way that all three have the same left face after the connection is complete. Additionally, the data pointers of the new edge are set. Declaration public static QuadEdge Connect(QuadEdge a, QuadEdge b) Parameters Type Name Description QuadEdge a QuadEdge b Returns Type Description QuadEdge the connected edge | Edit this page View Source Delete() Marks this quadedge as being deleted. This does not free the memory used by this quadedge quartet, but indicates that this edge no longer participates in a subdivision. Declaration public void Delete() | Edit this page View Source EqualsNonOriented(QuadEdge) Tests if this quadedge and another have the same line segment geometry, regardless of orientation. Declaration public bool EqualsNonOriented(QuadEdge qe) Parameters Type Name Description QuadEdge qe a quadedge Returns Type Description bool true if the quadedges are based on the same line segment regardless of orientation | Edit this page View Source EqualsOriented(QuadEdge) Tests if this quadedge and another have the same line segment geometry with the same orientation. Declaration public bool EqualsOriented(QuadEdge qe) Parameters Type Name Description QuadEdge qe a quadedge Returns Type Description bool true if the quadedges are based on the same line segment | Edit this page View Source GetPrimary() Gets the primary edge of this quadedge and its sym . The primary edge is the one for which the origin and destination coordinates are ordered according to the standard Coordinate ordering Declaration public QuadEdge GetPrimary() Returns Type Description QuadEdge the primary quadedge | Edit this page View Source MakeEdge(Vertex, Vertex) Creates a new QuadEdge quartet from Vertexo to Vertex d. Declaration public static QuadEdge MakeEdge(Vertex o, Vertex d) Parameters Type Name Description Vertex o the origin Vertex Vertex d the destination Vertex Returns Type Description QuadEdge the new QuadEdge quartet | Edit this page View Source SetNext(QuadEdge) Sets the connected edge Declaration public void SetNext(QuadEdge next) Parameters Type Name Description QuadEdge next edge | Edit this page View Source Splice(QuadEdge, QuadEdge) Splices two edges together or apart. Splice affects the two edge rings around the origins of a and b, and, independently, the two edge rings around the left faces of a and b . In each case, (i) if the two rings are distinct, Splice will combine them into one, or (ii) if the two are the same ring, Splice will break it into two separate pieces. Thus, Splice can be used both to attach the two edges together, and to break them apart. Declaration public static void Splice(QuadEdge a, QuadEdge b) Parameters Type Name Description QuadEdge a an edge to splice QuadEdge b an edge to splice | Edit this page View Source Swap(QuadEdge) Turns an edge counterclockwise inside its enclosing quadrilateral. Declaration public static void Swap(QuadEdge e) Parameters Type Name Description QuadEdge e the quadedge to turn | Edit this page View Source ToLineSegment() Creates a LineSegment representing the geometry of this edge. Declaration public LineSegment ToLineSegment() Returns Type Description LineSegment a LineSegment | Edit this page View Source ToString() Converts this edge to a WKT two-point LINESTRING indicating the geometry of this edge. Declaration public override string ToString() Returns Type Description string a String representing this edge's geometry Overrides object.ToString()"
  },
  "api/NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.html": {
    "href": "api/NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.html",
    "title": "Class QuadEdgeSubdivision | NetTopologySuite",
    "summary": "Class QuadEdgeSubdivision A class that contains the QuadEdges representing a planar subdivision that models a triangulation. The subdivision is constructed using the quadedge algebra defined in the class QuadEdge. All metric calculations are done in the Vertex class. In addition to a triangulation, subdivisions support extraction of Voronoi diagrams. This is easily accomplished, since the Voronoi diagram is the dual of the Delaunay triangulation. Subdivisions can be provided with a tolerance value. Inserted vertices which are closer than this value to vertices already in the subdivision will be ignored. Using a suitable tolerance value can prevent robustness failures from happening during Delaunay triangulation. Subdivisions maintain a frame triangle around the client-created edges. The frame is used to provide a bounded \"container\" for all edges within a TIN. Normally the frame edges, frame connecting edges, and frame triangles are not included in client processing. Inheritance object QuadEdgeSubdivision Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Triangulate.QuadEdge Assembly: NetTopologySuite.dll Syntax public class QuadEdgeSubdivision Constructors | Edit this page View Source QuadEdgeSubdivision(Envelope, double) Creates a new instance of a quad-edge subdivision based on a frame triangle that encloses a supplied bounding box. A new super-bounding box that contains the triangle is computed and stored. Declaration public QuadEdgeSubdivision(Envelope env, double tolerance) Parameters Type Name Description Envelope env the bounding box to surround double tolerance the tolerance value for determining if two sites are equal Properties | Edit this page View Source Envelope Gets the envelope of the Subdivision (including the frame). Declaration public Envelope Envelope { get; } Property Value Type Description Envelope Remarks Gets the envelope | Edit this page View Source Tolerance Gets the vertex-equality tolerance value used in this subdivision Declaration public double Tolerance { get; } Property Value Type Description double Remarks Gets the tolerance value Methods | Edit this page View Source Connect(QuadEdge, QuadEdge) Creates a new QuadEdge connecting the destination of a to the origin of b, in such a way that all three have the same left face after the connection is complete. The quadedge is recorded in the edges list. Declaration public QuadEdge Connect(QuadEdge a, QuadEdge b) Parameters Type Name Description QuadEdge a A quadedge QuadEdge b A quadedge Returns Type Description QuadEdge A quadedge | Edit this page View Source Delete(QuadEdge) Deletes a quadedge from the subdivision. Linked quadedges are updated to reflect the deletion. Declaration public void Delete(QuadEdge e) Parameters Type Name Description QuadEdge e the quadedge to delete | Edit this page View Source GetEdges() Gets the collection of base QuadEdges (one for every pair of vertices which is connected). Declaration public IList<QuadEdge> GetEdges() Returns Type Description IList<QuadEdge> a collection of QuadEdges | Edit this page View Source GetEdges(GeometryFactory) Gets the geometry for the edges in the subdivision as a MultiLineString containing 2-point lines. Declaration public MultiLineString GetEdges(GeometryFactory geomFact) Parameters Type Name Description GeometryFactory geomFact the GeometryFactory to use Returns Type Description MultiLineString a MultiLineString | Edit this page View Source GetFrameEdges() Gets the edges which touch frame vertices. The returned edges are oriented so that their origin is a frame vertex. Declaration public IList<QuadEdge> GetFrameEdges() Returns Type Description IList<QuadEdge> The edges which touch the frame | Edit this page View Source GetPrimaryEdges(bool) Gets all primary quadedges in the subdivision. A primary edge is a QuadEdge which occupies the 0'th position in its array of associated quadedges. These provide the unique geometric edges of the triangulation. Declaration public IList<QuadEdge> GetPrimaryEdges(bool includeFrame) Parameters Type Name Description bool includeFrame true if the frame edges are to be included Returns Type Description IList<QuadEdge> a List of QuadEdges | Edit this page View Source GetTriangleCoordinates(bool) Gets the coordinates for each triangle in the subdivision as an array. Declaration public IList<Coordinate[]> GetTriangleCoordinates(bool includeFrame) Parameters Type Name Description bool includeFrame true if the frame triangles should be included Returns Type Description IList<Coordinate[]> a list of Coordinate[4] representing each triangle | Edit this page View Source GetTriangleEdges(QuadEdge, QuadEdge[]) Gets the edges for the triangle to the left of the given QuadEdge. Declaration public static void GetTriangleEdges(QuadEdge startQE, QuadEdge[] triEdge) Parameters Type Name Description QuadEdge startQE QuadEdge[] triEdge Exceptions Type Condition ArgumentException if the edges do not form a triangle | Edit this page View Source GetTriangleEdges(bool) Gets a list of the triangles in the subdivision, specified as an array of the primary quadedges around the triangle. Declaration public IList<QuadEdge[]> GetTriangleEdges(bool includeFrame) Parameters Type Name Description bool includeFrame true if the frame triangles should be included Returns Type Description IList<QuadEdge[]> a List of QuadEdge[3] arrays | Edit this page View Source GetTriangleVertices(bool) Gets a list of the triangles in the subdivision, specified as an array of the triangle Vertexes. Declaration public IList<Vertex[]> GetTriangleVertices(bool includeFrame) Parameters Type Name Description bool includeFrame true if the frame triangles should be included Returns Type Description IList<Vertex[]> a List of Vertex[3] arrays | Edit this page View Source GetTriangles(GeometryFactory) Gets the geometry for the triangles in a triangulated subdivision as a GeometryCollection of triangular NetTopologySuite.Triangulate.Polygons. Declaration public GeometryCollection GetTriangles(GeometryFactory geomFact) Parameters Type Name Description GeometryFactory geomFact the GeometryFactory to use Returns Type Description GeometryCollection a GeometryCollection of triangular Polygons | Edit this page View Source GetTriangles(bool, GeometryFactory) Gets the geometry for the triangles in a triangulated subdivision as a GeometryCollection of triangular Polygons, optionally including the frame triangles. Declaration public GeometryCollection GetTriangles(bool includeFrame, GeometryFactory geomFact) Parameters Type Name Description bool includeFrame A flag indicating if the frame triangles should be included GeometryFactory geomFact The GeometryFactory to use Returns Type Description GeometryCollection A GeometryCollection of triangular polygons | Edit this page View Source GetVertexUniqueEdges(bool) Gets a collection of QuadEdges whose origin vertices are a unique set which includes all vertices in the subdivision. The frame vertices can be included if required. Declaration public IList<QuadEdge> GetVertexUniqueEdges(bool includeFrame) Parameters Type Name Description bool includeFrame true if the frame vertices should be included Returns Type Description IList<QuadEdge> a collection of QuadEdge with the vertices of the subdivision as their origins Remarks This is useful for algorithms which require traversing the subdivision starting at all vertices. Returning a quadedge for each vertex is more efficient than the alternative of finding the actual vertices using GetVertices(bool) and then locating quadedges attached to them. | Edit this page View Source GetVertices(bool) Gets the unique Vertexes in the subdivision, including the frame vertices if desired. Declaration public IEnumerable<Vertex> GetVertices(bool includeFrame) Parameters Type Name Description bool includeFrame true if the frame vertices should be included Returns Type Description IEnumerable<Vertex> a collection of the subdivision vertices | Edit this page View Source GetVoronoiCellPolygon(QuadEdge, GeometryFactory) Gets the Voronoi cell around a site specified by the origin of a QuadEdge. Declaration public Polygon GetVoronoiCellPolygon(QuadEdge qe, GeometryFactory geomFact) Parameters Type Name Description QuadEdge qe a quadedge originating at the cell site GeometryFactory geomFact a factory for building the polygon Returns Type Description Polygon a polygon indicating the cell extent Remarks The userData of the polygon is set to be the Coordinate of the site. This allows attaching external data associated with the site to this cell polygon. | Edit this page View Source GetVoronoiCellPolygons(GeometryFactory) Gets a List of NetTopologySuite.Triangulate.Polygons for the Voronoi cells of this triangulation. Declaration public IList<Geometry> GetVoronoiCellPolygons(GeometryFactory geomFact) Parameters Type Name Description GeometryFactory geomFact a geometry factory Returns Type Description IList<Geometry> a List of Polygons Remarks The UserData of each polygon is set to be the Coordinate of the cell site. This allows easily associating external data associated with the sites to the cells. | Edit this page View Source GetVoronoiDiagram(GeometryFactory) Gets the cells in the Voronoi diagram for this triangulation. The cells are returned as a GeometryCollection of NetTopologySuite.Triangulate.Polygons Declaration public GeometryCollection GetVoronoiDiagram(GeometryFactory geomFact) Parameters Type Name Description GeometryFactory geomFact a geometry factory Returns Type Description GeometryCollection a GeometryCollection of Polygons Remarks The userData of each polygon is set to be the Coordinate of the cell site. This allows easily associating external data associated with the sites to the cells. | Edit this page View Source InsertSite(Vertex) Inserts a new site into the Subdivision, connecting it to the vertices of the containing triangle (or quadrilateral, if the split point falls on an existing edge). Declaration public QuadEdge InsertSite(Vertex v) Parameters Type Name Description Vertex v the vertex to insert Returns Type Description QuadEdge a new quad edge terminating in v Remarks This method does NOT maintain the Delaunay condition. If desired, this must be checked and enforced by the caller. This method does NOT check if the inserted vertex falls on an edge. This must be checked by the caller, since this situation may cause erroneous triangulation | Edit this page View Source IsDelaunay() Tests whether a subdivision is a valid Delaunay Triangulation. This is the case iff every edge is locally Delaunay, meaning that the apex of one adjacent triangle is not inside the circumcircle of the other adjacent triangle. Declaration public bool IsDelaunay() Returns Type Description bool | Edit this page View Source IsFrameBorderEdge(QuadEdge) Tests whether a QuadEdge is an edge on the border of the frame facets and the internal facets. E.g. an edge which does not itself touch a frame vertex, but which touches an edge which does. Declaration public bool IsFrameBorderEdge(QuadEdge e) Parameters Type Name Description QuadEdge e the edge to test Returns Type Description bool true if the edge is on the border of the frame | Edit this page View Source IsFrameEdge(QuadEdge) Tests whether a QuadEdge is an edge incident on a frame triangle vertex. Declaration public bool IsFrameEdge(QuadEdge e) Parameters Type Name Description QuadEdge e the edge to test Returns Type Description bool true if the edge is connected to the frame triangle | Edit this page View Source IsFrameVertex(Vertex) Tests whether a vertex is a vertex of the outer triangle. Declaration public bool IsFrameVertex(Vertex v) Parameters Type Name Description Vertex v the vertex to test Returns Type Description bool true if the vertex is an outer triangle vertex | Edit this page View Source IsOnEdge(QuadEdge, Coordinate) Tests whether a {@link Coordinate} lies on a {@link QuadEdge}, up to a tolerance determined by the subdivision tolerance. Declaration public bool IsOnEdge(QuadEdge e, Coordinate p) Parameters Type Name Description QuadEdge e a QuadEdge Coordinate p a point Returns Type Description bool true if the vertex lies on the edge | Edit this page View Source IsVertexOfEdge(QuadEdge, Vertex) Tests whether a Vertex is the start or end vertex of a QuadEdge, up to the subdivision tolerance distance. Declaration public bool IsVertexOfEdge(QuadEdge e, Vertex v) Parameters Type Name Description QuadEdge e Vertex v Returns Type Description bool true if the vertex is a endpoint of the edge | Edit this page View Source Locate(Coordinate) Finds a quadedge of a triangle containing a location specified by a Coordinate, if one exists. Declaration public QuadEdge Locate(Coordinate p) Parameters Type Name Description Coordinate p the Coordinate to locate Returns Type Description QuadEdge a quadedge on the edge of a triangle which touches or contains the location, or null if no such triangle exists | Edit this page View Source Locate(Coordinate, Coordinate) Locates the edge between the given vertices, if it exists in the subdivision. Declaration public QuadEdge Locate(Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p0 a coordinate Coordinate p1 another coordinate Returns Type Description QuadEdge the edge joining the coordinates, if present, or null if no such edge exists | Edit this page View Source Locate(Vertex) Finds a quadedge of a triangle containing a location specified by a Vertex, if one exists. Declaration public QuadEdge Locate(Vertex v) Parameters Type Name Description Vertex v the vertex to locate Returns Type Description QuadEdge a quadedge on the edge of a triangle which touches or contains the location or null if no such triangle exists | Edit this page View Source LocateFromEdge(Vertex, QuadEdge) Locates an edge of a triangle which contains a location specified by a Vertex v. The edge returned has the property that either v is on e, or e is an edge of a triangle containing v. The search starts from startEdge amd proceeds on the general direction of v. Declaration public QuadEdge LocateFromEdge(Vertex v, QuadEdge startEdge) Parameters Type Name Description Vertex v the location to search for QuadEdge startEdge an edge of the subdivision to start searching at Returns Type Description QuadEdge a QuadEdge which contains v, or is on the edge of a triangle containing v Remarks This locate algorithm relies on the subdivision being Delaunay. For non-Delaunay subdivisions, this may loop for ever. Exceptions Type Condition LocateFailureException if the location algorithm fails to converge in a reasonable number of iterations | Edit this page View Source MakeEdge(Vertex, Vertex) Creates a new quadedge, recording it in the edges list. Declaration public QuadEdge MakeEdge(Vertex o, Vertex d) Parameters Type Name Description Vertex o The origin vertex Vertex d The destination vertex Returns Type Description QuadEdge A new quadedge | Edit this page View Source SetLocator(IQuadEdgeLocator) Sets the IQuadEdgeLocator to use for locating containing triangles in this subdivision. Declaration public void SetLocator(IQuadEdgeLocator locator) Parameters Type Name Description IQuadEdgeLocator locator a QuadEdgeLocator | Edit this page View Source VisitTriangles(ITriangleVisitor, bool) Declaration public void VisitTriangles(ITriangleVisitor triVisitor, bool includeFrame) Parameters Type Name Description ITriangleVisitor triVisitor bool includeFrame"
  },
  "api/NetTopologySuite.Triangulate.QuadEdge.QuadEdgeTriangle.html": {
    "href": "api/NetTopologySuite.Triangulate.QuadEdge.QuadEdgeTriangle.html",
    "title": "Class QuadEdgeTriangle | NetTopologySuite",
    "summary": "Class QuadEdgeTriangle Models a triangle formed from QuadEdges in a QuadEdgeSubdivision which forms a triangulation. The class provides methods to access the topological and geometric properties of the triangle and its neighbours in the triangulation. Triangle vertices are ordered in CCW orientation in the structure. Inheritance object QuadEdgeTriangle Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Triangulate.QuadEdge Assembly: NetTopologySuite.dll Syntax public class QuadEdgeTriangle Remarks QuadEdgeTriangles support having an external data attribute attached to them. Alternatively, this class can be subclassed and attributes can be defined in the subclass. Subclasses will need to define their own BuilderVisitor class and CreateOn method. Constructors | Edit this page View Source QuadEdgeTriangle(QuadEdge[]) Creates a new triangle from the given edges. Declaration public QuadEdgeTriangle(QuadEdge[] edge) Parameters Type Name Description QuadEdge[] edge An array of the edges of the triangle in CCW order Properties | Edit this page View Source Data Gets or sets the external data value for this triangle. Declaration public object Data { get; set; } Property Value Type Description object Methods | Edit this page View Source Contains(Coordinate) Declaration public bool Contains(Coordinate pt) Parameters Type Name Description Coordinate pt Returns Type Description bool | Edit this page View Source Contains(QuadEdge[], Coordinate) Tests whether the point pt is contained in the triangle defined by 3 QuadEdgees. Declaration public static bool Contains(QuadEdge[] tri, Coordinate pt) Parameters Type Name Description QuadEdge[] tri an array containing at least 3 QuadEdges Coordinate pt the point to test Returns Type Description bool true if the point is contained in the triangle | Edit this page View Source Contains(Vertex[], Coordinate) Tests whether the point pt is contained in the triangle defined by 3 Vertexes. Declaration public static bool Contains(Vertex[] tri, Coordinate pt) Parameters Type Name Description Vertex[] tri an array containing at least 3 Vertexes Coordinate pt the point to test Returns Type Description bool true if the point is contained in the triangle | Edit this page View Source CreateOn(QuadEdgeSubdivision) Creates QuadEdgeTriangles for all facets of a QuadEdgeSubdivision representing a triangulation. The data attributes of the QuadEdges in the subdivision will be set to point to the triangle which contains that edge. This allows tracing the neighbour triangles of any given triangle. Declaration public static IList<QuadEdgeTriangle> CreateOn(QuadEdgeSubdivision subdiv) Parameters Type Name Description QuadEdgeSubdivision subdiv The QuadEdgeSubdivision to create the triangles on. Returns Type Description IList<QuadEdgeTriangle> A List of the created QuadEdgeTriangles | Edit this page View Source GetAdjacentTriangleAcrossEdge(int) Declaration public QuadEdgeTriangle GetAdjacentTriangleAcrossEdge(int edgeIndex) Parameters Type Name Description int edgeIndex Returns Type Description QuadEdgeTriangle | Edit this page View Source GetAdjacentTriangleEdgeIndex(int) Declaration public int GetAdjacentTriangleEdgeIndex(int i) Parameters Type Name Description int i Returns Type Description int | Edit this page View Source GetCoordinate(int) Declaration public Coordinate GetCoordinate(int i) Parameters Type Name Description int i Returns Type Description Coordinate | Edit this page View Source GetCoordinates() Declaration public Coordinate[] GetCoordinates() Returns Type Description Coordinate[] | Edit this page View Source GetEdge(int) Declaration public QuadEdge GetEdge(int i) Parameters Type Name Description int i Returns Type Description QuadEdge | Edit this page View Source GetEdgeIndex(QuadEdge) Gets the index for the given edge of this triangle Declaration public int GetEdgeIndex(QuadEdge e) Parameters Type Name Description QuadEdge e a QuadEdge Returns Type Description int the index of the edge in this triangle, or -1 if the edge is not an edge of this triangle | Edit this page View Source GetEdgeIndex(Vertex) Gets the index for the edge that starts at vertex v. Declaration public int GetEdgeIndex(Vertex v) Parameters Type Name Description Vertex v the vertex to find the edge for Returns Type Description int the index of the edge starting at the vertex, or -1 if the vertex is not in the triangle | Edit this page View Source GetEdgeSegment(int, LineSegment) Declaration public void GetEdgeSegment(int i, LineSegment seg) Parameters Type Name Description int i LineSegment seg | Edit this page View Source GetEdges() Declaration public QuadEdge[] GetEdges() Returns Type Description QuadEdge[] | Edit this page View Source GetGeometry(GeometryFactory) Declaration public Geometry GetGeometry(GeometryFactory fact) Parameters Type Name Description GeometryFactory fact Returns Type Description Geometry | Edit this page View Source GetNeighbours() Gets the neighbours of this triangle. If there is no neighbour triangle, the array element is null Declaration public QuadEdgeTriangle[] GetNeighbours() Returns Type Description QuadEdgeTriangle[] an array containing the 3 neighbours of this triangle | Edit this page View Source GetTrianglesAdjacentToVertex(int) Gets the triangles which are adjacent (include) to a given vertex of this triangle. Declaration public IList<QuadEdgeTriangle> GetTrianglesAdjacentToVertex(int vertexIndex) Parameters Type Name Description int vertexIndex The vertex to query Returns Type Description IList<QuadEdgeTriangle> A list of the vertex-adjacent triangles | Edit this page View Source GetVertex(int) Declaration public Vertex GetVertex(int i) Parameters Type Name Description int i Returns Type Description Vertex | Edit this page View Source GetVertices() Gets the vertices for this triangle. Declaration public Vertex[] GetVertices() Returns Type Description Vertex[] a new array containing the triangle vertices | Edit this page View Source IsBorder() Tests whether this triangle is adjacent to the outside of the subdivision. Declaration public bool IsBorder() Returns Type Description bool true if the triangle is adjacent to the subdivision exterior | Edit this page View Source IsBorder(int) Declaration public bool IsBorder(int i) Parameters Type Name Description int i Returns Type Description bool | Edit this page View Source IsLive() Declaration public bool IsLive() Returns Type Description bool | Edit this page View Source Kill() Declaration public void Kill() | Edit this page View Source ToPolygon(QuadEdge[]) Declaration public static Geometry ToPolygon(QuadEdge[] e) Parameters Type Name Description QuadEdge[] e Returns Type Description Geometry | Edit this page View Source ToPolygon(Vertex[]) Declaration public static Geometry ToPolygon(Vertex[] v) Parameters Type Name Description Vertex[] v Returns Type Description Geometry | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/NetTopologySuite.Triangulate.QuadEdge.QuadEdgeUtil.html": {
    "href": "api/NetTopologySuite.Triangulate.QuadEdge.QuadEdgeUtil.html",
    "title": "Class QuadEdgeUtil | NetTopologySuite",
    "summary": "Class QuadEdgeUtil Inheritance object QuadEdgeUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Triangulate.QuadEdge Assembly: NetTopologySuite.dll Syntax public class QuadEdgeUtil Methods | Edit this page View Source FindEdgesIncidentOnOrigin(QuadEdge) Gets all edges which are incident on the origin of the given edge. Declaration public static IList<QuadEdge> FindEdgesIncidentOnOrigin(QuadEdge start) Parameters Type Name Description QuadEdge start the edge to start at Returns Type Description IList<QuadEdge> a List of edges which have their origin at the origin of the given edge"
  },
  "api/NetTopologySuite.Triangulate.QuadEdge.TrianglePredicate.html": {
    "href": "api/NetTopologySuite.Triangulate.QuadEdge.TrianglePredicate.html",
    "title": "Class TrianglePredicate | NetTopologySuite",
    "summary": "Class TrianglePredicate Algorithms for computing values and predicates associated with triangles. Inheritance object TrianglePredicate Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Triangulate.QuadEdge Assembly: NetTopologySuite.dll Syntax public static class TrianglePredicate Remarks For some algorithms extended-precision implementations are provided, which are more robust (i.e. they produce correct answers in more cases). Also, some more robust formulations of some algorithms are provided, which utilize normalization to the origin. Methods | Edit this page View Source IsInCircleCC(Coordinate, Coordinate, Coordinate, Coordinate) Computes the inCircle test using distance from the circumcentre. Uses standard double-precision arithmetic. Declaration public static bool IsInCircleCC(Coordinate a, Coordinate b, Coordinate c, Coordinate p) Parameters Type Name Description Coordinate a A vertex of the triangle Coordinate b A vertex of the triangle Coordinate c A vertex of the triangle Coordinate p The point to test Returns Type Description bool The area of a triangle defined by the points a, b and c Remarks In general this doesn't appear to be any more robust than the standard calculation. However, there is at least one case where the test point is far enough from the circumcircle that this test gives the correct answer. LINESTRING (1507029.9878 518325.7547, 1507022.1120341457 518332.8225183258, 1507029.9833 518325.7458, 1507029.9896965567 518325.744909031) | Edit this page View Source IsInCircleDDFast(Coordinate, Coordinate, Coordinate, Coordinate) Tests if a point is inside the circle defined by the triangle with vertices a, b, c (oriented counter-clockwise). Declaration public static bool IsInCircleDDFast(Coordinate a, Coordinate b, Coordinate c, Coordinate p) Parameters Type Name Description Coordinate a A vertex of the triangle Coordinate b A vertex of the triangle Coordinate c A vertex of the triangle Coordinate p The point to test Returns Type Description bool true if this point is inside the circle defined by the points a, b, c Remarks The computation uses DD arithmetic for robustness, but a faster approach. | Edit this page View Source IsInCircleDDNormalized(Coordinate, Coordinate, Coordinate, Coordinate) Declaration public static bool IsInCircleDDNormalized(Coordinate a, Coordinate b, Coordinate c, Coordinate p) Parameters Type Name Description Coordinate a Coordinate b Coordinate c Coordinate p Returns Type Description bool | Edit this page View Source IsInCircleNonRobust(Coordinate, Coordinate, Coordinate, Coordinate) Tests if a point is inside the circle defined by the triangle with vertices a, b, c (oriented counter-clockwise). This test uses simple double-precision arithmetic, and thus is not 100% robust. Declaration public static bool IsInCircleNonRobust(Coordinate a, Coordinate b, Coordinate c, Coordinate p) Parameters Type Name Description Coordinate a A vertex of the triangle Coordinate b A vertex of the triangle Coordinate c A vertex of the triangle Coordinate p The point to test Returns Type Description bool true if this point is inside the circle defined by the points a, b, c | Edit this page View Source IsInCircleNormalized(Coordinate, Coordinate, Coordinate, Coordinate) Tests if a point is inside the circle defined by the triangle with vertices a, b, c (oriented counter-clockwise). Declaration public static bool IsInCircleNormalized(Coordinate a, Coordinate b, Coordinate c, Coordinate p) Parameters Type Name Description Coordinate a A vertex of the triangle Coordinate b A vertex of the triangle Coordinate c A vertex of the triangle Coordinate p The point to test Returns Type Description bool true if this point is inside the circle defined by the points a, b, c Remarks This test uses simple double-precision arithmetic, and thus is not 100% robust. However, by using normalization to the origin it provides improved robustness and increased performance. Based on code by J.R.Shewchuk. | Edit this page View Source IsInCircleRobust(Coordinate, Coordinate, Coordinate, Coordinate) Tests if a point is inside the circle defined by the triangle with vertices a, b, c (oriented counter-clockwise). Declaration public static bool IsInCircleRobust(Coordinate a, Coordinate b, Coordinate c, Coordinate p) Parameters Type Name Description Coordinate a A vertex of the triangle Coordinate b A vertex of the triangle Coordinate c A vertex of the triangle Coordinate p The point to test Returns Type Description bool true if this point is inside the circle defined by the points a, b, c Remarks This method uses more robust computation."
  },
  "api/NetTopologySuite.Triangulate.QuadEdge.Vertex.html": {
    "href": "api/NetTopologySuite.Triangulate.QuadEdge.Vertex.html",
    "title": "Class Vertex | NetTopologySuite",
    "summary": "Class Vertex Models a site (node) in a QuadEdgeSubdivision. The sites can be points on a line string representing a linear site. The vertex can be considered as a vector with a norm, length, inner product, cross product, etc. Additionally, point relations (e.g., is a point to the left of a line, the circle defined by this point and two others, etc.) are also defined in this class. It is common to want to attach user-defined data to the vertices of a subdivision. One way to do this is to subclass Vertex to carry any desired information. Inheritance object Vertex ConstraintVertex Implements IEquatable<Vertex> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Triangulate.QuadEdge Assembly: NetTopologySuite.dll Syntax public class Vertex : IEquatable<Vertex> Constructors | Edit this page View Source Vertex(Coordinate) Creates an instance of this class using a clone of the given Coordinate. Declaration public Vertex(Coordinate p) Parameters Type Name Description Coordinate p The coordinate | Edit this page View Source Vertex(double, double) Creates an instance of this class using the given x- and y-ordinate valuse Declaration public Vertex(double x, double y) Parameters Type Name Description double x x-ordinate value double y y-ordinate value | Edit this page View Source Vertex(double, double, double) Creates an instance of this class using the given x-, y- and z-ordinate values Declaration public Vertex(double x, double y, double z) Parameters Type Name Description double x x-ordinate value double y y-ordinate value double z z-ordinate value Properties | Edit this page View Source Coordinate Gets the coordinate Declaration public Coordinate Coordinate { get; } Property Value Type Description Coordinate | Edit this page View Source X Gets the x-ordinate value Declaration public double X { get; } Property Value Type Description double | Edit this page View Source Y Gets the y-ordinate value Declaration public double Y { get; } Property Value Type Description double | Edit this page View Source Z Gets the z-ordinate value Declaration public double Z { get; set; } Property Value Type Description double Methods | Edit this page View Source CircleCenter(Vertex, Vertex) Computes the centre of the circumcircle of this vertex and two others. Declaration public Vertex CircleCenter(Vertex b, Vertex c) Parameters Type Name Description Vertex b Vertex c Returns Type Description Vertex the Coordinate which is the circumcircle of the 3 points. | Edit this page View Source CircumRadiusRatio(Vertex, Vertex) Computes the value of the ratio of the circumradius to shortest edge. If smaller than some given tolerance B, the associated triangle is considered skinny. For an equal lateral triangle this value is 0.57735. The ratio is related to the minimum triangle angle theta by: circumRadius/shortestEdge = 1/(2sin(theta)). Declaration public double CircumRadiusRatio(Vertex b, Vertex c) Parameters Type Name Description Vertex b second vertex of the triangle Vertex c third vertex of the triangle Returns Type Description double ratio of circumradius to shortest edge. | Edit this page View Source Classify(Vertex, Vertex) Declaration public int Classify(Vertex p0, Vertex p1) Parameters Type Name Description Vertex p0 Vertex p1 Returns Type Description int | Edit this page View Source Equals(Vertex) Declaration public bool Equals(Vertex x) Parameters Type Name Description Vertex x Returns Type Description bool | Edit this page View Source Equals(Vertex, double) Declaration public bool Equals(Vertex x, double tolerance) Parameters Type Name Description Vertex x double tolerance Returns Type Description bool | Edit this page View Source InterpolateZ(Coordinate, Coordinate, Coordinate) Computes the interpolated Z-value for a point p lying on the segment p0-p1 Declaration public static double InterpolateZ(Coordinate p, Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p The point to interpolate the Z value of Coordinate p0 A vertex of the segment p is lying on Coordinate p1 A vertex of the segment p is lying on Returns Type Description double The interpolated Z-value (height) of the point | Edit this page View Source InterpolateZ(Coordinate, Coordinate, Coordinate, Coordinate) Interpolates the Z-value (height) of a point enclosed in a triangle whose vertices all have Z values. The containing triangle must not be degenerate (in other words, the three vertices must enclose a non-zero area). Declaration public static double InterpolateZ(Coordinate p, Coordinate v0, Coordinate v1, Coordinate v2) Parameters Type Name Description Coordinate p The point to interpolate the Z value of Coordinate v0 A vertex of a triangle containing the p Coordinate v1 A vertex of a triangle containing the p Coordinate v2 A vertex of a triangle containing the p Returns Type Description double The interpolated Z-value (height) of the point | Edit this page View Source InterpolateZValue(Vertex, Vertex, Vertex) For this vertex enclosed in a triangle defined by three vertices v0, v1 and v2, interpolate a z value from the surrounding vertices. Declaration public double InterpolateZValue(Vertex v0, Vertex v1, Vertex v2) Parameters Type Name Description Vertex v0 Vertex v1 Vertex v2 Returns Type Description double | Edit this page View Source IsInCircle(Vertex, Vertex, Vertex) Tests if this is inside the circle defined by the points a, b, c. This test uses simple double-precision arithmetic, and thus may not be robust. Declaration public bool IsInCircle(Vertex a, Vertex b, Vertex c) Parameters Type Name Description Vertex a A vertex of the triangle Vertex b A vertex of the triangle Vertex c A vertex of the triangle Returns Type Description bool true if this vertex is inside the circumcircle (a, b, c) | Edit this page View Source MidPoint(Vertex) returns a new vertex that is mid-way between this vertex and another end point. Declaration public Vertex MidPoint(Vertex a) Parameters Type Name Description Vertex a the other end point. Returns Type Description Vertex the point mid-way between this and that. | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Implements IEquatable<T>"
  },
  "api/NetTopologySuite.Triangulate.QuadEdge.html": {
    "href": "api/NetTopologySuite.Triangulate.QuadEdge.html",
    "title": "Namespace NetTopologySuite.Triangulate.QuadEdge | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Triangulate.QuadEdge Classes to implement a topological subdivision of quadeges, to support creating triangulations and Voronoi diagrams. Classes EdgeConnectedTriangleTraversal A framework to visit sets of edge-connected QuadEdgeTriangles in breadth-first order LastFoundQuadEdgeLocator Locates QuadEdges in a QuadEdgeSubdivision, optimizing the search by starting in the locality of the last edge found. LocateFailureException QuadEdge A class that represents the edge data structure which implements the quadedge algebra. The quadedge algebra was described in a well-known paper by Guibas and Stolfi, \"Primitives for the manipulation of general subdivisions and the computation of Voronoi diagrams\", ACM Transactions on Graphics, 4(2), 1985, 75-123. Each edge object is part of a quartet of 4 edges, linked via their Rot references. Any edge in the group may be accessed using a series of Rot operations. Quadedges in a subdivision are linked together via their Next references. The linkage between the quadedge quartets determines the topology of the subdivision. The edge class does not contain separate information for vertices or faces; a vertex is implicitly defined as a ring of edges (created using the Next field). QuadEdgeSubdivision A class that contains the QuadEdges representing a planar subdivision that models a triangulation. The subdivision is constructed using the quadedge algebra defined in the class QuadEdge. All metric calculations are done in the Vertex class. In addition to a triangulation, subdivisions support extraction of Voronoi diagrams. This is easily accomplished, since the Voronoi diagram is the dual of the Delaunay triangulation. Subdivisions can be provided with a tolerance value. Inserted vertices which are closer than this value to vertices already in the subdivision will be ignored. Using a suitable tolerance value can prevent robustness failures from happening during Delaunay triangulation. Subdivisions maintain a frame triangle around the client-created edges. The frame is used to provide a bounded \"container\" for all edges within a TIN. Normally the frame edges, frame connecting edges, and frame triangles are not included in client processing. QuadEdgeTriangle Models a triangle formed from QuadEdges in a QuadEdgeSubdivision which forms a triangulation. The class provides methods to access the topological and geometric properties of the triangle and its neighbours in the triangulation. Triangle vertices are ordered in CCW orientation in the structure. QuadEdgeUtil TrianglePredicate Algorithms for computing values and predicates associated with triangles. Vertex Models a site (node) in a QuadEdgeSubdivision. The sites can be points on a line string representing a linear site. The vertex can be considered as a vector with a norm, length, inner product, cross product, etc. Additionally, point relations (e.g., is a point to the left of a line, the circle defined by this point and two others, etc.) are also defined in this class. It is common to want to attach user-defined data to the vertices of a subdivision. One way to do this is to subclass Vertex to carry any desired information. Interfaces IQuadEdgeLocator An interface for classes which locate an edge in a QuadEdgeSubdivision which either contains a given Vertex V or is an edge of a triangle which contains V. Implementors may utilized different strategies for optimizing locating containing edges/triangles. ITraversalVisitor Interface for classes which process triangles visited during traversals of a QuadEdgeSubdivision ITriangleVisitor An interface for algorithms which process the triangles in a QuadEdgeSubdivision."
  },
  "api/NetTopologySuite.Triangulate.Segment.html": {
    "href": "api/NetTopologySuite.Triangulate.Segment.html",
    "title": "Class Segment | NetTopologySuite",
    "summary": "Class Segment Models a constraint segment in a triangulation. A constraint segment is an oriented straight line segment between a start point and an end point. Inheritance object Segment Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Triangulate Assembly: NetTopologySuite.dll Syntax public class Segment Constructors | Edit this page View Source Segment(Coordinate, Coordinate) Creates a new instance for the given points. Declaration public Segment(Coordinate p0, Coordinate p1) Parameters Type Name Description Coordinate p0 the start point Coordinate p1 the end point | Edit this page View Source Segment(Coordinate, Coordinate, object) Creates a new instance for the given points, with associated external data. Declaration public Segment(Coordinate p0, Coordinate p1, object data) Parameters Type Name Description Coordinate p0 the start point Coordinate p1 the end point object data an external data object | Edit this page View Source Segment(double, double, double, double, double, double) Creates a new instance for the given ordinates. Declaration public Segment(double x1, double y1, double z1, double x2, double y2, double z2) Parameters Type Name Description double x1 double y1 double z1 double x2 double y2 double z2 | Edit this page View Source Segment(double, double, double, double, double, double, object) Creates a new instance for the given ordinates, with associated external data. Declaration public Segment(double x1, double y1, double z1, double x2, double y2, double z2, object data) Parameters Type Name Description double x1 double y1 double z1 double x2 double y2 double z2 object data Properties | Edit this page View Source Data Gets or sets the external data associated with this segment Declaration public object Data { get; set; } Property Value Type Description object Remarks a data object | Edit this page View Source End Gets the end coordinate of the segment Declaration public Coordinate End { get; } Property Value Type Description Coordinate Remarks a Coordinate | Edit this page View Source EndX Gets the end X ordinate of the segment Declaration public double EndX { get; } Property Value Type Description double Remarks the X ordinate value | Edit this page View Source EndY Gets the end Y ordinate of the segment Declaration public double EndY { get; } Property Value Type Description double Remarks he Y ordinate value | Edit this page View Source EndZ Gets the end Z ordinate of the segment Declaration public double EndZ { get; } Property Value Type Description double Remarks the Z ordinate value | Edit this page View Source LineSegment Gets a LineSegment modelling this segment. Declaration public LineSegment LineSegment { get; } Property Value Type Description LineSegment Remarks a LineSegment | Edit this page View Source Start Gets the start coordinate of the segment Declaration public Coordinate Start { get; } Property Value Type Description Coordinate Remarks a Coordinate | Edit this page View Source StartX Gets the start X ordinate of the segment Declaration public double StartX { get; } Property Value Type Description double Remarks the X ordinate value | Edit this page View Source StartY Gets the start Y ordinate of the segment Declaration public double StartY { get; } Property Value Type Description double Remarks the Y ordinate value | Edit this page View Source StartZ Gets the start Z ordinate of the segment Declaration public double StartZ { get; } Property Value Type Description double Remarks the Z ordinate value Methods | Edit this page View Source EqualsTopologically(Segment) Determines whether two segments are topologically equal. I.e. equal up to orientation. Declaration public bool EqualsTopologically(Segment s) Parameters Type Name Description Segment s a segment Returns Type Description bool true if the segments are topologically equal | Edit this page View Source Intersection(Segment) Computes the intersection point between this segment and another one. Declaration public Coordinate Intersection(Segment s) Parameters Type Name Description Segment s a segment Returns Type Description Coordinate the intersection point, or null if there is none | Edit this page View Source ToString() Computes a string representation of this segment. Declaration public override string ToString() Returns Type Description string a string Overrides object.ToString()"
  },
  "api/NetTopologySuite.Triangulate.SplitSegment.html": {
    "href": "api/NetTopologySuite.Triangulate.SplitSegment.html",
    "title": "Class SplitSegment | NetTopologySuite",
    "summary": "Class SplitSegment Models a constraint segment which can be split in two in various ways, according to certain geometric constraints. Inheritance object SplitSegment Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Triangulate Assembly: NetTopologySuite.dll Syntax public class SplitSegment Constructors | Edit this page View Source SplitSegment(LineSegment) Creates an instance of this class using the provided LineSegment Declaration public SplitSegment(LineSegment seg) Parameters Type Name Description LineSegment seg A LineSegment Properties | Edit this page View Source MinimumLength Gets or sets a value indicating the minimum length of a segment Declaration public double MinimumLength { get; set; } Property Value Type Description double | Edit this page View Source SplitPoint Gets a value indicating the computed split point Declaration public Coordinate SplitPoint { get; } Property Value Type Description Coordinate Methods | Edit this page View Source SplitAt(Coordinate) Computes the SplitPoint close to the given Coordinate, ensuring that MinimumLength is not violated. Declaration public void SplitAt(Coordinate pt) Parameters Type Name Description Coordinate pt The Coordinate to split at | Edit this page View Source SplitAt(double, Coordinate) Computes the SplitPoint using the provided length and endPt. Declaration public void SplitAt(double length, Coordinate endPt) Parameters Type Name Description double length The length to split at Coordinate endPt The Coordinate to split at"
  },
  "api/NetTopologySuite.Triangulate.Tri.Tri.html": {
    "href": "api/NetTopologySuite.Triangulate.Tri.Tri.html",
    "title": "Class Tri | NetTopologySuite",
    "summary": "Class Tri A memory-efficient representation of a triangle in a triangulation. Contains three vertices, and links to adjacent Tris for each edge. Tris are constructed independently, and if needed linked into a triangulation using TriangulationBuilder. An edge of a Tri in a triangulation is called a boundary edge if it has no adjacent triangle. The set of Tris containing boundary edges are called the triangulation border. Inheritance object Tri Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Triangulate.Tri Assembly: NetTopologySuite.dll Syntax public class Tri Constructors | Edit this page View Source Tri(Coordinate, Coordinate, Coordinate) Creates a triangle with the given vertices. The vertices should be oriented clockwise. Declaration public Tri(Coordinate p0, Coordinate p1, Coordinate p2) Parameters Type Name Description Coordinate p0 The first triangle vertex Coordinate p1 The second triangle vertex Coordinate p2 The third triangle vertex Properties | Edit this page View Source Area Gets the area of the triangle. Declaration public double Area { get; } Property Value Type Description double The area of the triangle | Edit this page View Source Length Gets the perimeter length of the perimeter of the triangle. Declaration public double Length { get; } Property Value Type Description double | Edit this page View Source NumAdjacent Computes the number of triangle adjacent to this triangle. This is a number in the range [0,2]. Declaration public int NumAdjacent { get; } Property Value Type Description int The number of adjacent triangles | Edit this page View Source P0 Gets a value indicating the 1st point of this Tri. Declaration protected Coordinate P0 { get; } Property Value Type Description Coordinate | Edit this page View Source P1 Gets a value indicating the 2nd point of this Tri. Declaration protected Coordinate P1 { get; } Property Value Type Description Coordinate | Edit this page View Source P2 Gets a value indicating the 3rd point of this Tri. Declaration protected Coordinate P2 { get; } Property Value Type Description Coordinate | Edit this page View Source Tri0 Gets a value indicating the adjacent Tri across the edge P0 clockwise towards the next point. Declaration protected Tri Tri0 { get; } Property Value Type Description Tri | Edit this page View Source Tri1 Gets a value indicating the adjacent Tri across the edge P1 clockwise towards the next point. Declaration protected Tri Tri1 { get; } Property Value Type Description Tri | Edit this page View Source Tri2 Gets a value indicating the adjacent Tri across the edge P2 clockwise towards the next point. Declaration protected Tri Tri2 { get; } Property Value Type Description Tri Methods | Edit this page View Source AreaOf(IEnumerable<Tri>) Computes the area of a set of Tris. Declaration public static double AreaOf(IEnumerable<Tri> triList) Parameters Type Name Description IEnumerable<Tri> triList A set of tris Returns Type Description double The total area of the triangles | Edit this page View Source Create(Coordinate, Coordinate, Coordinate) Creates a triangle with the given vertices. The vertices should be oriented clockwise. Declaration public static Tri Create(Coordinate p0, Coordinate p1, Coordinate p2) Parameters Type Name Description Coordinate p0 The first triangle vertex Coordinate p1 The second triangle vertex Coordinate p2 The third triangle vertex Returns Type Description Tri The created trianlge | Edit this page View Source Create(Coordinate[]) Creates a triangle from an array with three vertex coordinates. The vertices should be oriented clockwise. Declaration public static Tri Create(Coordinate[] pts) Parameters Type Name Description Coordinate[] pts The array of vertex coordinates Returns Type Description Tri The created triangle | Edit this page View Source Degree(int, IList<Tri>) Computes the degree of a Tri vertex, which is the number of tris containing it. This must be done by searching the entire triangulation, since the containing tris may not be adjacent or edge-connected. Declaration public int Degree(int index, IList<Tri> triList) Parameters Type Name Description int index The vertex index IList<Tri> triList The triangulation Returns Type Description int The degree of the vertex | Edit this page View Source Flip(int) Interchanges the vertices of this triangle and a neighbor so that their common edge becomes the the other diagonal of the quadrilateral they form. Neighbour triangle links are modified accordingly. Declaration public void Flip(int index) Parameters Type Name Description int index The index of the adjacent tri to flip with | Edit this page View Source GetAdjacent(int) Gets the triangle adjacent to an edge. Declaration public Tri GetAdjacent(int index) Parameters Type Name Description int index The edge index Returns Type Description Tri The adjacent triangle (may be null) | Edit this page View Source GetCoordinate(int) Gets the coordinate for a vertex. This is the start vertex of the edge. Declaration public Coordinate GetCoordinate(int index) Parameters Type Name Description int index The vertex (edge) index Returns Type Description Coordinate The vertex coordinate | Edit this page View Source GetIndex(Coordinate) Gets the index of the triangle vertex which has a given coordinate (if any). This is also the index of the edge which originates at the vertex. Declaration public int GetIndex(Coordinate p) Parameters Type Name Description Coordinate p The coordinate to find Returns Type Description int The vertex index, or -1 if it is not in the triangle | Edit this page View Source GetIndex(Tri) Gets the edge index which a triangle is adjacent to (if any), based on the adjacent triangle link. Declaration public int GetIndex(Tri tri) Parameters Type Name Description Tri tri The Tri to find Returns Type Description int The index of the edge adjacent to the triangle, or -1 if not found | Edit this page View Source GetLength(int) Gets the length of an edge of the triangle. Declaration public double GetLength(int edgeIndex) Parameters Type Name Description int edgeIndex The edge index Returns Type Description double The edge length | Edit this page View Source HasAdjacent() Tests if this tri has any adjacent tris. Declaration public bool HasAdjacent() Returns Type Description bool true if there is at least one adjacent tri | Edit this page View Source HasAdjacent(int) Tests if there is an adjacent triangle to an edge. Declaration public bool HasAdjacent(int index) Parameters Type Name Description int index The edge index Returns Type Description bool true if there is a triangle adjacent to edge | Edit this page View Source IsAdjacent(Tri) Tests if a triangle is adjacent to some edge of this triangle. Declaration public bool IsAdjacent(Tri tri) Parameters Type Name Description Tri tri The triangle to test Returns Type Description bool true if the triangle is adjacent | Edit this page View Source IsBorder() Tests if a tri contains a boundary edge, and thus on the border of the triangulation containing it. Declaration public bool IsBorder() Returns Type Description bool true if the tri is on the border of the triangulation | Edit this page View Source IsBoundary(int) Tests if an edge is on the boundary of a triangulation. Declaration public bool IsBoundary(int index) Parameters Type Name Description int index The index of an edge Returns Type Description bool true if the edge is on the boundary | Edit this page View Source IsInteriorVertex(int) Tests if a tri vertex is interior. A vertex of a triangle is interior if it is fully surrounded by other triangles. Declaration public bool IsInteriorVertex(int index) Parameters Type Name Description int index The vertex index Returns Type Description bool true if the vertex is interior | Edit this page View Source MidPoint(int) Computes a coordinate for the midpoint of a triangle edge. Declaration public Coordinate MidPoint(int edgeIndex) Parameters Type Name Description int edgeIndex The edge index Returns Type Description Coordinate the midpoint of the triangle edge | Edit this page View Source Next(int) Computes the vertex or edge index which is the next one (counter-clockwise) around the triangle. Declaration public static int Next(int index) Parameters Type Name Description int index The index Returns Type Description int The next index value | Edit this page View Source OppEdge(int) Gets the index of the edge opposite a vertex. Declaration public static int OppEdge(int vertexIndex) Parameters Type Name Description int vertexIndex The index of the vertex Returns Type Description int The index of the opposite edge | Edit this page View Source OppVertex(int) Gets the index of the vertex opposite an edge. Declaration public static int OppVertex(int edgeIndex) Parameters Type Name Description int edgeIndex The edge index Returns Type Description int The index of the opposite vertex | Edit this page View Source Prev(int) Computes the vertex or edge index which is the previous one (counter-clockwise) around the triangle. Declaration public static int Prev(int index) Parameters Type Name Description int index The index Returns Type Description int The previous index value | Edit this page View Source Remove() Removes this triangle from a triangulation. All adjacent references and the references to this Tri in the adjacent Tris are set to null. Declaration public void Remove() | Edit this page View Source Remove(IList<Tri>) Removes this tri from the triangulation containing it. All links between the tri and adjacent ones are nulled. Declaration public void Remove(IList<Tri> triList) Parameters Type Name Description IList<Tri> triList The triangulation | Edit this page View Source SetAdjacent(Coordinate, Tri) Sets the triangle adjacent to the edge originating at a given vertex. The vertices of the adjacent triangles are assumed to match the appropriate vertices in this triangle. Declaration public void SetAdjacent(Coordinate pt, Tri tri) Parameters Type Name Description Coordinate pt The edge start point Tri tri The adjacent triangle | Edit this page View Source SetAdjacent(Tri, Tri, Tri) Sets the adjacent triangles. The vertices of the adjacent triangles are assumed to match the appropriate vertices in this triangle. Declaration public void SetAdjacent(Tri tri0, Tri tri1, Tri tri2) Parameters Type Name Description Tri tri0 The triangle adjacent to edge 0 Tri tri1 The triangle adjacent to edge 1 Tri tri2 The triangle adjacent to edge 2 | Edit this page View Source SetTri(int, Tri) Sets the triangle adjacent to an edge. The vertices of the adjacent triangle are assumed to match the appropriate vertices in this triangle. Declaration public void SetTri(int edgeIndex, Tri tri) Parameters Type Name Description int edgeIndex The edge triangle is adjacent to Tri tri The adjacent triangle | Edit this page View Source Split(Coordinate) Splits a triangle by a point located inside the triangle. Creates the three new resulting triangles with adjacent links set correctly. Returns the new triangle whose 0'th vertex is the splitting point. Declaration public Tri Split(Coordinate p) Parameters Type Name Description Coordinate p The point to insert Returns Type Description Tri The new triangle whose 0'th vertex is p | Edit this page View Source ToGeometry(ICollection<Tri>, GeometryFactory) Creates a GeometryCollection of NetTopologySuite.Triangulate.Polygons representing the triangles in a list. Declaration public static Geometry ToGeometry(ICollection<Tri> tris, GeometryFactory geomFact) Parameters Type Name Description ICollection<Tri> tris A collection of Tris GeometryFactory geomFact The GeometryFactory to use Returns Type Description Geometry The Polygons for the triangles | Edit this page View Source ToPolygon(GeometryFactory) Creates a NetTopologySuite.Triangulate.Polygon representing this triangle. Declaration public Polygon ToPolygon(GeometryFactory geomFact) Parameters Type Name Description GeometryFactory geomFact The geometry factory Returns Type Description Polygon A polygon | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() | Edit this page View Source Validate() Validates that a Tri is correct. Currently just checks that orientation is CW. Declaration public void Validate() Exceptions Type Condition ArgumentException Thrown if Tri is not valid | Edit this page View Source Validate(IEnumerable<Tri>) Validates a list of Tris. Declaration public static void Validate(IEnumerable<Tri> triList) Parameters Type Name Description IEnumerable<Tri> triList The list of Tris to validate | Edit this page View Source ValidateAdjacent(int) Validates that the vertices of an adjacent linked triangle are correct. Declaration public void ValidateAdjacent(int index) Parameters Type Name Description int index The index of the adjacent triangle"
  },
  "api/NetTopologySuite.Triangulate.Tri.TriangulationBuilder.html": {
    "href": "api/NetTopologySuite.Triangulate.Tri.TriangulationBuilder.html",
    "title": "Class TriangulationBuilder | NetTopologySuite",
    "summary": "Class TriangulationBuilder Builds a triangulation from a set of Tris by populating the links to adjacent triangles. Inheritance object TriangulationBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Triangulate.Tri Assembly: NetTopologySuite.dll Syntax public class TriangulationBuilder Methods | Edit this page View Source Build(IEnumerable<Tri>) Computes the triangulation of a set of Tris. Declaration public static void Build(IEnumerable<Tri> triList) Parameters Type Name Description IEnumerable<Tri> triList An enumeration of Tris"
  },
  "api/NetTopologySuite.Triangulate.Tri.html": {
    "href": "api/NetTopologySuite.Triangulate.Tri.html",
    "title": "Namespace NetTopologySuite.Triangulate.Tri | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Triangulate.Tri Classes for representing a planar triangulation as a set of linked triangles. Triangles are represented by memory-efficient Tri objects. A set of triangles can be linked into a triangulation using TriangulationBuilder. Classes Tri A memory-efficient representation of a triangle in a triangulation. Contains three vertices, and links to adjacent Tris for each edge. Tris are constructed independently, and if needed linked into a triangulation using TriangulationBuilder. An edge of a Tri in a triangulation is called a boundary edge if it has no adjacent triangle. The set of Tris containing boundary edges are called the triangulation border. TriangulationBuilder Builds a triangulation from a set of Tris by populating the links to adjacent triangles."
  },
  "api/NetTopologySuite.Triangulate.VertexTaggedGeometryDataMapper.html": {
    "href": "api/NetTopologySuite.Triangulate.VertexTaggedGeometryDataMapper.html",
    "title": "Class VertexTaggedGeometryDataMapper | NetTopologySuite",
    "summary": "Class VertexTaggedGeometryDataMapper Creates a map between the vertex Coordinates of a set of Geometrys, and the parent geometry, and transfers the source geometry data objects to geometry components tagged with the coordinates. Inheritance object VertexTaggedGeometryDataMapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Triangulate Assembly: NetTopologySuite.dll Syntax public class VertexTaggedGeometryDataMapper Remarks This class can be used in conjunction with VoronoiDiagramBuilder to transfer data objects from the input site geometries to the constructed Voronoi polygons. Properties | Edit this page View Source Coordinates Gets a value indicating the coordinates. Declaration public IList<Coordinate> Coordinates { get; } Property Value Type Description IList<Coordinate> A list of Coordinates. Methods | Edit this page View Source LoadSourceGeometries(Geometry) Loads the vertices of a geometry and maps them with th the UserData. Declaration public void LoadSourceGeometries(Geometry geoms) Parameters Type Name Description Geometry geoms A geometry | Edit this page View Source LoadSourceGeometries(GeometryCollection) Loads the vertices of the geometries of a GeometryCollection and maps them with the UserData. Declaration public void LoadSourceGeometries(GeometryCollection geomColl) Parameters Type Name Description GeometryCollection geomColl A GeometryCollection | Edit this page View Source LoadSourceGeometries(ICollection<Geometry>) Loads the vertices of a collection of geometries and maps them with the UserData. Declaration public void LoadSourceGeometries(ICollection<Geometry> geoms) Parameters Type Name Description ICollection<Geometry> geoms A collection of geometry | Edit this page View Source TransferData(Geometry) Input is assumed to be a multiGeometry in which every component has its userData set to be a Coordinate which is the key to the output data. The Coordinate is used to determine the output data object to be written back into the component. Declaration public void TransferData(Geometry targetGeom) Parameters Type Name Description Geometry targetGeom"
  },
  "api/NetTopologySuite.Triangulate.VoronoiDiagramBuilder.html": {
    "href": "api/NetTopologySuite.Triangulate.VoronoiDiagramBuilder.html",
    "title": "Class VoronoiDiagramBuilder | NetTopologySuite",
    "summary": "Class VoronoiDiagramBuilder A utility class which creates Voronoi Diagrams from collections of points. The diagram is returned as a GeometryCollection of NetTopologySuite.Triangulate.Polygons, representing the faces of the Voronoi diagram. /// The faces are clipped to the larger of: an envelope supplied by ClipEnvelope.set. an envelope determined by the input sites. The userData attribute of each face Polygon is set to the Coordinate of the corresponding input site. This allows using a Map to link faces to data associated with sites. Inheritance object VoronoiDiagramBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Triangulate Assembly: NetTopologySuite.dll Syntax public class VoronoiDiagramBuilder Properties | Edit this page View Source ClipEnvelope Sets the envelope to clip the diagram to. The diagram will be clipped to the larger of this envelope or an envelope surrounding the sites. Declaration public Envelope ClipEnvelope { set; } Property Value Type Description Envelope Remarks the clip envelope. | Edit this page View Source Tolerance Sets the snapping tolerance which will be used to improved the robustness of the triangulation computation. A tolerance of 0.0 specifies that no snapping will take place. Declaration public double Tolerance { set; } Property Value Type Description double Remarks tolerance the tolerance distance to use Methods | Edit this page View Source GetDiagram(GeometryFactory) Gets the faces of the computed diagram as a GeometryCollection of NetTopologySuite.Triangulate.Polygons, clipped as specified. The UserData attribute of each face NetTopologySuite.Triangulate.Polygon is set to the Coordinate of the corresponding input site. This allows using a IDictionary<TKey, TValue> to link faces to data associated with sites. Declaration public GeometryCollection GetDiagram(GeometryFactory geomFact) Parameters Type Name Description GeometryFactory geomFact the geometry factory to use to create the output Returns Type Description GeometryCollection a GeometryCollection containing the face NetTopologySuite.Triangulate.Polygons of the diagram | Edit this page View Source GetSubdivision() Gets the QuadEdgeSubdivision which models the computed diagram. Declaration public QuadEdgeSubdivision GetSubdivision() Returns Type Description QuadEdgeSubdivision the subdivision containing the triangulation | Edit this page View Source SetSites(Geometry) Sets the sites (point or vertices) which will be diagrammed. All vertices of the given geometry will be used as sites. Declaration public void SetSites(Geometry geom) Parameters Type Name Description Geometry geom geom the geometry from which the sites will be extracted. | Edit this page View Source SetSites(ICollection<Coordinate>) Sets the sites (point or vertices) which will be diagrammed from a collection of Coordinates. Declaration public void SetSites(ICollection<Coordinate> coords) Parameters Type Name Description ICollection<Coordinate> coords a collection of Coordinates."
  },
  "api/NetTopologySuite.Triangulate.html": {
    "href": "api/NetTopologySuite.Triangulate.html",
    "title": "Namespace NetTopologySuite.Triangulate | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Triangulate Classes to compute Delaunay triangulations. Classes ConformingDelaunayTriangulationBuilder A utility class which creates Conforming Delaunay Triangulations from collections of points and linear constraints, and extract the resulting triangulation edges or triangles as geometries. ConformingDelaunayTriangulator Computes a Conforming Delaunay Triangulation over a set of sites and a set of linear constraints. ConstraintEnforcementException Indicates a failure during constraint enforcement. ConstraintVertex A vertex in a Constrained Delaunay Triangulation. The vertex may or may not lie on a constraint. If it does it may carry extra information about the original constraint. DelaunayTriangulationBuilder A utility class which creates Delaunay Triangulations from collections of points and extract the resulting triangulation edges or triangles as geometries. IncrementalDelaunayTriangulator Computes a Delaunay Triangulation of a set of Vertexes, using an incremental insertion algorithm. MidpointSplitPointFinder A simple split point finder which returns the midpoint of the split segment. This is a default strategy only. Usually a more sophisticated strategy is required to prevent repeated splitting. Other points which could be used are: The projection of the encroaching point on the segment A point on the segment which will produce two segments which will not be further encroached The point on the segment which is the same distance from an endpoint as the encroaching point NonEncroachingSplitPointFinder A strategy for finding constraint split points which attempts to maximise the length of the split segments while preventing further encroachment. (This is not always possible for narrow angles). Segment Models a constraint segment in a triangulation. A constraint segment is an oriented straight line segment between a start point and an end point. SplitSegment Models a constraint segment which can be split in two in various ways, according to certain geometric constraints. VertexTaggedGeometryDataMapper Creates a map between the vertex Coordinates of a set of Geometrys, and the parent geometry, and transfers the source geometry data objects to geometry components tagged with the coordinates. VoronoiDiagramBuilder A utility class which creates Voronoi Diagrams from collections of points. The diagram is returned as a GeometryCollection of NetTopologySuite.Triangulate.Polygons, representing the faces of the Voronoi diagram. /// The faces are clipped to the larger of: an envelope supplied by ClipEnvelope.set. an envelope determined by the input sites. The userData attribute of each face Polygon is set to the Coordinate of the corresponding input site. This allows using a Map to link faces to data associated with sites. Interfaces ConstraintVertexFactory An interface for factories which create a ConstraintVertex IConstraintSplitPointFinder An interface for strategies for determining the location of split points on constraint segments. The location of split points has a large effect on the performance and robustness of enforcing a constrained Delaunay triangulation. Poorly chosen split points can cause repeated splitting, especially at narrow constraint angles, since the split point will end up encroaching on the segment containing the original encroaching point. With detailed knowledge of the geometry of the constraints, it is sometimes possible to choose better locations for splitting."
  },
  "api/NetTopologySuite.Utilities.AlternativePriorityQueue-2.html": {
    "href": "api/NetTopologySuite.Utilities.AlternativePriorityQueue-2.html",
    "title": "Class AlternativePriorityQueue<TPriority, TData> | NetTopologySuite",
    "summary": "Class AlternativePriorityQueue<TPriority, TData> An alternative implementation of the priority queue abstract data type. This allows us to do more than PriorityQueue<T>, which we got from JTS. Ultimately, this queue enables scenarios that have more favorable execution speed characteristics at the cost of less favorable memory and usability characteristics. Inheritance object AlternativePriorityQueue<TPriority, TData> Implements IEnumerable<PriorityQueueNode<TPriority, TData>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Utilities Assembly: NetTopologySuite.dll Syntax public sealed class AlternativePriorityQueue<TPriority, TData> : IEnumerable<PriorityQueueNode<TPriority, TData>>, IEnumerable Type Parameters Name Description TPriority The type of the priority for each queue node. TData The type of data stored in the queue. Remarks When enumerating over the queue, note that the elements will not be in sorted order. To get at the elements in sorted order, use the copy constructor and repeatedly Dequeue() elements from it. Constructors | Edit this page View Source AlternativePriorityQueue() Initializes a new instance of the AlternativePriorityQueue<TPriority, TData> class. Declaration public AlternativePriorityQueue() | Edit this page View Source AlternativePriorityQueue(AlternativePriorityQueue<TPriority, TData>) Initializes a new instance of the AlternativePriorityQueue<TPriority, TData> class. Declaration public AlternativePriorityQueue(AlternativePriorityQueue<TPriority, TData> copyFrom) Parameters Type Name Description AlternativePriorityQueue<TPriority, TData> copyFrom The AlternativePriorityQueue<TPriority, TData> to copy from. Exceptions Type Condition ArgumentNullException copyFrom is null. | Edit this page View Source AlternativePriorityQueue(IComparer<TPriority>) Initializes a new instance of the AlternativePriorityQueue<TPriority, TData> class. Declaration public AlternativePriorityQueue(IComparer<TPriority> priorityComparer) Parameters Type Name Description IComparer<TPriority> priorityComparer The IComparer<T> to use to compare priority values, or null to use the default comparer for the type. | Edit this page View Source AlternativePriorityQueue(int) Initializes a new instance of the AlternativePriorityQueue<TPriority, TData> class. Declaration public AlternativePriorityQueue(int capacity) Parameters Type Name Description int capacity The initial queue capacity. Exceptions Type Condition ArgumentOutOfRangeException capacity is less than 1. | Edit this page View Source AlternativePriorityQueue(int, IComparer<TPriority>) Initializes a new instance of the AlternativePriorityQueue<TPriority, TData> class. Declaration public AlternativePriorityQueue(int capacity, IComparer<TPriority> priorityComparer) Parameters Type Name Description int capacity The initial queue capacity. IComparer<TPriority> priorityComparer The IComparer<T> to use to compare priority values, or null to use the default comparer for the type. Exceptions Type Condition ArgumentOutOfRangeException capacity is less than 1. Properties | Edit this page View Source Count Gets the number of nodes currently stored in this queue. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source Head Gets the node at the head of the queue. This is the node whose TPriority compares less than or equal to the priority of all other nodes in the queue. Declaration public PriorityQueueNode<TPriority, TData> Head { get; } Property Value Type Description PriorityQueueNode<TPriority, TData> Methods | Edit this page View Source ChangePriority(PriorityQueueNode<TPriority, TData>, TPriority) Changes the priority of the given node. Declaration public void ChangePriority(PriorityQueueNode<TPriority, TData> node, TPriority priority) Parameters Type Name Description PriorityQueueNode<TPriority, TData> node The node whose priority to change. TPriority priority The new priority for the node. Exceptions Type Condition ArgumentNullException node is null. | Edit this page View Source Clear() Removes all nodes from this queue. Declaration public void Clear() | Edit this page View Source Contains(PriorityQueueNode<TPriority, TData>) Determines whether the given node is contained within this queue. Declaration public bool Contains(PriorityQueueNode<TPriority, TData> node) Parameters Type Name Description PriorityQueueNode<TPriority, TData> node The node to locate in the queue. Returns Type Description bool true if node is found in the queue, otherwise false. | Edit this page View Source Dequeue() Removes and returns the head of the queue. Declaration public PriorityQueueNode<TPriority, TData> Dequeue() Returns Type Description PriorityQueueNode<TPriority, TData> The removed element. | Edit this page View Source Enqueue(PriorityQueueNode<TPriority, TData>, TPriority) Adds a given node to the queue with the given priority. Declaration public void Enqueue(PriorityQueueNode<TPriority, TData> node, TPriority priority) Parameters Type Name Description PriorityQueueNode<TPriority, TData> node The node to add to the queue. TPriority priority The priority for the node. Exceptions Type Condition ArgumentNullException node is null. | Edit this page View Source GetEnumerator() Declaration public IEnumerator<PriorityQueueNode<TPriority, TData>> GetEnumerator() Returns Type Description IEnumerator<PriorityQueueNode<TPriority, TData>> | Edit this page View Source Remove(PriorityQueueNode<TPriority, TData>) Removes the given node from this queue if it is present. Declaration public bool Remove(PriorityQueueNode<TPriority, TData> node) Parameters Type Name Description PriorityQueueNode<TPriority, TData> node The node to remove if present. Returns Type Description bool A value indicating whether the node was removed. Implements IEnumerable<T> IEnumerable"
  },
  "api/NetTopologySuite.Utilities.Assert.html": {
    "href": "api/NetTopologySuite.Utilities.Assert.html",
    "title": "Class Assert | NetTopologySuite",
    "summary": "Class Assert A utility for making programming assertions. Inheritance object Assert Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Utilities Assembly: NetTopologySuite.dll Syntax public static class Assert Methods | Edit this page View Source IsEquals(object, object) Tests if two values are equal. If the test fails, AssertionFailedException with no specific message is thrown. Declaration public static void IsEquals(object expectedValue, object actualValue) Parameters Type Name Description object expectedValue The expected value object actualValue The actual value | Edit this page View Source IsEquals(object, object, string) Tests if two values are equal. If the test fails, AssertionFailedException with message is thrown. Declaration public static void IsEquals(object expectedValue, object actualValue, string message) Parameters Type Name Description object expectedValue The expected value object actualValue The actual value string message A message describing the failure condition. | Edit this page View Source IsTrue(bool) Tests if assertion is true If the test fails, AssertionFailedException with no message is thrown. Declaration public static void IsTrue(bool assertion) Parameters Type Name Description bool assertion The assertion value | Edit this page View Source IsTrue(bool, string) Tests if assertion is true If the test fails, AssertionFailedException with message is thrown. Declaration public static void IsTrue(bool assertion, string message) Parameters Type Name Description bool assertion The assertion value string message A message describing the failure condition. | Edit this page View Source ShouldNeverReachHere() Throws an AssertionFailedException with no specific message text. Declaration public static void ShouldNeverReachHere() | Edit this page View Source ShouldNeverReachHere(string) Throws an AssertionFailedException with message as specific message text. Declaration public static void ShouldNeverReachHere(string message) Parameters Type Name Description string message A text describing the failure condition"
  },
  "api/NetTopologySuite.Utilities.AssertionFailedException.html": {
    "href": "api/NetTopologySuite.Utilities.AssertionFailedException.html",
    "title": "Class AssertionFailedException | NetTopologySuite",
    "summary": "Class AssertionFailedException Inheritance object Exception ApplicationException AssertionFailedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetTopologySuite.Utilities Assembly: NetTopologySuite.dll Syntax public class AssertionFailedException : ApplicationException, ISerializable Constructors | Edit this page View Source AssertionFailedException() Declaration public AssertionFailedException() | Edit this page View Source AssertionFailedException(string) Declaration public AssertionFailedException(string message) Parameters Type Name Description string message Implements ISerializable"
  },
  "api/NetTopologySuite.Utilities.CoordinateArrayFilter.html": {
    "href": "api/NetTopologySuite.Utilities.CoordinateArrayFilter.html",
    "title": "Class CoordinateArrayFilter | NetTopologySuite",
    "summary": "Class CoordinateArrayFilter A CoordinateFilter that creates an array containing every coordinate in a Geometry. Inheritance object CoordinateArrayFilter Implements ICoordinateFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Utilities Assembly: NetTopologySuite.dll Syntax public class CoordinateArrayFilter : ICoordinateFilter Constructors | Edit this page View Source CoordinateArrayFilter(int) Constructs a CoordinateArrayFilter. Declaration public CoordinateArrayFilter(int size) Parameters Type Name Description int size The number of points that the CoordinateArrayFilter will collect. Properties | Edit this page View Source Coordinates Returns the Coordinates collected by this CoordinateArrayFilter. Declaration public Coordinate[] Coordinates { get; } Property Value Type Description Coordinate[] Methods | Edit this page View Source Filter(Coordinate) Declaration public void Filter(Coordinate coord) Parameters Type Name Description Coordinate coord Implements ICoordinateFilter"
  },
  "api/NetTopologySuite.Utilities.CoordinateCompare.html": {
    "href": "api/NetTopologySuite.Utilities.CoordinateCompare.html",
    "title": "Class CoordinateCompare | NetTopologySuite",
    "summary": "Class CoordinateCompare CoordinateCompare is used in the sorting of arrays of Coordinate objects. Implements a lexicographic comparison. Inheritance object CoordinateCompare Implements IComparer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Utilities Assembly: NetTopologySuite.dll Syntax public class CoordinateCompare : IComparer Methods | Edit this page View Source Compare(object, object) Compares two object and returns a value indicating whether one is less than, equal to or greater than the other. Declaration public int Compare(object x, object y) Parameters Type Name Description object x First Coordinate object to compare. object y Second Coordinate object to compare. Returns Type Description int <table cellspacing=\"0\" class=\"dtTABLE\"> <TR VALIGN=\"top\"> <TH width=50%>Value</TH> <TH width=50%>Condition</TH> </TR> <TR VALIGN=\"top\"> <TD width=50%>Less than zero</TD> <TD width=50%><I>a</I> is less than <I>b</I>.</TD> </TR> <TR VALIGN=\"top\"> <TD width=50%>Zero</TD> <TD width=50%><I>a</I> equals <I>b</I>.</TD> </TR> <TR VALIGN=\"top\"> <TD width=50%>Greater than zero</TD> <TD width=50%><I>a</I> is greater than <I>b</I>.</TD> </TR> </table> Remarks If a implements IComparable, then a. CompareTo (b) is returned; otherwise, if b implements IComparable, then b. CompareTo (a) is returned. Comparing a null reference (Nothing in Visual Basic) with any type is allowed and does not generate an exception when using IComparable. When sorting, a null reference (Nothing) is considered to be less than any other object. Implements IComparer"
  },
  "api/NetTopologySuite.Utilities.CoordinateCountFilter.html": {
    "href": "api/NetTopologySuite.Utilities.CoordinateCountFilter.html",
    "title": "Class CoordinateCountFilter | NetTopologySuite",
    "summary": "Class CoordinateCountFilter A CoordinateFilter that counts the total number of coordinates in a Geometry. Inheritance object CoordinateCountFilter Implements ICoordinateFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Utilities Assembly: NetTopologySuite.dll Syntax public class CoordinateCountFilter : ICoordinateFilter Properties | Edit this page View Source Count Returns the result of the filtering. Declaration public int Count { get; } Property Value Type Description int Methods | Edit this page View Source Filter(Coordinate) Declaration public void Filter(Coordinate coord) Parameters Type Name Description Coordinate coord Implements ICoordinateFilter"
  },
  "api/NetTopologySuite.Utilities.Degrees.html": {
    "href": "api/NetTopologySuite.Utilities.Degrees.html",
    "title": "Class Degrees | NetTopologySuite",
    "summary": "Class Degrees Converts degrees to radians. Inheritance object Degrees Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Utilities Assembly: NetTopologySuite.dll Syntax public class Degrees Methods | Edit this page View Source ToRadians(double) Converts degrees to radians. Declaration public static double ToRadians(double degrees) Parameters Type Name Description double degrees The angle in degrees. Returns Type Description double The angle in radians."
  },
  "api/NetTopologySuite.Utilities.EnumUtility.html": {
    "href": "api/NetTopologySuite.Utilities.EnumUtility.html",
    "title": "Class EnumUtility | NetTopologySuite",
    "summary": "Class EnumUtility Inheritance object EnumUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Utilities Assembly: NetTopologySuite.dll Syntax [Obsolete] public static class EnumUtility Methods | Edit this page View Source Format(Type, object, string) Declaration public static string Format(Type type, object value, string formatString) Parameters Type Name Description Type type object value string formatString Returns Type Description string | Edit this page View Source Parse(Type, string) Declaration public static object Parse(Type type, string value) Parameters Type Name Description Type type string value Returns Type Description object"
  },
  "api/NetTopologySuite.Utilities.FunctionsUtil.html": {
    "href": "api/NetTopologySuite.Utilities.FunctionsUtil.html",
    "title": "Class FunctionsUtil | NetTopologySuite",
    "summary": "Class FunctionsUtil A utility class to get GeometryFactorys, Envelopes off of Geometrys or to build aggregate geometries. Inheritance object FunctionsUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Utilities Assembly: NetTopologySuite.dll Syntax public class FunctionsUtil Fields | Edit this page View Source DefaultEnvelope Gets a default envelope Declaration public static readonly Envelope DefaultEnvelope Field Value Type Description Envelope Methods | Edit this page View Source BuildGeometry(Geometry, Geometry) Method to build a geometry. Declaration public static Geometry BuildGeometry(Geometry a, Geometry b) Parameters Type Name Description Geometry a A geometry Geometry b A geometry Returns Type Description Geometry A GEOMETRYCOLLECTION containing a and b. | Edit this page View Source BuildGeometry(params Geometry[]) Method to build a geometry. Declaration public static Geometry BuildGeometry(params Geometry[] geoms) Parameters Type Name Description Geometry[] geoms An array of geometries Returns Type Description Geometry A GEOMETRYCOLLECTION containing geoms. | Edit this page View Source BuildGeometry(IList<Geometry>, Geometry) Builds a geometry from a list of geometries. The function returns nullif the list is null or empty geoms[0]if the list contains one single item. a GeometryCollection a Multi -geometry Declaration public static Geometry BuildGeometry(IList<Geometry> geoms, Geometry parentGeom) Parameters Type Name Description IList<Geometry> geoms A list of geometries. Geometry parentGeom A parent geometry Returns Type Description Geometry A geometry. | Edit this page View Source BuildGeometry(List<Geometry>, Geometry) Builds a geometry from a list of geometries. The function returns nullif the list is null or empty geoms[0]if the list contains one single item. a GeometryCollection a Multi -geometry Declaration [Obsolete] public static Geometry BuildGeometry(List<Geometry> geoms, Geometry parentGeom) Parameters Type Name Description List<Geometry> geoms A list of geometries. Geometry parentGeom A parent geometry Returns Type Description Geometry A geometry. | Edit this page View Source GetEnvelopeOrDefault(Geometry) Gets the envelope of a geometry. Declaration public static Envelope GetEnvelopeOrDefault(Geometry g) Parameters Type Name Description Geometry g A geometry Returns Type Description Envelope The envelope of g or DefaultEnvelope if g == null. | Edit this page View Source GetFactoryOrDefault(Geometry) Function to get the geometry factory of a geometry. If g is null, a default geometry factory is returned. Declaration public static GeometryFactory GetFactoryOrDefault(Geometry g) Parameters Type Name Description Geometry g A geometry Returns Type Description GeometryFactory A geometry factory | Edit this page View Source GetFactoryOrDefault(IEnumerable<Geometry>) Function to get the geometry factory of the first geometry in a series of geometries. If no geometry is provided in gs, a default geometry factory is returned. Declaration public static GeometryFactory GetFactoryOrDefault(IEnumerable<Geometry> gs) Parameters Type Name Description IEnumerable<Geometry> gs An enumeration of geometries Returns Type Description GeometryFactory A geometry factory"
  },
  "api/NetTopologySuite.Utilities.GeometricShapeFactory.Dimensions.html": {
    "href": "api/NetTopologySuite.Utilities.GeometricShapeFactory.Dimensions.html",
    "title": "Class GeometricShapeFactory.Dimensions | NetTopologySuite",
    "summary": "Class GeometricShapeFactory.Dimensions A dimension class for GeometricShapeFactorys Inheritance object GeometricShapeFactory.Dimensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Utilities Assembly: NetTopologySuite.dll Syntax protected class GeometricShapeFactory.Dimensions Properties | Edit this page View Source Base Gets or sets a value indicating the base of the shapes to be created Declaration public Coordinate Base { get; set; } Property Value Type Description Coordinate | Edit this page View Source Centre Gets or sets a value indicating the centre of the shapes to be created Declaration public Coordinate Centre { get; set; } Property Value Type Description Coordinate | Edit this page View Source Envelope Gets or sets a value indicating the bounds of the shape to be created Declaration public Envelope Envelope { get; set; } Property Value Type Description Envelope | Edit this page View Source Height Gets or sets a value indicating the height of the Envelope. Declaration public double Height { get; set; } Property Value Type Description double | Edit this page View Source MinSize Gets a value indicating the minimum size of the shape's Envelope Declaration public double MinSize { get; } Property Value Type Description double | Edit this page View Source Size Sets Width and Height to the same value Declaration public double Size { set; } Property Value Type Description double | Edit this page View Source Width Gets or sets a value indicating the width of the Envelope. Declaration public double Width { get; set; } Property Value Type Description double"
  },
  "api/NetTopologySuite.Utilities.GeometricShapeFactory.html": {
    "href": "api/NetTopologySuite.Utilities.GeometricShapeFactory.html",
    "title": "Class GeometricShapeFactory | NetTopologySuite",
    "summary": "Class GeometricShapeFactory Computes various kinds of common geometric shapes. Allows various ways of specifying the location and extent of the shapes, as well as number of line segments used to form them. Inheritance object GeometricShapeFactory SineStarFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Utilities Assembly: NetTopologySuite.dll Syntax public class GeometricShapeFactory Constructors | Edit this page View Source GeometricShapeFactory() Create a shape factory which will create shapes using the default GeometryFactory. Declaration public GeometricShapeFactory() | Edit this page View Source GeometricShapeFactory(GeometryFactory) Create a shape factory which will create shapes using the given GeometryFactory. Declaration public GeometricShapeFactory(GeometryFactory geomFact) Parameters Type Name Description GeometryFactory geomFact The factory to use. Fields | Edit this page View Source GeomFact A geometry factory Declaration protected GeometryFactory GeomFact Field Value Type Description GeometryFactory | Edit this page View Source PrecModel A precision model Declaration protected PrecisionModel PrecModel Field Value Type Description PrecisionModel Properties | Edit this page View Source Base Gets/Sets the location of the shape by specifying the base coordinate (which in most cases is the lower left point of the envelope containing the shape). Declaration public Coordinate Base { set; } Property Value Type Description Coordinate | Edit this page View Source Centre Gets/Sets the location of the shape by specifying the centre of the shape's bounding box. Declaration public Coordinate Centre { set; } Property Value Type Description Coordinate | Edit this page View Source Envelope Gets or sets the envelope of the shape Declaration public Envelope Envelope { get; set; } Property Value Type Description Envelope | Edit this page View Source Height Gets/Sets the height of the shape. Declaration public double Height { get; set; } Property Value Type Description double | Edit this page View Source NumPoints Gets/Sets the total number of points in the created Geometry. Declaration public int NumPoints { get; set; } Property Value Type Description int | Edit this page View Source Rotation Gets/Sets the rotation angle, in radians, to use for the shape. The rotation is applied relative to the centre of the shape. Declaration public double Rotation { get; set; } Property Value Type Description double | Edit this page View Source Size Gets/Sets the size of the extent of the shape in both x and y directions. Declaration public double Size { set; } Property Value Type Description double | Edit this page View Source Width Gets/Sets the width of the shape. Declaration public double Width { get; set; } Property Value Type Description double Methods | Edit this page View Source CreateArc(double, double) Creates a elliptical arc, as a LineString. Declaration public LineString CreateArc(double startAng, double angExtent) Parameters Type Name Description double startAng Start angle in radians double angExtent Size of angle in radians Returns Type Description LineString Remarks The arc is always created in a counter-clockwise direction. | Edit this page View Source CreateArcPolygon(double, double) Creates an elliptical arc polygon. Declaration public Polygon CreateArcPolygon(double startAng, double angExtent) Parameters Type Name Description double startAng Start angle in radians double angExtent Size of angle in radians Returns Type Description Polygon An elliptical arc polygon Remarks The polygon is formed from the specified arc of an ellipse and the two radii connecting the endpoints to the centre of the ellipse. | Edit this page View Source CreateCircle() Creates a circular Polygon. Declaration public Polygon CreateCircle() Returns Type Description Polygon A circular polygon. | Edit this page View Source CreateCoord(double, double) Creates a coordinate at (x, y) Declaration protected Coordinate CreateCoord(double x, double y) Parameters Type Name Description double x The x-ordinate value double y The y-ordinate value Returns Type Description Coordinate A coordinate | Edit this page View Source CreateCoordTrans(double, double, Coordinate) Creates a translated coordinate at (x + trans.X.X, y + trans.Y.Y) Declaration protected Coordinate CreateCoordTrans(double x, double y, Coordinate trans) Parameters Type Name Description double x The x-ordinate value double y The y-ordinate value Coordinate trans A translation vector (coordinate) Returns Type Description Coordinate A coordinate | Edit this page View Source CreateEllipse() Creates an elliptical Polygon. If the supplied envelope is square the result will be a circle. Declaration public Polygon CreateEllipse() Returns Type Description Polygon An an ellipse or circle. | Edit this page View Source CreateRectangle() Creates a rectangular Polygon. Declaration public Polygon CreateRectangle() Returns Type Description Polygon A rectangular polygon. | Edit this page View Source CreateSquircle() Creates a squircular Polygon. Declaration public Polygon CreateSquircle() Returns Type Description Polygon a squircle | Edit this page View Source CreateSupercircle(double) Creates a supercircular Polygon of a given positive power. Declaration public Polygon CreateSupercircle(double power) Parameters Type Name Description double power Returns Type Description Polygon a supercircle | Edit this page View Source Rotate(Geometry) Rotates a geometry by Rotation angle Declaration protected Geometry Rotate(Geometry geom) Parameters Type Name Description Geometry geom The geometry to rotate Returns Type Description Geometry A rotated geometry"
  },
  "api/NetTopologySuite.Utilities.Global.html": {
    "href": "api/NetTopologySuite.Utilities.Global.html",
    "title": "Class Global | NetTopologySuite",
    "summary": "Class Global Inheritance object Global Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Utilities Assembly: NetTopologySuite.dll Syntax public sealed class Global Methods | Edit this page View Source GetNfi() Declaration public static NumberFormatInfo GetNfi() Returns Type Description NumberFormatInfo"
  },
  "api/NetTopologySuite.Utilities.Guard.html": {
    "href": "api/NetTopologySuite.Utilities.Guard.html",
    "title": "Class Guard | NetTopologySuite",
    "summary": "Class Guard A guard class Inheritance object Guard Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Utilities Assembly: NetTopologySuite.dll Syntax [Obsolete] public static class Guard Methods | Edit this page View Source IsNotNull(object, string) Checks if a value is not null. Declaration public static void IsNotNull(object candidate, string propertyName) Parameters Type Name Description object candidate The value to check for null string propertyName The name of the property that candidate belongs to."
  },
  "api/NetTopologySuite.Utilities.HexConverter.html": {
    "href": "api/NetTopologySuite.Utilities.HexConverter.html",
    "title": "Class HexConverter | NetTopologySuite",
    "summary": "Class HexConverter Inheritance object HexConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Utilities Assembly: NetTopologySuite.dll Syntax public class HexConverter Methods | Edit this page View Source ConvertAny2Any(string, int, int) Convert the given numeric value (passed as string) of the base specified by baseIn to the value specified by baseOut. Declaration public static string ConvertAny2Any(string valueIn, int baseIn, int baseOut) Parameters Type Name Description string valueIn Numeric value to be converted, as string. int baseIn Base of input value. int baseOut Base to use for conversion. Returns Type Description string Converted value, as string."
  },
  "api/NetTopologySuite.Utilities.Memory.html": {
    "href": "api/NetTopologySuite.Utilities.Memory.html",
    "title": "Class Memory | NetTopologySuite",
    "summary": "Class Memory Utility functions to report memory usage. Inheritance object Memory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Utilities Assembly: NetTopologySuite.dll Syntax public class Memory Fields | Edit this page View Source GB Number of bytes in a giga-byte Declaration public const double GB = 1073741824 Field Value Type Description double | Edit this page View Source KB Number of bytes in a kilo-byte Declaration public const double KB = 1024 Field Value Type Description double | Edit this page View Source MB Number of bytes in mega-byte Declaration public const double MB = 1048576 Field Value Type Description double Properties | Edit this page View Source Total Gets a value indicating the total memory used. Declaration public static long Total { get; } Property Value Type Description long | Edit this page View Source TotalString Gets a string describing the total memory used Declaration public static string TotalString { get; } Property Value Type Description string Methods | Edit this page View Source Format(long) Formats a number of bytes Declaration public static string Format(long mem) Parameters Type Name Description long mem The number of bytes Returns Type Description string A string describing a number of bytes | Edit this page View Source Round(double) Rounds a double to 2 decimal places Declaration public static double Round(double d) Parameters Type Name Description double d The number to round Returns Type Description double The rounded number"
  },
  "api/NetTopologySuite.Utilities.PriorityQueue-1.html": {
    "href": "api/NetTopologySuite.Utilities.PriorityQueue-1.html",
    "title": "Class PriorityQueue<T> | NetTopologySuite",
    "summary": "Class PriorityQueue<T> A priority queue over a set of IComparable<T> objects. Inheritance object PriorityQueue<T> Implements IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Utilities Assembly: NetTopologySuite.dll Syntax public class PriorityQueue<T> : IEnumerable<T>, IEnumerable where T : IComparable<T> Type Parameters Name Description T Objects to add Constructors | Edit this page View Source PriorityQueue() Creates an instance of this class Declaration public PriorityQueue() | Edit this page View Source PriorityQueue(int, IComparer<T>) Creates an instance of this class Declaration public PriorityQueue(int capacity, IComparer<T> comparer) Parameters Type Name Description int capacity The capacity of the queue IComparer<T> comparer The comparer to use for computing priority values Properties | Edit this page View Source Size Returns size. Declaration public int Size { get; } Property Value Type Description int Methods | Edit this page View Source Add(T) Insert into the priority queue. Duplicates are allowed. Declaration public void Add(T x) Parameters Type Name Description T x The item to insert. | Edit this page View Source Clear() Make the priority queue logically empty. Declaration public void Clear() | Edit this page View Source GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator<T> | Edit this page View Source IsEmpty() Test if the priority queue is logically empty. Declaration public bool IsEmpty() Returns Type Description bool true if empty, false otherwise. | Edit this page View Source Peek() Gets the smallest item without removing it from the queue Declaration public T Peek() Returns Type Description T | Edit this page View Source Poll() Remove the smallest item from the priority queue. Declaration public T Poll() Returns Type Description T Remarks The smallest item, or default(T) if empty. Implements IEnumerable<T> IEnumerable"
  },
  "api/NetTopologySuite.Utilities.PriorityQueueNode-2.html": {
    "href": "api/NetTopologySuite.Utilities.PriorityQueueNode-2.html",
    "title": "Class PriorityQueueNode<TPriority, TData> | NetTopologySuite",
    "summary": "Class PriorityQueueNode<TPriority, TData> A container for a prioritized node that sites in an AlternativePriorityQueue<TPriority, TData>. Inheritance object PriorityQueueNode<TPriority, TData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Utilities Assembly: NetTopologySuite.dll Syntax public sealed class PriorityQueueNode<TPriority, TData> Type Parameters Name Description TPriority The type to use for the priority of the node in the queue. TData The type to use for the data stored by the node in the queue. Constructors | Edit this page View Source PriorityQueueNode(TData) Initializes a new instance of the PriorityQueueNode<TPriority, TData> class. Declaration public PriorityQueueNode(TData data) Parameters Type Name Description TData data The TData to store in this node. Properties | Edit this page View Source Data Gets the TData that is stored in this node. Declaration public TData Data { get; } Property Value Type Description TData | Edit this page View Source Priority Gets the TPriority of this node in the queue. Declaration public TPriority Priority { get; } Property Value Type Description TPriority Remarks The queue may update this priority while the node is still in the queue."
  },
  "api/NetTopologySuite.Utilities.Radians.html": {
    "href": "api/NetTopologySuite.Utilities.Radians.html",
    "title": "Class Radians | NetTopologySuite",
    "summary": "Class Radians Converts radians to degress. Inheritance object Radians Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Utilities Assembly: NetTopologySuite.dll Syntax public class Radians Methods | Edit this page View Source ToDegrees(double) Converts radians to degress. Declaration public static double ToDegrees(double radians) Parameters Type Name Description double radians Angle in radians. Returns Type Description double The angle in degrees."
  },
  "api/NetTopologySuite.Utilities.UniqueCoordinateArrayFilter.html": {
    "href": "api/NetTopologySuite.Utilities.UniqueCoordinateArrayFilter.html",
    "title": "Class UniqueCoordinateArrayFilter | NetTopologySuite",
    "summary": "Class UniqueCoordinateArrayFilter A ICoordinateFilter that extracts a unique array ofCoordinate s. The array of coordinates contains no duplicate points. It preserves the order of the input points. Inheritance object UniqueCoordinateArrayFilter Implements ICoordinateFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetTopologySuite.Utilities Assembly: NetTopologySuite.dll Syntax public class UniqueCoordinateArrayFilter : ICoordinateFilter Properties | Edit this page View Source Coordinates Returns the gathered Coordinates. Declaration public Coordinate[] Coordinates { get; } Property Value Type Description Coordinate[] The Coordinates collected by this ICoordinateArrayFilter Methods | Edit this page View Source Filter(Coordinate) Performs an operation with the provided coord. Note that there is no guarantee that the input coordinate is the actual object stored in the source geometry, so changes to the coordinate object may not be persistent. Declaration public void Filter(Coordinate coord) Parameters Type Name Description Coordinate coord A Coordinate to which the filter is applied. | Edit this page View Source FilterCoordinates(Coordinate[]) Convenience method which allows running the filter over an array of Coordinates. Declaration public static Coordinate[] FilterCoordinates(Coordinate[] coords) Parameters Type Name Description Coordinate[] coords an array of coordinates Returns Type Description Coordinate[] an array of the unique coordinates Implements ICoordinateFilter"
  },
  "api/NetTopologySuite.Utilities.html": {
    "href": "api/NetTopologySuite.Utilities.html",
    "title": "Namespace NetTopologySuite.Utilities | NetTopologySuite",
    "summary": "Namespace NetTopologySuite.Utilities Contains support classes for the Net Topology Suite. Classes AlternativePriorityQueue<TPriority, TData> An alternative implementation of the priority queue abstract data type. This allows us to do more than PriorityQueue<T>, which we got from JTS. Ultimately, this queue enables scenarios that have more favorable execution speed characteristics at the cost of less favorable memory and usability characteristics. Assert A utility for making programming assertions. AssertionFailedException CoordinateArrayFilter A CoordinateFilter that creates an array containing every coordinate in a Geometry. CoordinateCompare CoordinateCompare is used in the sorting of arrays of Coordinate objects. Implements a lexicographic comparison. CoordinateCountFilter A CoordinateFilter that counts the total number of coordinates in a Geometry. Degrees Converts degrees to radians. EnumUtility FunctionsUtil A utility class to get GeometryFactorys, Envelopes off of Geometrys or to build aggregate geometries. GeometricShapeFactory Computes various kinds of common geometric shapes. Allows various ways of specifying the location and extent of the shapes, as well as number of line segments used to form them. GeometricShapeFactory.Dimensions A dimension class for GeometricShapeFactorys Global Guard A guard class HexConverter Memory Utility functions to report memory usage. PriorityQueueNode<TPriority, TData> A container for a prioritized node that sites in an AlternativePriorityQueue<TPriority, TData>. PriorityQueue<T> A priority queue over a set of IComparable<T> objects. Radians Converts radians to degress. UniqueCoordinateArrayFilter A ICoordinateFilter that extracts a unique array ofCoordinate s. The array of coordinates contains no duplicate points. It preserves the order of the input points."
  },
  "api/NetTopologySuite.html": {
    "href": "api/NetTopologySuite.html",
    "title": "Namespace NetTopologySuite | NetTopologySuite",
    "summary": "Namespace NetTopologySuite Classes NtsGeometryServices A geometry service provider class"
  },
  "api/RTools_NTS.Util.CharBuffer.html": {
    "href": "api/RTools_NTS.Util.CharBuffer.html",
    "title": "Class CharBuffer | NetTopologySuite",
    "summary": "Class CharBuffer Buffer for characters. This approximates StringBuilder but is designed to be faster for specific operations. This is about 30% faster for the operations I'm interested in (Append, Clear, Length, ToString). This trades off memory for speed. Inheritance object CharBuffer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: RTools_NTS.Util Assembly: NetTopologySuite.dll Syntax public class CharBuffer Remarks To make Remove from the head fast, this is implemented as a ring buffer. This uses head and tail indices into a fixed-size array. This will grow the array as necessary. Constructors | Edit this page View Source CharBuffer() Default constructor. Declaration public CharBuffer() | Edit this page View Source CharBuffer(int) Construct with a specific capacity. Declaration public CharBuffer(int capacity) Parameters Type Name Description int capacity Properties | Edit this page View Source Capacity Returns the capacity of this character buffer. Declaration public int Capacity { get; } Property Value Type Description int | Edit this page View Source this[int] Indexer. Declaration public char this[int index] { get; set; } Parameters Type Name Description int index Property Value Type Description char | Edit this page View Source Length Gets/Sets the number of characters in the character buffer. Increasing the length this way provides indeterminate results. Declaration public int Length { get; set; } Property Value Type Description int Methods | Edit this page View Source Append(CharBuffer) Append a string to this buffer. Declaration public void Append(CharBuffer s) Parameters Type Name Description CharBuffer s The string to append. | Edit this page View Source Append(char) Append a character to this buffer. Declaration public void Append(char c) Parameters Type Name Description char c | Edit this page View Source Append(string) Append a string to this buffer. Declaration public void Append(string s) Parameters Type Name Description string s The string to append. | Edit this page View Source CheckCapacity(int) Ensure that we're set for the requested length by potentially growing or shifting contents. Declaration protected void CheckCapacity(int requestedLength) Parameters Type Name Description int requestedLength | Edit this page View Source Clear() Empty the buffer. Declaration public void Clear() | Edit this page View Source Grow(int) Reallocate the buffer to be larger. For the new size, this uses the max of the requested length and double the current capacity. This does not shift, meaning it does not change the head or tail indices. Declaration protected void Grow(int requestedLen) Parameters Type Name Description int requestedLen The new requested length. | Edit this page View Source IndexOf(char) Find the first instance of a character in the buffer, and return its index. This returns -1 if the character is not found. Declaration public int IndexOf(char c) Parameters Type Name Description char c The character to find. Returns Type Description int The index of the specified character, or -1 for not found. | Edit this page View Source Remove(int) Remove a character at the specified index. Declaration public void Remove(int i) Parameters Type Name Description int i The index of the character to remove. | Edit this page View Source Remove(int, int) Remove a specified number of characters at the specified index. Declaration public void Remove(int i, int n) Parameters Type Name Description int i The index of the characters to remove. int n The number of characters to remove. | Edit this page View Source SetBuffer(char[], int) Overwrite this object's underlying buffer with the specified buffer. Declaration public void SetBuffer(char[] b, int len) Parameters Type Name Description char[] b The character array. int len The number of characters to consider filled in the input buffer. | Edit this page View Source ShiftToZero() Move the buffer contents such that headIndex becomes 0. Declaration protected void ShiftToZero() | Edit this page View Source ToString() Return the current contents as a string. Declaration public override string ToString() Returns Type Description string The new string. Overrides object.ToString()"
  },
  "api/RTools_NTS.Util.CharToken.html": {
    "href": "api/RTools_NTS.Util.CharToken.html",
    "title": "Class CharToken | NetTopologySuite",
    "summary": "Class CharToken Token type for characters, meaning non-word characters. Inheritance object Token CharToken Inherited Members Token.LineNumber Token.obj Token.Object Token.UntermError Token.UntermErrorMsg Token.Equals(string) Token.Equals(char) Token.ToLineString() Token.ConvertToType(Type) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: RTools_NTS.Util Assembly: NetTopologySuite.dll Syntax public class CharToken : Token Constructors | Edit this page View Source CharToken(char) Constructor with the specified value. Declaration public CharToken(char c) Parameters Type Name Description char c | Edit this page View Source CharToken(char, int) Constructor with the specified value. Declaration public CharToken(char c, int line) Parameters Type Name Description char c int line | Edit this page View Source CharToken(string, int) Constructor with the specified value and line number. Declaration public CharToken(string s, int line) Parameters Type Name Description string s int line Properties | Edit this page View Source StringValue Override, see base Token Declaration public override string StringValue { get; } Property Value Type Description string Overrides Token.StringValue Methods | Edit this page View Source Equals(object) Override, see base Token Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides Token.Equals(object) | Edit this page View Source GetHashCode() Override, see base Token Declaration public override int GetHashCode() Returns Type Description int Overrides Token.GetHashCode() | Edit this page View Source ToDebugString() Override, see base Token Declaration public override string ToDebugString() Returns Type Description string Overrides Token.ToDebugString() | Edit this page View Source ToString() Override, see base Token Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/RTools_NTS.Util.CharTypeBits.html": {
    "href": "api/RTools_NTS.Util.CharTypeBits.html",
    "title": "Enum CharTypeBits | NetTopologySuite",
    "summary": "Enum CharTypeBits Bitwise enumeration for character types. Namespace: RTools_NTS.Util Assembly: NetTopologySuite.dll Syntax [Flags] public enum CharTypeBits : byte Fields Name Description Comment or something for line comments Digit usually 0 to 9 Eof eof char HexDigit usually 0 to 9, a-f and A-F Quote ' or \" type Whitespace whitespace Word word characters (usually alpha, digits, and domain specific)"
  },
  "api/RTools_NTS.Util.CommentToken.html": {
    "href": "api/RTools_NTS.Util.CommentToken.html",
    "title": "Class CommentToken | NetTopologySuite",
    "summary": "Class CommentToken Token type for comments, including line and block comments. Inheritance object Token StringToken CommentToken Inherited Members StringToken.ToDebugString() StringToken.ToString() StringToken.StringValue StringToken.GetHashCode() Token.LineNumber Token.obj Token.Object Token.UntermError Token.UntermErrorMsg Token.Equals(object) Token.Equals(string) Token.Equals(char) Token.ToLineString() Token.ConvertToType(Type) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: RTools_NTS.Util Assembly: NetTopologySuite.dll Syntax public class CommentToken : StringToken Constructors | Edit this page View Source CommentToken(string) Constructor with the specified value. Declaration public CommentToken(string s) Parameters Type Name Description string s | Edit this page View Source CommentToken(string, int) Constructor with the specified value and line number. Declaration public CommentToken(string s, int line) Parameters Type Name Description string s int line"
  },
  "api/RTools_NTS.Util.EofToken.html": {
    "href": "api/RTools_NTS.Util.EofToken.html",
    "title": "Class EofToken | NetTopologySuite",
    "summary": "Class EofToken Represents end of file/stream. Inheritance object Token EofToken Inherited Members Token.LineNumber Token.obj Token.Object Token.UntermError Token.UntermErrorMsg Token.Equals(string) Token.Equals(char) Token.ToLineString() Token.ConvertToType(Type) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: RTools_NTS.Util Assembly: NetTopologySuite.dll Syntax public class EofToken : Token Constructors | Edit this page View Source EofToken() Default constructor. Declaration public EofToken() | Edit this page View Source EofToken(int) Constructor that takes line number. Declaration public EofToken(int line) Parameters Type Name Description int line Properties | Edit this page View Source StringValue Override, see base Token Declaration public override string StringValue { get; } Property Value Type Description string Overrides Token.StringValue Methods | Edit this page View Source Equals(object) Override, see base Token Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides Token.Equals(object) | Edit this page View Source GetHashCode() Override, see base Token Declaration public override int GetHashCode() Returns Type Description int Overrides Token.GetHashCode() | Edit this page View Source ToDebugString() Override, see base Token Declaration public override string ToDebugString() Returns Type Description string Overrides Token.ToDebugString() | Edit this page View Source ToString() Override, see base Token Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/RTools_NTS.Util.EolToken.html": {
    "href": "api/RTools_NTS.Util.EolToken.html",
    "title": "Class EolToken | NetTopologySuite",
    "summary": "Class EolToken Represents end-of-lines (line separator characters). Inheritance object Token EolToken Inherited Members Token.LineNumber Token.obj Token.Object Token.UntermError Token.UntermErrorMsg Token.Equals(string) Token.Equals(char) Token.ToLineString() Token.ConvertToType(Type) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: RTools_NTS.Util Assembly: NetTopologySuite.dll Syntax public class EolToken : Token Constructors | Edit this page View Source EolToken() Default constructor. Declaration public EolToken() | Edit this page View Source EolToken(int) Constructor that takes line number. Declaration public EolToken(int line) Parameters Type Name Description int line Properties | Edit this page View Source StringValue Override, see base Token Declaration public override string StringValue { get; } Property Value Type Description string Overrides Token.StringValue Methods | Edit this page View Source Equals(object) Override, see base Token Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides Token.Equals(object) | Edit this page View Source GetHashCode() Override, see base Token Declaration public override int GetHashCode() Returns Type Description int Overrides Token.GetHashCode() | Edit this page View Source ToDebugString() Override, see base Token Declaration public override string ToDebugString() Returns Type Description string Overrides Token.ToDebugString() | Edit this page View Source ToString() Override, see base Token Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/RTools_NTS.Util.FloatToken.html": {
    "href": "api/RTools_NTS.Util.FloatToken.html",
    "title": "Class FloatToken | NetTopologySuite",
    "summary": "Class FloatToken Token type for floating point numbers, stored internally as a Double. Inheritance object Token FloatToken Inherited Members Token.LineNumber Token.obj Token.Object Token.UntermError Token.UntermErrorMsg Token.Equals(string) Token.Equals(char) Token.ToLineString() Token.ConvertToType(Type) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: RTools_NTS.Util Assembly: NetTopologySuite.dll Syntax public class FloatToken : Token Constructors | Edit this page View Source FloatToken(double) Constructor with the specified value. Declaration public FloatToken(double d) Parameters Type Name Description double d | Edit this page View Source FloatToken(double, int) Constructor with the specified value and line number. Declaration public FloatToken(double f, int line) Parameters Type Name Description double f int line | Edit this page View Source FloatToken(float) Constructor with the specified value. Declaration public FloatToken(float f) Parameters Type Name Description float f | Edit this page View Source FloatToken(string) Constructor with the specified value. Declaration public FloatToken(string s) Parameters Type Name Description string s | Edit this page View Source FloatToken(string, int) Constructor with the specified value and line number. Declaration public FloatToken(string s, int line) Parameters Type Name Description string s int line Properties | Edit this page View Source StringValue Override, see base Token Declaration public override string StringValue { get; } Property Value Type Description string Overrides Token.StringValue Methods | Edit this page View Source Equals(object) Override, see base Token Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides Token.Equals(object) | Edit this page View Source GetHashCode() Override, see base Token Declaration public override int GetHashCode() Returns Type Description int Overrides Token.GetHashCode() | Edit this page View Source ToDebugString() Override, see base Token Declaration public override string ToDebugString() Returns Type Description string Overrides Token.ToDebugString() | Edit this page View Source ToString() Override, see base Token Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/RTools_NTS.Util.IntToken.html": {
    "href": "api/RTools_NTS.Util.IntToken.html",
    "title": "Class IntToken | NetTopologySuite",
    "summary": "Class IntToken Token type for integer tokens. This handles both Int32 and Int64. Inheritance object Token IntToken Inherited Members Token.LineNumber Token.obj Token.Object Token.UntermError Token.UntermErrorMsg Token.Equals(string) Token.Equals(char) Token.ToLineString() Token.ConvertToType(Type) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: RTools_NTS.Util Assembly: NetTopologySuite.dll Syntax public class IntToken : Token Constructors | Edit this page View Source IntToken(int) Constructor with the specified value. Declaration public IntToken(int i) Parameters Type Name Description int i | Edit this page View Source IntToken(int, int) Constructor with the specified value and line number. Declaration public IntToken(int i, int line) Parameters Type Name Description int i int line | Edit this page View Source IntToken(long) Constructor with the specified value. Declaration public IntToken(long i) Parameters Type Name Description long i | Edit this page View Source IntToken(long, int) Constructor for a 64 bit int Declaration public IntToken(long l, int line) Parameters Type Name Description long l int line | Edit this page View Source IntToken(string) Constructor with the specified value. Declaration public IntToken(string s) Parameters Type Name Description string s | Edit this page View Source IntToken(string, int) Constructor with the specified value and line number. Declaration public IntToken(string s, int line) Parameters Type Name Description string s int line Properties | Edit this page View Source StringValue Override, see base Token Declaration public override string StringValue { get; } Property Value Type Description string Overrides Token.StringValue Methods | Edit this page View Source Equals(object) Override, see base Token Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides Token.Equals(object) | Edit this page View Source GetHashCode() Override, see base Token Declaration public override int GetHashCode() Returns Type Description int Overrides Token.GetHashCode() | Edit this page View Source ParseHex(string, int) Parse a string known to be a hex string. This is faster than Parse which doesn't assume the number is Hex. This will throw an exception if the input number isn't hex. Declaration public static IntToken ParseHex(string s, int lineNumber) Parameters Type Name Description string s The hex number as a string. int lineNumber The line where this token was found. Returns Type Description IntToken A new IntToken set to the value in the input string. | Edit this page View Source ToDebugString() Override, see base Token Declaration public override string ToDebugString() Returns Type Description string Overrides Token.ToDebugString() | Edit this page View Source ToString() Override, see base Token Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/RTools_NTS.Util.QuoteToken.html": {
    "href": "api/RTools_NTS.Util.QuoteToken.html",
    "title": "Class QuoteToken | NetTopologySuite",
    "summary": "Class QuoteToken Token type for Quotes such as \"this is a quote\". Inheritance object Token StringToken QuoteToken Inherited Members StringToken.ToDebugString() StringToken.ToString() StringToken.StringValue StringToken.GetHashCode() Token.LineNumber Token.obj Token.Object Token.UntermError Token.UntermErrorMsg Token.Equals(object) Token.Equals(string) Token.Equals(char) Token.ToLineString() Token.ConvertToType(Type) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: RTools_NTS.Util Assembly: NetTopologySuite.dll Syntax public class QuoteToken : StringToken Constructors | Edit this page View Source QuoteToken(string) Constructor with the specified value. Declaration public QuoteToken(string s) Parameters Type Name Description string s | Edit this page View Source QuoteToken(string, int) Constructor with the specified value and line number. Declaration public QuoteToken(string s, int line) Parameters Type Name Description string s int line"
  },
  "api/RTools_NTS.Util.StreamTokenizer.html": {
    "href": "api/RTools_NTS.Util.StreamTokenizer.html",
    "title": "Class StreamTokenizer | NetTopologySuite",
    "summary": "Class StreamTokenizer A StreamTokenizer similar to Java's. This breaks an input stream (coming from a TextReader) into Tokens based on various settings. The settings are stored in the TokenizerSettings property, which is a StreamTokenizerSettings instance. Inheritance object StreamTokenizer Implements IEnumerable<Token> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: RTools_NTS.Util Assembly: NetTopologySuite.dll Syntax public class StreamTokenizer : IEnumerable<Token>, IEnumerable Remarks This is configurable in that you can modify TokenizerSettings.CharTypes[] array to specify which characters are which type, along with other settings such as whether to look for comments or not. WARNING: This is not internationalized. This treats all characters beyond the 7-bit ASCII range (decimal 127) as Word characters. There are two main ways to use this: 1) Parse the entire stream at once and get an ArrayList of Tokens (see the Tokenize* methods), and 2) call NextToken() successively. This reads from a TextReader, which you can set directly, and this also provides some convenient methods to parse files and strings. This returns an Eof token if the end of the input is reached. Here's an example of the NextToken() endCapStyle of use: StreamTokenizer tokenizer = new StreamTokenizer(); tokenizer.GrabWhitespace = true; tokenizer.Verbosity = VerbosityLevel.Debug; // just for debugging tokenizer.TextReader = File.OpenText(fileName); Token token; while (tokenizer.NextToken(out token)) log.Info(\"Token = '{0}'\", token); Here's an example of the Tokenize... endCapStyle of use: StreamTokenizer tokenizer = new StreamTokenizer(\"some string\"); ArrayList tokens = new ArrayList(); if (!tokenizer.Tokenize(tokens)) { // error handling } foreach (Token t in tokens) Console.WriteLine(\"t = {0}\", t); Comment delimiters are hardcoded (// and /*), not affected by char type table. This sets line numbers in the tokens it produces. These numbers are normally the line on which the token starts. There is one known caveat, and that is that when GrabWhitespace setting is true, and a whitespace token contains a newline, that token's line number will be set to the following line rather than the line on which the token started. Constructors | Edit this page View Source StreamTokenizer() Default constructor. Declaration public StreamTokenizer() | Edit this page View Source StreamTokenizer(TextReader) Construct and set this object's TextReader to the one specified. Declaration public StreamTokenizer(TextReader sr) Parameters Type Name Description TextReader sr The TextReader to read from. | Edit this page View Source StreamTokenizer(TextReader, StreamTokenizerSettings) Construct and set this object's TextReader to the one specified. Declaration public StreamTokenizer(TextReader sr, StreamTokenizerSettings tokenizerSettings) Parameters Type Name Description TextReader sr The TextReader to read from. StreamTokenizerSettings tokenizerSettings Tokenizer settings. | Edit this page View Source StreamTokenizer(string) Construct and set a string to tokenize. Declaration public StreamTokenizer(string str) Parameters Type Name Description string str The string to tokenize. Fields | Edit this page View Source NChars This is the number of characters in the character table. Declaration public static readonly int NChars Field Value Type Description int Properties | Edit this page View Source Settings The settings which govern the behavior of the tokenization. Declaration public StreamTokenizerSettings Settings { get; } Property Value Type Description StreamTokenizerSettings | Edit this page View Source TextReader This is the TextReader that this object will read from. Set this to set the input reader for the parse. Declaration public TextReader TextReader { get; set; } Property Value Type Description TextReader Methods | Edit this page View Source Display() Display the state of this object. Declaration public void Display() | Edit this page View Source Display(string) Display the state of this object, with a per-line prefix. Declaration public void Display(string prefix) Parameters Type Name Description string prefix The pre-line prefix. | Edit this page View Source GetEnumerator() Gibt einen Enumerator zurück, der die Auflistung durchläuft. Declaration public IEnumerator<Token> GetEnumerator() Returns Type Description IEnumerator<Token> Ein IEnumerator<T>, der zum Durchlaufen der Auflistung verwendet werden kann. | Edit this page View Source NextToken(out Token) Get the next token. The last token will be an EofToken unless there's an unterminated quote or unterminated block comment and Settings.DoUntermCheck is true, in which case this throws an exception of type StreamTokenizerUntermException or sub-class. Declaration public bool NextToken(out Token token) Parameters Type Name Description Token token The output token. Returns Type Description bool bool - true for success, false for failure. | Edit this page View Source Tokenize(IList<Token>) Parse the rest of the stream and put all the tokens in the input ArrayList. This resets the line number to 1. Declaration public bool Tokenize(IList<Token> tokens) Parameters Type Name Description IList<Token> tokens The ArrayList to append to. Returns Type Description bool bool - true for success | Edit this page View Source TokenizeFile(string) Tokenize a file completely and return the tokens in a Token[]. Declaration public Token[] TokenizeFile(string fileName) Parameters Type Name Description string fileName The file to tokenize. Returns Type Description Token[] A Token[] with all tokens. | Edit this page View Source TokenizeFile(string, IList<Token>) Parse all tokens from the specified file, put them into the input ArrayList. Declaration public bool TokenizeFile(string fileName, IList<Token> tokens) Parameters Type Name Description string fileName The file to read. IList<Token> tokens The ArrayList to put tokens in. Returns Type Description bool bool - true for success, false for failure. | Edit this page View Source TokenizeReader(TextReader, IList<Token>) Parse all tokens from the specified TextReader, put them into the input ArrayList. Declaration public bool TokenizeReader(TextReader tr, IList<Token> tokens) Parameters Type Name Description TextReader tr The TextReader to read from. IList<Token> tokens The ArrayList to append to. Returns Type Description bool bool - true for success, false for failure. | Edit this page View Source TokenizeStream(Stream, IList<Token>) Parse all tokens from the specified Stream, put them into the input ArrayList. Declaration public bool TokenizeStream(Stream s, IList<Token> tokens) Parameters Type Name Description Stream s IList<Token> tokens The ArrayList to put tokens in. Returns Type Description bool bool - true for success, false for failure. | Edit this page View Source TokenizeString(string, IList<Token>) Parse all tokens from the specified string, put them into the input ArrayList. Declaration public bool TokenizeString(string str, IList<Token> tokens) Parameters Type Name Description string str IList<Token> tokens The ArrayList to put tokens in. Returns Type Description bool bool - true for success, false for failure. Implements IEnumerable<T> IEnumerable"
  },
  "api/RTools_NTS.Util.StreamTokenizerSettings.html": {
    "href": "api/RTools_NTS.Util.StreamTokenizerSettings.html",
    "title": "Class StreamTokenizerSettings | NetTopologySuite",
    "summary": "Class StreamTokenizerSettings This contains the settings that control the behavior of the tokenizer. This is separated from the StreamTokenizer so that common settings are easy to package and keep together. Inheritance object StreamTokenizerSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: RTools_NTS.Util Assembly: NetTopologySuite.dll Syntax public class StreamTokenizerSettings Constructors | Edit this page View Source StreamTokenizerSettings() Default constructor. Declaration public StreamTokenizerSettings() | Edit this page View Source StreamTokenizerSettings(StreamTokenizerSettings) Copy constructor. Declaration public StreamTokenizerSettings(StreamTokenizerSettings other) Parameters Type Name Description StreamTokenizerSettings other Properties | Edit this page View Source CharTypes This is the character type table. Each byte is bitwise encoded with the character attributes, such as whether that character is word or whitespace. Declaration public byte[] CharTypes { get; } Property Value Type Description byte[] | Edit this page View Source DoUntermCheck Whether or not to check for unterminated quotes and block comments. If true, and one is encoutered, an exception is thrown of the appropriate type. Declaration public bool DoUntermCheck { get; set; } Property Value Type Description bool | Edit this page View Source GrabComments Whether or not to return comments. Declaration public bool GrabComments { get; set; } Property Value Type Description bool | Edit this page View Source GrabEol Whether or not to return EolTokens on end of line. Eol tokens will not break up other tokens which can be multi-line. For example block comments and quotes will not be broken by Eol tokens. Therefore the number of Eol tokens does not give you the line count of a stream. Declaration public bool GrabEol { get; set; } Property Value Type Description bool | Edit this page View Source GrabWhitespace Whether or not to return whitespace tokens. If not, they're ignored. Declaration public bool GrabWhitespace { get; set; } Property Value Type Description bool | Edit this page View Source ParseHexNumbers Whether or not to parse Hex (0xABCD...) numbers. This setting is based on the character types table, so this setting interacts with character type table manipulation. Declaration public bool ParseHexNumbers { get; set; } Property Value Type Description bool | Edit this page View Source ParseNumbers Whether or not digits are specified as Digit type in the character table. This setting is based on the character types table, so this setting interacts with character type table manipulation. This setting may become incorrect if you modify the character types table directly. Declaration public bool ParseNumbers { get; set; } Property Value Type Description bool | Edit this page View Source SlashSlashComments Whether or not to look for // comments Declaration public bool SlashSlashComments { get; set; } Property Value Type Description bool | Edit this page View Source SlashStarComments Whether or not to look for /* */ block comments. Declaration public bool SlashStarComments { get; set; } Property Value Type Description bool Methods | Edit this page View Source CharTypeToString(byte) Return a string representation of a character type setting. Since the type setting is bitwise encoded, a character can have more than one type. Declaration public string CharTypeToString(byte ctype) Parameters Type Name Description byte ctype The character type byte. Returns Type Description string The string representation of the type flags. | Edit this page View Source CommentChar(int) Specify that a particular character is a comment-starting character. Character table type manipulation method. Declaration public void CommentChar(int c) Parameters Type Name Description int c | Edit this page View Source Copy(StreamTokenizerSettings) Sets this object to be the same as the specified object. Note that some settings which are entirely embodied by the character type table. Declaration public void Copy(StreamTokenizerSettings other) Parameters Type Name Description StreamTokenizerSettings other | Edit this page View Source Display() Display the state of this object. Declaration public void Display() | Edit this page View Source Display(string) Display the state of this object, with a per-line prefix. Declaration public void Display(string prefix) Parameters Type Name Description string prefix The pre-line prefix. | Edit this page View Source IsCharType(byte, CharTypeBits) Check whether the specified char type byte has a particular type flag set. Declaration public bool IsCharType(byte ctype, CharTypeBits type) Parameters Type Name Description byte ctype The char type byte. CharTypeBits type The CharTypeBits entry to compare to. Returns Type Description bool bool - true or false | Edit this page View Source IsCharType(char, CharTypeBits) Check whether the specified char has a particular type flag set. Declaration public bool IsCharType(char c, CharTypeBits type) Parameters Type Name Description char c The character. CharTypeBits type The CharTypeBits entry to compare to. Returns Type Description bool bool - true or false | Edit this page View Source IsCharType(int, CharTypeBits) Check whether the specified char has a particular type flag set. Declaration public bool IsCharType(int c, CharTypeBits type) Parameters Type Name Description int c The character. CharTypeBits type The CharTypeBits entry to compare to. Returns Type Description bool bool - true or false | Edit this page View Source OrdinaryChar(int) Remove other type settings from a character. Character table type manipulation method. Declaration public void OrdinaryChar(int c) Parameters Type Name Description int c | Edit this page View Source OrdinaryChars(int, int) Remove other type settings from a range of characters. Character table type manipulation method. Declaration public void OrdinaryChars(int startChar, int endChar) Parameters Type Name Description int startChar int endChar | Edit this page View Source QuoteChar(int) Specify that a particular character is a quote character. Character table type manipulation method. Declaration public void QuoteChar(int c) Parameters Type Name Description int c | Edit this page View Source ResetCharTypeTable() Clear the character type settings. This leaves them unset, as opposed to the default. Use SetDefaults() for default settings. Declaration public void ResetCharTypeTable() | Edit this page View Source SetDefaults() Setup default parse behavior. This resets to same behavior as on construction. Declaration public bool SetDefaults() Returns Type Description bool bool - true for success. | Edit this page View Source SetupForCodeParse() Apply settings which are commonly used for code parsing C-endCapStyle code, including C++, C#, and Java. Declaration public bool SetupForCodeParse() Returns Type Description bool | Edit this page View Source WhitespaceChar(int) Specify that a character is a whitespace character. Character table type manipulation method. This type is exclusive with other types. Declaration public void WhitespaceChar(int c) Parameters Type Name Description int c The character. | Edit this page View Source WhitespaceChars(int, int) Specify that a range of characters are whitespace characters. Character table type manipulation method. This adds the characteristic to the char(s), rather than overwriting other characteristics. Declaration public void WhitespaceChars(int startChar, int endChar) Parameters Type Name Description int startChar First character. int endChar Last character. | Edit this page View Source WordChar(int) Specify that a particular character is a word character. Character table type manipulation method. This adds the type to the char(s), rather than overwriting other types. Declaration public void WordChar(int c) Parameters Type Name Description int c The character. | Edit this page View Source WordChars(int, int) Specify that a range of characters are word characters. Character table type manipulation method. This adds the type to the char(s), rather than overwriting other types. Declaration public void WordChars(int startChar, int endChar) Parameters Type Name Description int startChar First character. int endChar Last character. | Edit this page View Source WordChars(string) Specify that a string of characters are word characters. Character table type manipulation method. This adds the type to the char(s), rather than overwriting other types. Declaration public void WordChars(string s) Parameters Type Name Description string s"
  },
  "api/RTools_NTS.Util.StreamTokenizerUntermCommentException.html": {
    "href": "api/RTools_NTS.Util.StreamTokenizerUntermCommentException.html",
    "title": "Class StreamTokenizerUntermCommentException | NetTopologySuite",
    "summary": "Class StreamTokenizerUntermCommentException Exception class for unterminated block comments. Inheritance object Exception StreamTokenizerUntermException StreamTokenizerUntermCommentException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: RTools_NTS.Util Assembly: NetTopologySuite.dll Syntax public class StreamTokenizerUntermCommentException : StreamTokenizerUntermException, ISerializable Constructors | Edit this page View Source StreamTokenizerUntermCommentException(string) Construct with a particular message. Declaration public StreamTokenizerUntermCommentException(string msg) Parameters Type Name Description string msg The message to store in this object. Implements ISerializable"
  },
  "api/RTools_NTS.Util.StreamTokenizerUntermException.html": {
    "href": "api/RTools_NTS.Util.StreamTokenizerUntermException.html",
    "title": "Class StreamTokenizerUntermException | NetTopologySuite",
    "summary": "Class StreamTokenizerUntermException Exception class for unterminated tokens. Inheritance object Exception StreamTokenizerUntermException StreamTokenizerUntermCommentException StreamTokenizerUntermQuoteException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: RTools_NTS.Util Assembly: NetTopologySuite.dll Syntax public class StreamTokenizerUntermException : Exception, ISerializable Constructors | Edit this page View Source StreamTokenizerUntermException(string) Construct with a particular message. Declaration public StreamTokenizerUntermException(string msg) Parameters Type Name Description string msg The message to store in this object. Implements ISerializable"
  },
  "api/RTools_NTS.Util.StreamTokenizerUntermQuoteException.html": {
    "href": "api/RTools_NTS.Util.StreamTokenizerUntermQuoteException.html",
    "title": "Class StreamTokenizerUntermQuoteException | NetTopologySuite",
    "summary": "Class StreamTokenizerUntermQuoteException Exception class for unterminated quotes. Inheritance object Exception StreamTokenizerUntermException StreamTokenizerUntermQuoteException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: RTools_NTS.Util Assembly: NetTopologySuite.dll Syntax public class StreamTokenizerUntermQuoteException : StreamTokenizerUntermException, ISerializable Constructors | Edit this page View Source StreamTokenizerUntermQuoteException(string) Construct with a particular message. Declaration public StreamTokenizerUntermQuoteException(string msg) Parameters Type Name Description string msg The message to store in this object. Implements ISerializable"
  },
  "api/RTools_NTS.Util.StringToken.html": {
    "href": "api/RTools_NTS.Util.StringToken.html",
    "title": "Class StringToken | NetTopologySuite",
    "summary": "Class StringToken Abstract base class for string tokens. Inheritance object Token StringToken CommentToken QuoteToken WhitespaceToken WordToken Inherited Members Token.LineNumber Token.obj Token.Object Token.UntermError Token.UntermErrorMsg Token.Equals(object) Token.Equals(string) Token.Equals(char) Token.ToLineString() Token.ConvertToType(Type) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: RTools_NTS.Util Assembly: NetTopologySuite.dll Syntax public abstract class StringToken : Token Constructors | Edit this page View Source StringToken(string) Default constructor. Declaration public StringToken(string s) Parameters Type Name Description string s | Edit this page View Source StringToken(string, int) Constructor with the specified value and line number. Declaration public StringToken(string s, int line) Parameters Type Name Description string s int line Properties | Edit this page View Source StringValue Override, see base Token Declaration public override string StringValue { get; } Property Value Type Description string Overrides Token.StringValue Methods | Edit this page View Source GetHashCode() Override, see base Token Declaration public override int GetHashCode() Returns Type Description int Overrides Token.GetHashCode() | Edit this page View Source ToDebugString() Override, see base Token Declaration public override string ToDebugString() Returns Type Description string Overrides Token.ToDebugString() | Edit this page View Source ToString() Override, see base Token Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/RTools_NTS.Util.Token.html": {
    "href": "api/RTools_NTS.Util.Token.html",
    "title": "Class Token | NetTopologySuite",
    "summary": "Class Token Token class used by StreamTokenizer. This represents a single token in the input stream. This is subclassed to provide specific token types, such as CharToken, FloatToken, etc. Inheritance object Token CharToken EofToken EolToken FloatToken IntToken StringToken Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: RTools_NTS.Util Assembly: NetTopologySuite.dll Syntax public abstract class Token Constructors | Edit this page View Source Token(int) Construct a Token with the specified line number. Declaration public Token(int line) Parameters Type Name Description int line The line number where this token comes from. Fields | Edit this page View Source obj A storage object for the data of this token. Declaration protected object obj Field Value Type Description object Properties | Edit this page View Source LineNumber The line number where this token was found. This is base-1. Declaration public int LineNumber { get; } Property Value Type Description int | Edit this page View Source Object The Object stored by this token. This will be a primitive C# type. Declaration public object Object { get; } Property Value Type Description object | Edit this page View Source StringValue Return this token's value as a string. Declaration public virtual string StringValue { get; } Property Value Type Description string This token's value as a string. | Edit this page View Source UntermError Whether or not there was an unterminated token problem when creating this token. See UntermErrorMessage for a message associated with the problem. Declaration public bool UntermError { get; set; } Property Value Type Description bool | Edit this page View Source UntermErrorMsg The error message if there was an unterminated token error creating this token. Declaration public string UntermErrorMsg { get; set; } Property Value Type Description string Methods | Edit this page View Source ConvertToType(Type) Create an object of the specified type corresponding to this token. Declaration public object ConvertToType(Type t) Parameters Type Name Description Type t The type of object to create. Returns Type Description object The new object, or null for error. | Edit this page View Source Equals(char) Equals overload. Declaration public bool Equals(char c) Parameters Type Name Description char c The char to compare to. Returns Type Description bool bool | Edit this page View Source Equals(object) Equals override. Declaration public override bool Equals(object other) Parameters Type Name Description object other The object to compare to. Returns Type Description bool bool - true for equals, false otherwise. Overrides object.Equals(object) | Edit this page View Source Equals(string) Equals overload. Declaration public bool Equals(string s) Parameters Type Name Description string s The string to compare to. Returns Type Description bool bool | Edit this page View Source GetHashCode() Override. Returns the ToString().GetHashCode(). Declaration public override int GetHashCode() Returns Type Description int The hash code. Overrides object.GetHashCode() | Edit this page View Source ToDebugString() Produce a string which includes the token type. Declaration public virtual string ToDebugString() Returns Type Description string | Edit this page View Source ToLineString() Produce a string which includes the line number. Declaration public string ToLineString() Returns Type Description string Operators | Edit this page View Source operator ==(Token, char) Operator== overload. Compare a token and a char. Declaration public static bool operator ==(Token t, char c) Parameters Type Name Description Token t The token to compare. char c The char. Returns Type Description bool bool | Edit this page View Source operator ==(Token, object) Operator== overload. Compare a token and an object. Declaration public static bool operator ==(Token t, object o) Parameters Type Name Description Token t The token to compare. object o The other object. Returns Type Description bool bool | Edit this page View Source operator ==(Token, string) Operator== overload. Compare a token and a string. Declaration public static bool operator ==(Token t, string s) Parameters Type Name Description Token t The token to compare. string s The string. Returns Type Description bool bool | Edit this page View Source operator !=(Token, char) Operator!= overload. Compare a token and a char. Declaration public static bool operator !=(Token t, char c) Parameters Type Name Description Token t The token to compare. char c The char. Returns Type Description bool bool | Edit this page View Source operator !=(Token, object) Operator!= overload. Compare a token and an object. Declaration public static bool operator !=(Token t, object o) Parameters Type Name Description Token t The token to compare. object o The other object. Returns Type Description bool bool | Edit this page View Source operator !=(Token, string) Operator!= overload. Compare a token and a string. Declaration public static bool operator !=(Token t, string s) Parameters Type Name Description Token t The token to compare. string s The string. Returns Type Description bool bool"
  },
  "api/RTools_NTS.Util.VerbosityLevel.html": {
    "href": "api/RTools_NTS.Util.VerbosityLevel.html",
    "title": "Enum VerbosityLevel | NetTopologySuite",
    "summary": "Enum VerbosityLevel This enumerates verbosity levels. Namespace: RTools_NTS.Util Assembly: NetTopologySuite.dll Syntax public enum VerbosityLevel Fields Name Description Debug For debug messages. Error For error messages. Info For info messages. Warn For warn messages."
  },
  "api/RTools_NTS.Util.WhitespaceToken.html": {
    "href": "api/RTools_NTS.Util.WhitespaceToken.html",
    "title": "Class WhitespaceToken | NetTopologySuite",
    "summary": "Class WhitespaceToken Token type for whitespace such as spaces and tabs. Inheritance object Token StringToken WhitespaceToken Inherited Members StringToken.ToDebugString() StringToken.ToString() StringToken.StringValue StringToken.GetHashCode() Token.LineNumber Token.obj Token.Object Token.UntermError Token.UntermErrorMsg Token.Equals(object) Token.Equals(string) Token.Equals(char) Token.ToLineString() Token.ConvertToType(Type) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: RTools_NTS.Util Assembly: NetTopologySuite.dll Syntax public class WhitespaceToken : StringToken Constructors | Edit this page View Source WhitespaceToken(string) Constructor with the specified value. Declaration public WhitespaceToken(string s) Parameters Type Name Description string s | Edit this page View Source WhitespaceToken(string, int) Constructor with the specified value and line number. Declaration public WhitespaceToken(string s, int line) Parameters Type Name Description string s int line"
  },
  "api/RTools_NTS.Util.WordToken.html": {
    "href": "api/RTools_NTS.Util.WordToken.html",
    "title": "Class WordToken | NetTopologySuite",
    "summary": "Class WordToken Token type for words, meaning sequences of word characters. Inheritance object Token StringToken WordToken Inherited Members StringToken.ToDebugString() StringToken.ToString() StringToken.StringValue StringToken.GetHashCode() Token.LineNumber Token.obj Token.Object Token.UntermError Token.UntermErrorMsg Token.Equals(object) Token.Equals(string) Token.Equals(char) Token.ToLineString() Token.ConvertToType(Type) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: RTools_NTS.Util Assembly: NetTopologySuite.dll Syntax public class WordToken : StringToken Constructors | Edit this page View Source WordToken(string) Constructor with the specified value. Declaration public WordToken(string s) Parameters Type Name Description string s | Edit this page View Source WordToken(string, int) Constructor with the specified value and line number. Declaration public WordToken(string s, int line) Parameters Type Name Description string s int line"
  },
  "api/RTools_NTS.Util.html": {
    "href": "api/RTools_NTS.Util.html",
    "title": "Namespace RTools_NTS.Util | NetTopologySuite",
    "summary": "Namespace RTools_NTS.Util Classes CharBuffer Buffer for characters. This approximates StringBuilder but is designed to be faster for specific operations. This is about 30% faster for the operations I'm interested in (Append, Clear, Length, ToString). This trades off memory for speed. CharToken Token type for characters, meaning non-word characters. CommentToken Token type for comments, including line and block comments. EofToken Represents end of file/stream. EolToken Represents end-of-lines (line separator characters). FloatToken Token type for floating point numbers, stored internally as a Double. IntToken Token type for integer tokens. This handles both Int32 and Int64. QuoteToken Token type for Quotes such as \"this is a quote\". StreamTokenizer A StreamTokenizer similar to Java's. This breaks an input stream (coming from a TextReader) into Tokens based on various settings. The settings are stored in the TokenizerSettings property, which is a StreamTokenizerSettings instance. StreamTokenizerSettings This contains the settings that control the behavior of the tokenizer. This is separated from the StreamTokenizer so that common settings are easy to package and keep together. StreamTokenizerUntermCommentException Exception class for unterminated block comments. StreamTokenizerUntermException Exception class for unterminated tokens. StreamTokenizerUntermQuoteException Exception class for unterminated quotes. StringToken Abstract base class for string tokens. Token Token class used by StreamTokenizer. This represents a single token in the input stream. This is subclassed to provide specific token types, such as CharToken, FloatToken, etc. WhitespaceToken Token type for whitespace such as spaces and tabs. WordToken Token type for words, meaning sequences of word characters. Enums CharTypeBits Bitwise enumeration for character types. VerbosityLevel This enumerates verbosity levels."
  },
  "index.html": {
    "href": "index.html",
    "title": "NetTopologySuite | NetTopologySuite",
    "summary": "NetTopologySuite A .NET GIS solution that is fast and reliable for the .NET platform. NetTopologySuite is a direct-port of all the functionalities offered by JTS Topology Suite: NTS expose JTS in a '.NET way', as example using Properties, Indexers etc... An excerpt from JTS website explains the capabilities of NTS too: \"The JTS Topology Suite is an API for modelling and manipulating 2-dimensional linear geometry. It provides numerous geometric predicates and functions. JTS conforms to the Simple Features Specification for SQL published by the Open GIS Consortium.\""
  }
}