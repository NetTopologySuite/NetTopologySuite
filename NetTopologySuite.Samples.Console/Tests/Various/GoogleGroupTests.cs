using System;
using System.Collections.Generic;
using System.Data.SqlTypes;
using System.Diagnostics;
using GeoAPI.CoordinateSystems.Transformations;
using NetTopologySuite.Triangulate;
using NetTopologySuite.Triangulate.QuadEdge;
using NUnit.Framework;
using NetTopologySuite.Densify;
using NetTopologySuite.LinearReferencing;
using NetTopologySuite.Precision;

namespace NetTopologySuite.Tests.Various
{
    using Geometries;
    using Samples.SimpleTests;
    using NetTopologySuite.IO;
    using GeoAPI.Geometries;


    [TestFixture]
    public class GoogleGroupTests : BaseSamples
    {
        public GoogleGroupTests() : base(GeometryFactory.Fixed) { }

        /// <summary>
        /// http://groups.google.com/group/nettopologysuite/browse_thread/thread/d423b51267b7a9fb?hl=en
        /// </summary>
        [Test]
        public void DepthMismatchAndIndexOutOfRangeAtBuffer0()
        {
            const string text =
            @"GEOMETRYCOLLECTION(POLYGON((515947.25631471083
7171484.5030738059,515947.25631471066
7171484.5030738059,515947.30958362931
7171484.5257367212,515947.36621354509
7171484.5377466371,515947.42409582069
7171484.5386563586,515947.48107518692
7171484.5284320125,515947.53502999456
7171484.5074543059,515947.58395121509
7171484.4765043529,515947.62601724768
7171484.436734586,515947.65966174705
7171484.3896258492,515947.683631947
7171484.336932255,515947.69703530765
7171484.280615869,515947.6993727496
7171484.2227736535,515947.69055723737
7171484.1655593887,515947.67091701995
7171484.1111034676,515947.64118340856
7171484.06143358,515947.602463546 7171484.0183992023,515947.6024635458
7171484.0183992023,515930.73246370832
7171468.5683991965,515930.7324637085
7171468.5683991965,515930.68105448957
7171468.530531059,515930.62279574666
7171468.5044001872,515930.56032653846
7171468.49119028,515930.49647665321
7171468.4914997332,515930.43413842231
7171468.5053145289,515923.33413849055
7171470.8953145277,515923.28133748128
7171470.9189756932,515923.23406070529
7171470.9523329083,515923.1940667521
7171470.9941453589,515923.16284330672
7171471.0428577168,515923.14155181107
7171471.0966579914,515923.13098426076
7171471.1535449345,515923.13153374492
7171471.2114024786,515923.143179824 7171471.2680784538,515923.16548929
7171471.321464642,515923.19763228117
7171471.3695751959,515923.23841315042
7171471.4106205134,515923.28631494159
7171471.4430737989,515947.25631471083
7171484.5030738059)),POLYGON((515930.67750898772
7171468.5284942714,515930.67750898789
7171468.5284942714,515930.62430464325
7171468.5048963027,515930.56754495931
7171468.4920159038,515930.50936634938
7171468.4903378887,515930.4519586346
7171468.499925416,515930.39748261991
7171468.5204176148,515930.34798876219
7171468.5510431668,515930.30533999176
7171468.5906493375,515930.27114159235
7171468.6377453655,515930.24668077903
7171468.6905585742,515930.23287824768
7171468.7471010936,515930.23025352036
7171468.8052446852,515930.23890539084
7171468.8628008449,515930.258508206
7171468.9176031807,515930.28832412313
7171468.9675889537,515930.32723088242
7171469.010876717,515947.1972307199
7171484.4608767228,515947.19723071973
7171484.4608767228,515947.24561931624
7171484.496958348,515947.30025129457
7171484.5226232428,515947.35891506722
7171484.5368324546,515947.41923583351
7171484.5390107706,515947.47877171508
7171484.52907001,515947.53511260683 7171484.507412591,515947.585977742
7171484.4749152381,515947.6293080207
7171484.4328934951,515947.66334936587
7171484.3830484683,515950.12334934279
7171479.8630484659,515950.12334934284
7171479.8630484659,515950.14608284581
7171479.8094661487,515950.158041555
7171479.7525024218,515950.15877530782
7171479.6943015754,515950.14825648355
7171479.6370544685,515950.12688104308
7171479.5829160586,515950.09545362374
7171479.5339242816,515950.05515725032
7171479.4919233387,515950.00750880211
7171479.4584942749,515930.67750898772
7171468.5284942714)),POLYGON((515939.1569354072
7171453.1813345412,515939.15693540714
7171453.1813345412,515939.15930770477
7171453.1216542246,515939.14981016068
7171453.0626867367,515939.12881923292
7171453.0067693973,515939.0971669479
7171452.9561186247,515939.05610792048
7171452.9127420839,515939.00726962468
7171452.878359112,515938.95258788462
7171452.8543325588,515938.89423014346
7171452.8416147754,515938.83450955164
7171452.8407098632,515938.77579327946
7171452.8516536895,515938.72040868853
7171452.8740124693,515938.67055108119
7171452.9068999579,515938.62819668453
7171452.9490125813,515938.59502431774
7171452.9986811029,515930.26502439909
7171468.648681107,515930.26502439892
7171468.648681107,515930.24259987607
7171468.70309941,515930.23123186041
7171468.760848688,515930.2313579208
7171468.819706101,515930.24297320505
7171468.8774061529,515930.26563062659
7171468.9317279,515930.29845807329 7171468.98058043,515930.34019197628
7171469.0220833477,515930.38922594627
7171469.0546391569,515930.44367260527
7171469.0769947432,515930.50143623422
7171469.0882896129,515930.56029344
7171469.0880890116,515930.61797873606
7171469.0764006618,515937.02797867375
7171467.1064006621,515937.02797867381
7171467.1064006621,515937.08024938527
7171467.0847553564,515937.12752685562
7171467.0536814556,515937.16812971595
7171467.0142840669,515937.20061397221
7171466.967964313,515937.22382435924
7171466.9163695024,515937.23693542625
7171466.8613345455,515939.1569354072
7171453.1813345412)),POLYGON((515936.64275903988
7171466.7779413685,515936.64275903994
7171466.7779413685,515936.64037420205
7171466.8374116365,515936.64977662347
7171466.8961823331,515936.6705962249
7171466.9519402422,515936.70201354678
7171467.0024907328,515936.74279200315
7171467.0458441386,515936.79132655397
7171467.080294067,515936.8457068791
7171467.1044845711,515936.90379256883
7171467.1174635123,515936.96329737024
7171467.1187200379,515937.02187917416
7171467.1082046926,515937.07723220065
7171467.0863313591,515937.12717775448
7171467.0539609725,515937.16974997846
7171467.0123676322,515937.20327322971
7171466.9631884508,515937.20327322959
7171466.9631884508,515945.81327314617
7171451.1631884472,515945.81327314628
7171451.1631884472,515945.83636858669
7171451.1085506417,515945.84826202842
7171451.0504366569,515945.848488479
7171450.9911185494,515945.83703908487
7171450.9329154519,515945.81436147797
7171450.8781029042,515945.78134227433
7171450.8288238887,515945.73927241081
7171450.7870050445,515945.68979667372
7171450.754281343,515945.63484939357
7171450.7319321688,515945.57657881925
7171450.7208312973,515945.517263129
7171450.7214127341,515945.45922136132
7171450.7336537465,515938.7692214257
7171452.8536537457,515938.76922142575
7171452.8536537457,515938.71752445213
7171452.8755466212,515938.67081174027
7171452.9066881947,515938.63071920839
7171452.9459878635,515938.59865093039
7171452.99206932,515938.57572996413
7171453.0433187522,515938.56275902083
7171453.0979413642,515936.64275903988
7171466.7779413685)),POLYGON((515936.44746216031
7171445.9830631334,515936.39171511418
7171445.9610246262,515936.33269933035
7171445.95050958,515936.27277113119
7171445.9519378291,515936.21432326932
7171445.9652523464,515936.15968939179
7171445.9899215251,515936.1110508648
7171446.0249603987,515936.07034967822
7171446.06896997,515936.03921090788
7171446.1201930689,515936.01887783111
7171446.1765845129,515936.0101622864
7171446.2358927606,515936.01341225923
7171446.2957498124,515936.02849798783
7171446.3537657559,515938.5784979646
7171453.2437657584,515938.57849796471
7171453.2437657584,515938.60328883695
7171453.2951300722,515938.63735252729
7171453.3408744168,515938.679457868
7171453.3793454487,515938.728083041
7171453.4091527071,515938.78147058113
7171453.4292188622,515938.83769089676
7171453.4388186634,515938.89471201063
7171453.4376051417,515938.95047300233
7171453.42562216,515945.64047293796 7171451.30562216,515945.6404729379
7171451.30562216,515945.6945674374 7171451.28242311,515945.74309115321
7171451.2491085511,515945.78417624
7171451.2069608765,515945.81624119077
7171451.1576024955,515945.83805171488
7171451.1029333826,515945.84876824991
7171451.0450579422,515945.84797827946
7171450.9862039974,515945.8357122122
7171450.9286370417,515945.81244221143
7171450.8745730249,515945.77906401979
7171450.8260930581,515945.73686247919
7171450.7850633031,515945.6874620727
7171450.7530631367,515936.44746216031
7171445.9830631334)),POLYGON((515949.71218541742
7171479.9807816455,515949.71218541724
7171479.9807816455,515949.764571373
7171480.0041068234,515949.82043844188
7171480.0170382913,515949.877745395
7171480.01910357,515949.93439839408 7171480.0102272,515949.98832749442
7171479.9907334987,515950.03756227519
7171479.9613347119,515950.08030383306
7171479.9231049921,515950.11499050906
7171479.8774411473,515950.14035494759
7171479.8260116074,515950.15547040192
7171479.7706954684,515950.1597845949
7171479.7135138279,515950.15313989786
7171479.6565559469,515950.13577908964
7171479.6019029086,515950.1083364865
7171479.5515515851,515950.07181476551
7171479.5073416745,515937.15181488881
7171466.6073416714,515937.11026802537
7171466.5727437418,515937.06318597303
7171466.5461648228,515937.01209793513
7171466.5284681851,515936.95866322768
7171466.5202286076,515936.90461738536
7171466.5217137085,515936.85171579238
7171466.532875252,515930.44171585469
7171468.5028752517,515930.44171585463
7171468.5028752517,515930.38806781213
7171468.5252545644,515930.33974271663
7171468.5575598469,515930.29855487816
7171468.5985782342,515930.26605064649
7171468.6467697378,515930.24345035554
7171468.7003250634,515930.23160250706
7171468.75723354,515930.230951915
7171468.8153586015,515930.24152300489
7171468.8725180114,515930.2629188975
7171468.9265657859,515930.29433630867
7171468.9754727632,515930.334595708
7171469.0174027868,515930.38218560285
7171469.0507816421,515930.382185603
7171469.0507816421,515949.71218541742
7171479.9807816455)),POLYGON((515937.08338285086
7171466.5562038543,515937.0833828508
7171466.5562038543,515937.03093628137
7171466.5338009661,515936.97519782244
7171466.5217280108,515936.91818181996
7171466.5204212964,515936.86194878916
7171466.5299280463,515936.80853094929
7171466.5499046929,515936.75985878077
7171466.5796292964,515936.717691259
7171466.6180276321,515936.68355228635
7171466.6637120126,515936.65867561958
7171466.7150314385,515936.64396028261
7171466.7701312648,515936.63993807667
7171466.827020226,515936.64675436111
7171466.8836423978,515936.66416280065
7171466.9379514968,515936.69153426745
7171466.9879848342,515936.72787957732
7171467.0319342427,515949.647879454
7171479.9319342459,515949.69586931693
7171479.9708575523,515949.7508155746
7171479.9991234234,515949.81038725376
7171480.0155327432,515949.8720571578
7171480.0193893816,515949.93320907763
7171480.01052973,515949.99124877836
7171479.9893296389,515950.04371405422
7171479.9566884758,515950.0883791821
7171479.9139909688,515950.12334934284
7171479.8630484659,515950.12334934279
7171479.8630484659,515952.58334931784
7171475.3430484664,515952.58334931789
7171475.3430484664,515952.6062589
7171475.2889031395,515952.61816846911
7171475.2313294681,515952.61862062296
7171475.1725386446,515952.60759799596
7171475.1147886049,515952.58552392625
7171475.0602973131,515952.55324619677
7171475.0111575779,515952.51200447517
7171474.9692566739,515952.46338270261
7171474.9362038579,515937.08338285086
7171466.5562038543)),POLYGON((515936.60044480651
7171446.3241567584,515936.60044480645
7171446.3241567584,515936.60936612997
7171446.2666212628,515936.60700583045
7171446.2084460761,515936.59345281048
7171446.1518224152,515936.56921755557
7171446.0988830561,515936.53521290637
7171446.0516220033,515936.49271967571
7171446.0118193822,515936.44333840563
7171445.9809743911,515936.388929082
7171445.9602488317,515936.3315410763
7171445.95042335,515936.27333595447
7171445.9518680284,515936.21650605986
7171445.9645284545,515936.16319193668
7171445.9879277619,515936.11540170485
7171446.0211845962,515936.07493542245
7171446.0630463129,515936.04331728484
7171446.1119361548,515936.04331728473
7171446.1119361548,515923.16331741109
7171471.04193616,515923.16331741121
7171471.04193616,515923.14146267105
7171471.0969683174,515923.13084265508
7171471.15522107,515923.13187109178
7171471.2144250423,515923.14450791589
7171471.2722737994,515923.16826082935
7171471.326513703,515923.20220447978
7171471.375031705,515923.24501651019
7171471.4159376714,515923.29502907419
7171471.44763801,515923.35029381118
7171471.4688977562,515923.40865774947
7171471.4788886867,515923.46784718055
7171471.47722158,515923.52555623668
7171471.4639613833,515930.62555616844
7171469.0739613846,515930.67987846828
7171469.0494275773,515930.728278171
7171469.0146383736,515930.76884466066
7171468.9709671037,515930.79997654364
7171468.9201377239,515930.82044486463
7171468.8641567649,515936.60044480651
7171446.3241567584)),POLYGON((515930.23924972612
7171468.7151191486,515930.23924972618
7171468.7151191486,515930.2303423743
7171468.7724100072,515930.23262180877
7171468.8303443454,515930.24600289058
7171468.8867582632,515930.26998582395
7171468.939544647,515930.30367482413
7171468.9867318766,515930.34581157565
7171469.026557466,515930.39482223184
7171469.0575338919,515930.44887619931
7171469.0785041573,515930.50595451222
7171469.0886850012,515930.56392524275
7171469.0876961621,515930.62062313035
7171469.0755745722,515930.6739304564
7171469.0527729839,515930.72185614286
7171469.02014306,515930.76261012093
7171468.9789035562,515930.79467019183
7171468.9305948066,515930.79467019165
7171468.9305948066,515939.12467011029
7171453.2805948025,515939.12467011047
7171453.2805948025,515939.14831025776
7171453.22203378,515939.15916748613
7171453.1598214786,515939.15676066949
7171453.0967147658,515939.14119646343
7171453.035510147,515936.59119648667
7171446.1455101445,515936.59119648655
7171446.1455101445,515936.56567452877
7171446.0929459054,515936.53044713859
7171446.0463261614,515936.48685075296
7171446.0074195461,515936.43653930712
7171445.9777020765,515936.38142148854
7171445.9583011577,515936.32358832611
7171445.949952811,515936.26523386192
7171445.9529737514,515936.208571915
7171445.967249372,515936.15575209452
7171445.9922380922,515936.10877824918
7171446.0269919038,515936.06943244644
7171446.0701923361,515936.03920736536
7171446.1202004757,515936.019249668
7171446.175119142,515930.23924972612 7171468.7151191486)))";

            var coll = Reader.Read(text);
            Assert.IsNotNull(coll);

            var union = coll.Buffer(0.0);
            Assert.IsNotNull(union);
        }
        
        /// <summary>
        /// Asher 16-04-2012
        /// https://groups.google.com/forum/#!msg/nettopologysuite/6ymt34Ycfk8/dF5wTsEAsaIJ
        /// </summary>
        [Test]
        public void CanTransformPolygon()
        {
            ICoordinateTransformation transform = new ProjNet.CoordinateSystems.Transformations.CoordinateTransformationFactory()
                .CreateFromCoordinateSystems(
                    ProjNet.CoordinateSystems.GeographicCoordinateSystem.WGS84,
                    ProjNet.CoordinateSystems.GeographicCoordinateSystem.WGS84);

            IGeometry original = new Polygon(new LinearRing(new Coordinate[]{
                new Coordinate(-77.5, 38.5),new Coordinate(-77.1, 38.5),new Coordinate(-77.1, 38.1),new Coordinate(-77.5, 38.5)}));

            IGeometry transformed = NetTopologySuite.CoordinateSystems.Transformations.GeometryTransform.TransformGeometry(
                    GeometryFactory.Default, original, transform.MathTransform);

            Assert.NotNull(transformed);
            Assert.IsTrue(transformed.IsValid);
            Assert.AreEqual(original, transformed);
        }

        [Test]
        public void TestMultipolygonDifference()
        {
            var mp1 = Reader.Read(@"MULTIPOLYGON (((30 20, 10 40, 45 40, 30 20)),((15 5, 40 10, 10 20, 5 10, 15 5)))");
            var mp2 = Reader.Read(@"MULTIPOLYGON (((40 40, 20 45, 45 30, 40 40)),((20 35, 45 20, 30 5, 10 10, 10 30, 20 35),(30 20, 20 25, 20 15, 30 20)))");

            IGeometry diff = null;
            Assert.DoesNotThrow(() => diff = mp1.Difference(mp2));
            Assert.IsNotNull(diff);
            Console.WriteLine("1-2:\n{0}", diff.AsText());
            Assert.DoesNotThrow(() => diff = mp2.Difference(mp1));
            Assert.IsNotNull(diff);
            Console.WriteLine("2-1:\n{0}", diff.AsText());
        }

        // see: https://groups.google.com/forum/#!topic/nettopologysuite/VASC03TBrZU
        [Test(Description = "Buffer(0) doesn't fix geometry")]
        public void TestGoogleGroupPostBuffer0()
        {
            const string wkt = @"POLYGON((487143.12056915415 4419332.297027817,487148.4826128975 4419333.241,487151.35381619935 4419331.6704359865,487145.873 4419330.326,487143.12056915415 4419332.297027817),(487240.64452267956 4419362.611054949,487240.093271455 4419355.237630927,487240.47771515214 4419355.457643805,487241.94552018255 4419356.297652398,487242.63676261925 4419356.693242803,487240.64452267956 4419362.611054949),(487175.0756521084 4419364.959860701,487175.514 4419365.097,487175.8617072951 4419364.1606901605,487176.279 4419363.037,487177.09182983835 4419363.294358757,487180.268 4419364.3,487182.201 4419358.304,487189.416 4419355.979,487190.104 4419354.183,487192.074 4419354.709,487192.777 4419352.591,487194.799 4419353.305,487195.406 4419351.194,487199.626 4419352.569,487200.544 4419350.67,487204.165 4419351.89,487204.876 4419349.797,487206.885 4419350.371,487208.855 4419344.411,487211.013 4419345.043,487213.198 4419337.699,487213.36468920583 4419337.247749596,487205.238 4419334.864,487203.3936632555 4419335.653620839,487195.9874482669 4419338.824463534,487195.957 4419341.536221268,487195.4493840775 4419343.353497175,487195.085 4419344.658,487192.317 4419343.764,487188.25 4419343.986,487187.546558571 4419345.1252605785,487185.611 4419348.26,487183.293 4419350.626,487180.353 4419352.759,487177.159 4419353.95,487175.95143943216 4419354.21729031,487175.3101193474 4419354.359244798,487173.73 4419354.709,487170.15 4419354.429,487167.027 4419353.693,487163.84 4419352.327,487161.166 4419350.415,487159.5639734854 4419348.730000001,487158.405 4419347.511,487155.867 4419356.501,487159.799 4419357.949,487159.218 4419359.983,487163.269 4419361.291,487162.635 4419363.231,487172.594 4419366.279,487173.577 4419364.491,487174.69657750975 4419364.841265343,487175.0756521084 4419364.959860701),(487090.689 4419453.346,487093.221 4419453.426,487104.096 4419451.142,487112.485 4419449.120999999,487109.93799999997 4419444.844999999,487113.2089999999 4419441.893999999,487118.689 4419441.779999999,487120.1429999999 4419444.486,487118.547 4419447.416999999,487122.35 4419447.132999999,487124.3169999999 4419431.821999999,487128.289 4419429.159,487134.1209999999 4419430.511,487134.52799999993 4419425.936999999,487138.728 4419425.66,487146.397 4419420.229,487149.961 4419420.378999999,487149.13399999996 4419424.014999999,487155.29999999993 4419427.981999999,487154.191 4419433.241,487152.382 4419435.3719999995,487142.1109999999 4419434.286999999,487137.027 4419440.228,487135.032 4419440.968,487133.029 4419440.173,487129.60899999994 4419445.427999999,487139.251 4419443.576,487149.961 4419441.321,487159.627 4419439.173,487167.814 4419437.268,487176.754 4419435.019,487181.545 4419434.043,487192.034 4419432.048,487202.054 4419429.431,487216.038 4419426.432,487227.184 4419423.946999999,487225.20199999993 4419421.466,487229.51399999997 4419419.196,487231.294 4419423.124,487236.017 4419422.061,487242.17 4419420.477,487236.429 4419418.401999999,487235.667 4419414.301999999,487238.45199999993 4419411.365,487245.2459999999 4419411.522,487245.59699999995 4419408.173,487248.623 4419405.480999999,487253.58699999994 4419409.336999999,487254.05849364935 4419409.976328004,487253.41298833094 4419412.235596618,487249.98374132684 4419416.592757516,487248.2892898661 4419418.401999999,487242.17 4419420.477,487248.229 4419419.35,487251.042 4419418.623,487255.394 4419413.277,487258.946 4419409.267,487264.575 4419402.803,487269.266 4419397.003,487271.669 4419393.13,487272.67 4419388.676,487271.756 4419384.824,487268.282 4419381.132,487263.159 4419378.92,487255.442 4419378.024,487247.066 4419378.678,487241.9420360908 4419377.615097525,487238.478053108 4419373.445893751,487238.1110360908 4419369.630097525,487240.1595282578 4419364.013622161,487236.948 4419366.184999999,487231.929 4419363.116999999,487232.248 4419357.979,487240.0892311838 4419355.235318725,487238.544 4419354.351,487235.314 4419352.431,487232.129 4419350.271,487228.246 4419347.718,487224.804 4419345.386,487222.421 4419341.462,487221.58823457133 4419339.659909387,487219.7643316328 4419339.124915642,487219.348 4419341.637,487224.039 4419346.357999999,487222.927 4419354.040999999,487219.196 4419360.759,487213.583 4419363.649,487204.201 4419360.686999999,487195.419 4419369.007999999,487189.606 4419380.0879999995,487185.13399999996 4419393.3149999995,487176.20199999993 4419394.361,487167.46499999997 4419386.572999999,487157.89099999995 4419380.85,487156.2679999999 4419369.515999999,487151.571 4419365.407,487146.57499999995 4419367.395,487141.218 4419354.488,487146.4719860089 4419346.646,487142.19331776694 4419339.936531815,487140.37365706515 4419337.083084224,487139.4620796622 4419335.65362084,487139.30299999996 4419335.418,487138.777 4419331.527999999,487139.30469432415 4419331.6678643515,487139.30299999996 4419331.624955887,487140.7938153163 4419331.887409581,487140.652 4419331.837,487138.835 4419331.492,487135.447 4419330.403,487125.902 4419326.4,487124.249 4419323.995,487118.848 4419320.768,487110.985 4419316.503,487101.806 4419311.852,487095.617 4419310.26,487091.624 4419310.697,487083.801 4419314.506,487076.314 4419319.193,487072.487 4419323.131,487070.105 4419328.084,487068.908 4419334.019,487068.526 4419342.436,487068.956 4419348.73,487070.22 4419350.535,487080.047 4419357.288,487089.283 4419364.727,487095.165 4419370.622,487099.913 4419377.189,487103.385 4419383.969,487105.666 4419390.028,487106.822 4419395.725,487106.412 4419400.548,487104.009 4419406.577,487100.781 4419410.21,487094.047 4419412.879,487087.88357091264 4419413.864999999,487079.368 4419415.239,487067.54 4419417.309,487064.898 4419419.844,487064.626 4419423.569,487066.972 4419427.824,487072.199 4419433.709,487078.761 4419439.073,487086.99779043987 4419448.624936048,487090.472 4419445.771,487093.982 4419443.66,487098.752 4419441.745,487109.195 4419439.578,487109.878 4419444.187,487101.804 4419445.899,487101.59483467275 4419445.970602643,487096.429 4419447.739,487093.283 4419449.512,487090.83 4419451.989,487090.689 4419453.346),(487124.64365867176 4419390.962,487125.8259149815 4419391.775457458,487124.98469414574 4419392.696,487124.32535889605 4419391.957343044,487124.64365867176 4419390.962),(487107.6137447421 4419374.699731413,487108.8612673502 4419375.62,487107.26868529734 4419376.663915945,487106.684 4419375.62,487106.684 4419375.0447908575,487107.6137447421 4419374.699731413),(487105.3575868339 4419365.617099826,487105.3575868339 4419367.002251491,487103.87117691786 4419367.321,487103.6588326441 4419366.099788327,487104.7205540127 4419365.383126403,487105.3575868339 4419365.617099826),(487110.2680481636 4419370.689,487110.4073990933 4419372.071971025,487109.07361162396 4419372.2046861965,487108.2242345291 4419371.4349382045,487108.8612673502 4419370.689,487109.57792927406 4419370.689,487109.92298871884 4419370.689,487110.2680481636 4419370.689),(487104.42858063633 4419359.8356322525,487105.3575868339 4419360.56,487104.7205540127 4419361.746730716,487103.6588326441 4419361.614015545,487103.216 4419360.56,487104.42858063633 4419359.8356322525),(487118.194 4419390.102,487119.33615201013 4419391.287878595,487117.711 4419392.239,487117.0057429381 4419391.373137464,487117.0057429381 4419390.962,487118.194 4419390.102),(487114.3556754327 4419372.071971025,487114.3397385907 4419373.841217059,487112.6370139674 4419373.691096112,487112.5523651692 4419372.2046861965,487113.7186426116 4419372.2046861965,487114.3556754327 4419372.071971025),(487102.9687137545 4419374.699731413,487103.87117691786 4419376.126,487102.27859486494 4419376.663915945,487100.8718140515 4419375.563,487101.649 4419375.0447908575,487102.9687137545 4419374.699731413),(487121.1961215923 4419393.838598896,487122.39656646067 4419393.420262048,487122.837 4419393.65671331,487123.6515770048 4419394.275124303,487123.269617274 4419395.179,487121.8299303264 4419395.390002534,487121.25068726816 4419394.620706916,487121.1961215923 4419393.838598896),(487112.6370139674 4419380.623804862,487113.2740467885 4419382.322559051,487112.5042987963 4419383.649710762,487111.3894913593 4419383.516995591,487110.4073990933 4419382.597,487110.897 4419381.552811059,487111.4425774277 4419381.340466785,487112.02652418043 4419380.85,487112.6370139674 4419380.623804862),(487114.12 4419386.812,487116.468 4419385.691,487117.711 4419386.812,487116.468 4419388.387,487115.58335901 4419388.387,487114.12 4419386.812),(487117.23891252436 4419383.114287995,487118.999 4419380.85,487120.116 4419382.597,487120.116 4419384.04,487118.194 4419384.04,487117.711 4419384.04,487117.23891252436 4419383.114287995),(487163.35152467916 4419432.2105301125,487163.595 4419432.904,487164.19236438896 4419433.070905788,487165.406 4419433.41,487166.845 4419432.802,487166.906 4419430.77,487163.035 4419431.309,487163.35152467916 4419432.2105301125),(487158.978 4419436.193,487160.818 4419436.646,487162.056 4419435.738,487162.3353371833 4419434.031699095,487162.342 4419433.991,487162.2549905827 4419434.003131414,487158.053 4419434.589,487158.978 4419436.193),(487164.4592575609 4419402.517779068,487167.46499999997 4419401.193017091,487168.9933020763 4419399.812279254,487171.41892259894 4419400.390696456,487171.263 4419402.573754926,487171.7734363676 4419405.932306419,487171.0830674496 4419407.9101200765,487169.441108942 4419407.9101200765,487168.0230538672 4419405.633768509,487165.6907264416 4419404.887423732,487164.218 4419403.599978994,487164.4592575609 4419402.517779068),(487133.769053152 4419347.730531702,487137.65097190597 4419348.261392387,487140.748 4419350.451192709,487139.30299999996 4419352.209668726,487136.2242838169 4419353.238211301,487134.0344834942 4419354.830793355,487132.141 4419354.685533253,487132.418 4419350.841,487133.769053152 4419347.730531702),(487086.07999999996 4419329.768999999,487092.51 4419326.384,487094.59699999995 4419317.739,487086.8879999999 4419319.624,487086.07999999996 4419329.768999999),(487099.25457906607 4419326.699,487099.95133371424 4419323.866660701,487102.2406704152 4419321.776396756,487105.7576224487 4419321.9422907205,487108.27921069914 4419322.231,487109.7722563737 4419320.615139009,487112.9574204795 4419320.449245046,487112.8578841012 4419322.506,487110.66808377847 4419324.828845691,487109.1750381039 4419327.748579455,487106.78616502456 4419328.232,487104.96133142227 4419326.384,487102.2406704152 4419327.027028695,487100.0508700925 4419327.549506698,487099.25457906607 4419326.699),(487149.404 4419406.194,487155.5 4419401.255999999,487152.456 4419395.398,487145.172 4419390.753999999,487140.51099999994 4419393.604,487136.662 4419390.102,487130.502 4419392.696,487132.404 4419395.779999999,487131.2899999999 4419401.765999999,487141.38899999997 4419401.973999999,487149.404 4419406.194),(487122.196 4419398.057,487114.12 4419395.179,487107.511 4419399.542767949,487107.511 4419403.913,487104.41 4419406.265,487104.41 4419410.236,487108.83111372095 4419413.65,487116.468 4419414.943,487118.877 4419413.65,487118.194 4419408.836,487121.44191549026 4419406.603,487122.837 4419402.727,487122.196 4419398.057),(487094.68499999994 4419366.138,487099.65099999995 4419364.669,487100.199 4419360.935999999,487103.216 4419357.589,487110.44999999995 4419360.411,487111.914 4419357.725,487109.044 4419351.74,487112.23 4419349.147,487110.753 4419347.068,487104.19499999995 4419347.361,487103.348 4419350.364,487095.43499999994 4419352.355,487094.091 4419348.926999999,487090.56499999994 4419347.591,487087.223 4419349.163999999,487084.31999999995 4419355.784,487085.75899999996 4419357.764,487089.82699999993 4419358.507999999,487091.56499999994 4419363.631999999,487094.68499999994 4419366.138),(487231.294 4419367.294,487235.667 4419368.571,487237.81819702766 4419372.049,487238.45199999993 4419375.487941678,487236.948 4419379.286,487238.646 4419381.281,487242.348 4419382.887734613,487243.641 4419386.463418942,487240.721 4419390.686,487239.82 4419395.897,487235.667 4419398.129,487230.62206811795 4419395.897,487226.447 4419392.697,487223.123 4419390.828,487224.039 4419385.243,487224.039 4419380.0879999995,487221.4571869594 4419375.352165661,487222.927 4419370.059,487231.294 4419367.294),(487187.382 4419430.243999999,487191.6429999999 4419429.851,487192.561 4419425.966,487198.794 4419428.882999999,487213.44499999995 4419425.209999999,487225.93299999996 4419419.388,487225.22899999993 4419415.541999999,487220.32699999993 4419415.734999999,487214.519 4419411.373,487205.108 4419413.150999999,487197.08699999994 4419416.037999999,487195.252 4419413.631999999,487189.726 4419414.943,487187.598 4419421.733999999,487184.55499999993 4419427.772,487187.382 4419430.243999999))";
            WKTReader reader = new WKTReader(GeometryFactory.Default);
            IGeometry geom = reader.Read(wkt);
            Assert.That(geom, Is.Not.Null);
            Assert.That(geom.IsValid, Is.False);
            
            IGeometry normalizedGeom = geom.Normalized();
            Assert.That(normalizedGeom, Is.Not.Null);
            Assert.That(normalizedGeom.IsValid, Is.False);
            
            IGeometry fixedGeom = normalizedGeom.Buffer(0);
            Assert.That(fixedGeom, Is.Not.Null);
            Assert.That(fixedGeom.IsValid, Is.True);            
            Console.WriteLine(fixedGeom);
        }

        // see: https://groups.google.com/forum/#!topic/nettopologysuite/zBH57XK5vD0
        [Test(Description = "Non-noded intersection using VoronoiDiagramBuilder")]
        public void TestVoronoiDiagramBuilder()
        {
            const string wkt =
                @"POLYGON ((561758.3399999999 4815264.26, 561758.2199999997 4815264.24, 561758.0899999999 4815264.25, 561757.9699999997 4815264.279999999, 561757.8499999996 4815264.34, 561757.7599999999 4815264.42, 561757.6799999997 4815264.52, 561757.6299999999 4815264.640000001, 561757.5999999996 4815264.76, 561757.5999999996 4815264.890000001, 561757.6299999999 4815265.02, 561757.6799999997 4815265.130000001, 561757.7599999999 4815265.230000001, 561757.8600000005 4815265.310000001, 561758.6100000005 4815265.724000001, 561759.3600000005 4815266.138000001, 561760.1100000005 4815266.552000001, 561760.8600000005 4815266.966000001, 561761.6100000005 4815267.380000001, 561761.75 4815267.41, 561761.9000000004 4815267.4, 561762.04 4815267.359999999, 561762.1699999999 4815267.289999999, 561762.2699999996 4815267.1899999995, 561762.3600000005 4815267.07, 561762.4100000003 4815266.930000001, 561762.4299999997 4815266.789999999, 561762.4199999999 4815266.65, 561762.3799999999 4815266.51, 561762.2999999998 4815266.380000001, 561761.5319999999 4815265.966000001, 561760.764 4815265.552000001, 561759.9959999999 4815265.138000001, 561759.228 4815264.724000001, 561758.4600000001 4815264.310000001, 561758.3399999999 4815264.26))";

            var reader = new WKTReader(GeometryFactory.Default);
            var geom = reader.Read(wkt);

            Assert.IsTrue(geom.IsValid);
            Assert.IsTrue(geom.IsSimple);

            //var dtb = new DelaunayTriangulationBuilder();
            //dtb.SetSites(geom);
            QuadEdgeSubdivision qes = null;
            //Assert.DoesNotThrow( () => qes = dtb.GetSubdivision());
            //Assert.IsNotNull(qes);

            //foreach (var t in qes.GetVoronoiCellPolygons(GeometryFactory.Default))
            //    Console.WriteLine(t.AsText());

            //Console.WriteLine();

            IGeometryCollection diag = null;
            //Assert.DoesNotThrow(() => diag = qes.GetVoronoiDiagram(GeometryFactory.Default));
            //Assert.IsNotNull(diag);

            var vdb = new VoronoiDiagramBuilder();
            vdb.SetSites(geom);
            qes = null;
            Assert.DoesNotThrow(() => qes = vdb.GetSubdivision());
            Assert.IsNotNull(qes);

            foreach (var t in qes.GetVoronoiCellPolygons(GeometryFactory.Default))
                Console.WriteLine(t.AsText());

            Console.WriteLine();

            diag = null;
            Assert.DoesNotThrow(() => diag = vdb.GetDiagram(GeometryFactory.Default));
            Assert.IsNotNull(diag);
        }

        /// <summary>
        /// see: https://groups.google.com/d/msg/nettopologysuite/kwJdvPnwPis/V1y0BZ0Ip9oJ
        /// </summary>
        [Test]
        public void make_valid_an_invalid_polygon()
        {
            const string wkt =
                "POLYGON ((14.270341 46.592393, 14.270168 46.592435, 14.269934 46.592458, 14.269978 46.593262, 14.2699883 46.5936283, 14.270001 46.5940778, 14.270014 46.594274, 14.270686 46.594253, 14.270693 46.593642, 14.271359 46.5936565, 14.271692 46.5936637, 14.272025 46.593671, 14.272195 46.594132, 14.272172 46.594195, 14.27209 46.594247, 14.271931 46.594269, 14.270686 46.594253, 14.270014 46.594274, 14.270019 46.594647, 14.270022 46.594839, 14.270025 46.595065, 14.269982 46.595242, 14.269848 46.595395, 14.270026 46.595429, 14.27019 46.595438, 14.270489 46.595431, 14.27098 46.59544, 14.271701 46.595454, 14.272504 46.595469, 14.272457 46.596781, 14.272752 46.59679, 14.273182 46.596802, 14.273244 46.596827, 14.273257 46.59688, 14.272969 46.598265, 14.272862 46.59882, 14.272678 46.599756, 14.274351 46.59994, 14.2751039 46.6001132, 14.2761378 46.5999951, 14.2771781 46.5999539, 14.2777771 46.5997631, 14.2773246 46.5981367, 14.2803556 46.598055, 14.2805422 46.5962748, 14.2797491 46.5950344, 14.2773383 46.5953999, 14.2768883 46.5940448, 14.2768778 46.5940764, 14.2768439 46.5941055, 14.2768337 46.5941175, 14.2767933 46.5941275, 14.276776 46.5941291, 14.2767338 46.5941326, 14.2766636 46.5941396, 14.2765618 46.5941536, 14.2757429 46.5942872, 14.2758657 46.5948156, 14.275941 46.595094, 14.2759673 46.5951778, 14.27606 46.595474, 14.2760834 46.595548, 14.2761099 46.5957387, 14.2761688 46.5959261, 14.2761983 46.5960198, 14.2762278 46.5961136, 14.2763228 46.5964155, 14.276476 46.5969376, 14.2766652 46.5969119, 14.2772167 46.5968929, 14.2777106 46.5968772, 14.2781873 46.596883, 14.2784029 46.5968768, 14.2784204 46.5969934, 14.2784262 46.5971391, 14.2784379 46.5973198, 14.2784495 46.597792, 14.2776009 46.5978119, 14.2767668 46.5978056, 14.277034 46.598467, 14.277006 46.598589, 14.276987 46.598671, 14.277071 46.598974, 14.277177 46.599357, 14.277166 46.599456, 14.277117 46.599514, 14.277015 46.599552, 14.27634 46.599662, 14.2760042 46.5997169, 14.275662 46.599773, 14.2756026 46.5995442, 14.2755891 46.599492, 14.2754907 46.5991126, 14.275412 46.598809, 14.2752905 46.5984064, 14.275211 46.598143, 14.27516 46.597986, 14.2767668 46.5978056, 14.2767276 46.5975411, 14.2766713 46.5973164, 14.2766302 46.5972164, 14.2765891 46.5971314, 14.276476 46.5969376, 14.2763228 46.5964155, 14.2762278 46.5961136, 14.2761983 46.5960198, 14.2761688 46.5959261, 14.2761099 46.5957387, 14.2760834 46.595548, 14.27606 46.595474, 14.2759673 46.5951778, 14.275941 46.595094, 14.2758657 46.5948156, 14.2757429 46.5942872, 14.275628 46.593775, 14.2752901 46.5918595, 14.274801 46.5918166, 14.2745653 46.591794, 14.2741145 46.5917857, 14.273769 46.5917797, 14.2737496 46.5918088, 14.2737285 46.5918274, 14.2737026 46.5918398, 14.2736637 46.5918495, 14.2736339 46.5918502, 14.2736033 46.5918476, 14.2735699 46.5918408, 14.2735275 46.5918264, 14.2734989 46.5918118, 14.2734807 46.5917959, 14.2734682 46.5917778, 14.2726925 46.5918505, 14.2723 46.591896, 14.271899 46.591974, 14.2716247 46.5920462, 14.270867 46.592246, 14.270341 46.592393))";

            WKTReader reader = new WKTReader();
            IGeometry geom = reader.Read(wkt);
            Assert.That(geom, Is.Not.Null);
            Assert.That(geom, Is.InstanceOf<IPolygon>());
            Assert.That(geom.IsValid, Is.False);

            IGeometry valid = geom.Buffer(0);
            Assert.That(valid.IsValid, Is.True);
            Console.WriteLine(valid);
        }

        [Test]
        public void TestDifferenceOfComplexMultipolygons()
        {
            var pol1String = 
@"MULTIPOLYGON (((636192.59787309519 6154321.6995911133,
636182.897398793 6154321.8655825993,
636173.596086427 6154322.1355276527,
636167.86522464128 6154325.0849273112,
636161.6231205092 6154326.6646057721,
636160.17831999587 6154326.7813923974,
636161.62312051 6154326.66460577,
636167.86343093 6154325.08425578,
636173.59608643 6154322.13552765,
636182.89523056 6154321.86485684,
636185.751571696 6154321.8162046,
636192.59787309519 6154321.6995911133)),
((636152.84859301744 6154319.8801070936,
636153.02270491 6154322.12552969,
636154.630037279 6154324.02402822,
636157.17036459 6154327.02453251,
636157.17036458931 6154327.02453251,
636153.02270490839 6154322.1255296879,
636152.84859301744 6154319.8801070936)),
((636211.11390913755 6154314.0155097777,
636211.114677974 6154314.0171801187,
636207.437031418 6154321.4456680715,
636207.43681213306 6154321.4456718238,
636211.11390913755 6154314.0155097777)),
((636203.68238669413 6154308.2698675757,
636208.89654585847 6154309.1981610162,
636209.84867722925 6154311.2667209692,
636208.89554388 6154309.19807967,
636203.68238669413 6154308.2698675757)),
((636172.16130951955 6154302.44953468,
636178.5428774301 6154303.7584576393,
636172.16345147 6154302.45243773,
636158.325838736 6154303.24290477,
636158.1491036 6154303.25300068,
636157.253171342 6154304.03329127,
636152.6634752 6154308.0305764,
636152.581231977 6154315.22303587,
636152.56918352365 6154316.2767155087,
636152.65988775936 6154308.0283991182,
636158.15162006055 6154303.2493718751,
636172.16130951955 6154302.44953468)))";

            var pol2String = 
@"MULTIPOLYGON (((636167.79101204267 6154298.2703853333,
636168.33523776615 6154298.2803832982,
636170.65232001338 6154298.4203548077,
636170.69354923489 6154298.4303527726,
636171.18829989259 6154298.4703446319,
636173.33221940952 6154298.7302917205,
636173.42292369681 6154298.7502876511,
636174.0083786418 6154298.8402693355,
636174.02487033047 6154298.8502673,
636176.01211880578 6154299.2501858976,
636176.56459037366 6154299.3701614775,
636177.13355363009 6154299.5501248464,
636177.521108312 6154299.690096355,
636179.05483535107 6154300.2899742518,
636179.219752237 6154300.3499620417,
636179.75573211617 6154300.5999111654,
636180.27522030682 6154300.8698562188,
636180.76997096464 6154301.1897910973,
636180.976117072 6154301.3197646411,
636182.44387735671 6154302.3595529953,
636182.71599021845 6154302.5695102587,
636183.177757499 6154302.9394349623,
636183.60654140241 6154303.33935356,
636184.01058777294 6154303.7692660522,
636184.38165076624 6154304.2291724393,
636184.72797622671 6154304.7090747571,
636184.85528403521 6154304.9176677912,
636179.86541827 6154304.02921314,
636172.16345147 6154302.45243773,
636158.325838736 6154303.24290477,
636158.1491036 6154303.25300068,
636157.253171342 6154304.03329127,
636152.6634752 6154308.0305764,
636152.581231977 6154315.22303587,
636152.56918347 6154316.2767202,
636153.02270491 6154322.12552969,
636154.630037279 6154324.02402822,
636157.17036459 6154327.02453251,
636157.518183773 6154326.99641747,
636161.62312051 6154326.66460577,
636167.86343093 6154325.08425578,
636173.59608643 6154322.13552765,
636182.89523056 6154321.86485684,
636184.8490700468 6154321.8315769676,
636184.60428856232 6154322.2854971271,
636184.46410920925 6154322.525448286,
636183.4416245165 6154324.1751125008,
636183.2767076306 6154324.4350595893,
636182.93038217013 6154324.9149619071,
636182.55931917683 6154325.3748682942,
636182.1552728063 6154325.8047807869,
636181.72648890293 6154326.204699385,
636181.26472162234 6154326.5746240877,
636180.7864626532 6154326.9145548958,
636180.29171199538 6154327.2344897734,
636179.77222380473 6154327.5044348277,
636179.70625705039 6154327.5444266871,
636178.88167262077 6154327.9343473194,
636176.35019842186 6154329.2740746224,
636176.11931478162 6154329.3940502014,
636175.58333490242 6154329.6439993251,
636175.03086333454 6154329.8439586237,
636174.46190007811 6154330.0239219926,
636173.89293682168 6154330.1538955374,
636173.30748187669 6154330.2438772218,
636172.7220269317 6154330.3038650118,
636172.202538741 6154330.3238609415,
636170.808991055 6154330.3338589063,
636170.74302430055 6154330.3338589063,
636170.41319052875 6154330.3338589063,
636168.17032088025 6154330.2438772218,
636167.634341001 6154330.2538751867,
636163.00017650658 6154331.173687961,
636162.4147215616 6154331.2636696463,
636162.18383792136 6154331.2936635409,
636157.70634446852 6154331.7635678928,
636157.35177316377 6154331.7935617883,
636156.76631821878 6154331.8135577179,
636156.1808632738 6154331.7935617883,
636155.59540832881 6154331.7335739983,
636155.00995338371 6154331.6435923139,
636154.44099012727 6154331.5036208043,
636154.02869791246 6154331.39364319,
636152.30531645461 6154330.8437551185,
636152.148645413 6154330.7837673286,
636151.59617384523 6154330.58380803,
636151.06019396591 6154330.3338589063,
636150.54070577526 6154330.0639138529,
636150.04595511756 6154329.7439789744,
636149.5676961483 6154329.4040481662,
636149.10592886782 6154329.0341234636,
636148.67714496434 6154328.6342048654,
636148.56170314422 6154328.5142292865,
636148.05046079785 6154327.9843371445,
636147.76185624755 6154327.6744002309,
636147.39079325413 6154327.2144938437,
636147.04446779378 6154326.7345915269,
636146.73937155481 6154326.2346932795,
636146.45901284879 6154325.7147991024,
636146.23637505271 6154325.2348967856,
636145.69214932923 6154323.9451593077,
636145.67565764056 6154323.8851715177,
636145.46126568888 6154323.3352834461,
636145.296348803 6154322.7753974088,
636145.27985711442 6154322.7254075846,
636144.71913970227 6154320.5858430862,
636144.60369788215 6154320.0659489091,
636144.50474775059 6154319.5160608375,
636144.38106008607 6154318.6062460281,
636144.38106008607 6154318.5662541678,
636144.348076709 6154318.3163050441,
636144.16666813439 6154316.4966754252,
636144.05947215855 6154315.5468687555,
636144.02648878144 6154315.1569481222,
636144.00999709277 6154314.5670681912,
636144.02648878144 6154313.9771882594,
636144.0842096915 6154313.3873083275,
636144.18315982306 6154312.80742636,
636144.31509333174 6154312.2375423592,
636144.36456839752 6154312.05757899,
636144.405797619 6154311.6776563218,
636144.50474775059 6154311.0877763908,
636144.55422281637 6154310.847825232,
636144.81808983383 6154309.6880612988,
636144.90054827684 6154309.3581284555,
636145.06546516274 6154308.798242419,
636145.27985711442 6154308.2483543465,
636145.51898659894 6154307.70846424,
636145.79934530507 6154307.1885700626,
636146.104441544 6154306.6886718152,
636146.12917907687 6154306.6586779207,
636147.300088967 6154304.9190320205,
636147.62167689449 6154304.4691235982,
636147.99273988779 6154304.009217211,
636148.39678625832 6154303.5793047184,
636148.5699489885 6154303.4193372792,
636149.55120445974 6154302.4895265391,
636149.80682563293 6154302.2495753812,
636150.26859291352 6154301.8796506776,
636150.74685188266 6154301.53971987,
636151.24160254048 6154301.2197849918,
636151.76109073113 6154300.9498399384,
636152.04144943715 6154300.8098684289,
636153.32780114736 6154300.2299864627,
636153.58342232055 6154300.1200088477,
636154.13589388831 6154299.9200495491,
636154.70485714474 6154299.74008618,
636154.91100325214 6154299.690096355,
636155.94173378916 6154299.4401472323,
636156.30455093819 6154299.3601635126,
636156.8900058833 6154299.2701818282,
636157.12088952353 6154299.2401879327,
636159.77605138684 6154298.9602449145,
636160.056410093 6154298.93025102,
636164.47618263564 6154298.6103161415,
636166.69431475119 6154298.3403710881,
636167.20555709756 6154298.290381263,
636167.79101204267 6154298.2703853333)))";
            var polygon1 = /*(MultiPolygon)*/new WKTReader().Read(pol1String);
            var polygon2 = /*(MultiPolygon)*/new WKTReader().Read(pol2String);
            IGeometry result = null;
            while (true)
            try
            {
                result = polygon1.Difference(polygon2);
                break;
            }
            catch (TopologyException ex)
            {
                polygon1 = InsertTopologyExceptionPoint(ex.Coordinate, polygon1);
                polygon2 = InsertTopologyExceptionPoint(ex.Coordinate, polygon2);
            }

            Assert.IsNotNull(result);
            double area = 0;
            Assert.DoesNotThrow(() => area = result.Area);
            Assert.AreEqual(0.01025390625, area, 0.01);            

            Console.WriteLine("WKT : {0}", result.AsText());
            Console.WriteLine("Area: {0}", area);

            //2nd Attempt
            var gpr = new GeometryPrecisionReducer(new PrecisionModel(10000000000));
            var p1 = gpr.Reduce(polygon1);
            var p2 = gpr.Reduce(polygon2);

            result = null;
            Assert.DoesNotThrow(() => result = p1.Difference(p2));
            area = 0;
            Assert.DoesNotThrow(() => area = result.Area);
            Assert.AreEqual(0.01025390625, area, 0.01);

            Console.WriteLine("WKT : {0}", result.AsText());
            Console.WriteLine("Area: {0}", area);

        }

        private static IGeometry InsertTopologyExceptionPoint(Coordinate coordinate, IGeometry polygon1)
        {
            var p1 = (IMultiPolygon) polygon1;
            var res = new IPolygon[polygon1.NumGeometries];
            for (int i = 0; i < polygon1.NumGeometries; i++)
            {
                res[i] = InsertTopologyExceptionPoint(coordinate, (IPolygon) polygon1.GetGeometryN(i));
            }
            return polygon1.Factory.CreateMultiPolygon(res);
        }

        private static IPolygon InsertTopologyExceptionPoint(Coordinate coordinate, IPolygon polygon)
        {
            var shell = InsertTopologyExceptionPoint(coordinate, (ILinearRing)polygon.ExteriorRing);
            var holes = new ILinearRing[polygon.NumInteriorRings];
            for (var i = 0; i < polygon.NumInteriorRings; i++)
                holes[i] = InsertTopologyExceptionPoint(coordinate, (ILinearRing) polygon.GetInteriorRingN(i));
            return polygon.Factory.CreatePolygon(shell, holes);
        }

        private static ILinearRing InsertTopologyExceptionPoint(Coordinate coordinate, ILinearRing ring)
        {
            if (ring.Distance(ring.Factory.CreatePoint(coordinate)) > 1e-7)
                return ring;

            var seq = InsertTopologyExceptionPoint(coordinate, ring.CoordinateSequence,
                ring.Factory.CoordinateSequenceFactory);
            return ring.Factory.CreateLinearRing(seq);
        }

        private static ICoordinateSequence InsertTopologyExceptionPoint(Coordinate coord, ICoordinateSequence seq, ICoordinateSequenceFactory factory)
        {
            var res = factory.Create(2*seq.Count , seq.Ordinates);

            if (Replace(seq.GetCoordinate(0), coord))
            {
                res.SetOrdinate(0, Ordinate.X, coord.X);
                res.SetOrdinate(0, Ordinate.Y, coord.Y);
                res.SetOrdinate(0, Ordinate.Z, coord.Z);
            }
            else
            {
                res.SetOrdinate(0, Ordinate.X, seq.GetOrdinate(0, Ordinate.X));
                res.SetOrdinate(0, Ordinate.Y, seq.GetOrdinate(0, Ordinate.Y));
                res.SetOrdinate(0, Ordinate.Z, seq.GetOrdinate(0, Ordinate.Z));
            }

            var last = res.GetCoordinate(0);
            var off = 0;
            for (var i = 1; i < seq.Count; i++)
            {
                var curr = seq.GetCoordinate(i);
                bool add = true;
                if (Replace(curr, coord))
                {
                    res.SetOrdinate(i + off, Ordinate.X, coord.X);
                    res.SetOrdinate(i + off, Ordinate.Y, coord.Y);
                    res.SetOrdinate(i + off, Ordinate.Z, coord.Z);
                    add = false;
                }
                else if (last.Distance(coord) + coord.Distance(curr) <= 1.000000000000000000001*last.Distance(curr))
                {
                    res.SetOrdinate(i + off, Ordinate.X, coord.X);
                    res.SetOrdinate(i + off, Ordinate.Y, coord.Y);
                    res.SetOrdinate(i + off, Ordinate.Z, coord.Z);
                    off += 1;
                }

                if (add)
                {
                    res.SetOrdinate(i + off, Ordinate.X, seq.GetOrdinate(i, Ordinate.X));
                    res.SetOrdinate(i + off, Ordinate.Y, seq.GetOrdinate(i, Ordinate.Y));
                    res.SetOrdinate(i + off, Ordinate.Z, seq.GetOrdinate(i, Ordinate.Z));
                }
                last = curr;
            }
            
            var tmp = factory.Create(seq.Count + off, seq.Ordinates);
            CoordinateSequences.Copy(res, 0, tmp, 0, tmp.Count);
            return tmp;
        }

        private static bool Replace(Coordinate reference, Coordinate coord)
        {
            return coord.Distance(reference) <= 5*double.Epsilon;
        }
    }
}
